1

打破了梦

2

一场花开水平面家乡

3

识破了我心里所有慌张

4

慢慢成一片

5

最后总潦草收场

6

情深意种是不合时宜的谎

7

细心的深邃距离

8

不经意在

9

遥远的贴近

10

抓不住你的香气

11

月光

12

思念

13

冷静

14

浪漫

15

归之私不语

16

我比你想象之中要更加生气

17

我不应该把折磨假装冷漠

18

一笑而过

19

这是我最想

20

诉说

21

不应该沉默

22

假装生活

23

只要你别把

24

来说是种解脱

25

破

26

打破一场花开水平面

27

家乡

28

识破了我心里所有慌张

29

慢慢成一片

30

最后走了

31

草草收场

32

情深

33

一种是不合时宜的晃

34

星星的深邃距离不经历在你遥远又贴近

35

抓不住你的香气

36

月光

37

思念

38

浪漫

39

丝语

40

我比你想象之中更加生气

41

我不应该买

42

等我一下

43

这是我曾经的冷漠

44

我无法诉说

45

我不应该

46

折磨

47

假装好好的生活

48

对我来说是种解脱

49

细心的深邃距离不经意在眼底

50

遥远的地紧抓不住你的香气

51

月光如思念

52

安静浪漫

53

沉思不语

54

我比你想象之中要更加熟悉

55

我不应该

56

假装一笑带过

57

这是我最想去的冷漠着诉说

58

我不应该把沉默假装好好生活

59

只要你

60

对我来说是种解脱

61

怎么怎么啦

62

一分爱失去了光泽

63

面对面

64

背对背

65

反复挣扎

66

怎么都痛

67

以为爱情像石头

68

谁知一秒钟就碎落

69

难道心痛都要不断打磨

70

抱紧

71

我

72

比国王富有曾多么快乐

73

先到了8.05

74

我们继续开始今天课程

75

今天的话我们其实还是S那一套流程

76

只不过的话是我们用react重新来实现一遍

77

首先的话我们

78

回顾一下吧

79

回顾一下就是

80

是不重要的

81

就是什么

82

比如说客户端渲染它的一些优缺点

83

这个的话上节课我们也都说过了

84

大家再经过比如说三代码之后

85

应该会感受更加明显一些

86

比如说客户端渲染

87

它缺点的话就是白屏时间长

88

然后ICU不友好

89

因为是空的嘛

90

然后服务端渲染的话就是

91

因为每次切换路由都需要去重新请求服务端

92

然后的话

93

比如说这种页面的体验不太友好

94

另外的话

95

因为是那种多页面的话

96

每次都需要进行负担

97

然后会造成一些比如说资源的重复请求

98

每项每个页面的CSGS

99

你每切换一个页面都需要重新去请求

100

比如说服务器压力也是比较大的

101

另外的话就是他可见也是不一定可操作的

102

因为JS有可能没有加载完毕

103

SSR呢

104

就是结结合了他们两个的优点

105

然后摒弃了他们的缺点

106

最终还出现了这样一套

107

SOD的这样的一种模式

108

另外的话需要注意一点

109

就是剩下

110

没给大家算

111

就是关于这个你要使用SSR还是不使用

112

你要权衡下的

113

如果你只是为了单纯的SEO

114

其实你没必要用L的

115

现在比如说你可以用一些预渲染

116

比如说类似这种无毒浏览器

117

现场市场化

118

有一些比如说成熟的一些插件

119

比如说一些present之类的

120

这种预算的方式也可以解决Su的问题

121

而如果你要是要解决一些性能的问题

122

比如说你对性能要求非常极致

123

那就需要采用FCA

124

比如说我们像这些H5的活动

125

比如说像

126

要求

127

比如说秒开之类的

128

那你伤害她还是有必要的

129

经过上节课

130

大家对AR的话

131

它的一个大体流程大家都能了解了吧

132

都没有什么问题的

133

可以回复下一

134

然后我们就开始我们今天课程

135

都可以去

136

流程的话其实不难

137

那既然大家都没的话

138

那今天我们就来开始

139

首先的话

140

我们来看一下我们的技术战

141

那就战的话肯定是react啦

142

React就是一系列的他的一些全家桶

143

然后服务端呢

144

我们还是使用card有一系列的

145

套的话雷子圈的吗

146

就是还是成这两个阶段

147

一个是客户端

148

一个是服务站

149

在我的文件夹中没有找到

150

没有啊

151

这个是我今天刚

152

随便做一下

153

这里头没啥东西

154

上节课不是都给大家写的那个马克文档里了吗

155

马克到文档里代代码就有了

156

这个可以的话给大家发到群里

157

这几个东西没什么东西

158

就一个客户端渲染优缺点

159

还有一个服务端渲染优缺点

160

然后就没有什么其他的

161

然后我们就直接来开发行了

162

然后因为上节课我们已经做过微微的吗

163

因为流程都一样

164

只是语法加不一样

165

所以说的话

166

这块的话

167

我们做起来的话就会更快一些

168

但是她有些社会学区别的地方

169

就是相

170

区别的地方

171

像五一的话

172

是不是再给我们提供了像

173

一些就是胡克的勾子

174

可以让我们进行使用

175

他可以就是子弹

176

服务端运行

177

然后客户端是不运行的

178

就是我们在解决数据请求的时候

179

而在right中呢

180

可能这波的话就需要我们自己处理一下

181

但是呢

182

官方也给了一些相应的方案

183

就是就是可能更多的

184

需要自己动手

185

就是比如说

186

写一下

187

其实这些看到原色就更加灵活一些

188

比如说就像我们使用VC

189

或者是HCR串巷的时候

190

你会发现AV连目录都给你创建的非常的完整

191

而且艾特呢

192

他更多的是

193

好的东西还需要你自己去动手去完成

194

那么进来的话就来搭建吧

195

还是那些流程

196

就是需要做的事情还是那些

197

一个是客户端

198

搭建还有一个的话就是服务端搭建

199

然后一些重复的代码的话

200

我们可以就把你之前的代码复制过来

201

然后做一下处理就行了

202

最后一个就是S2

203

它处理

204

处理的话

205

主要还是那两大部分

206

一个是路由处理

207

还有一个请求处理

208

但上线之后的话

209

其实除了这些的话

210

比如说你弄得上线之后还需要做一些缓存之类的

211

因为像这个

212

这启用服务

213

但他的压力还是有的

214

所以说

215

关于服务端

216

你这个扩容或者其他之类的

217

都需要做好这个处理的

218

跨鱼池里的鱼

219

浴池里弄得没有跨越

220

你说前段前运动的时候跨越这个有多种方式都可以配置

221

一会儿的话后边儿有后边儿跨越的话

222

我们可以在note里面允许跨域就可以了

223

那我们就来开始具体变形的代码啦

224

这里创建好了这样一个文件夹

225

然后首先第一步

226

那初始化项目是不是第一步的

227

抓项目

228

然后就整理我们这个目录

229

首先必要的目录里边可以写我们的一些配置文件

230

或者是有同学写咖啡的也行

231

这个都可以

232

并不是强制要求的

233

然后MC我们的缘

234

相信经过这两节课之后

235

你对流程就会特别熟悉了

236

然后分为我们clint客户端

237

还有我们的食物端

238

这是我们大体的一个项目目录的一个结构

239

那这里我们先把我们的客户端让它跑起来

240

这里的话我们是使用react的

241

他的户口的写法

242

因为现在的话re TE

243

都已经

244

现在这些是不是主要的18发布了

245

已经发布了吧

246

应该是

247

所以说现在比较推荐使用或者是吧

248

因为它更加灵活了

249

那首先我们要使用re开发的话

250

首先我们把包安装上react react

251

然后我们这边给我们提供了人的方法

252

比如说我们组建我们的容器是进行绑定

253

到我们的肯定的下边儿

254

比如说我们的页面的话

255

都放到我们的配置文件下边

256

配置文件下边儿我们新建一个根组件

257

点GSX

258

这里就先写下最基础的一个组建了

259

我们的right引入进来

260

是不是刚刚我们安装上了

261

然后函数组件写法

262

可用户的写法等于

263

像之前的话

264

之所以用卡拉组件

265

是因为函数组件它是是无状态的

266

有了户口之后呢

267

我们在函数组件里边也可以处理状态了

268

所以说我们就不太推荐

269

不太推荐就是用class了

270

如果是旧项目的话

271

你没有办法

272

其实他们也可以兼容

273

混合血是没有问题

274

就是说

275

有新的东西还是比较推荐去尝试一下

276

因为有新的东西自然有他出现

277

旅游他肯定是比之前更好的

278

要不也不会进行这种技术的更新

279

版本的迭代等

280

就像我们的ES6一样

281

是给我们提供了很多的语法糖是我们的开发效率是有很大的一个提升

282

我们就简单的写个H1吧

283

先让他能跑起来

284

也是hello

285

然后呢

286

组建写完之后就是非常简单一个函数组件

287

写完之后

288

然后把它打出去

289

这样就完了

290

写完了

291

然后我们要编译的话

292

是不是我们还得写一个入口

293

因为你像ipad的话

294

它只能是

295

像其他的一些文件是不能作为入口的

296

所以说这里的话

297

我们还是会一样

298

我们写一个

299

客户端入口

300

还有一个服务端入口

301

然后客单入口

302

我们就给它命名为叫林启

303

可怜他

304

对

305

这就是我们的

306

蔻丹入口

307

首先也是把我们的react引入进来

308

这里为什么要引入这个react呢

309

就这里可以看到

310

你会发现这里并没有用到ride

311

为什么还要把他引入进来呢

312

因为其他底层它是调用到react.create element方法

313

虽然说你没有使用

314

其实它的底层是使用的使用到的

315

所以说这个还需要把它引入进来

316

你不引入的话还是会报错的

317

曝出来很明显

318

它会提示你找不到right

319

你只要引入进来就可以了

320

然后我们引入react

321

当

322

我们要形容它提供的人的方法

323

然后把我们的APP组件引入进来

324

是不是在我们的点斜杠配置下面的

325

然后使用他的认字方法

326

教我们的组件渲染到我们的盗墓容器里边

327

APP

328

Document

329

绑定我们页面模板的容器里面白的

330

比如说我们的就叫root了

331

一会儿没什么感受

332

就可以给他绑定上这样非常简单的

333

入口我们就完成了

334

这块的话

335

我们可能写的更快一些

336

因为像有上节课的基础在那

337

所以说这里我们就可以

338

可以快速的写一下他的一些配置等等一些其他东西

339

然后我们也是为了测试我们的页面路由

340

我们需要两个页面

341

比如说一个叫home

342

还有一个的话叫about

343

我们新建文件一个是home JSP

344

还有一个就是我们的cshome.cs的话在危中带软冲

345

你直接把他引入进来就行

346

他不像view

347

一是给我们提供了styles script

348

还有template

349

这里的话用JS的话

350

它相对来说可能对你的价值功底要求高一些吧

351

因为这也是为什么好多大厂或者大型项目推荐使用APP的一个原因

352

并不是说唯一不适合打印项目他也可以做

353

但是对于后期的一个维护或者接待之类的

354

就是整体的一个全知识的话

355

还是推荐用react

356

比如说大型或者复杂的项目之类的

357

这点儿后

358

实验

359

同样也是需要把引入进来

360

然后创建我们的home主键页面组件

361

不就写上一个函数就行了

362

然后

363

一定要记得最终return

364

class name

365

然后我们这里给它命名叫红配紫吧

366

碰

367

最终写完之后

368

同样也是将它倒出去给fault

369

在我们的home组建

370

组建就完成了

371

然后简单写一下它的样式

372

给它一个颜色

373

我们的后面是不是就完成了

374

同样来复制一下

375

完成一下我们的about之间

376

about

377

相关于这个还有同学不熟悉的吗

378

应该

379

录播课应该有这个

380

户口则可

381

垃圾都给大家有讲过

382

有不熟悉的同学吗

383

不熟悉的同学可以回家领

384

关于可能还有同学是无意技术站

385

所以说可能对这个事不太熟悉

386

放了假

387

有同讲

388

因为有的公司的话

389

他技术战是不是有的就只是无忧

390

亦或者是有的

391

就只是react

392

所以说有同学

393

但是你学这些课之后

394

你你会发现其实除了语法也不同

395

这方面他的一些比如说思想之类的还是大同小异的

396

熟悉之后都可以进行使用

397

但是尽量也不要让这些技术站单衣单衣的话对于找工作来说

398

还是不占优势的砖一样的吧

399

这个通病

400

都是大部分都是

401

是不沉浸在业务之中

402

或者是每天就是为了完成需求

403

天天需求就写不完的需求

404

这个bug

405

然后这里要改一下比较多吧

406

About

407

然后改完了吧

408

我把我的配置可以啦

409

然后同样给他一点雅思

410

这个给个卡了

411

所以说在平时的话

412

尽量还是多给自己充充电

413

就是给自己留一些时间

414

比如说每周

415

拿以前学习之类的

416

像我们现在在课上写

417

每周还能强迫自己一块儿学一下习相

418

如果你课程结束之后

419

或者在以后您的比如说

420

职场时间安装或者是其他时间

421

一定要养成自己一个充电的习惯

422

因为技术的话

423

它是总是不断更新的

424

如果说你后期转其他岗位

425

比如说转管理岗之类的

426

那还好一点

427

如果你一直想从事技术这一搞的话

428

其实还是不是那么轻松的

429

就是经常的话

430

因为技术更新特别快嘛

431

所以说的话

432

我们不能单单的只追求这个技术

433

应该更多的去是否了解它的底层的东西

434

因为你在怎么变

435

它底层是不是还是用剪子去写这些的

436

所以说关于这些非常基础的东西

437

我们还是要打好基础的

438

你打好基础之后

439

后边儿

440

你这些东西学起来就会非常的快的

441

因为像技术行是不是也经常流行一句话叫做一通百通

442

你一一门技术精通之后

443

其你其他技术之后再学其他技术的话

444

就非常还是挺快的

445

这样话

446

我们两个页面我们就写完了

447

那我们就有了页面是我们就需要加路由

448

这个页面那你没有路由器关联

449

那怎么去当访问的时候选出指定路由来指定的页面来呢

450

这是我们这里安装上react route down

451

Read them的话

452

主要是用在比如说就是

453

我们提供的一个

454

路由啊

455

ITELA

456

安装啥

457

在的话其实可以看一下它的官网

458

下线的话right已经是五点差了

459

应该是

460

我看一下安装的

461

你知道现在已经是已经是五点X版本了

462

像四点叉三点叉

463

他们之间还是好像是三点叉到四点叉之后

464

它的区别还是挺大的

465

像之前我们可能写无忧

466

亦或者是写re TE

467

可能之前经常有那种集中式的配置路由

468

是不是先把路由在配置完

469

然后再去

470

进行渲染

471

而现在的话

472

因为我们这是一种组件化科方式吗

473

推唱就是组件化的这种思想

474

所以说的话

475

现在这种

476

最新的这次就是

477

一切皆组建我们的每一个路由

478

也可以是单独的组件

479

比如说

480

这里还有

481

它也兼容之前这种独特咖啡哥这种集中式的配置方式

482

你可以采用这种方式

483

也可以采用我们现在的其他写法

484

都是可以的就是

485

之前的写法

486

这个如此

487

这个不是集中式的

488

自己写的一种便利方式去渲染

489

可以看到

490

所以每一个其实他都是一个小组件

491

Root每一个路由其实也是一个组件

492

等我们写完之后

493

我们就来写一下吧

494

通过写代码来感受一下会更明显一些

495

这里的话

496

我们还需要新建一个如此

497

我项目由用了懒加载

498

记得天天看文章好像是有支持有支持了吧

499

好像之前用react的累加是奔驰SR是不支持的

500

最新好像可以看下最新的版本

501

我记得好像有关于这个NS和Li的一个支持的说法

502

我们这里写一个如此可以看一下

503

如果实在不行的话

504

那

505

只能换其他方案

506

写代码还是很灵活的一个方案不同之后我们就可以

507

需要尝试另一种写法

508

然后同样引入react

509

Import

510

如此

511

然后Switch

512

使维持的话

513

这个关于Switch的这些

514

他的一些解释在录播课中都有

515

职位策划机就相当于我们的一个抽屉

516

每次只能抽出一个来之类的

517

每次他只能选其中一个组件

518

就前面匹配到之后

519

后面是不是就不能匹配到了

520

然后

521

引入我们的页面

522

这些个配置是下班儿的

523

然后home

524

这样是不是我们就页面就有了

525

然后这里我们先把我们的路由统一写到一个数组里

526

方便我们进行管理

527

因为一会儿的话

528

这个我们也是需要在服务端进行使用的

529

因为服务端我们需要

530

拿着这个路由做一些事

531

然后是不是首先配置路由方案方式

532

然后跟路由的话就让他反映到我们的

533

Home

534

一个APP的话就是严格匹配

535

就是关于他的一个匹配模式

536

这是我们的跟路由

537

还有一个的话就是我们的吧

538

这样的话

539

一个路由数字我们就定义好了

540

然后的话

541

我们是不是要把它渲染出来才可以

542

所以每个路由也是一个组件

543

这个我们自己定义我们的路由组件

544

Roots

545

然后这里我们就用word写就行了

546

然后遍历map s2的话就带有遍历到的每一个这里的对象路由

547

然后如此时间慢

548

写错了吗

549

没有这报啥错

550

先不管他

551

首先将这个路由渲染到我这

552

没有

553

是不跟子健

554

包括他

555

哎呀

556

这样

557

然后

558

等一下

559

点map

560

然后是首先通过结构的方式拿到我们的pass act

561

还有我们的component

562

我们的对象里把它解构出来

563

然后推到我们数字上

564

然后现在回来一个如此

565

这个的话是不是在乳液中你写到哪他就会旋到哪

566

而不像V一样

567

我们是不是还得写战士服

568

而这的话你就不需要写战士服了

569

然后配上它的K的话

570

我就用我就用X

571

现在好多时候是不推荐用这个in index的

572

然后都给它配置上

573

总碰一下

574

要选择组件

575

这样我们的路由是不是就可以啦

576

另外的话使位置是否一般

577

我们做的话是不是还有一个兜底路由

578

比如说这前面四个路由没有匹配到的时候呢

579

我们可以加一个not found

580

这就不加啦

581

这里的话我们重点是在XX那个是在完整项目中

582

一般会做一个兜底的路由404

583

比如说意面

584

然后在路由有了

585

然后页面和路由也对应起来了

586

那他最终要渲染到哪呢

587

看到我们的配置是APP的价差

588

我们让他就选到

589

在我们这个页面里进行渲染

590

那就是把我们的root引入管

591

点点斜杠

592

如此

593

就引入过来了

594

然后

595

引入我们的root

596

因为你要渲染的话需要包裹回来

597

这里的话就不再看了

598

这个录播课中应该是有讲话系的课

599

客户端的话是用的这个埃博如此

600

SE不如如此有点长

601

我们可以给他一个简写的名称

602

如此啊

603

如题

604

然后我们需要进行一个

605

包裹

606

如此

607

然后base name给他默认就是跟路由

608

然后我们就可以让我们的组件旋到这里了

609

是不是最终就在APP进行渲染

610

APP呢

611

我们又绑定了到了我们的root中

612

这样是不就一个完整的流程就串起来了

613

所以这里是一个函数

614

要给大家执行一下

615

这样的话我们的客户端其实就写的差不多了

616

可能是right

617

就是让同学对这些的话应该是非常熟悉了

618

可能唯一技术的同学可能就稍微显得陌生一点

619

但是如果

620

把录播课的那些知识都看了一遍之后

621

其实也没有那么陌生

622

简单做一个小项目

623

像之前我们在中级班的时候

624

是我们的VIP

625

那个后台管理是不是就用red做的

626

那这里页面其实我们就差不多了

627

如此有了页面有了

628

现在我们就看一下能不能跑起来的

629

能不能跑起来的话

630

我们就需要来配置一下我们的ipad啦

631

接下来我们写外派

632

然后外派XDV受这些都给它安装上

633

安装到我们的开发环境依赖加一个杠的

634

然后新建一个同样还是范围

635

就是我们的基础的文件

636

还有我们的公共呢

637

基础文件

638

还有各自环境下的配置文件

639

比如说它分为也是可令词

640

因为JS

641

还有我们的

642

我要做派克店clint点

643

舍瓦

644

瘦一点

645

瘦一点说这是我们的配置文件

646

然后这里的话

647

无意的话

648

他是否使用wheel来解析无意的衣服react呢

649

我们肯定是需要使用react的

650

一些插件来解析日艾特娜

651

同样统一路径的话

652

我们还是用到我们的note的派什么用的

653

比如说它的方法

654

对啊

655

背包姐姐们的JXJSX语法吗

656

你这个看背包官网的话

657

他会推荐你用real的

658

都有前十名

659

有哪些包之类的首先

660

我们的配置导出去

661

我们打包这些文件打包到哪呢

662

这里的话我们就打包到肉

663

打不倒我们的根目录下面的斜杠

664

然后下一个就是解析我们的模块

665

这个模块的话

666

我们要来检测我们的GSX的语法弱

667

他是一个速度

668

因为这里的话

669

我们要解析好多的文件

670

比如说GF的CF等等都需要它是一个竖点

671

JSJS或者JSX结尾的

672

哪个小对象

673

然后这里我们用哪个load呢

674

同样还是用到我们的背包load

675

然后我们试一下扩展

676

因为像这里我们是建设语法

677

像ipad的门槛的话

678

只是一些JS

679

或者是简单一些CS这些JSX替他之类的

680

如果你想

681

比如说你引入文件的时候想把它省略掉

682

比如说就像这里

683

比如说你后边儿不想写这个GS差

684

你需要单独配置

685

像GS的话

686

你可以不用写VIP和默认支持

687

但是呢

688

像其他一些TS之类的

689

那你就需要单独的给他配置一下的话

690

就是我们的肉

691

下太大扩展名

692

没写错吧

693

点GS

694

还有我们的点jas

695

刚刚我们提到ipad它默认知识点GS

696

那这里我们为什么要重新写一遍呢

697

因为你只要自定义之后

698

他就会覆盖掉原先默认的

699

所以说你写之后一定要再重新写下点要不

700

你省略GS就被抱错了

701

那这里的话

702

我们是不是

703

公共的一个配置我们就完成了

704

然后呢

705

配一下

706

接着他解析的话

707

我们还是

708

先把依赖安装上吧

709

我们的那些背包load

710

At背包客

711

这里

712

就是我们的APP的背包project react解析文件开始语法

713

背包客先安装上

714

然后是不是项目根目录下GM的姐背包

715

虽然说你可以直接在这里写option语法

716

但这个不太推荐

717

写代码里是不是

718

不太直观

719

你单独新建一个文件的话

720

你的目录代码也会更加整洁一些

721

这里来配一下process

722

的话就是

723

所以我们就说刚安装的APP的背包present react这样来接差异化

724

就能被解析了

725

那这样的话

726

我们要配置我们的C解析

727

C的话其实就和我们之前一样这的话

728

我复制一下吧

729

其实内容都重复了

730

这是之前我们做的VR

731

我们可以把它拿过来

732

必要的第一位

733

基本上一样

734

我看一下

735

看一下

736

不适合的地方我们就改一下

737

肉墨子是不是合并我们的文件呢

738

提取CS的email模板的飞思卡尔菲特

739

杯赛Jess

740

没问题

741

Development

742

因此我看一下这里一吹clint

743

注意这里改一下

744

然后打包出来的话

745

是不是我们客户端的代码

746

然后DV so static

747

黑色模式的话配一下这个

748

然后CS提取XEL的

749

这样的话是不是就完成了index

750

你带是模板的话是不是没有写

751

那就给他一个clintindex.template

752

然后骑马舞

753

这个的话就是我们的react来下下

754

这些都还是比较轻车熟路

755

都非常熟悉

756

这样的话

757

我们的可怜的地位是不是就写完了

758

洗完之后

759

我们需要安装一下这里用到的包

760

首先是web pack墨子

761

还有我们的

762

提取CS的插件

763

还有我们处理页面模板的

764

把处理好的CSGS资源注入到我们的页面里边

765

这都是自动注入的

766

有一个load

767

load zs

768

给他安装一下

769

然后这都是开发环境下使用的

770

安装的开发环境在下边

771

这样是不是就完成了

772

然后呢

773

下一步就是来陪一下我们打包命令

774

保命

775

这个打包命令其实也是一样的

776

不用重复写了

777

分别分为客户端和服务端

778

She咖啡咯

779

I PAC cleaned division啊

780

一样啊

781

客户端热启动

782

然后

783

客户端打包服务端打包

784

然后配置了一个客户端服务端一块一块打吧

785

省得就是每次还需要单子执行两个命令

786

然后这个的话是打打完之后我们启动的服务站

787

这里还

788

需要一个能得磨

789

那你给他安装上

790

搞定

791

这样好像我们就完成了

792

完成之后呢

793

我们看一下能不能启动起来

794

希望是一次能成功

795

如果一次能成功的话是可以的

796

但是这种情况比较少一些

797

看一下

798

果然报错啦

799

看下有什么错误

800

坦荡的real

801

塞可令的阴气写错了吗

802

这里是饮水点儿

803

可怜他的戒指差入口处

804

改一下

805

重新带来自信

806

好像成功了

807

我们访问一下localhost

808

发现a home是不是就出来了

809

在的话我们添加个路由切换

810

现在路由也没有什么切换

811

我把我们家差路由切换的话

812

我们就来把我们的切换路由的组件引入进来

813

就是我们的a link

814

From reactor root down

815

然后比如说在我们的about页面的时候

816

我们就需要切换到我们的首页

817

a link

818

to

819

就是

820

父母姐妹

821

需要转到后面

822

然后当在

823

后面的时候呢

824

就调整到我Bob一面

825

今天估计我们会结束的挺早

826

应该不至于拖很拖太久的汤

827

跳转到霸气

828

这样就可以了

829

看一下没有报错

830

我们再来缝一下

831

现在可以看到了

832

跳转到about

833

跳转到home

834

那这样的话

835

我们的客户端

836

状态工具的话

837

我们就用reduction

838

这个的话其实主要是给你看一下

839

就是我们需要用一个中间状态管理去连接服务端

840

就处理自己请求那一块

841

连接我们的数据端

842

服务端客户端请你用魔棒插入蕊扫都可以

843

都没有什么问题

844

其实主要一个思想的话

845

就是在服务端你把请求的数据

846

然后存到SQL里边

847

然后在客户端的时候呢

848

你拿到服务端已经请求好的这个数据

849

然后把它来作为初始值放到这个渠道里边

850

然后呢

851

这样的客户端就不用再去重复的发起X的请求了

852

就是主要是这样一个流程

853

其实用哪个状态工具都是一样的

854

但是但是不是有点老了

855

现在的话是不是都

856

官方也推荐用razor

857

这个工具

858

那客户端我们这里就完成了

859

大家有没有什么问题

860

莫有问题的可以回复一

861

然后我们就来搭建我们的服务端了

862

可以啊

863

因为像一般前几作实战还都比较简单

864

并并不太难行

865

那我们就继续往下

866

继续往下的话就来搭建我们的服务站

867

那这里我们先把依赖安装上吧

868

这不还是我们扣内衣那些东西

869

Call

870

root

871

还有我们的静态资源服务器和static

872

把它安装上

873

然后来写我们的服务端拉舍我新建

874

新建APP的JS

875

然后还有我们的

876

如此就放到我们这里

877

其实除了语法不一样

878

其实我们当时写的V1其实是完全一样的

879

安装完了是不是快速的把它引入进来

880

VIP一定要自己配吗

881

可以不用自己配

882

但是学习阶段的话不是为了大家

883

更好地了解一下如何自己去搭建这样一个角色

884

工具嘛

885

其实你用CR完全就可以不执行一个命令就完成了

886

对

887

官方就是下完全可以用

888

并不是不可以用

889

只是为了

890

让大家更好的学习

891

学习阶段的话

892

尽量能手写的就手写

893

能动手的就动手

894

这样的话更有利于你的就是记忆

895

或者是你但是遇到一些问题

896

增长一些经验给你解决问题的时候

897

就是增长经验的一个过程

898

如果你只是用官方

899

就是家

900

每次用都非常流畅

901

也遇不到什么问题

902

那这样的话对你经验的增长也会有好的

903

怕什么快还是用到我们的

904

然后

905

扭下我们的实力

906

然后还是路由的话

907

我们统一把它单独提

908

就放到我们音带这里边说它里边就是我们返回一个函数回来

909

我们需要把我们的APP是不是给大家传进去

910

因为你它是基于中间件机制的

911

你要用的什么的话

912

都还需要注册一下

913

然后是点十个

914

如此下边的

915

比如说这个方法就是初始化的路由

916

然后我们的静态资源服务器是到哪呢

917

So

918

然后就是在我们的该项目下面的地市的目录

919

点name

920

然后是点点点点膝盖

921

List

922

展示就可以啦

923

然后听听一个端口

924

这里的话

925

关于这个price大家都可以继续使用的话

926

就是比较经典一些

927

一个price比较大而全一些

928

其实技术的话

929

选型其实中国考虑之后并不限制于某一个技术

930

另外的话

931

其实最主要一个目的就是为了让我们的项目能流畅的运行

932

最终完成我们的一个项目开发

933

Lu KO是

934

比如我们

935

这样的服务端是不就搞定了

936

然后

937

要写的内容的话

938

需要继续写我们的root

939

如此的话

940

我复制一下

941

这都是重复的代码

942

这

943

这简单复制下这个吧

944

然后引入我们的如此

945

这里是否也需要用到我们的Python模块

946

A new一下

947

这个先给大家去掉的话

948

我们先简单地返回

949

先测试一下我们的服务是不是成功了

950

然后等于

951

服务端启动

952

这样可以了

953

这样的话

954

我们试一下试一下看一下负担应该没有什么问题的提案的威摄

955

可以看到好像

956

很正常

957

没有任何问题

958

没有任何问题的话

959

那么就继续往下

960

这就是我们这个架子就已经在这儿了

961

这样的话

962

我们刚刚我们是不是只写了我们的客户端入口

963

那这样的话就需要我们来处理一下我们的服务端入口了

964

其实主要服务端入口的话

965

主要是把我们客户端的这个什么组件打包

966

让可以在服务端调用

967

然后渲染为字符串

968

是不是直接退回来

969

那个报错不用管吗

970

哪个报错

971

没有报错

972

你说这个警告码

973

这个井告示牌的

974

之前没有写这个兰声明

975

比如说什么允许什么使用之类的

976

就是一些开源的一些协议

977

Lessons

978

No lessons Fed

979

警告不是错误

980

这个没啥事儿

981

是不是第一个lesson是MIT

982

它提示吧

983

就是没有这个饭

984

然后

985

继续玩

986

继续咯

987

我们要确立我们的服务端入口了

988

就是来

989

让我们的服务端可以访问到我们的组件

990

然后渲染为字符串偷回来

991

这里的话就是在我们的clint这

992

再放一个叫一汽的蛇

993

我

994

在场

995

还是一样

996

首先是引入我们的对act

997

Act

998

然后呢

999

是不是要渲染的页面

1000

是不是肯定是要拿到我们这里的他选的所有的页面组件

1001

是不是就是这里的root我们要拿到

1002

所以要把它拿过来

1003

Roots from

1004

如此

1005

然后这里就需要

1006

16门服务站路由了

1007

其实像上节课在写文的时候给大家说到过

1008

像危重的话

1009

我们是不是用了一个memory那个root

1010

这里的话它有对应服务端使用的一个root教

1011

Static static route

1012

这个就是在我们的服务端使用的一个

1013

其

1014

其实爱的文档的话

1015

其实主要

1016

是因为他好多都是英文的

1017

可能感觉比较难

1018

可以看到

1019

这就说明

1020

使用这个static route在食物啥的

1021

人类的时候

1022

就在S2的时候使用的

1023

所以说这里我们可以把它拿过来

1024

去官方文档其实都有关于他使用的一些详细说明

1025

所以说在我们无论是接触什么技术

1026

一定要是先把官方文档去看一遍

1027

先大体有个有印象

1028

都有哪些东西

1029

比如说哪个功能去使用

1030

尽量不要去写一点

1031

就差一点

1032

这样先大体的去来浏览一遍

1033

做到心中有数

1034

这不写待客入的

1035

这是我们在服务端要使用的

1036

然后呢

1037

是我们需要导出一个函数

1038

在服务端去调用

1039

去拿到我们的

1040

这些组件的话

1041

我们

1042

可以简单的导出一个破的default c ts的话

1043

就是服务端在调用这个函数

1044

它需要传过一个参数来

1045

这个话是很有用处的

1046

就是可以让我们客户端和服务端还有一个中间的载体

1047

我们比如说传一些数据之类的

1048

我们就可以通过CTS上下文进行传递

1049

然后的话我们就返回一个表妹的封装

1050

一个表妹

1051

热

1052

所以这种返还型呢

1053

就是返回我们的

1054

路由听我们路由是不是就代表是我们所有的页面了

1055

如此

1056

然后是选项的root

1057

我们路由是不是有了

1058

但是呢

1059

刚刚这里他配一个东西需要

1060

可以看

1061

对

1062

他一个location配置在服务端的话

1063

所以说我们这里有这个CTS

1064

正好我们就可以从上面拿到当前路由的地址

1065

所以说就可以给他配上location

1066

等于是否可以通过我们的上下文里边拿到CTS点应该是request

1067

对啊

1068

是不是这样就可以完成了

1069

这就是我们的服务端的一个入口

1070

在服务端的话

1071

我们只要调用这个函数打包完成

1072

是不是给服务端调用

1073

是不是又拿到了所有的

1074

如此就相当于我们所有页面我们拿到了

1075

CTS是从哪传来的

1076

一会儿这个是不是打完城市在服务端调用

1077

服务端调用的时候就传进来了

1078

服务端服务端调用传进来的

1079

然后

1080

就打包一下服务端入口还没有设置服务端入口的话

1081

其实比较类似

1082

这里复制一下吧

1083

有可能今天

1084

不到四点就讲完了

1085

因为好多东西

1086

都是类似的

1087

看一下墨子mode

1088

这个是我打包第三方依赖

1089

入口

1090

要改一下

1091

这是因脆点儿瘦点儿检查

1092

然后实务班的指定翻译规则

1093

这个是一定要要的

1094

因为是note的使用吗

1095

打包或者规则

1096

然后指定环境

1097

下胎一样

1098

也是在服务端就不需要进行处理了

1099

这里你也可以使用有南二路的之类的

1100

有好多种处理方式

1101

那这里这个

1102

我们就需要安装一下啦

1103

在服务端忽略掉CS的解析

1104

安装一下

1105

这样服务端好像来配置就可以了

1106

试一下

1107

试一下服务端的打包

1108

看一下有没有什么问题

1109

只要失误

1110

第一我们配一个

1111

怎么又报错了

1112

看下报啥错

1113

嗯

1114

还少

1115

安装上

1116

这网速也挺快

1117

失误第一位

1118

没有问题

1119

是不是吃货版的就打包出来了

1120

打包出来是不我们就可以在服务端调用

1121

可以调用进行处理了

1122

那就是我们继续来处理

1123

在我们的这个服务的

1124

来拿到我们客户端打包好的这个组件

1125

然后我们就可以把它渲染为字符串

1126

像这个的话

1127

为X的话也是提供了人的图使用方法

1128

这个

1129

人的

1130

To实训室

1131

这里还提供了这样人的咨询方法

1132

将渲染为字符串给我们进行使用

1133

那么这个就继续往下写开始

1134

首先的话

1135

我们读取到我们的

1136

至于打包出来的这个

1137

15班的价格拿到我们的方法

1138

She

1139

does的目录下边儿的食物扳倒

1140

然后我们还需要用到是是不是人的图使用方法

1141

最快的话

1142

我直接用的

1143

com的语法

1144

如果大家想用S的语法的话

1145

就像前两周不是事

1146

一开始前两周那个课的实战是不你配一下第二库来解析就可以了

1147

Require

1148

这里是react DOM下边的瘦

1149

人的图使用方法

1150

这是不是打出来这个APP

1151

然后这里我们就可以拿到

1152

我们

1153

就是组建了这个位置

1154

因为都是e部的嘛

1155

就是

1156

舍瓦蕃的事

1157

我们返回来的一个promise的一个对象叫童威的

1158

等一下CS这样话调用是不是现在这CF就传过来了

1159

传过来是不是正好就喝这里进行关系了

1160

CS这个就是从这里调用的时候传进来的一个上下文

1161

就相当于这里就是一个中间载体了

1162

我们可以实现在这里的一些数据和这里进行一个关联

1163

然后这里我们可以打印来看一下

1164

看一下有没有成功

1165

这个也是没有什么问题

1166

记忆还是差

1167

来启动一下一按

1168

然后是第一位

1169

然后我们需要访问一下

1170

可以看到

1171

TFX是不是就拿到了

1172

我们想一些内容

1173

但是呢

1174

就是拿到一些JS可以看到

1175

这样你就是从负担偷回来的话

1176

是不是肯定偷不回来

1177

你需要把它渲染为字符串才可以

1178

所以还需要进行一步操作

1179

把它渲染为字符串

1180

Wait and Tuesday

1181

然后是JSX的话

1182

是不是最终将我们昨天都选为字符串了

1183

然后呢

1184

你加他给到他就可以了

1185

没有报错

1186

我们再来访问有没有发现出来了

1187

然后这里可以看到

1188

抽血啊

1189

我这里没有打印

1190

把他删了吧

1191

但是现在的话还存在问题

1192

为什么呢

1193

可以看到等我点的时候注意看

1194

每次点击是不是都刷新页面了

1195

就相当于和纯的服务端渲染似乎没有什么两样了

1196

这是为什么呢

1197

像我们前面提到过

1198

我们的吕SSR的话

1199

应该是结合了客户端渲染与服务端渲染的优点

1200

只有首页的时候是从服务端是不当你请求首页刷新页面之后

1201

是不是从服务端请求回来了

1202

而后来之后应该是有本地的

1203

比如说JS接管

1204

就本地的路由去控制它的一个切换

1205

那现在为什么

1206

你点的时候为什么没有启动本地呢

1207

这是因为是不是你的GSCS都没有进来

1208

这只是一个

1209

就是你打包好的客户端JS是不是我们的黑

1210

都是一些东西是不是都没有进来

1211

这只是简单的一个路由跳转

1212

而且这个跳转的话

1213

它解析完成之后就是个a标签

1214

那你没有他就是超链接跳转

1215

那肯定是去请求服务端了

1216

所以说这里我们还需要把客户端的资源给他拿过来

1217

这样的话才能后边的路由切换

1218

才能变成客户端渲染的方式

1219

切换更加自然一些

1220

大家

1221

休息一下吧

1222

休息

1223

你看

1224

大家休息一下吧

1225

休息十分钟

1226

然后我们

1227

九点十分钟的话是我们9.0789.07吗

1228

继续接下来的话就

1229

听的内容就比较少了

1230

很快我们就能完成了

1231

失去你的我

1232

比乞丐落魄

1233

多么深刻

1234

谁哭着

1235

谁笑着

1236

你的分饰两个角色

1237

越痴迷越折磨

1238

回忆还在煽风点火

1239

明知往前就会坠落到这一按

1240

重返寂寞

1241

爱到最后

1242

究竟爱什么

1243

抱紧你的我比国王富有

1244

曾多么快乐

1245

失去

1246

自己

1247

南京抹不去

1248

为什么还永远

1249

你温柔舍不得

1250

谁有

1251

感伤

1252

的回忆

1253

我

1254

比过我

1255

倒

1256

过来是

1257

最美的

1258

爸爸

1259

爸爸

1260

The

1261

smile is controlled

1262

myself

1263

she said that you wanna go how much you wanna just

1264

so so

1265

some superhero some fairytale blaze just something I can turn to somebody I can kiss I was so just

1266

I want something just

1267

Just told

1268

us in

1269

the summer

1270

she said that you want

1271

somebody some

1272

superhero some fairytale bliss just something

1273

so

1274

I want

1275

What you wanna know what you want

1276

for somebody with some super human gifts some superhero some fairy the best some to somebody I can kiss I want something just like

1277

有些说到过去

1278

爱过的痕迹

1279

冷风吹来

1280

回忆

1281

让人听得独自沉溺

1282

爱你的心该如何

1283

心思

1284

会仔细聚齐

1285

不停

1286

哭泣

1287

勇气却又放弃

1288

慌乱了思绪

1289

像我们继续

1290

这些学校的话是不建议

1291

取消的话

1292

他也是一个状态管理

1293

是

1294

业务设计

1295

比如说你想这些全状态呢

1296

微笑

1297

没啥区别

1298

和re达斯VS

1299

真羡慕重要

1300

这个可以看到

1301

从why he right

1302

我们都是按照官方文档指导写的

1303

就你真是如果自己去手搭着SM的话

1304

其实就是这样一个过程

1305

流程就是这样的

1306

这都是官方文档中是给我们的一些提供一篇或者是一些指南之类的

1307

是唯一的爱

1308

他只能写的是更详细一些

1309

他这个黑不会脱水

1310

注水的话

1311

TV的话是不是已经讲过了

1312

黑break的话

1313

其实主要就是

1314

避免重复渲染

1315

就是服务端渲染一次

1316

然后你扣单又渲染一次

1317

所以说你可以用个黑breathe

1318

可以看他

1319

其实女人是是相同的

1320

其实避免进行重复操作

1321

就是可以提高一些性能之类的

1322

可以breathe然后注水

1323

脱水的话

1324

其实就是我们上节课在在这里进行的这个

1325

我们在屋檐上

1326

就是往Windows上挂

1327

在变量这个这个操作这里

1328

我这上面挂载

1329

然后在客户端呢

1330

是不是进行了读取

1331

这里是不是服务端读取到数据之后

1332

把它挂在了温度变量上

1333

然后呢

1334

你到了客户端之后呢

1335

就把它读取到了

1336

是不是在这里进行注水这一步就是脱水注水

1337

这可能当时翻译的时候就出现这样一个名词

1338

当时我也刚才听这个名字的时候也比较困难

1339

为什么出现一个脱水

1340

注水其实就是往温度上挂在变量和读取变量

1341

就这么一个操作

1342

这叫脱水注水

1343

然后黑break的话

1344

主要是

1345

心态变了

1346

好像这个

1347

然后引入JS后就变成本地的切换页面了

1348

因为你引入JS之后

1349

我们的GS是不是对路由进行了

1350

比如说你的地址切换收是不是进行了拦截的操作

1351

他就不会去真实地向服务端发起请求了

1352

而现在的话

1353

因为我们第一次没有经验的时候

1354

并没有任何的拦截

1355

那当你点击的时候

1356

他立马就就请求服务端了

1357

当有GS之后

1358

才会在这里

1359

比如说一些地址进行检测

1360

比如说黑色模式或者汉子模式拿之后

1361

他就会通过你检测去操作

1362

比如说操作你的道吗

1363

然后进行内容进行一个切换

1364

就这样一个操作

1365

所以说有的JS之后

1366

你再点击切换之后的话

1367

他就不会去真的去请求服务端

1368

那这一步的话

1369

正好我们就来完成它把英文模板

1370

还有我们的GSZS都把他引入进来

1371

引入进来的话

1372

首先需要我们的

1373

Load的读取模块还是需要把我们的模板堵过来

1374

FS

1375

然后这里的话还需要咨询一下客户端的打直接咨询一下

1376

播吧

1377

可以看到是模板也出来了

1378

CS是不是都有了

1379

那我们就把这个模板给他整过来

1380

FSRU

1381

然后我们就可以进行操作了

1382

首先的话读取文件我们可以单独封装一个

1383

专门读取文件的

1384

就简单的把函数进行一个拆分

1385

尽量可以让函数

1386

比如说保持它的一个单一职责的这样一个原则

1387

这个就是读取模块

1388

读取我们的文件

1389

然后

1390

还有其他问题吗

1391

起好多的名词

1392

现在注册使的话

1393

应该是从英文翻译的时候

1394

我往这翻译的时候

1395

应该出现一个问题

1396

就是就出现了这样一些名词

1397

就是让人还挺疑惑的

1398

就像

1399

前段时间出的那个GS

1400

既然是第几版

1401

他说妹子翻译成企业一样

1402

是不是有很大的反响

1403

这里用还是同步读取模块把它读出来

1404

肉

1405

我们要对齐的问题呢

1406

就是我们的音带点H7秒

1407

把它读起来

1408

然后读取格式的话是UTF

1409

这样话

1410

我们的模板是不是就得到了

1411

这就是我们的页面模板

1412

就都取到了

1413

然后对到之后的话

1414

这里满载单独提一个就是处理

1415

注意什么呢

1416

处理我们的

1417

模板还有核实到的

1418

就之前在文艺中

1419

我们这里是不统一都写在这了

1420

进行这些

1421

比如说正则的替换

1422

还有这个变量的替换等等

1423

其实我们这里也可以简单把它分成一个函数

1424

其实这个就是在我们开发中的话

1425

就是尽量一些这些功能之后

1426

你也可以把它单独提取一下

1427

这样的话会出现代码会看到更加的

1428

简洁一些

1429

比如说这里处理模板的

1430

我们单独封装一个函数叫template

1431

首先第一个的话就是把我们这个模板一会儿调用函数

1432

首先第一步传进我们这个HR模板

1433

我们是不是首先需要拿到H码

1434

我们才能进行后续的一些操作

1435

拿之后进行操作

1436

之后还需要传递一些propose propose的话就是你需要替换的组件的内容

1437

还有你的一些stayed straight直都放在这

1438

这个一会儿要用的话就

1439

比较清楚啦

1440

Props

1441

Template

1442

箭头函数

1443

这不就执行我们的正则替换了我们这里的话是如此

1444

还有一个就是真实项目中是这样写

1445

但是细节处理还是非常多的

1446

比如说你带满了

1447

压缩了

1448

你的缓存是一定要处理好的

1449

所以说一般的话

1450

如果不是特别熟练

1451

如果用在这个项目的话

1452

还是用next或者next的这样的成熟的框架去处理

1453

因为它的配置还是非常复杂的

1454

而这个的话只是我们根据官方的一个比较简单的流程

1455

好多的细节还是需要处理的

1456

这里我就把它替换掉

1457

一会儿调用的时候再props里面

1458

我们就可以把我们要替换的组件内容给他传递过来

1459

就是我们的h ma

1460

这样就可以了

1461

然后我们就可以调用了再

1462

人的初心这里是不是已经渲染成字符串了

1463

那么就可以

1464

把它替换一下

1465

首先拿到我们的模板

1466

就是我们这里的

1467

template

1468

是不是第一步把我们的页面模板传进来

1469

然后第二步是就反映这个函数了

1470

然后反应这个函数扔的时候

1471

再把我们这个

1472

我们服务单拿的组件内容拿过来

1473

然后最终定这个函数就

1474

把组件内容从服务端就直接返回回来了

1475

并且插入到了我们的这个页面模板中的话

1476

只不过是单独的提出了一个小函数就处理这些内容

1477

最终给到他

1478

这样就搞定了

1479

现在再来访问就是我们的SSR

1480

就不要打包一下

1481

然后

1482

Show

1483

现在来访问刷新一下

1484

然后你显示网页源代码

1485

是不是看到就直接回来了

1486

并且你现在再点击跳转

1487

可以发现他已经不再停留界面了

1488

就是你在计划你的健身

1489

加载完毕就本地的检测去接管了他

1490

不不再去请求真正的路由了

1491

这样我们的爱杀就完成了

1492

接下来我们就需要处理

1493

剩下两部是不

1494

这是陆游的处理完成了

1495

是不是还剩一个请求的处理

1496

看一下network

1497

Network

1498

看什么呢

1499

那个work这里就请求了CS和GS

1500

肯定的

1501

班导和美女CS

1502

你再点击的时候可以看到

1503

你再点击的时候并没有发起请求了

1504

然后我们剩一个埋剩一个请求处理

1505

请求处理的话就是注水脱水这些操作了

1506

那这里我们同样还是使用excuse来进行请求

1507

那我们首先把它安装一下

1508

然后这里为了方便的话

1509

我们我在服务端添加一个接口

1510

不要在这里随便听一节课

1511

如果他点再次API

1512

然后get user info

1513

然后随便返回点内容

1514

CODE0

1515

然后message

1516

一般是不是一些接口中的一个字段定义

1517

是不是打一个模板

1518

一般都是约定好厚的

1519

这样的话每个接口就可以了

1520

看一下能不能拿回来

1521

多了一个

1522

是不是可以看到没有问题

1523

结果钱就回来了

1524

那没有问题

1525

我们就在about这里边儿来使用一下

1526

首先呢

1527

这里边我们是不是要在汉字间里边用户的写法来

1528

比如说这里

1529

等于

1530

默认只我们给个name是空的

1531

你用到有实力

1532

他需要把他引入进来

1533

都处理我们的状态管理的

1534

不是处理我们的自己的状态的

1535

然后请求都发统一发到我们的effect里边

1536

然后之前就一次把它为空

1537

这个都是录播课程都有讲

1538

还需要引入我们的excuse

1539

然后the get

1540

请求谁呢

1541

是不是请求我们这个落后的3000接口

1542

停了之后

1543

我就把他给到

1544

我们set you re in for就可以了

1545

然后我们就能把它渲染到页面上

1546

这里再加一个H3

1547

名字

1548

User info里边是不是有个内蒙来

1549

我们现在来看一下是不是

1550

能请求成功呢

1551

叫克林

1552

享受

1553

我们先把客户端调试通来看一下

1554

好像是没有显示出来

1555

我们看一下

1556

出什么问题了

1557

嗯

1558

五折

1559

报错啦

1560

又是effect

1561

王乐把它引入见

1562

现在来刷新是没有问题

1563

现在这个就跨越了

1564

跨越的话

1565

我们可以在服务端让他允许跨越就行了

1566

这个简单

1567

这允许跨越

1568

这

1569

就在在服务端配置一下呢

1570

我直接拿一张代码吧

1571

就这样代码拿过来就可以了

1572

这样我们

1573

报错啦

1574

A wait

1575

位置

1576

放在这儿

1577

添加一个中间件的信息

1578

这样应该可以了

1579

我们再来请求应该是没有什么问题了吧

1580

SV登请求回来了

1581

看到network里边

1582

我们的盖特有人放不正常就回来了

1583

这样话是没问题

1584

接口没问题了

1585

这里就是存在的问题

1586

如果你这个八个页面是直接从服务端返回回来的

1587

那就没必要服务端把页面内容请求回来

1588

然后等待介词加载完毕

1589

然后呢

1590

你再去在客户端发掘阿克请求

1591

这样说这路程都比较多一些

1592

而现在我们既然有了服务端渲染

1593

我们就直接从服务端把这个请求的这个数据

1594

然后和我们的HTML这个一起返回回来就可以了

1595

然后就不用再次发起请求了

1596

这里就涉及到注水活水的操作了

1597

而这里的话

1598

因为他和微有点区别

1599

唯一的话是不是直接给我们提供了一个户口的写法

1600

而在溶液中呢

1601

它并没有给我们提供相应的写法

1602

但是呢

1603

在root中给我们提供了一种写法在

1604

叫什么

1605

She wore

1606

他应该有个APP可以看到she was reading也类似于就是是APP的一个直男癌的事

1607

可以看到数据获取部分

1608

数据获取部分data loading可以看这篇写法

1609

可以在这里加一个楼的data

1610

然后在服务端呢

1611

我们就可以读到这个楼是对的

1612

然后从上边是读到

1613

然后可以看到这出现写法

1614

是不是我们这里定义了一个数组就有用武之处了

1615

我们的可令

1616

是不是进行数组

1617

然后在服务单位匹配到当前这个

1618

组建的这个对象

1619

就路由的对象

1620

然后匹配他身上是不是有这个楼的

1621

对他如果有是不

1622

给他加到装备里边儿

1623

然后统一进行请求

1624

请求完回来之后

1625

他就可以和我们的

1626

H码一起回来了

1627

这里就是到注水脱水地方了

1628

那这里我们就按官方的这个指导写法来写一下什么load data

1629

因为这个route对象我们是可以在服务端独到的

1630

我们这里给它加上楼的

1631

对吧

1632

这个都可以自定义

1633

这个名称并不是说固定的写法

1634

比如说这里是不是我们就是盖特游人一放

1635

那这就是需要我们自己进行处理

1636

那给他邮衣服从哪里来呢

1637

那是不是需要和我们的这个bug应该是在一起的

1638

那这里其实我们就可以再给他倒出一个就行了

1639

Export

1640

然后cast get

1641

user info

1642

说我把他整回来

1643

这样话在服务端我们是不是也可以进行直接拿到这个数据了

1644

然后这里这些的话

1645

我们就可以统一先把它去掉不要

1646

现在的话我们就可以在这里访问到了

1647

然后把他这个还需要研究一下

1648

在这

1649

这样我们就挂到组件上了

1650

挂到组件之后

1651

我们就需要在服务端来拿到这个数据

1652

但是因为这里入口的话

1653

我们是在这个

1654

您去稍微的结在这里进行了处理

1655

所以说我们这个的话就和之前唯一可能稍微有些区别的地方

1656

那么这里就在这里进行处理了

1657

首先拿到我们的root是因为这个打包完成之后

1658

是不是也是在服务端调用我们的root

1659

然后进行遍历

1660

然后点

1661

键的话

1662

我们就需要判断

1663

嗯

1664

判断这个他的pass是如此的如此方面

1665

理解一下

1666

如此pass是否等于和我们现在这个请求路由是否匹配

1667

是不是正好我们调用这个函数传入的上下文是用到了最快速的URL

1668

是不是

1669

他叫

1670

这个啊

1671

Sheet s request

1672

这个写错了

1673

这应该是路径是pass

1674

这里比如说我们不确定的话

1675

我们可以打印一下

1676

然后是CT s

1677

request

1678

看一下是不是他

1679

然后访问

1680

真气

1681

嗯

1682

需要重新打包扣子

1683

现在来访问一下

1684

可以看到是不是就是这个pass

1685

刚刚这个URL写错了

1686

Pad pad可以看到

1687

拿这个跟陆静了

1688

如果是个巴特

1689

刷新一下

1690

这里报错了

1691

可以看到是不是有bug的事

1692

Pass啊

1693

没有写错

1694

有L是错的

1695

所以首先判断是不是路由

1696

是否能匹配上

1697

如果匹配上是不是正好是证明是当前访问的哪个路由

1698

每个每个路由的话都可能有自己的数据

1699

然后现在每个组件上面是不是挂在了一个搂着data

1700

如果哪个数据要进行接口请求

1701

是不是就挂在到这里了

1702

然后我们在服务端拿到它

1703

在的话我们定一个速度

1704

不知道妹子

1705

来采访我们的请求

1706

因为你请求可能不止一个

1707

这里就需要再加一个判断了

1708

判断是当前路由

1709

并且当你的root上边儿

1710

有load date的时候

1711

我们才进行给你普及进行

1712

是不是在他身上有一个root的楼的对等

1713

这个是不是就是我们的X发起的Su请求

1714

因为S也是基于access也是基于说妹子封装的嘛

1715

所以说它也是一个说妹子一个对象

1716

然后这些都处理完成之后

1717

我们这里要写一个Pro妹子

1718

这个是官网推荐的写法

1719

这里都有

1720

React route

1721

在这里先将它铺进去

1722

便利之后说匹配到之后将它复制进去

1723

然后promise哦把所有数据请求回来

1724

给官方写的还是还可以

1725

都有

1726

请求我们这个妹子

1727

然后这样这样是不是就能拿到我们的date了

1728

然后这个你得需要数据请求完成之后

1729

你再把你的页面返回过去

1730

这样他们才能一块儿返回返回回去

1731

那接下来就是进行注水脱水的操作了

1732

水的话我们需要借助一个中间变量

1733

就是旅客

1734

就是负担

1735

全完成之后拿出去

1736

你可以直接存到redux里边

1737

就不需要再进行请求了

1738

这里我们就用个read

1739

那这数据这里数据我是在这个因素失误的JS这里请做的

1740

那我怎么在服务端拿到它呢

1741

在这里拿到之后给它注入到

1742

比如说Windows变量在这进行注入呢

1743

这里还是正好巧妙的

1744

阿瑞莎也可以

1745

完全没有问题

1746

这里CS我们是不是就可以通过这个中间的一个载体把这个数据来进行传递了

1747

所以说这里我们是不是拿这个数据呢

1748

我们就可以通过这个载体来进行传递

1749

比如我们在CS上写了一个Windows对象

1750

定义了一个变量

1751

相当于

1752

就等于比如说首先判断他存不存在

1753

如果什么没有的话

1754

他这个是空的

1755

挣钱

1756

应该是的话

1757

反馈这个速度

1758

我们拿到DATA0点

1759

应该这个就能拿出去给我们试一下就知道了

1760

这样话我们是不是就处理完成了

1761

然后在服务端是不是就可以拿到了

1762

通过CF是不是就能拿到我们传递过来这个请求的接口的数据了

1763

那接下来我们就出一下redux先

1764

因为还没有处理

1765

Starch

1766

然后index的

1767

他其实现在也提供了hooks的写法

1768

然后我们定一个初始的值

1769

加name

1770

这个我记得好像是录播课中也有讲

1771

录播课程行就讲了这个reduction

1772

不是这个redux定义它的初始值

1773

然后action触发他的一些动作的

1774

这里我们用

1775

Switch

1776

action

1777

通过action type判断是触发了哪些

1778

操作比如说第一个是改变我们的直

1779

我们就要change it

1780

趁着这个时候是否返回新的state值

1781

然后我们就

1782

进行一下合并

1783

斯特直的

1784

传的时候通过黑绿的传递进来

1785

这个你可以自己定义

1786

并不一定是写披露的

1787

拟写其他就传递过来的参数

1788

然后默认的时候呢

1789

没人的时候就简单的反馈他的一个实际的拷贝一下

1790

在我们的reduction就完成了

1791

然后最终把它倒出去的一个part

1792

Function

1793

然后是可炼成

1794

叫可怜这些的话

1795

我们分为了服务端和客户端

1796

为什么呢

1797

因为你客户端的话需要是否进行这个治水脱水操作

1798

服务端和客户端需要进行这个操作

1799

而服务端是不是就不需要

1800

return

1801

然后是我们的这个ke re test

1802

就把这个reduce上给他传下来的read的用法

1803

其实单纯的平时我们开发业务的话

1804

就是根据文档的写法去一步写

1805

其实并没有什么太多男的

1806

男的是

1807

只是因为对这语法的就是不熟悉

1808

这样是不是我们的一个是客户端

1809

一个服务端

1810

我们就完成了

1811

我们就是之后就需要改一下我们的组建了

1812

一个是在

1813

Create a link just

1814

客户端改一下

1815

这样

1816

是不是得需要包裹起来才可以把它

1817

Provide

1818

APP

1819

然后是到等于C呢

1820

就等于还得引入进来

1821

可瑞可林

1822

师傅把他引入进来

1823

来

1824

给到他

1825

Qu na服务端也是要改一下的

1826

这个是科瑞特

1827

食物

1828

然后呢

1829

同样这里也是需要进行一层包裹的

1830

Provide

1831

然后把我们的root给他放进去

1832

然后这里

1833

等于谁呢

1834

就等于我们的soso

1835

是不这样

1836

服务端也有

1837

客户端也有了

1838

那现在我们改成了这个read之后

1839

Steam的文

1840

写错了吗

1841

到底被写错了吗

1842

瑞瑞

1843

收拾到现在我们改成read之后

1844

这里我们就要改一下

1845

用雷达的方法来拿我们这个值

1846

大师给我们提供了什么写法呢

1847

You select

1848

还有一个的话

1849

我们要改变的话

1850

它提供了一个

1851

这是

1852

我们提供的hooks写法呢

1853

我们就可以进行用了

1854

首先我们拿到的这就是有舍lecture

1855

然后就可以拿到了real

1856

name

1857

这里我们改一下

1858

这样我们就从这里可以直接读取到他那个

1859

然后呢

1860

因为这里的话

1861

如果你是在about页面刷新

1862

那肯定是从服务端请求回来的

1863

是没有问题

1864

但如果你是在home页面刷新

1865

然后你切到了bug的页面呢

1866

那是不是就需要客户端还是需要发起阿贾克斯的请求的

1867

所以说这个还需要还是需要进行判断一下的

1868

Cast does pets等于u Dis pat

1869

然后每次不要发起请求

1870

有effect

1871

我们判断啥呢

1872

来判断

1873

内幕是不是存在

1874

如果不存在

1875

我们就需要重新的发起使用

1876

是不是就调用这个get user info

1877

然后拿到数据之后

1878

我们就重新更新

1879

我们在就是reduce里边的纸

1880

这里我们定义了一个什么

1881

一个操作是change date

1882

Tap k的

1883

然后polo的车型呢

1884

就是我们这里的请求回来的数据

1885

这样就比较完整了

1886

那这里还剩最后一步

1887

就是我们的interest Xu的JS里边的处理

1888

这里的吃的

1889

那就剩这里了

1890

这里我们拿到之后

1891

我们要将它剪

1892

将它注入到我们的Windows对象

1893

看一下

1894

如果API返回较慢

1895

对呀

1896

API较慢也会拖慢他

1897

这肯定的

1898

因为你可以看到这里它是等待的

1899

你要一起返回

1900

那肯定是一个不返回来就一直等着

1901

所以说会拖慢

1902

所以说这个也是要酌情考虑

1903

就是你一些A片

1904

你并不是所谓的A片都堆到这里去

1905

直接让他请求回来

1906

这个就是需要综合考虑的

1907

就哪些是必须的

1908

必须就是必须

1909

需要和HR一起反映回来的

1910

就是需要首评支出的一些内容

1911

就是用户需要快速看到内容就可以放在这儿

1912

然后一些不需要的地方呢

1913

就完全就还是通过阿哲和他请就可以了

1914

这个肯定是需要取舍的

1915

还有像我们这里的CS是不是我们也近

1916

其实这个也是需要进行取舍

1917

就是关于这个点

1918

CS我们这里是不是单独把它提取成了文件进行渲染

1919

其实爱他的话

1920

还有一个就是我们还有一种是带绿的

1921

是不是直接把它打成内敛的样子放到这

1922

这个也是会拖慢你的爱他就是速度的就是如果你的样样式非常多

1923

你通过内联样式打到这里

1924

你服务端是不是还要把它通过一模反应回来

1925

那这样的话

1926

那你这个文件是不是会有非常的大

1927

所以说这时候就推荐把它单独提取出去了

1928

但是单独提取出去的话又有新的问题

1929

什么问题呢

1930

因为你这个虽然是单独提取出去的

1931

特别有可能界面会闪下的情况

1932

就是因为你CS后家才回来的

1933

而你的H码呢

1934

是不是界面是指数直接重复单独又回来了

1935

这个再去请求CS请求加载完成之后

1936

郁闷

1937

内容才能正常是不显示出来

1938

所以这个进行曲

1939

就是如果你的CS特别的

1940

比如说小之类的

1941

或者一些CS

1942

你需要打成那样是直接放到这儿

1943

如果你CS文件特别大的话

1944

就建议单独踢出去

1945

他说细节还是非常多的

1946

尤其像SR配置是非常复杂的

1947

这里的话

1948

我们只是简单进行了这样一个流程

1949

我们是把它走通了

1950

但是好多的细节

1951

如果是真正的线上实战项目的话

1952

还是挺多的

1953

并不是那么简单其实

1954

这里我们剩一步

1955

剩一步就在这里处理一下

1956

我们拿到我们的

1957

迟到的急

1958

这里我们再给他传一个一个私盗过去

1959

你看一下是不是拼

1960

这就是注水特许就是这个操作

1961

是挂在我们的Windows对象上

1962

这里温度

1963

谁给你起什么名字呢

1964

就叫

1965

比如说

1966

它等于谁呢

1967

等于我们的

1968

把它切成

1969

块

1970

是不是刚刚我们把它挂在我们CTS上面了

1971

通过他的CTS

1972

这个给他换个名

1973

都写温度的话容易混淆

1974

比如说改个名

1975

云气受

1976

叫API data

1977

那时候框架也是80照放

1978

差不多好像

1979

好像都是统一这样处理的

1980

因为你必须要实现数据统一处理的话

1981

你就需要找到一个中间载体去处理

1982

要不注水脱水也不是

1983

也不会出现这两个名词

1984

这是一个类似

1985

通用哪个解决方案了

1986

应该是

1987

那更改温度就完蛋了

1988

没有啊

1989

你温度是单独写了个属性温度有好多水

1990

你只要保证不冲突就行

1991

你不可能把Windows直接重写了吧

1992

肯定是存在这样的风险

1993

一般不会存在问题

1994

我们先催着这个

1995

先把它挂在上

1996

到这里是不是又多了一个props

1997

上边来给他放到这最后吧

1998

这样是不是它就随着我们的服务端一块把它返回来了

1999

然后我们Windows就有了

2000

然后呢

2001

还需要一步

2002

就是我们这里为什么把他分到客户端服务端

2003

是因为这里

2004

我在一本假的时候

2005

我就在这读取了辞职

2006

我每次写的叫

2007

谁写的啥

2008

恶X到这个

2009

是不在这里就直接读取到把数值复制给他啦

2010

然后这样处置预案之后

2011

我们的内幕是就有值了

2012

有之之后

2013

所以说这个就不需要再去发起请求了

2014

因为他有值吗

2015

如果没记的时候才去再去发现S请求这样的话

2016

我们的完整的一个时代

2017

应该就能走通啦

2018

接下来就剩最后我们来验证一下

2019

一按

2020

然后是第一位需要的

2021

请打包一下

2022

好像没什么问题

2023

来看一下

2024

就差这一步了3000

2025

没有问题

2026

然后跳转到ABOUT1登是不是出来了

2027

现在是我们首先是刷新的home

2028

然后是不是再去请求这个bug的

2029

那这时候呢

2030

应该是需要应该是发起请求了才对

2031

嗯

2032

来看一下有bug

2033

有报错吗

2034

看一下

2035

A data of UN de find

2036

什么鬼

2037

因吹收点接着差

2038

那这个第一题有问题

2039

看一下

2040

那这里我们获取这个

2041

Chromeh.puts root load data

2042

这个好像也没有啥问题

2043

知道妹子

2044

然后读取到数据

2045

拿到data

2046

嗯

2047

打印一下

2048

正好我看一下下面

2049

Reject

2050

这里看一下他的报复

2051

然后再重新打包一下

2052

还剩最后一个了

2053

只要这个接口走通

2054

我们就

2055

嗯

2056

那证明这个击球接口没有请求成功

2057

Error cannot read products

2058

对此没有读取到

2059

那就请求没有成功

2060

那就是

2061

我一看一下

2062

Bye

2063

Would not hand with cats

2064

看下我的借口

2065

不是啊

2066

是接口解决问题

2067

在服务端

2068

在服务站是不是不能请求的local host改价

2069

给他换成一片

2070

应该是这个接口的问题请求失败了

2071

这样改一下

2072

重新打吧

2073

这次好像可以了

2074

刷新

2075

还是报错啦

2076

咸淡清香

2077

不是这里现在

2078

嗯

2079

这里还少一个

2080

这里还有个小偷

2081

但现在波涛不是这儿

2082

还没到这儿呢

2083

现在是在吟诗

2084

我这儿就卡住了

2085

等一下看一下这个data是什么问题

2086

就差这最后一步了

2087

竟然

2088

卡住了

2089

看到没有问题

2090

对

2091

Data function

2092

对全球访问的话应该也是可以的

2093

Root load data

2094

看牙

2095

Load date等于get

2096

然后我爸无车导出来的

2097

没有问题

2098

这里为什么把这这里有点问题

2099

这里应该是请求之后的接受

2100

这里我咨询了楼的data

2101

对感觉有点放没执行

2102

嗯

2103

这就是把它这个函数倒过来了

2104

给他一个人放

2105

我再试一下

2106

这就是

2107

原版把这个函数返回来嘛

2108

然后在这里执行呢

2109

在这里我不加了这个执行吗

2110

Load date是不是就相当于执行了get your in for

2111

嗯

2112

等一下

2113

我看一下这里应该返回的是一个promise

2114

我试一下

2115

我先我先看一下这打印是什么东西

2116

然后

2117

可以啦

2118

这怎么就可以了

2119

OK呀

2120

拿

2121

这里是发起了本机请求

2122

可以看到没有

2123

之后他自己去请求了

2124

Show route呢

2125

西甲

2126

抱错了

2127

这个对了

2128

不知道妹子看一下

2129

Interest这个是promise是没有问题

2130

然后data这次回来了

2131

拿回来之后我们就可以

2132

如果存在

2133

我们再去取是不她是一个数字

2134

然后对此

2135

第一次

2136

试一下

2137

然后我们看一下

2138

现在应该打上了吧

2139

可以啦

2140

刚刚就是没执行

2141

没执行

2142

现在是不是直接就返回来了

2143

然后可以看到我们network里边也没有发起是不是其他请求

2144

然后其他的后面再切回来也没有问题

2145

但是呢

2146

我们在后面页面刷新

2147

你再切换为a的页面之后呢

2148

是不是现在就是他没有

2149

因为a的页面是本地切换的

2150

所以说内幕为空

2151

他没有从数据反应回来

2152

他说他就进行接口的一个请求了

2153

没咨询为啥会有一登高山

2154

没执行的时候是服务端没有执行

2155

服务端没有执行的时候

2156

我们本地不是

2157

还有一个请求嘛

2158

这不是对

2159

这不有

2160

有双重防护吗

2161

那到这里的话

2162

大家对这个

2163

S

2164

流程应该比较熟悉了吧

2165

我们通过微写了一遍

2166

然后通过APP又写了一遍

2167

可以看到VIP的话可能稍微吃点东西

2168

稍微多那么一点

2169

其实好多东西官方文档里都给我们写好了这个指南

2170

所以说使用起来并不是太难

2171

平常这是爱给我们提供一些方法

2172

人家自适应

2173

还有其他的一些方法

2174

前面应该给大家讲过

2175

他原理吧

2176

像这种人呢

2177

他死因的话

2178

它的性能的话差一点

2179

你可以改成旅游的方式

2180

人的臭no的是dream

2181

这种方式是否会更快一些

2182

通过流的方式

2183

他说文档还是一定要看的

2184

还有像root这个也是有更新

2185

这里大家这个盖的

2186

这里是不是有一个熟人的

2187

从一开始是不是有各种各样的一些写法

2188

这是401的

2189

其实主要是这个d Lu Ding啊

2190

就数据获取这一块

2191

这个就相当于我们自己去处理这个

2192

不像V它直接给我们提供了一个hooks

2193

是不是更方便了

2194

其实都一你不想他的hooks你也可以自定义的

2195

你也可以在服务端读取到

2196

那个组件实例之后

2197

你也可以通过上边拿到新的方法

2198

然后进行处理的

2199

也是可以的

2200

你要改HR的话

2201

那肯定是有工程量的

2202

毕竟你会遇到好多问题

2203

比如说像刚有同学提到的

2204

是不是关于这个懒加载的问题

2205

我记得是圆的18

2206

点叉之后解决了这个热点类问题

2207

像之前这个在服务端是不支持的

2208

Lady

2209

就好多地方

2210

这个没有最新的

2211

我记得之前看过一个文章是

2212

There is a four

2213

这里有个70

2214

牛姐的菜

2215

原来18期改变我记得

2216

有个地方写了

2217

王了

2218

这里有

2219

可以看到

2220

刚才问的就是这里看了new streaming server running with build in support for re acted a lady

2221

这就是REACT18代的

2222

他现在在SSR中

2223

你也可以使用这个

2224

累啦

2225

这种版本是有更新的

2226

我记得我是看到过这有

2227

但18的话已经是要支持了

2228

嗯

2229

给breathe用的了

2230

这个你就可以改善一下

2231

这里就是把人的换乘

2232

Bree的骂

2233

去哪啦

2234

他有人的方法是完全相同的

2235

你放在这

2236

然后打包一下

2237

后来看到我们的host

2238

是不这样就搞定啦

2239

然后这就是可以看到Su的话也非常有好了

2240

虽然现在像谷歌还有病之类的浏览器已经支持

2241

这些都是些JS的东西

2242

但是还是没有那么友好

2243

所以说为了CEO的话

2244

就是说做这些预渲染或者还是有必要的

2245

为什么要返回拷贝

2246

这个

2247

Actions date

2248

直接返回时的他也没有什么问题

2249

去默认吗

2250

默认就返回最原始的status

2251

没有啥区别

2252

你直接默认

2253

你可以直接把它返回来

2254

可以啊

2255

就这个state吗

2256

就是一个兜底吗

2257

但是要其他的时候

2258

你要进行合并你不

2259

引用不一样对前拷贝的话肯定和引用是有些区别

2260

与act没有用到工程还是吗

2261

你问你问到了

2262

这不是到返回来一个函数吗

2263

然后我们的

2264

科瑞的style还有可怜style

2265

这不都是工程函数吗

2266

每次调用不都是函数也是一样的

2267

还有什么其他问题没有

2268

其实啊

2269

他的话大体流程就是这样的

2270

如果没有什么其他问题的话

2271

那么今天我们就到这里了

2272

拜拜

2273

今天还好

2274

幸亏没有遇到太多的其他问题

