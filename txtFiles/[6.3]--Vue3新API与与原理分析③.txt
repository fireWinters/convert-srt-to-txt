1

嗯

2

喂

3

喂

4

听得到吗咱们

5

听到好吧

6

放首歌

7

眉头就心头

8

没空理会

9

我只感受你的感受

10

往哪走

11

也带走它为你着了魔

12

留着有什么用

13

不伸手却温柔的宇宙

14

我这颗小星球就在你手机

15

看见

16

我为你发疯

17

你必须给我

18

8.05开始

19

你们可以把这个API去看一下这个proxy

20

你们今天白天没有看的

21

可以看一下这个

22

请放弃

23

核心字词

24

面膜

25

妈妈

26

妈妈

27

妈

28

妈

29

妈

30

妈

31

妈

32

看我

33

你猜猜什么

34

是我错

35

没能够

36

把自己变得成熟

37

伤口

38

那么多

39

已经不怕

40

为什么转身以后我会

41

一傻子

42

看见蟑螂我不怕不怕啦

43

我神经比较大

44

不怕不怕不怕只会让自己更憔悴麻痹眼神表现

45

一个人睡也不怕不怕

46

勇气当棉被

47

不怕不怕不怕啦

48

夜晚再黑

49

我就当看不见太阳

50

快出现

51

Hello

52

看我

53

你在害怕什么

54

把自己变得成熟

55

没有地方可以出声啦

56

为什么

57

转身一

58

变成蝴蝶扇风

59

看见蟑螂我不怕不怕啦

60

我神经比较大

61

不怕不怕不怕辣

62

只会让自己很

63

怕

64

闭眼始终表现一个人睡也不怕不怕

65

勇气当棉被

66

不怕不怕不怕啦

67

夜晚再黑

68

我就当看不见太阳

69

一你就快出生

70

妈妈

71

妈

72

妈

73

妈

74

妈

75

妈

76

妈

77

妈

78

妈

79

扎

80

我不怕不怕啦

81

我神经比较大

82

不怕不怕

83

不怕

84

只会让自己

85

麻痹

86

也是勇敢表现

87

一个人睡也不怕勇气当棉被

88

夜晚再黑

89

我就当看不见太阳

90

喂

91

为什么

92

大结局差不多吧

93

三节课差不多差不

94

一般其实

95

因为威尔我们花了两节课讲吗

96

V2我们讲的时候其实讲了很多东西

97

其实他是跟V3关联起来的

98

是吧

99

这三节课不算多

100

不

101

三节

102

三节课已经算很多了

103

我觉得如果你们基础好的话

104

其实我们两节课就已经打通了

105

因为你们的基础可能相对来说差一点

106

是吧

107

所以说我们这块儿今天继续拉我们三个同学们

108

我们先回到上节课

109

头两节课我们说了什么V1V2的原理是吧

110

它的原理是什么

111

它的原理是我们这一块儿

112

我们写的所有的指令

113

是不是这是我们写的所有的指令

114

写的写写的所有主见

115

写的所有东西

116

他被编译了什么

117

编译成了什么

118

编成什么

119

编成了render代码是不是

120

对

121

一个指令

122

一个render

123

这个是什么情况

124

这个是V1的情况

125

V2是一个组建一个render了

126

是不是

127

然后编译成了render函数

128

Render函数之后怎么办

129

被包装到里边了

130

包装到威包装了water里边儿是吧

131

包装的water里边儿的

132

然后你再6V的时候

133

6a的时候是不是第一次出错

134

6A1的时候是不是water就会执行

135

Water是不是就会溜一下

136

是不是我们昨天给大家看到的

137

然后WATER6的时候

138

他就会执行什么

139

就会执行里面的under

140

是不是啊

141

执行里边的执行render的时候就会做什么

142

同学们

143

执行render的时候就获取什么

144

就会去获取数据是不是

145

所以说获取数据

146

我们这块儿有一个什么过程

147

监听数据是把数据监听好了之后

148

然后再他获取的时候

149

我们知道是哪个render

150

哪个water

151

哪个关系过来获取数据是吧

152

哪个关系过来获取数据

153

获取的是哪一份数据是吧

154

然后我们做一个什么

155

我们给他

156

做一个什么电话本儿是吧

157

电话本儿记录下来

158

记录什么

159

记录是哪些water

160

来获取我这些数据是

161

我把电话本儿记录下来

162

记录什么

163

记录就是water

164

然后记录到这里面来

165

然后当我要修改数据的时候

166

是不是当我修改数据的时候

167

然后做什么什么你也可是不是也可以监听

168

减轻了之后

169

然后也可以做什么去通知我有电话本儿是吧

170

通知我的电话本怎么打电话通知所有数据是吧

171

通知所有数据

172

所以说这一层

173

这里边我们说了几个点

174

第一个点监听数据是吧

175

监听数据是吧

176

监听数据六点是什么

177

编译模板是吧

178

编译模板是吧

179

然后这中间就是一套什么

180

通过在执行的时候去构建依赖

181

是不是构建依赖

182

然后把依赖

183

做什么

184

做一个分发是吧

185

去执行

186

所以我们这一块儿

187

这一块儿V2里边儿

188

几个步骤

189

第一个

190

运行时第一步是吧

191

第一步首先是编译

192

是不是编一时什么构件模板是吧

193

构建模板

194

构件模板处理什么

195

处理render是不是处理render

196

然后第二步是做什么同学

197

构建模板完了之后

198

第二步做什么

199

处理数据是吧

200

处理数据处理数据到什么

201

处理数据到什么响应式是吧

202

响应式数据最后一步是做什么

203

同学们

204

处理事小意思

205

执行是吧

206

执行就是初始化是吧

207

说实话

208

执行执行的时候就会触发什么

209

触发water是吧

210

是不是触发water对PCh12是吧

211

那么粗暴water的时候就会做什么

212

构建关系是吧

213

构建关系链是吧

214

构建关系链

215

那么构建完关系链之后

216

同学们就做什么

217

用关系链就可以了

218

就就执行就渲染页面了

219

是吧

220

数据返回渲染页面

221

然后渲染页面完了之后

222

当你发生了修改的时候

223

它就根据什么

224

根据关系链是吧

225

根据关系链去做什么去做什么

226

去做修改是吧

227

去修改

228

动漫

229

这个思路是

230

V2的思路是

231

这个思路是

232

V2的思路是

233

V2的思路V3也是从从从抽象到这一层来看

234

他也是这些思路

235

V3也是这一套的东西

236

微商唯一不一样的是几个点

237

第一个点构建模板不一样

238

构件模板不一样

239

第二点是吧

240

V3模板这边意思的不一样是吧边意思

241

编译撕边意思不一样

242

编译时不一样做了什么

243

他做了很多优化是吧

244

因为编译时优化编译时优化优化边意思不一样是吧

245

第二个是什么

246

第二个是吗

247

响应式处理数据不一样处理数据响应式

248

想意思

249

像

250

意思不一样

251

然后构建关系这一块儿其实差不多

252

差不了太多

253

构建关系

254

整个执行的体系其实差不了太多

255

构建关系完了之后

256

分发也其实差不了太多

257

只是说他在里边儿

258

Water变成了什么

259

变成了副作用

260

变成了effect

261

知道吧

262

Water变成了副作用

263

什么叫做副作用

264

就是你会去什么执行页面的过程

265

就会去执行页面的过程

266

Water变成了副作用这么一个概念

267

这个维度不一样了

268

懂不懂

269

那么这个数据

270

这个处理成响应式数据

271

处理完了之后就不是什么这个维度

272

原来是什么observer是吧abra

273

现在变成了什么

274

现在它变成了什么

275

变成了re active

276

就是可响应式数据

277

可监听数据数数据relative

278

Active active是吧

279

它变成这种

280

所以说这个维度

281

这就是什么

282

几个维度不一样而已

283

所以说我们来学习V2到V3转变的过程

284

你把V132学明白了

285

V3其实特别快

286

就包括今天

287

如果你们听着懵逼

288

其实下来之后

289

OA2去明白了

290

V3你们再来看

291

也能够看明白

292

知不知道

293

所以说我们在这个基础上

294

我们来从一个方面

295

一个方面聊

296

首先聊编译时

297

编译时

298

我们V2编译时有什么缺点

299

WE2 : 10

300

我说了什么便意他是把代码是吧

301

把你的微1TEMPLATE是吧

302

V1TEMPLATE a

303

T MT template是吧

304

Chapter编成什么

305

编成什么

306

编成什么

307

编成render是吧

308

那这个过程他是做了什么过程

309

他做了什么

310

做了什么

311

做了ST是吧

312

变成ST

313

变成ST之后

314

然后去做什么同学

315

对

316

边城render里面有什么有位置

317

是不是有位置

318

是不是有位置

319

所以说这一步

320

这一步它的中间是通过什么正则匹配

321

正则

322

正则

323

正则匹配

324

通过正则匹配的方式来编译

325

正则匹配的边方式来编译

326

就会有问题

327

什么问题

328

什么问题

329

同学们

330

来给大家

331

我给大家说一下通过正则匹配有什么问题

332

举个很简单的例子

333

比如说我现在有一个表达式

334

有一个正则匹配的表达式叫什么

335

一灯

336

比如说叫做正则匹配表的是叫伊登是吧

337

一灯

338

然后一到三之间有一个C

339

比如说有这个这个政策表示我要匹配什么呢

340

他是不是可以匹配什么

341

它可以匹配什么类型

342

Y首先可以匹配是吧

343

它可以匹配外

344

然后匹配一个低的情况是吧

345

就是YDC是吧

346

还可以配什么

347

YDDC是吧

348

两个弟弟

349

两个弟弟的情况

350

因为它是一到三个的嘛

351

是吧

352

还可以配什么三个地的情况是吧

353

YDDDC是

354

同学们

355

那这个过程它会造成一个什么过程呢

356

我来给大家说一下这个过程

357

有的同学不知道这块儿

358

它会造成一个什么过程

359

很多人说性能回溯

360

回溯到底有什么性能问题

361

这一块儿我来给大家说一下

362

如果你匹配的字符串是什么

363

如果你现在匹配的字符串是这种

364

YDDDC是吧

365

匹配的这种

366

他会怎么

367

他会有一个贪婪

368

匹配的过程就是他首先

369

首先是外是吧

370

第一个这儿取个外来匹配

371

匹配这儿的这个YY配重了是吧

372

然后这是匹配什么

373

第二步首先是

374

第一步是匹配个外是吧

375

第二步是什么Y

376

然后取什么取弟弟取什么的曲艺是吧

377

地区来匹配

378

他匹配的什么外地是吧

379

我们这儿也能匹配外地

380

刚好也能匹配中

381

然后现在他又来什么外地

382

然后他会继续去

383

他这个时候他会把这个东西去最大化知道吗

384

就是他会先一一尝试了之后

385

然后去尝试二尝试了之后去尝试三是不是它会最大化

386

然后这个时候会去二二

387

这个时候我们这儿也可以配上外的地是吧

388

然后又是外

389

然后就删了是吧

390

然后去山是吧

391

然后YDD是吧

392

然后这个时候再往下它就是什么

393

3C是吧

394

然后AYDDDC这个问题

395

这个没问题

396

这种情况没问题

397

同学们

398

那我现在如果是这种情况呢

399

如果是YY的地呢

400

YDDC呢

401

是不是在前面也是一样的是吧

402

这前面一一模一样

403

但是在这一步的时候

404

他还是会走

405

走完这个之后

406

他还是会走什么

407

还是会走到第三步是吧

408

他还是会走这儿

409

但是这儿的时候他匹配不上了

410

我们这儿什么YDD是吧

411

这后边是个C了

412

所以他这儿就匹配不上了是不是

413

是不是这个C就匹配不上了

414

是不是这叫匹配

415

不上

416

所以说他就回退到了一圈

417

回退到这一步去是吧

418

他要回溯回溯到这一步去是吧

419

回溯到这一步

420

回溯到这一步

421

回到这一步

422

然后继续退出这一步

423

然后到什么去匹配什么

424

匹配什么匹配谁这一步就走完了

425

相当于这个走完了去匹配什么

426

匹配C就是这块儿

427

他匹配上了

428

那这块儿同学这是简单的

429

那我再给大家说一个

430

如果是这个政策匹配表达式

431

如果是这个YYD

432

一到三

433

DDC

434

如果这个人品这个匹配别的事

435

然后他要匹配的内容刚好是外

436

他要匹配内容什么外

437

还是我们这个YDDDC准备来看一下这个过程

438

这个过程你会疯掉首先

439

匹配外是吧

440

首先是匹配外是不是首先匹配外

441

这块儿外匹配上了是吧

442

然后又匹配什么

443

外地是吧

444

外地皮外地这个时候

445

外地

446

地区什么地区一

447

市地区一

448

外地

449

地区是不是

450

那这个时候外地匹配上是不是

451

外地是不是匹配上

452

然后他又做什么同学们

453

是不是他要扩大

454

地球是不是

455

的确

456

是不是外地的

457

是不是也匹配上

458

然后用什么地取三是不是

459

D区三

460

什么外地的也配得上

461

是不是那地区三完了之后

462

是不是这一件就匹配完了

463

他下一句就要匹配这个是吧

464

然后所以说他要娶这个

465

但是我们这个时候

466

我们我们的文字下一个什么YDD

467

C是不是

468

他发现这个C匹配不上

469

那怎么办

470

回溯回溯到这一步

471

回溯到这一步

472

回到这一步是吧

473

所以说就不能取到三

474

是不是

475

咱们这块儿就不能取到三是不是

476

所以说要回溯到这一步

477

回到这一步发现这一步不行

478

还要回溯是吧

479

还要回溯

480

回溯到这一步了是吧

481

他要取二了

482

就会回溯到这一步

483

其实就是八回溯两步的过程

484

知道吧

485

他会回复两部

486

回收两步回到这儿取二

487

取二的时候

488

然后这再来是吧

489

这就是取二的时候

490

Y第二

491

然后在后边取个地

492

这是不是取缔

493

这是三的情况是吧

494

取缔

495

然后取缔取缔

496

这块儿发现YBD

497

曲二是吧

498

这两个匹配的上是吧

499

这前面都匹配上

500

然后后边儿有一个弟弟也匹配上

501

然后

502

曲二可以匹配上

503

然后再来是不是取二完了之后

504

在后边儿有一个是吧

505

又取又匹配到这儿了是吧

506

然后又匹配

507

这块儿

508

讨厌

509

又是C是吧

510

又不行又怎么办

511

又要回宿是吧

512

要回复他

513

要回溯

514

回溯这钱要回宿舍是吧

515

要回到最前面

516

最前面的她还要回过来对

517

回到这儿

518

回到这儿来

519

然后取什么

520

取一取一落取一的时候

521

然后又走这个过程是吧

522

取一

523

然后这边取什么

524

匹配地发现什么

525

取一匹配

526

然后匹配的是吧

527

外地的

528

然后再来

529

这样子外地的

530

外地是吧

531

然后再来IDCIDC明白了吗

532

同学们

533

这个过程了吗

534

看明白这个过程吗

535

他在中间会恢复很多次

536

我这个还是特别简单

537

像这种特别简单的正则匹配老师

538

我们昨天看到的那个

539

我们昨天看到了他那个挣得匹匹配搞得是是不是特别特别复杂

540

这是正则匹配本身就有的机制

541

这是正则匹配本身就有的机制

542

知不知道正则匹配这个算法它本身就有的机子

543

你可以去看一本书

544

就是正则匹配的那本书

545

他本身就是这个实现

546

是吧

547

所以说模板匹配的时候就不能什么不能采用

548

不能采用

549

不能

550

不能采用正则匹配

551

不能采用正则匹配

552

那不能采用正则匹配站采用什么

553

采用状态机

554

状态机什么叫状态机

555

给大家举个例子

556

比如说我们we are a等于一是吧

557

VA等于一

558

他首先他需要把它拆分成什么

559

拆分成不同的字符

560

拆分什么字符

561

拆分成VR

562

还有a

563

还有等号

564

还有一

565

拆分成这种不同的字符

566

然后拆成这种不同的字符之后

567

然后我们又说了什么

568

他会跟他会便利你这里边的每一个字符是吧

569

当你在后边儿

570

VR后边儿一定要接一个什么

571

就是我们上节课上上节课是吧

572

We are后面一定要接什么

573

一个变量是变量下边儿

574

后边儿如果还有等号

575

一定要有个赋值的语句是不是

576

这是不是我们上头两节课说说的

577

所以说这块儿有一个词法匹配

578

还有什么语法匹配

579

把它拆分成

580

这个过程叫做词法匹配

581

死法匹配

582

然后把他构建成什么

583

一棵树的过程

584

ST

585

ST1棵树的过程叫做语法匹配

586

叫做语法匹配

587

那么这个过程

588

同学们执法匹配到语法匹配这个过程

589

首先这个到这个过程

590

这个这个过程到这个过程

591

我们怎么来

592

这个过程就是这个过程

593

这个过程怎么来

594

这个过程我们是不是说了

595

他会根据语法去遍历每一个这个东西是吧

596

然后去构建起来

597

这个有特定的语法

598

特定的环境

599

这个还好

600

去构建一棵树就行

601

那这个呢

602

这个到这一步怎么驱动它其实也就是一个状态

603

什么状态

604

比如说我现在便利这个字符

605

我会遍历每一个字符

606

我现在的状态是什么状态

607

如果现在的状态是吗

608

状态首先是string是吧

609

是个string状态

610

讯状态如我现在遍地第一个字符

611

发现这个东西是个字符串是吧

612

发现一个字符

613

然后我把这个字符我这儿有

614

首先初始化一个什么托肯token

615

你可以把它理解为什么一个字节

616

然后遍历第一个字符示威是吧

617

把这个加到最后边儿是吧

618

然后变成第二个字符是什么

619

还是这个状态

620

这个状态这个状态和上一个状态相等是吧

621

也是字符又加到后边

622

然后下一个状态ARF方向和上一个状态相当于也是字符

623

然后再下来便立下一个

624

发现这个状态是空格是吧

625

这个空格和我们这个是不是就不相等了

626

所以把这变成什么空格是吧

627

Bass

628

是吧

629

编辑空格之后

630

然后这块儿把它处理成一个什么空格是吧

631

空格空格是吧

632

然后再下来继续

633

编辑下一个字符

634

下一个字符又是字符是吧

635

又是字符串

636

那字符又和这个什么space又不是一个同同一个类型

637

所以说这块儿又把它处理什么

638

处理什么处理成我们的什么

639

把状态字为什么spring

640

然后把这个东西又单独a加一个字符

641

然后又变变立下一个

642

他发现下一个什么符号是吧

643

这个状态是符号和上一个状态又不一样是吧

644

符号是符号

645

然后我们这块儿

646

符号是吧

647

符号

648

符号然后怕又变绿

649

发现什么数字是吧

650

数字

651

然后数字是数字翻译数字和这个什么

652

数字和这个东西又不一样是吧

653

数字和上一个符号又不一样

654

所以把把数字又拆分出来是吧

655

数字也拆分出来

656

然后再往下遍历

657

发现结束了是吧

658

结束了结束了之后

659

它拆分成了什么

660

就拆分成了这几种

661

这叫什么状态机

662

有限状态机

663

它通过一个状态不同的扭转

664

这种机器来切换什么

665

来控制它的一个什么拆分

666

明白

667

这个也是一门学问

668

这个是什么

669

编译原理里边儿的

670

这是什么语法编译原理的意义

671

编译原理里边儿专门的一种学问

672

编译原理分为什么

673

分为很多种变异

674

一其中就包含什么状态机的类型和什么正则匹配的过程

675

懂不懂

676

所以说这个东西你们下来之后

677

如果真正的想在前端上面去精进

678

同学们就是前端上面去精进

679

你们一定要去看一下编译原理这本儿

680

这这这个这个类型的书知道吧

681

不明白有啥用

682

不

683

还不明白有啥用

684

你所有的语法

685

你所有的语法

686

你所有的语言都要通过他来匹配成这个东西

687

来匹配成这个东西

688

你这你所谓的语言的底层实现都是这套思想

689

语言的底层实现都是这套思想

690

要把它编译成这个东西

691

这个东西

692

然后根据你这个机器的逻辑

693

然后把它抽成什么字节码这些东西

694

对

695

我刚刚跟你说的就是二和三的对比

696

这个同学说的二二用的是什么

697

正则匹配

698

这上面就是二的原原因知道吗

699

这上面就是二二的原因是什么

700

不断回溯造成算法他的机制特别凌乱是吧

701

还有就是状态

702

还有就是什么

703

他构建出来的数状态不够

704

所以说这块儿就出来了

705

这会儿来了什么V3的变化

706

相当于他的模板变化

707

什么从编译编译的实现

708

什么正则匹配

709

到达什么正常的什么状态机

710

正常的什么状态机机制懂

711

这就是从正则匹配到达了什么正常的状态机机制

712

这是第一个点

713

这是第一个点

714

也正是因为有状态机

715

它就可以了解什么

716

你看把这个拆分的是不是就更加细致

717

他的正则匹配不能把这些东西拆得这么细致

718

知道吧

719

所以说正因为有正则匹配

720

他是不是拆分的更加细致

721

那么它拆分的更加细致之后

722

他就可以去做什么

723

同学们

724

他就可以拿到你这个你我们写的微模板更多的信息

725

什么叫更多信息

726

就可以拿到微模板更多的信息

727

什么叫更多信息

728

我举个很简单例子

729

同学们

730

我们昨天说的有静态节点是吧

731

这个还还还还能理解是不是是不是有静态节点

732

这个还能理解是吧

733

那我现在比如有这种节点

734

静态节点V3

735

你是不是也有时间呢

736

我现在给大家说一下这个东西

737

你看

738

我们现在这是V2是吧

739

这是V2吧

740

我们现在

741

V2去了是这是不是你V1写的那个写的盗墓节点

742

如果你的道路节点

743

这个节点哪去了

744

我这个鼠标哪去了

745

如果你的动节点

746

这个节点是动态节点

747

这个节点是动态节点是不是

748

我每一次对比是不是都要

749

这样对比

750

然后这样对比

751

然后这样对比是吧

752

这这上面是不是静态的

753

就不用对比是

754

这边儿是静态的是不会不会比

755

但是我是不是需要需要每一次我都需要都先比较这个

756

然后再比较这个

757

再到这儿来是吧

758

每一次都要走到这儿来才能拿到这个对比是吧

759

就是我V2的对比节点

760

是不是也需要就是走到好几层才可以这么走进来是不是

761

是不是

762

但是我V3不用

763

V3怎么不用

764

我在编译的时候

765

我是不是就已经知道了

766

这个节点是动态节点

767

我知道你这儿用了我的指令或者模板是吧

768

同学们这一个概念明白吗

769

微山里边儿

770

同学们这个明白

771

这个节这个概念明白吗

772

我在这维C

773

我在编译的时候

774

我就知道这个节点是动态节点

775

是不是因为我用了你的指令

776

或者是匹配的东西

777

那这个时候怎么办

778

你不明白吗

779

我在编译的时候

780

我就知道你用了用了V杠衣服这些东西

781

这个你不清楚吗

782

我在编译的时候

783

我在编译的时候

784

这不是我们编译原理吗

785

我们说了吗

786

编译的时候你不是都知道他每个节点的信息了吗

787

是吧

788

那现在你知道这个节

789

这个节点是动态节点

790

那我能不能把这个节点的修改的方法收集到顶层来

791

修收集到我当前这个主建的顶层来

792

是什么意思

793

什么意思

794

什么意思

795

就是说我之前需要什么

796

我之前需要每一次从这儿到这儿

797

再到这儿来才能修改它是吧

798

我现在能不能直接把这个东西收集到顶层这个对象上面是吧

799

比如我现在这家各属性在顶层这个root节点这加个属性

800

这个属性加加什么

801

就是他只节点所有的动态节点是吧

802

子节点里边所包含的所有动态节点

803

我就把这个东西所有的动态节点全部挪到了顶层

804

是不是是不是

805

是吧

806

是不是我就可以

807

我因为我在编译的时候

808

我是不是就知道这个东西是动态节点

809

是不是我在编译的时候是他是动态技能是吧

810

我们是不是可以通过一些方式把这些东西

811

这些节点在执行的时候

812

执行render的时候

813

把它收集到顶层来

814

是不是

815

至于怎么收集

816

我后面跟你说

817

现在你们不用着急

818

你们要知道这个思维

819

好不好

820

现在我是不是给他打了标记的

821

但它里边儿还有很复杂的逻辑

822

它的运行时也要去做很多处理

823

你说的这种只是威刚一幅这一种情况

824

知道吧

825

他有很多信息他匹配不到的

826

而且V2他不敢做扩展

827

很多扩展它它的模板我给大家说了

828

正则匹配那个呢

829

你也看到那个政策匹配的表达语句

830

那个多复杂

831

你稍微再扩展一下

832

那他就更复杂

833

知道我们在这一步

834

他从通过这种形形式是吧

835

我这块儿是不是他就知道我这个是动态节点是吧

836

我既然知道我这个东西是动态技能

837

在我在执行的

838

我给他我在编译的时候给他打个标签是不是

839

给他构建render的时候

840

他会打个标签

841

在执行的时候

842

我就把这个标签

843

把这个render收集到什么顶层的这儿来

844

收集到顶层这个节点是什么

845

某一个属性上面来

846

比如说他这个顶层节点一个什么属性

847

有个什么属性

848

有一个叫什么

849

有一个叫做动态节点的属性是吧

850

动态子节点的属性

851

把这些点全部收集到这里边儿是吧

852

把这些节点全部收到这里边儿

853

那我下一次我每一次数据发生变更

854

我重新执行整个组件

855

同学们重新执行整个组件

856

我还需要去动的驸马

857

我还需要每一层每一层去东地服吗

858

我是不是不需要了

859

我只需要怎么办

860

我只需要去拿到我这个根节点所有的什么

861

阿根节点

862

所谓什么动态节点拿来执行就行了是不是

863

明白了吗

864

明白这个过程吗

865

同学们

866

明白这个过程吗

867

就是说你看

868

有没有不明白的同学

869

你不要着急嘛

870

是不是按照这个逻辑来说

871

动地府是不是就不需要了

872

是不是

873

你不要着急嘛

874

我要给你讲嘛

875

是按照这么来说

876

到地府是不是不需要了

877

是吧

878

我后边给大家讲这一块儿

879

所以说你们现在先不要着急

880

这个东西的这个这个东西

881

所以说他会直接收集

882

在编译的时候

883

在编译的时候

884

我在编译的时候是吧

885

We在编译的时候直接收集是吧

886

收集就可以

887

收集对应的这边的时候就可以怎么给动态节点打标签是吧

888

打标签

889

那么它构建出来的render

890

他构建出来的render是不是在执行的时候就知道哪个节点是动态节点

891

构建重点就是执行时

892

执行时知道具体的动动态的点是吧

893

然后在什么在在在执行的时候就收集动态节点到顶层是吧

894

顶层的什么

895

顶层的动态节点属性当中

896

存起来

897

储存存储存储是吧

898

存储

899

存储存储起来是吧

900

存储

901

然后去做什么

902

咱们然后在运行的时候是不是直接获取直接

903

直接

904

直接直接获取是吧

905

所以说V3里边儿这儿又多了一个什么纯

906

存什么

907

存动态节点是吧

908

存动态动态节点的事吗

909

内存消耗是吧

910

内存消耗是吧

911

所以说这块儿

912

她又占了内存

913

那怎么办

914

他是不是在性能上是不是大大应用还是不行

915

是不是

916

所以a这块儿也是这么一点

917

这这就是编译是他做的优化

918

那具体其他的一些优化

919

我们后后一会儿再给大家讲更多的优化

920

我们会给大家讲这块儿只是把这个东西给大家抛出来

921

这个概念给大家抛出来

922

然后我们再讲运行时这个阶段

923

运行是这个阶段是吧

924

运行是这个阶段

925

这个阶段

926

这个阶段我们昨天给大家说了

927

你们有多少同学下来看到proxy的

928

有多少同学看proxy的

929

运行时唯一的不一样

930

他就是什么监听数据

931

把数据处理成可监听数据是吧

932

那么可监听数据

933

我们在V2的时候什么重写每一个K是吧

934

是吧

935

重写每一个K

936

重写每一个KD有个坏处是什么

937

每一个K数据是吧

938

要去便利是吧

939

数据需要便利是吧

940

是吧

941

然后嵌套数据是吧

942

嵌套对象的数据需要什么

943

需要递归是不是

944

需要递归遍历是不是是不是需要递归遍历

945

是不是还有什么数组

946

需要重写是吧

947

数据需要重写是吧

948

那么在这个基础之上

949

这是object DeFine property的维维度是吧

950

我们又说了V3用的什么proxy

951

那么proxy他在哪几个维度

952

这个是重写这个什么拦截是吧

953

拦截

954

拦截他并没有什么

955

并没有修改原对象

956

知道吧

957

并没有修改原对象

958

同学们

959

这个你一定要搞明白

960

并没有修改最原始的对象

961

他拦截之后会形成什么

962

生成新对象

963

新的什么新的新的被

964

新的代理对象

965

你拿的是代理之后的代理对象

966

相当于你现在拿到了

967

你原来直接是什么

968

跟跟门跟跟一个小区里面的业主直接送外卖是吧

969

送外卖原来是直接可以送到小区里边是吧

970

现在小区里面加了个防盗门是不是

971

你现在送外卖只能送到门口

972

有保安给你送进去是吧

973

通知他

974

所以说现在是什么

975

完全没有修改原来的数据

976

所以我们来看一下proxy的使用

977

这是我们的Pro

978

这是我们的一份数据

979

同学们这是我们的数据

980

然后这是我们的proxy new proxy proxy它可以拦截你的数据

981

拦截你数据的行为

982

什么行为

983

Get行为

984

还有什么行为

985

Sight的行为是吧

986

Sight行为拦截完了之后

987

同学们拦截了之后

988

我们是不是拦截了之后

989

我们是要做一些什么操作

990

那么拦截完了之后做了什么操作

991

比如说我现在要获取数据

992

获取数据这个行为

993

我们要拦截它获取数据这个行为

994

那么我是不是最后我还是应该给他执行他最后获取数据这个行为

995

是不是

996

明白吗

997

比如说他现在来获取我的数据

998

那我拦截了

999

拦截了我难道不把数据给他吗

1000

是不是还是要把数据给他

1001

那是不是就算拦截我拦截这个行为

1002

只是说我要对她做一层什么封装功能的加强

1003

是啊

1004

但是他最原始获取数据这个动作

1005

我们是不是还需要去给他去获取数据

1006

是不是在这儿有一个什么反射这个说法

1007

反射反射这个说法又是什么

1008

去重新把最拦截的行为重新给执行是吧

1009

拦截的行为重新给执行

1010

所以你看我们这儿写的这个代码是怎么写的

1011

拦截是吧

1012

拦截这个数据

1013

拦截数据之后

1014

然后去做什么

1015

拦截数据的对象K是吧

1016

然后去做什么

1017

去打印

1018

打印了之后

1019

然后去把最原始你要拦截的这个方法要执行的内容

1020

然后重新来执行

1021

然后返回数据

1022

然后去接他是吧

1023

这是这这是这是给他是吧

1024

Sight也是是吧

1025

拦截赛特

1026

然后去做什么最原始的这个处理

1027

那么这里边儿它就没有什么

1028

就没有什么修改我们这个data

1029

它返回的是什么

1030

一个新的这个被拦截之后的这个proxy代理的数据

1031

它并没有修改我们这个里边的这个data

1032

知不知道同学们这个明白吗

1033

这个使用不用说了吧

1034

使用要不清楚了

1035

你们下来之后自己去翻

1036

Reflect

1037

不太明白

1038

其实我跟你说这种这个东西我都不应该跟你讲

1039

这是API知道吗

1040

这都是API

1041

昨天我就给你们说了

1042

让你们去看这个proxy

1043

看proxy难道就没有

1044

它里边就没有reflect嘛

1045

肯定有

1046

所以说你还是没有去认真看知不知道

1047

Reflect是个什么东西

1048

你拦截

1049

比如说我现在要重写这个数据是吧

1050

我要重写这个数据

1051

我要给把这个K

1052

把这个else写成三是吧

1053

那我现在写成三呢

1054

我问你

1055

我这儿拦截了之后

1056

如果没有这个东西

1057

我拦截了之后怎么办

1058

那我写成三这个动作没对数据没有真实的进行什么血

1059

那我是不是需要一个东西来让它真实写这个数据的动作

1060

所以说这是真正去写三这个动作

1061

知道吧

1062

就是在

1063

原生方法里边儿真正去写三的这个动作

1064

知知不知道

1065

就相当于我们把三这个动作拿来写

1066

这是这个过程

1067

你就算就是你就算拦截了之后

1068

你其实还是要做这个事情

1069

只是说你拦截是为了做什么

1070

你自己去做一个加强

1071

但加强还是要去做这些事情是不是

1072

所以说这一步

1073

这一步搞明白了之后

1074

这不搞明白之后

1075

我们下来继续继续

1076

我们来执行一下

1077

你看执行一下执行一下

1078

等一下看一下执行生成出来的这个数据是吧

1079

发现什么

1080

贝塔还是没有没有被拦截是吧

1081

贝塔没有被拦截还是没有proxy

1082

我来看PP

1083

你看P就是被拦截的数据了

1084

看见吗

1085

P就是被拦截的数据了

1086

我们现在来修改p.else获取是吧

1087

我获取

1088

那我获取它是不是能够拿到我获取的这个操作

1089

你看我获取这个操作

1090

但是他最后还是返回了我这个二的数据是吧

1091

那这个二的数据是谁来返回的

1092

是他这个动作真正去执行获取这个操作

1093

返回的懂了吗

1094

这个kiss l z明白了吗

1095

QLZ明白了吗

1096

是不是

1097

那我现在来解他是吧

1098

是的三是吧

1099

他修改了是吧

1100

那修改完了之后

1101

那我如果拦截了之后

1102

如果没有执行这个东西

1103

它的数据就不会真正发生修改

1104

但是对他现在的数据是吧

1105

现在发生了修改是吧

1106

对

1107

所以说他是拦截看到吗

1108

这中间是拦截

1109

拦截数拦截数据就不需要去便利什么

1110

便利每一个K了

1111

是不是

1112

所以说这是一点

1113

那么现在我问大家

1114

数组操作有问题

1115

数组的拦截有问题

1116

数组案件

1117

我们昨天说了数组屁事

1118

Object点地方party数组拦截有问题

1119

没问题是吧

1120

那么数组的改写有问题

1121

我们昨天说了新增的对象

1122

包括他现在所谓的新增是吧

1123

我们现在新增是吧

1124

我们昨天说了

1125

不管是新增的K这些都不行是吧

1126

那我现在新增是吧

1127

你看新增K也行了是吧

1128

现在新增的K是不是也行

1129

是新增的可以也行了是吧

1130

因为他是拦截

1131

是不是拦截所有新增的K是不是都有问题

1132

都都没问题是吧

1133

新增K是不是都没问题是吧

1134

我现在我们来看数组了来看数组

1135

数组数组这个样子是吧

1136

这是数组是吧

1137

数组数组是不是直接拦截

1138

因为我们不需要遍历每一个K了嘛

1139

是吧

1140

他是拦截直接拦截对象吗

1141

是吧

1142

妈的

1143

有两个data

1144

哎呀

1145

买衣服

1146

有他妈两个皮皮吧

1147

子

1148

现在我执行是吧

1149

执行执行完了之后

1150

我们来看data还是DATA1是吧

1151

还是还是数字是吧

1152

然后P1

1153

我们来看P1是吧是吧

1154

他被拦截揍

1155

皮皮

1156

片儿吧

1157

等一下

1158

等

1159

一下

1160

我重新开一个

1161

重新开一个

1162

还有一个应该是因为执行过了

1163

在同一个同一个那个里边儿

1164

这儿是吧

1165

哪儿去了

1166

这儿

1167

这儿是吧

1168

这

1169

咨询一下

1170

Data

1171

It is not DeFined

1172

妈的

1173

重新来

1174

现在可以啦

1175

我就我就不不改名儿了

1176

劈吧劈时间听之后的数据贝塔

1177

贝塔是没有接听之前的数据是吧

1178

我们来看获取数据是吧

1179

获取

1180

没问题是吧

1181

设置

1182

没问题

1183

算

1184

新的新的缩影是吧

1185

比如说三

1186

他没有三是吧

1187

心的缩影

1188

没问题

1189

我们来看设置之后的数据

1190

发现也没问题是吧

1191

设置上了

1192

那现在有问题的是什么同学们

1193

不看弹幕什么

1194

看不太能

1195

现在有问题了是吧

1196

同学们

1197

我们昨天说了数组是连续内存

1198

对是不是只要数组移动

1199

是不是它都会有这个问题

1200

是它这个东西照样也是有问题的

1201

是不是只要数组移动

1202

有问题吃饭了吗

1203

只要速度移动

1204

它就会有问题

1205

是不是

1206

明白吗

1207

我们昨天说了你坚定的数组

1208

数组的索引

1209

他现在是拿移动

1210

你是拿所有索引

1211

你代理也是拿代理的

1212

所代理的整个数据数据对象

1213

他也是所有索引

1214

是不是啊

1215

是不是

1216

明白吗

1217

懂吗

1218

不懂

1219

不懂吗

1220

你这个你这不懂吗

1221

昨天我讲的那个

1222

昨天我讲的那个懂不懂速度连续内存这块懂不懂

1223

你懂不懂

1224

那今天这个有一模一模一样

1225

一模一样啊

1226

语速有点快

1227

那你懂得跟语速有点快有什么关系

1228

没关系

1229

知道吧

1230

我们要讲的东西还很多

1231

因为树长不是长度

1232

是因为她的

1233

她的位移

1234

它会变成它的

1235

它的索引发生变化

1236

我是不是鉴定的所有数据的给他

1237

我现在这是一这是二

1238

这是三是吧

1239

我坚定的所有数据给他

1240

那我现在我给他调用一个方法

1241

比如说调用什么

1242

调用排序这个方法

1243

或者说反转这个方法

1244

我把这个三挪到这儿来

1245

是不是也需要先去get一下这个三

1246

Get了这个三之后

1247

还需要get一下这个仪式

1248

然后两边重新set

1249

把这个1SET到这儿

1250

把这个3SET到这儿是吧

1251

这中间是不是也触发了get和set

1252

是不是就算没有新增

1253

所以是不是

1254

明白了吗

1255

那对

1256

明白了吧

1257

所以我们这块儿就算是没有用

1258

这个就是receive receive就是正常的这个

1259

照样看看什么

1260

他照样会发生这些

1261

这所有的这个流程懂了吧

1262

所以说素组还是有问题

1263

速组还是有什么问题

1264

数组索引

1265

所以

1266

数组移动

1267

还是有问题是吧

1268

有问题

1269

所以说他这块儿还是数重写的

1270

数组的原型重写方法一模一样

1271

重写那些方法

1272

今天就重写方法这个过程就不讲了一会儿给大家稍微瞟一眼

1273

昨天给大家讲的

1274

瞟一眼V3的创业方法

1275

大致差不多

1276

还是有问题

1277

重写所有的方法

1278

知道吧

1279

重启所有数字圆形的方法

1280

那么这就是索引上面的问题

1281

那么现在我们再来

1282

再来

1283

再来什么

1284

再来看是吧

1285

另一个上面的问题什么问题

1286

嵌套数据的问题

1287

嵌套数据的问题

1288

妈的

1289

又要重新来了

1290

嵌套数据

1291

看一下

1292

执行

1293

同学

1294

我问你

1295

嵌套数据明白什么意思吗

1296

你看这是我的嵌套数据是吧

1297

我签了个这个

1298

然后这儿又签了这个八二又签了个对象

1299

可以看到吗

1300

键吗

1301

那我问你

1302

我现在把这个数据做了一个带带塔是吧

1303

我返回了个屁

1304

我现在访问

1305

我现在访问这个东西

1306

访问这个东西它会触发get吗

1307

会发

1308

会出发sight吗

1309

我先说会话ST吗

1310

会出话费的吗

1311

同学们会出CD吗

1312

会不会

1313

小同学

1314

会刷色的马

1315

会出

1316

因为我这儿改了一下

1317

先不要着急

1318

应该看没改之前的

1319

改了之后的东西

1320

那就是我做了兼容了

1321

我做了修改了

1322

重新来

1323

我们如果按照他正常的逻辑

1324

你看直接获取

1325

获取数据

1326

然后去调用是吧

1327

然后返回没有我修改这个这个过程

1328

你们先不用管修修怎么修改的

1329

那么我这块儿给大家看一下

1330

妈的屁

1331

当当烦

1332

什么鬼

1333

没有自信

1334

看一下出发了吗

1335

出发了吗

1336

没有触发set a

1337

他只触发了给它

1338

触发了哪个给他

1339

触发了吧

1340

二因为它获取了这个八二

1341

你是P点八二是吧

1342

所以说它会先获取八二

1343

但是点K的时候

1344

你修改K的时候

1345

他就没有处罚可以了吗

1346

所以说

1347

Proxy

1348

它有个问题是什么

1349

他只会带你一层纸袋里

1350

什么

1351

纸袋里一层数据

1352

明白了吗

1353

明白了吗

1354

同学们不明白

1355

纸袋里一层数据

1356

不明白吗

1357

明白吧

1358

是不是

1359

毛岸的

1360

杀了吧

1361

所以说只带你一层数据

1362

养个老婆多好

1363

赢个老婆多好

1364

是不是五舅

1365

找个媳妇儿娶个老婆不不不好吗

1366

我老婆

1367

老婆明天回来

1368

那就把猫杀了吧

1369

继续啊

1370

实在老婆没老

1371

老婆太凶了

1372

就生个孩子

1373

生个孩子挺有意思

1374

天天完孩子

1375

也好玩也好玩儿是吧

1376

只要等你老了之后

1377

他不会把你的滚

1378

老婆没了

1379

那你这那把老婆杀了吧

1380

哈哈哈

1381

开玩笑啊

1382

我们继续

1383

就想换个名字

1384

说我就说你为什么动不动就会说个零

1385

因为你天天就天天天天天天在想啥

1386

继续啊

1387

他只能带你一层数据

1388

是他现在是不是只能带你一层数据同学们

1389

是啊

1390

现在明白了吗

1391

我现在你看我现在就包括我现在这个样子

1392

我现在给他修改我这个这个这个什么这个数组是吧

1393

我修改数组这个数组A1是吧

1394

ALE我这样子是不是可以访问到

1395

那我修改它或访问修改他修改他怎么修改它的值是吧

1396

修改成这个样子

1397

你说现在会触发这个里边儿数组里面这个sight吗

1398

触发不到了

1399

是不是不能触发这个set了

1400

看到吗

1401

不能触发这个sight了

1402

他只能够监听这一层最外边儿这一层据每一个K的

1403

如果你这个东西它又是一个新数据了

1404

同学们

1405

这是不是又是一个新的引用了

1406

是不是又是一个新的引用了

1407

这是不是又是一个新的引用了

1408

它拦截拦截的只是你当前这个地地址

1409

知道吧

1410

拦截这个东西只是去拦截你当前这个引用的地址

1411

你下一个引用的地址他是不会被拦截的

1412

明白这个过程吗同学们

1413

明白吗

1414

那怎么处理怎么处理

1415

怎么处理递归吗递归吗

1416

递归吗

1417

能递归吗

1418

不用递归

1419

我这儿这样一下

1420

这个用递归吗

1421

同学们

1422

我这个是递归吗

1423

我不用递归

1424

你看我现在现在这样一下就可以了

1425

我现在就可以了是

1426

现在是不是就出来了

1427

对

1428

对

1429

返回一个新的

1430

他什么时候返回新的

1431

我问你

1432

他什么时候返回新的

1433

他在你get的时候才去返回新的

1434

你没有get的时候还需要返回新的吗

1435

你看同学们我们这个过程

1436

你要看我这个过程

1437

我P我先P底儿era

1438

这个时候我如果不执行PDL

1439

我这个PDL他就一直不会就不会去代理他是吧

1440

我如果不不获取这个东西

1441

是不是就一直一直不会去带领他

1442

是不是同学明白这个过程嘛

1443

我一直不去获取他

1444

他就不知道我这个get具体要get的是什么

1445

因为我get了之后再返回的结果是吧

1446

我如果不去不去获取他

1447

我获取的是这些

1448

他一直就不知道我这儿反馈的是什么内容是吧

1449

是吧

1450

但是我当我去需要get钬使用它的时候

1451

我这样去返回

1452

你看它就会返回一个代理的数据可以了吗

1453

因为我这个时候获取的时候

1454

他才会去代理

1455

然后再去拿什么再去做什么再去修改就没问题了是吧

1456

是不是再去修改是不是

1457

再去是不是就没问题了是吧

1458

那这个过程是什么过程

1459

你看他是做了一个什么

1460

在你获取的时候

1461

在你真正使用的时候

1462

他能够拦截到你要使用的这个值

1463

下一个字是什么是吧

1464

然后他去做什么拦截

1465

懂了这个过程吗

1466

没懂得扣零

1467

懂的扣一

1468

是吧

1469

这块做了一个什么懒代理

1470

知道吧

1471

这叫懒代理

1472

在你使用的时候

1473

在你在使用时

1474

在

1475

获取

1476

明白了吗

1477

所以说他需要一开始去递归吗

1478

需要一开始去递归吗

1479

同学们需要吗

1480

需要吗

1481

是不需要

1482

是啊

1483

不需要一开始就递归了

1484

是不是就不需要去递归了

1485

是不是他只需要去便利一层

1486

把这个数据的顶层数据给拦截了就行

1487

因为你访问数据的时候

1488

一定是一层一层一层去访问内部的数据

1489

是不是

1490

明白了吧明白了吧

1491

所以这两个点搞完了之后

1492

我们就继续了

1493

每一次性

1494

不用啊

1495

你如果已经你如你它这里边肯定还要做出去做再做处理

1496

你返回的值

1497

如果已经是代理对象了

1498

他这个我那我这儿只是给大家写这个使用例子

1499

它这里边会维护你这里边儿如果这个值

1500

我这再加个标识背是吧

1501

代理了之后

1502

我在这儿给他加一个标识

1503

被你代理之后的值给他加一个加一个

1504

比如说什么加一个加一个标识叫做什么

1505

叫做已经处理之后的标识

1506

是吧

1507

对啊

1508

不用重写每一个K

1509

不用代理

1510

可以拦截

1511

是吧

1512

继续

1513

我们继续要到V3里边儿了

1514

我们现在现在把这些东西讲完了

1515

我们就开始源码里边儿的部分了

1516

源码里边的部分了

1517

V3里面很多没用过

1518

没用过无所谓

1519

没用

1520

我们来看一下它的例子

1521

这是V3的源码

1522

这是V3的源码

1523

V3的源码

1524

V3的源码还是那句话

1525

我们来看目录结构

1526

最核心的几个目录结构

1527

同学们

1528

这上面不用说了吧

1529

这边儿也不用说了

1530

这是打包的一些东西

1531

是打包的一些东西是吧

1532

这边是一些政策

1533

这是什么

1534

也也是一些打包的一些开发的一些东西

1535

是不是

1536

那么最核心的什么在package里面

1537

他用了什么打包

1538

他这个东西用了什么

1539

用了什么

1540

用了什么什么方式

1541

他这个用什么方式

1542

用了melrose是吧

1543

用rap是吧

1544

是吧

1545

Wait wait wait啊

1546

他是用什么

1547

用了mel rap这种东西

1548

Mill I这个是什么

1549

就是相当于把不同的功能分到不同的PK几下

1550

不同的包

1551

每一个功能包都可以单独去发

1552

不明白吗

1553

知道这个机智机智吗

1554

知道这个机制吗

1555

前面你们没学这个机子吗

1556

Mineral

1557

没学这个句子吗

1558

我给你稍稍微稍微说一下

1559

稍微歇

1560

一个打包工具叫什么

1561

累吧

1562

这个累啦

1563

Kiss

1564

JS

1565

那个那个叫啥玩意儿

1566

这个这对对对

1567

对

1568

还是有同学知道是吧

1569

这个东西他这个东西做什么

1570

他可以把你一个项目里边儿打多个软件包出来

1571

什么意思呢

1572

就是说我这里边所有的东西

1573

我可以通过这个功能来管理

1574

按理说按理说是吧

1575

按理说我这一刻是不是可以单独发一个NPM包

1576

是一个单独的功能

1577

你看这个链接是不是这个又是一个单独的PK点

1578

接着又是一个单独的APP钱包

1579

是不是这边又是一个在下边每这个pic下边每一个文件夹

1580

每一个文件夹都是一个单独可以去发布的一个什么PK

1581

KK的包知道吧

1582

它的功能都是独立的明白吗

1583

这个你明白吗

1584

它的功能都是独立的

1585

那么这个那说明你们这个学习不认真

1586

那么它的文件夹结构就是通过什么

1587

通过这个东西结实了这个这个玩意儿

1588

这个玩意儿它可以多包管理工具

1589

多包管理工具来管理什么

1590

来管理这种这种多个包

1591

来管理多个包

1592

每一个包它像它的结构一定是有一个PK及文件夹

1593

每个文件夹下面有多个目录

1594

有多个文件

1595

每个文件里边儿都有个陪练节省

1596

每一个文件都有个链接

1597

同学们

1598

都有个会剪辑审了吗

1599

然后每个文件都可以单独发布

1600

他们每一个功能都是独立的

1601

懂了吧

1602

所以说这就是

1603

没了瑞普的打包机子

1604

然后继续

1605

然后回到这边儿

1606

回到这里边儿

1607

什么唯一唯一的用法

1608

唯一的用法呢

1609

其实怎么说呢

1610

嗯

1611

没有太大的区别

1612

没有太大的区别

1613

你看

1614

它唯一的区别就是什么

1615

我先给大家说一下这个这个这个这个区这个使用吧

1616

你看这是我们的模板是吧

1617

这是我们的模板是吧

1618

这是我们的模板

1619

然后这些模板拿过来呢

1620

你做什么

1621

这些模板拿过来做什么

1622

模板会变成render是不是

1623

变成render

1624

然后这是里边儿

1625

这是你里边儿写的逻辑

1626

你现在写的所有逻辑要写在哪边呢

1627

要写在这个setup里边儿

1628

要写在这个setup里边的同学们知道吗

1629

你们所有的逻辑要写在一个setup里边

1630

Setup里边你可以通过一个什么

1631

通过一些指令

1632

比如riff

1633

或者说active

1634

把它处理什么

1635

响应式数据

1636

处理的响应式数据之后把数据从这儿返回回去

1637

把这些详细数据返回去

1638

返回去的数据在这里面就可以使用

1639

方法数据都可以在这儿使用

1640

知道吧

1641

你的方法数数据都可以在这使用

1642

当然他照样支持什么

1643

照样支持你之前的那种V2的写法

1644

知不知道照样支持你的之前的那个什么V2的写法

1645

就是MR这些东西

1646

照样支持这些写法

1647

懂不懂

1648

明白明白了

1649

相当于他现在支持

1650

一个是用之前的写法

1651

一个是类似什么V的那个什么V的什么的

1652

是哪一种写法是吧

1653

他现在单独拎一个hooks进来

1654

然后写hooks这种写法

1655

知道吧

1656

所以这种功能

1657

那么现在我们来聊微微核心的东西

1658

你们下周要去把录播课里边那些V3的用法这些东西要给搞明白

1659

我不可能给你们讲用法了是吧

1660

这块要给大家讲一下核心的东西

1661

最核心的是这个东西

1662

我们说了

1663

V3里边儿

1664

我微你们你们的VI就两个维度

1665

第一个维度是什么

1666

模板编译是吧

1667

把模板编译什么

1668

Render边城render之后是吧

1669

去做什么

1670

收集依赖是吧

1671

收集依赖是吧

1672

收集完依赖然后去做什么

1673

然后去去去去执行是吧

1674

执行

1675

执行执行完了之后

1676

数据改变的时候

1677

什么发布是吧

1678

发布那么这一块儿同学们这个搜集来的东西要怎么来收集

1679

怎么收集

1680

我们之前是什么是什么来维护的

1681

是地铺收集了是吧

1682

地铺收集了是吧

1683

是不是

1684

你自己搜吧

1685

自己搜吧

1686

是吧

1687

的谱里边维护的是不是

1688

那么现在的普维护搜集什么water water

1689

对

1690

收集water

1691

那么现在我们搜集什么

1692

换一个东西是吧

1693

收集water water之前怎么收集

1694

他需要给一个call back是吧

1695

你的call back轨道render是吧

1696

把你的render给到call back里边儿是怎么是这个样子

1697

然后这是个V1实力是吧

1698

是吧

1699

哪个威力实力

1700

然后还有它的render是吧

1701

是这个样子

1702

这是我们昨天给大家讲的是吧

1703

那么现在他换一种收集方式

1704

他怎么收集出来给大家看一下

1705

换一种收集方式

1706

嗯

1707

我们来看这

1708

嗯

1709

我们之前是不是收集了

1710

处理数据

1711

先把数据处理详细数据

1712

我们之前处理的详细数据是通过什么来处理的

1713

Ador现在是通过什么来处理

1714

Relative看到吗

1715

这是我声明一个数据

1716

这是re active

1717

这是软V里边导出来的两个方法

1718

We里边倒出来两个方法

1719

我首先声明一个

1720

声明一份数据是吧

1721

声明一份什么数据

1722

证明一份这个数据是原始数据

1723

然后把这份原始数据通过一个relative把它处理成什么响应式数据

1724

这个响应数据都是通过什么

1725

通过proxy被处理了

1726

被处理了

1727

然后去做一个什么同学们

1728

去做一个或使用这个数据

1729

你们在使用数据的时候

1730

平时就是render里面使用数据了

1731

是不是我们现在不用render

1732

我们就是什么

1733

就是正常的去打印数据是吧

1734

就是就是不是就算使用数据了是吧

1735

你们平时使用数据是通过render是吧

1736

我们的模板编译

1737

我们现在简单一点

1738

通过获取是吧

1739

通过什么呢

1740

通过那个什么

1741

通过正常的获取数据来使用

1742

然后打印是来使用数据

1743

这个样子来使用数据

1744

那他什么时候来执行这个N是什么时候执行N是不是就是什么时候来使用数据了

1745

是吧

1746

是吧

1747

执行a分的时候是不是就执行render了

1748

执行a分的时候是不是就执行render是吧

1749

执行render是执行M的

1750

是不是就执行render

1751

咱们这个明白吗

1752

执行N的时候是不是执行的呢

1753

那么我们怎么来处理他一下

1754

我们通过这个effect

1755

它会导出一个什么effect这个玩意儿

1756

Effect这玩意儿他把N包装一下

1757

把这个F的回调函数包装一下

1758

包装一下包装完了就没了

1759

你看这下边儿全是我的注册

1760

包装完了他就没了

1761

看到吗

1762

看见了吗

1763

包装完了之后就没了

1764

那说明只要我打印这个东西是不是就执行了一次是吧

1765

是啊

1766

所以我们来看一下

1767

来看一下刷新一下

1768

是不是

1769

你看他打印了一次是不是打印而且获取了数据是不是说明什么

1770

说明这个F是不是就直接直接你只要用这个effect包这个包你这个N是不是就会执行一次所以说是不是

1771

所以说effect这为三的赶紧了

1772

我就得赶紧了

1773

你废他

1774

会包裹包裹

1775

使用的是吧

1776

使用响应式

1777

数据的函数是吧

1778

他会做什么

1779

执行一次是不是

1780

什么是执行一次

1781

执行一次默认

1782

你只要包了他是不是就会执行一次

1783

不负责

1784

也字行吗

1785

什么意思

1786

不负责

1787

他也自信

1788

我现在没有复制

1789

我也没有复制

1790

我哪里复制

1791

我这儿获取

1792

我只是获取

1793

我获取这个东西

1794

我没有赋值

1795

对啊

1796

这是获取数据

1797

我没有复制

1798

我哪儿复制的

1799

我哪儿都没复制

1800

我这是获取数据

1801

你这个什么情况

1802

看你看明白了吗

1803

你说他这里边儿

1804

你说这个

1805

这个东西没区别

1806

这个东西还有什么区别吗

1807

这个我给你我的天

1808

这个有什么区别吗

1809

我副职这个东西没有什么关系

1810

这个你负值

1811

这个负值能有什么

1812

能有什么关系吗

1813

这个肯定没有什么关系

1814

我复制这个变量有什么关系吗

1815

这是它的返回值

1816

那返回值肯定不影响

1817

所以你看这一步它会有一个什么执行是吧

1818

执行包裹的什么

1819

包裹的函数

1820

是吧

1821

包裹的函数包裹的函数具有什么使用

1822

这儿有响应式

1823

这是是吧

1824

想一次数据

1825

那么同学们这块儿我们要要到这里边儿了

1826

这里边儿了是吧

1827

我现在是不是第一次执行

1828

那这个过程是不是就类似于我们的什么render

1829

是不是

1830

是不是就类似于我们的

1831

你只要用render

1832

只要把用effect把render包裹一下

1833

他是不是就会执行一次是吧

1834

是不是就会执行一次

1835

同学们

1836

执行一次

1837

是不是就会执行一次页面是不是就渲染出来

1838

是不是

1839

明白吧

1840

那现在我要修改这个数据了

1841

我要修改这个数据

1842

修改这个数据

1843

按理说修改数据

1844

我这个F是不是也要重新执行一次

1845

我们再来看修改一次

1846

Counter

1847

这样修改是啥呀应该是谁

1848

详细数据

1849

Data counter

1850

是吧

1851

等于什么

1852

是不是执行了一次

1853

是不是打印了一次是吧是吧

1854

说明什么

1855

修改数据

1856

修改数据的时候

1857

修改数据的时候

1858

也会执行是什么render是不是

1859

那他这中这中间就是什么是吧

1860

那他修改数据的时候

1861

他怎么知道

1862

他怎么知道

1863

他怎么知道我哪个数据

1864

我哪个哪个函数使用了我这个东西呢

1865

使用我这个数据呢

1866

是吧

1867

他是什么时候知道我这个东西呢

1868

是不是就在effect里边儿

1869

是不是在APP里边儿

1870

Effect里边怎么去知道的同学们是不是就是我们昨天那个流程构建构建依赖

1871

是不是构建依赖是

1872

它这里边是怎么构建依赖的

1873

是你执行一份给他拿过来

1874

你的effect里边儿是不是你的ex函数里边儿是吧

1875

你的ex函数里边儿

1876

是不是有个N是吧

1877

这是我们的分是吧

1878

你执行en的时候是吧

1879

兄弟们

1880

你执行FM

1881

你拿过来

1882

我们是不是首先会执行一次FN

1883

你执行L的

1884

L的时候

1885

我们这里边是不是有个proxy是吧

1886

是不是

1887

这里边是不是我们先把这里边儿先先给他net是吧

1888

Net effect net text ma net a net TE

1889

赖特

1890

Net a target是

1891

8X等于什么

1892

Text是8X

1893

然后在这里边儿把这个net是吧

1894

FN是吧

1895

给到什么

1896

给到我们这个上面是吧

1897

把这个NXTRA给了N上面所记录下来

1898

记录一下当前正是谁正在执行这个东西是吧

1899

对同学这个明白吗

1900

这是我现在N的函数的内部的函数的一个大体逻辑

1901

我给大家先说一下

1902

你看明白吗

1903

看着我跟着我这个走

1904

他是不是一定要构建这个map

1905

因为一定要构建依赖我下一次才能知道我执行我什么时候执行这个东西是吧

1906

这个跟我们昨天讲的这个PPT是不是一模一样

1907

没有什么区别是不是

1908

讲这个PPT是没有什么区别

1909

我执行第一次的时候

1910

是不是就需要去什么去获取通知

1911

谁使用了这个东西是不

1912

谁使用了我这个water

1913

现在谁来使用了我这个a是吧

1914

然后把它收集到依赖里面

1915

是不是同学们是这个过程

1916

我们这块儿是不是也是这个过程

1917

明白这个过程

1918

你们给我一个

1919

Answer

1920

你不管构建什么

1921

它就是构建一个依赖

1922

你不用管这个依赖是什么东西

1923

好不好

1924

给我一个answer

1925

我现在给了你们一个question

1926

我需要你们给我一个answer

1927

好吧

1928

明白吧

1929

好

1930

那这块儿他是怎么一个大体的逻辑同学们看着

1931

我执行N

1932

这个N是吧

1933

这就是一个分是吧

1934

我直行他走这块儿我把它拿来这儿执行是吧

1935

这也执行

1936

那执行他的手

1937

同学们的proxy

1938

What proxy

1939

把这个proxy复制过来

1940

我的proxy是吧

1941

这是我的proxy是不是

1942

这是我的proxy是吧

1943

我的proxy我监听什么

1944

我监听的这个数据是吧

1945

我的数据

1946

我监听的这个数据

1947

然后你这个数据的K我也知道什么是吧

1948

我在这块儿你在获取

1949

你让我使用

1950

你在使用我这个分的时候

1951

你再使用我这个分的时候是吧

1952

同学们你在使用我这个分的时候

1953

A分里边是不是就会执行的吗

1954

A是不是就会执行什么

1955

执行哪个东西

1956

是不是就会执行这个

1957

执行就执行这个玩意儿是吧

1958

这里边内部是就会执行这个东西

1959

是不是就会执行这个玩意儿

1960

这个玩意儿的时候

1961

我的数据是不是已经被监听了

1962

是不是他在里边是不是会拿会就会触发get是八处发给他的时候

1963

我刚好刚好刚好现在是吧

1964

同学们

1965

我出发给他的时候

1966

我出发给他的时候

1967

我出发get的时候

1968

你看我这儿执行FNFN获取数据

1969

获取数据的时候

1970

出发给出get的时候

1971

我这个tag是不是刚好也是分是吧

1972

是吧

1973

我这个tag是不是刚好也是一分是吧

1974

是的

1975

明白吗

1976

明白吗

1977

就这么难吗

1978

你们这儿就这么难吗

1979

你们你们给我个反馈就这么难吗

1980

是吧

1981

我在这一步执行到这儿的时候

1982

我这个是不是target

1983

是不是就刚好是FM

1984

那我是不是就能够构建这个关系是吧

1985

就把这个东西是不是就拿过来了

1986

你非给他点什么点什么

1987

这个map的方法叫啥

1988

New net a等于谬吗

1989

A点

1990

是是a的还是什么

1991

Sight

1992

Sight sight吗

1993

Sight吗

1994

赛特

1995

赛特

1996

Set几个K威威

1997

你看我这是不是就可以set了

1998

赛特是吧

1999

是吧

2000

Sight什么set一个K是吧

2001

是吧

2002

我是不是就可以set一个K

2003

然后再set一个什么

2004

在set一个N

2005

是一个N进来不就行了吗

2006

我这个不是构建好了

2007

是不是我是我这个吗

2008

不是就建好了咱们

2009

明白吗

2010

我在这儿使用的时候

2011

我是不是就直接到那个effect里边去get一下

2012

Get一下这个玩意儿是不是

2013

Get一下这个K是它它就会返回我所有的

2014

返回我当前这个什么

2015

返回我这个东西是吧

2016

如果我在这儿

2017

我我在这块儿

2018

我是不是可以在这样来一下

2019

我这块儿如果不是还可以把它处理什么

2020

处理成数组是吧

2021

同学们

2022

我在这块儿set的时候

2023

我可以是不是可以set数组什么意思

2024

Let你看我在这块儿let

2025

比如说我声明一个什么声明一个

2026

我首先去get一下是吧

2027

先去get一下这个K

2028

嗯

2029

Dip是吧

2030

Dip get一下这个K给他

2031

我判断一下是否已经有了这个K是吧

2032

是否这个K已经有对应的依赖了

2033

然后如果没有这个依赖

2034

没有依赖没有这个没有依赖

2035

没有没有依赖

2036

并且呢

2037

那怎么办呢

2038

那么就声明一个什么声明

2039

把这个东西如果没有

2040

如果没有

2041

如果这个东西是俺的饭是吧

2042

如果这个东西是案例

2043

就是说我们这一步是什么意思

2044

我判断之前是否已经有这个map啦

2045

就是就是我这块儿是不是这个东西还可以用其就是我这儿这个N是不是还可以有其他数据来使用是吧

2046

我这个K

2047

我这个K是不是可以有多个N来使用

2048

我这打印的是这个

2049

我现在打印换一个是吧

2050

我是不是就两个M的

2051

我是不是可能这一个可以有多个课外课

2052

那么这个K是不是就可能要有多个call back来收集

2053

明白吗

2054

所以我这块儿就是一个什么过程什么过程

2055

你看我这块儿拿到我这个地方

2056

同学们看见了吗

2057

我拿这个dip如果没有

2058

如果都没有怎么办

2059

我把dip去构建一个sight

2060

Dip去构建一个六

2061

Sight是构建一个

2062

是吧键

2063

一个是构建一个空的赛特

2064

然后如果有的话

2065

如果有如果有

2066

如果如果有了是吧

2067

如果有

2068

如果有LSE

2069

如果有的话判断一下

2070

如果已经有店铺了

2071

那判断一下这个的是否已经有了什么

2072

是否已经有了什么

2073

是否已经有了我当前这个N了是吧

2074

是不是已经有了我当前这个target了

2075

当前我正在执行的这个N了是吧

2076

因为我可能第一次获取数据

2077

已经把这个CGO关系已经构建好了

2078

是不是这块儿第一次获取数据的时候已经构建好关系了

2079

那么就不会再走

2080

就不会再走这块儿是吧

2081

FFX

2082

如果已经有了是吧

2083

这块儿什么意思

2084

我想一下

2085

如果已经有了这个东西了

2086

就是我第一次已经构建好了数据了

2087

是吧

2088

我可能已经构建好数据了

2089

对我就不需要再再再再往这边走了是吧

2090

是吧

2091

所以说这里边还要判断她没有这个数据明白吗

2092

同学们明白这个过程吗

2093

我这会儿只是构建了一个依赖

2094

多个集合

2095

对是否是第一次

2096

对这块儿是判断是第一次

2097

当前这个东西是第一次

2098

我当前这个玩艺儿是否是第一次是吧

2099

然后你看我在这一步

2100

如果这块儿这个样子是吧

2101

那怎么办

2102

然后我在这一步

2103

这一步

2104

然后再去做什么什么

2105

如果这儿有了

2106

如果没有没有什么

2107

我去构建一个依赖是吧

2108

构建依赖把这个东西去做一个什么呢

2109

我们把这块儿去做一个什么

2110

如果没有

2111

我才把他的车去APP是吧

2112

Deep at是吧

2113

什么

2114

地不

2115

Sight是a的吧

2116

Sight是a的吗

2117

测试a的是吧是吧

2118

然后去APP什么APP

2119

我这个他给他是吧

2120

我这个他是不是如果没有我才去的这个

2121

他是这块应该是应该是这么来这么来这么来这么来来

2122

不应该LL是吧

2123

这么来

2124

然后这里边儿的tag之后

2125

然后我们再我再把这个dip是吧

2126

我有多个屁是吧

2127

然后再把这个这个关系是吧

2128

构建好怎么维护起来

2129

那么下一次当我数据发生了修改的时候

2130

同学们当我这个数据发生了修改的时候

2131

我是不是就可以去了

2132

他所谓的PLA net map是不是

2133

获取所有的这个K的所有APP是吧

2134

然后去做什么

2135

去做什么

2136

修改的时候

2137

然后去做什么

2138

重新去触发什么

2139

同学们

2140

重新出发什么

2141

重新出发

2142

我这个什么他的

2143

触发他的依赖是吧

2144

点骂点骂

2145

然后a是map吗

2146

他应该是负178

2147

他拿到的是塞塔是吧

2148

拿到的是赛特

2149

然后佛一起

2150

拿到所有的是吧

2151

拿到所有的分是吧

2152

拿到所有的分

2153

是吧

2154

拿了所有的分

2155

去执行就行了是吧

2156

拿了所有的分去执行就行了是吧

2157

这个过程就这个样子是吧

2158

就是这个样子

2159

我这个东西其实拿过来应该都会运行

2160

但是有一些其他的小的问题

2161

就是什么对战维护

2162

这些东西有些小的问题

2163

但是这个东西不影响咱们

2164

我这个东西完全就这个这个依赖构建依赖这个关系

2165

就完全就就就可以用用了

2166

能明白吗

2167

这个东西完全就可以用了

2168

嗯

2169

Sister

2170

对呀

2171

所以我判断

2172

我就没必要再重新去加了吗

2173

你直接去重

2174

但是也是实话

2175

我就没必要去直接去家了吗

2176

看一下有没有错

2177

Effect has already

2178

哪儿都行

2179

我这个data还没放进来

2180

怎么我的data还没放进来

2181

我的分也还没实名

2182

我的分也还没声明

2183

一分也没收米

2184

然后我的

2185

分声明在这边

2186

然后我的data也还没有

2187

我的data也还没有

2188

也还没有生命

2189

的data

2190

也还没有声明

2191

然后还有一个就是我的effect

2192

我哪儿effect

2193

我生病了

2194

我当前这个东西

2195

这个东西已经执行了

2196

执行过effect

2197

已经有一个ID了

2198

咱们现在你看现在我的我来我的执行一下我当前的那个effect是吧

2199

执行一下我当前的FA的X应该是什么样子

2200

If是这个样子是吧

2201

Effect是这个样子

2202

Statue is not stated stated在哪儿

2203

Statue

2204

这个studio

2205

我想一下

2206

我这妈的

2207

我这稍微有一点点

2208

就是稍微这个这个这个前后关系要处理一下他们

2209

当然那里边儿框架里面就做了很多很多兼容的处理了

2210

像我这个就很简单了

2211

是不是像我这个就很简单了是吧

2212

我这个简单的原因是什么

2213

是因为要给大家用嘛

2214

是吧

2215

看到吗

2216

直接执行一次这个事儿

2217

然后我们来修改一下

2218

Counter等于

2219

A分扣百的恩

2220

F n is not function

2221

但他这儿也执行了一次是吧

2222

打印了一下

2223

CC

2224

然后a分没有拿到

2225

是我这个map不对吗

2226

我拿到这个map不对吗

2227

我这个没有吗

2228

Ti

2229

我的kiss counter

2230

那么我看一下

2231

等一下

2232

我看一下我这个关系effect buff

2233

Counter

2234

没问题

2235

赛特

2236

没问题

2237

Call back

2238

有问题

2239

我存的是

2240

我存的是

2241

我这set的是deep

2242

探探路

2243

啥啥啥玩意儿

2244

Net里边儿take多家各类特

2245

给多家各类哪儿take多家各类

2246

Let里边target作家

2247

Effect里边effect里边的texture

2248

多加一个擂台

2249

什么意思

2250

我加了这个

2251

我不应该加这个擂台

2252

我我不应该叫这个了吗

2253

这个问题

2254

不应该加这个

2255

确实是

2256

不应该不应该不应该

2257

这不还是有问题吗

2258

是是我们这个map里边儿

2259

这个map里边存的不对

2260

Map里面的卡没有的谱

2261

就生命那个依赖

2262

然后判断有没有这个target

2263

没有target就往里面去加了一个target

2264

News it na Li sh哪儿呢

2265

这

2266

这怎么了

2267

这怎么了

2268

怎么了

2269

这这怎么了

2270

你你光跟我说问题

2271

没有的话我才声明对

2272

怎么了

2273

里面得放东东

2274

没有的话

2275

我这不又又判断了一片吗

2276

我这不又盼又盼了一遍吗

2277

我这不又判断了一遍吗

2278

要判断有没有这个吗

2279

没有的话他就会那什么吗

2280

我这我在我在这儿是不是又看了一遍在这儿在这儿

2281

这是不是又看了一遍

2282

没问题

2283

来看一下

2284

Counter为什么带个tag

2285

是这个玩意儿

2286

妈的

2287

这个他

2288

你们这个

2289

你们这有问题

2290

你们这基础

2291

是我的问题吗

2292

这是你们看问题

2293

看不出来知道吧

2294

你看我这儿有个tag是吧

2295

这个是个tag的知道吧

2296

他拿到这个东西是个tag

2297

我真的是

2298

X1X8

2299

你给他一个

2300

给他一个

2301

你给他一个给他一个

2302

这是这这我们就判断这个F是有没有

2303

如果没有添加X是吧

2304

这样子来咨询

2305

执行一下

2306

看到吗

2307

是不是获取执行是不是

2308

但我这块儿有问题的原因是什么

2309

这块有原问题的原因是他在这儿执行的这个effect没有去做一个什么

2310

没有去做一个

2311

这个X其实它没有包一层PAR Ms知道吧

2312

这个东西它没有包一层帕米斯

2313

其实在在那个什么

2314

在那个他那里边儿包了一层帕里斯知不知道

2315

同学们在这儿包了一层

2316

怕Miss它里边

2317

因为我们的render是不是有微任务是不是

2318

论是不是有任务

2319

在这里边会包一个PAR Ms

2320

Promise resolve

2321

然后去

2322

就反正就这个意思

2323

就在这就是sight帽子

2324

你就给个sight

2325

我就给你个sight帽子吧

2326

Set a Tom

2327

out

2328

明白吗

2329

他会这么包一下

2330

包一下知道吧

2331

因为你的那个渲染的时候是不是有一有个V任务

2332

是不是我们说了渲染的时候是不是有个任务

2333

他在这块儿就可以拿到正确的直达

2334

知道吧

2335

这块就可以拿到正确的直达

2336

你看我们第一次这个样子是吧

2337

然后修改

2338

因为我刚刚执行了两次吗

2339

修改得分有有有问题有问题

2340

F n is not function

2341

什么鬼

2342

这是自信FM

2343

这是什么原因

2344

同学们看一下

2345

Set timeout

2346

这个n is not a function

2347

这不就是个function吗

2348

妈的

2349

天天跟屎一样

2350

我觉得现在我

2351

这人有时候太着急了

2352

就是这个样子

2353

直接返回一个set amount了都

2354

是不是

2355

我是不是应该返回一个异步任务是不是是不是是不是

2356

返不返回都无所谓了

2357

他只要执行就行

2358

你看

2359

执行一次是

2360

然后再来看到吗

2361

看到同学们获取最新的数据

2362

看到吗

2363

明白了吗

2364

所以说这块儿

2365

但是我这个东西

2366

如果你系测还是有很多bug

2367

比如说嵌套的情况

2368

就是effect各种effect里边儿

2369

我这个我我使用这个APP的时候

2370

我声明一个X

2371

我这是不是返回一个是返回一个

2372

然后我这边又可以嵌套Africa

2373

但这种情况又是嵌套的情况

2374

知道吧

2375

这种情况就什么情况

2376

这种情况就是就是它这个框架里边就需要处理的

2377

我这块儿也是只是为了什么把这个串起来

2378

给大家串起来明白了吗

2379

咱们这块儿这个思维串起来了吗

2380

春节了吗

2381

怎么样

2382

下来之后没穿起来

2383

再看一下这是这个代码吗

2384

好串起来之后

2385

我们现在就快速的拉一下他这个真正响应式数据这一块的东西了

2386

要发都要发

2387

今天我整个整个东西都要发

2388

所以说我们现在就要看一下re active he effect里面做的事情好不好

2389

Relative是做什么

2390

想把数据处理成响应式数据是吧

2391

来看active

2392

这是整个re active是吧

2393

他单独的包

2394

单独的包

2395

这是一个单独的re active这个包

2396

你可以单独只用这个包来处理下一次数据

2397

都不用引其他的

2398

你看你这个

2399

在这里边儿有一个index

2400

这里边儿有一个

2401

那个什么relative在这儿

2402

Relative relative他在里边儿

2403

在这里边同学他维护了很多不一样的各种逻辑

2404

但是这些逻辑呢

2405

都是为了做一些各种兼容

2406

像他像我们那些东西就不一样了

2407

你看这是一个处理的响应数据

2408

数据的S的首先把数据给进来

2409

给进来之后它会判断你这个数据是否是只读数据

2410

还有一种数据类型是只读数据类型

2411

如果不是只读数据

2412

如果是指读数据

2413

它就不会处理剩下一次数据

2414

直接返回

2415

然后调用返回这个方这个东西

2416

这个东西然后把数据给到这块儿同学们

2417

这个里边就是我们执行的东西

2418

来判断你这个数据是否是对象是吧

2419

如果不是对象

2420

他就不会用relative

2421

那么用什么呢

2422

一会给大家说会用另一个东西

2423

会用一个东西

2424

然后同学们

2425

怎么

2426

从这个问题

2427

从这个文

2428

我来看弹幕

2429

刚刚有的同学给老给老师说我不看弹幕

2430

说我直接略过

2431

不回答就略过

2432

我我看一下这个问题

2433

是哪个同学说我不看弹幕掠过

2434

是这个同学吗

2435

你这个链接还需要我给你找吗

2436

你这个链接还需要我给你找吗

2437

你这个链接还需要我给你找吗

2438

这个真的是这就是

2439

这个我就没办法了

2440

那你有什么问题

2441

你有什么问题你说出来

2442

我让你们说问题的时候

2443

你们又不说

2444

知道吧

2445

你们我一我我是不是每次问你扣一扣零你有问题你就说

2446

我问你有没有问题你又不说

2447

是不是现在搞得我很无奈

2448

你们这个这个状态

2449

说我又不看弹幕

2450

知道吧

2451

有问题我跟你互动的时候你就说出来

2452

我会给你们停下来的时间

2453

好吧

2454

雷达处理的处理后的项目入口怎么找

2455

处理后的项目入口什么意思

2456

这个就是PK技

2457

就是PK机

2458

只要只要是PK中的东西

2459

就是它的弹幕明白吗

2460

只要是PK

2461

下边的东西就是弹幕

2462

约吗

2463

懂了吗

2464

没看到入口

2465

这就是入口吗

2466

这不就是a的入口吗

2467

这不就是PK吗

2468

下面的所有每一个包都是他的单独的包

2469

每个包都是单独的包

2470

这种东西

2471

这种东西你都不应该在课堂上问我为什么不应该在课堂上问我

2472

这种东西

2473

你都直接去自己使用一下这个东西

2474

你就知道是什么样子了

2475

知不知道有很多同学说这些东西有什么问题

2476

哪些东西这个店这个地址是什么

2477

这个玩意儿

2478

这个API应该怎么用

2479

你说这个问题我全部都回答你了

2480

我们在上课这几个小时

2481

我可以讲的东西

2482

讲什么东西

2483

我就讲这些东西了吗

2484

同学们你们要自己去

2485

像这些东西你们要自己去

2486

自己去有一个自主驱动的一个能力

2487

知不知道

2488

像这种东西你们完全就可以自己去找了

2489

自己去尝试玩一下这个东西

2490

就知道这个东西目录结构是什么样子了

2491

并不需要我来跟你说这个目录结构什么样子

2492

知不知道

2493

有问题就反馈好不好反馈

2494

有问题就反馈

2495

我问你的时候你就扣零扣一就行了

2496

好不好

2497

这个叫什么

2498

这个同学叫什么

2499

这个叫一堂一堂这个同学知道吧

2500

我们继续

2501

这块判断会判断这个对象是吧

2502

判断我们这个判断我们这个对象

2503

我们这个团建的数据是否是对象是吧

2504

如果不是对象他会做什么

2505

如果不是对象

2506

如果不是对象是什么

2507

它会返回这个数据是吧

2508

如果不是对象他就不会反

2509

他就不会来处理

2510

因为我们这个react IV只能处理什么对象是吧

2511

Proxy只能监听对象是不是

2512

Proxy只能监听对象

2513

然后继续往下

2514

继续往下就什么

2515

就拿到我们的什么响应式数据是不是是不是是不是

2516

是吧

2517

这响应数据看到吗

2518

然后判断你这个数据是否已经是详细数据

2519

因为我们传进来这个数据可能已经是详细数据了

2520

已经是详细数据的时候

2521

它会有什么

2522

会有一个map

2523

会有一个K知道吧

2524

响应数据被处理了之后

2525

有一个K知道吗

2526

同学们

2527

一个K

2528

还有一个这个K知道吧

2529

有个有个有个有个K给加到这上面

2530

如果判断你这个数据已经是响应式数据了

2531

已经是proxy了

2532

他就直接返回这个数据

2533

那么就不需要被处理了

2534

明白吗

2535

数据已经相应数据了

2536

还有就是什么

2537

返回我这个数据

2538

还有一种情况是吗

2539

就比如说我这个数据这个a是不是已经被处理过了

2540

现在你又把这个a拿进来重新处理

2541

那我现在还需要重新再处理这个数据吗

2542

第一种情况是你传进来的数据

2543

第一种情况

2544

同学们你这种情况是你传进来的数据就已经思想意识数据了

2545

第二种情况是什么

2546

第二种情况是你传进来的这个数据已经被处理过了

2547

明白这个过程吗

2548

这个名字

2549

就是明白吗

2550

你们给我个反馈好吧

2551

第一种情况是你传递的数据已经是详细数据了

2552

第二种情况是你们传递的被处理过了

2553

啥意思

2554

就是已经proceed了

2555

New proxy的

2556

返回来

2557

这个数据已经是刘proxy代理之后的数据了

2558

看到吗

2559

所以说这块儿就如果是已经被代理之后的数据了

2560

他直接通过这种他会构建一个什么全局的map是吧

2561

去找这个map键了吗

2562

找这个全局的map去去去去去寻找已经被代理之后的数据

2563

如果存在直接返回数据明白吗

2564

然后还有就是他判断你当前这个数据是否可以被代理是吧

2565

对呀

2566

就是被就就是被处理过过后的数据是响应式的

2567

什么意思

2568

同学们你没明白我这个意思吗

2569

我调用了我一个数据调用active

2570

是不是还可以调用active

2571

比如我现在这个返回这这这是不是已经返回relative数据了

2572

我现在是不是还可以把这个数据再拿进来重新再处理

2573

那明明这个数据

2574

但是已经被处理过了过了是不是

2575

这个数据已经是响应式数据了

2576

是不是还他你再拿进去处理有没有意义他在给你PRODUCTS1层嘛

2577

是不是没必要了

2578

直接给你返回你这个处理之后的数据

2579

还有这一种情况是什么

2580

这种情况就是你这一单已经被处理了是吧

2581

已经被处理了

2582

处理完了之后已经是C了

2583

同样一份数据

2584

同样一份原始数据

2585

你再传进来

2586

再形成一份新的数据

2587

这份新的数据不需要是新的

2588

因为它的原型儿就是同一个知道吧

2589

他原始的数据是同一个

2590

所以说再返回它已经被处理过的数据

2591

明白了吗

2592

同学这两个过过程不一样

2593

这两个过程不一样

2594

一个是已经被处理过的数据拿进去

2595

一个是已经被处理过的原型

2596

它对应的原来的数据拿去拉进去重新处理一遍

2597

两个都是需要都是不需要重新处理的

2598

知道吧

2599

都是不需要重新处理的

2600

然后再这块儿再去判断你这个数据是什么

2601

是否是可以被处理的响应式数据什么意思

2602

你这个数据可能什么微动是吧

2603

可能是微动

2604

你可能是component实例

2605

是不是这些数据都不应该被代理是吧

2606

因为这些数据都是一个什么

2607

都是一个data数据

2608

是不是是不是都应都不应该被代理

2609

那在这个维度之上

2610

然后去判断是吧

2611

如果不能

2612

如果可以被代理

2613

如果

2614

如果可以被代理的情况

2615

然后继续找new proxy

2616

同学们看见了吗

2617

New proxy new一个project new proxy之后把这个proxy加到我这个map里边来

2618

是吧

2619

就是被代理之后的数据

2620

我加到这里面来维护一个全局的被代理的映射到嘛

2621

然后proxy就构建完了

2622

看到proxy就构建了

2623

反向数据构建完了

2624

那么它核心的东西在哪边儿

2625

在get和set里边

2626

是不是我们来看get

2627

而在based hand那里边

2628

Based儿在这上面

2629

在这个上边儿

2630

在这里边儿

2631

这里边儿你看它有一个get和set

2632

这三个东西跟这个东西跟跟这两个没什么区别

2633

都是都是去处理某一个K或者订阅发布

2634

所以我们只关注这两个东西

2635

订阅发布给我们说了是吧

2636

是做什么收集袋

2637

我刚给大家也实现了代码是吧

2638

我们来看这个给他

2639

实际上这个给他

2640

来来实现这个给他

2641

我们来看给他收集来

2642

是个什么依赖

2643

给他收集依赖

2644

这个依赖是不是给他收集依赖之后

2645

在这儿来

2646

我们判断它会返回

2647

这个get函数是返回函数

2648

返回是什么

2649

同学们这是你的给他

2650

这就是我们这边维护的给他

2651

他会拿到你的target

2652

拿到你对应的K是吧

2653

还有你的这个当前你这个句柄是吧

2654

你这个玩意儿同学们他会你看他在里边儿会判断你这个数据是否已经是这个数据是否已经是想你这个K里边的这个数据是否已经是什么

2655

是否已经是响应式数据了是吧

2656

如果已经是详细数据了

2657

直接返回是直接返回

2658

就是判断什么样的数据是否是响应数据

2659

如果是只读数据或原始数据直接返回

2660

那这种情况就不应该处去触发get her是吧

2661

不应该收集依赖他有的数据就不应该收集依赖他只有在什么情况下

2662

只有在一有些数据就不应该收机了

2663

像一些原始数据

2664

同学们有些很很多种数据都不应该收鸡的知道吧

2665

然后

2666

这几种情况都是不应该收集来的

2667

这块都有备注

2668

都有都有备注

2669

原始数据获取原始数据

2670

或者只读数据

2671

这些东西都不应该数据数据来

2672

然后他在这块儿判断是否是数组

2673

看到会判断是否是数组同学们

2674

如果是数组

2675

你看判断数组

2676

如果是数组

2677

它会做一个什么处理

2678

大家看一下

2679

可能是数组

2680

数组它会做一个处理数组的处理看到吗

2681

这块儿还用说吗

2682

这是昨天一模一样的东西

2683

我还用吗用吗

2684

跟昨天V1V2 V2里面是不是同样的东西是吧

2685

这些东西他是不是还重写了一些

2686

重写更多的一些东西了是吧

2687

不能说了吧

2688

说了还要说

2689

意思就是说了吗

2690

是不是不用说了吧

2691

那这个东西还要跟你说

2692

那就没意义了是吧

2693

所以这块儿继续

2694

所以说数组的情况

2695

他又会去重写数组

2696

重写数据是吧

2697

然后去判断判断什么

2698

判断是否是数组

2699

如果是数组

2700

它会去做一些处理

2701

然后判断什么是获取数据是吧

2702

获取我最原始的数据是吧

2703

拿到我们最原始的值

2704

然后判断你这个原始的值

2705

如果

2706

是有一些其他的数据

2707

他直接返回

2708

这这种情况不用管

2709

这种这种很多兼容性的东西不用管

2710

然后在这块同学他要去做什么

2711

如果

2712

不是只读数据

2713

就是正正常的响应式数据

2714

他就应该去做什么这块儿就应该做什么

2715

手机依赖

2716

构建map收集依赖知道吗

2717

这块就应该去构建map收集来了

2718

同学们清楚这块儿吗

2719

这会儿我一会儿跟他说

2720

收集那个那个逻辑

2721

它这里边的逻辑跟我们那个逻辑一模一样

2722

没什么区别是吧

2723

没什么区别

2724

就是我那个东西

2725

我这个收集来的逻辑没什么区别知道吧

2726

所以呢

2727

这块儿做一个什么

2728

去触发收集的这个逻辑

2729

逻辑我们这块儿收集类的逻辑是这一块儿

2730

在一块儿

2731

这块手机来了

2732

逻辑这块是不是也是在这里边儿

2733

是不是这一步这一步是吧

2734

是不是这一步收集了是吧

2735

是不是这这里面是吧是吧

2736

我们这儿也是去收集了是吧

2737

也是去收集了

2738

是吧

2739

手机来哪去了

2740

这里边算

2741

然后去韩德尔panda里边儿算

2742

这块儿收集来收集来

2743

然后

2744

所以我先反应一会儿

2745

我不会让你反应的

2746

你可能会听懵逼

2747

但是很正常

2748

你下来之后

2749

你自己要去看

2750

我不可能在这暂停

2751

同学们你先思考五分钟

2752

知不知道你把这个东西听明听明白了

2753

这些东西其实就很很很很好说了

2754

可能稍微有一点点

2755

看着代码克特可能有点多

2756

但是没关系

2757

能把这个大体的逻辑你明白理顺

2758

下来之后

2759

你们自己再根据我的备注和我们这个东西再看就明白了

2760

知道吧

2761

所以我这块儿只是给给大家看

2762

说的这个过程肯定是你们在听的时候

2763

你们听前面这么多课

2764

说实话

2765

很多东西是不是都是你下来要啃几遍的内容你才能看明白

2766

是不是

2767

是啊

2768

是吧

2769

明白吗

2770

所以说这块儿继续再继续

2771

然后他返回收集依赖

2772

收集依赖完成之后就做什么

2773

返回数据是吧

2774

返回数据

2775

返回数据它会返回什么数据

2776

会判断你这个数据是否是对象

2777

如果是对象

2778

再re active一下可以了吗

2779

是不是跟我们那个说的是不是一模一样

2780

明白吗

2781

明白吗

2782

是吧

2783

是否是对象

2784

如果是对象

2785

我再返回rock you

2786

难看的很难啃

2787

说明你在进步

2788

说明你在学习

2789

你如果学的知识一直是不痛不痒的

2790

就是对自己来说没有觉得没有难度的知识

2791

你一定是没有进步的过程

2792

进步的过程一定是感觉自己浑身难受

2793

很难受的过程

2794

这个我最近我最近我在做一个项目

2795

我在接一个项目

2796

我其实很多年都没有好两有两年多没有真正做业务项目了

2797

我最近在做业务项目

2798

贷业务项目做什么呢

2799

做富文本

2800

自己开发富文本

2801

自己开发富文本

2802

基于什么来做呢

2803

基于卡瓦斯

2804

基于canvas来做绘图引擎来做来做来做渲染引擎

2805

来做渲染引擎相当于自己做一套要做自己做一套浏览器的一套东西渲染

2806

然后自己做副本里边的各种编辑这些东西

2807

那这里边呢

2808

就是这里边就就就就我在这个过程当中

2809

因为喀什引擎渲染引擎这一块儿我们做过

2810

但是富文本里边会涉及到很多很多特别其他的一些逻辑

2811

我这个过程我觉得很难受

2812

真的难受的过程

2813

我也天天在思考自己

2814

每天也要复盘

2815

我为什么难受

2816

什么难受

2817

是哪儿难受

2818

我其实每次也给自己鼓劲儿

2819

也给自己复盘

2820

为什么这个这个这个感觉很难受很难受

2821

你就想放弃

2822

你就想去找一些逃避的一些一些一些一些东西没有没有没有

2823

没有我在成都

2824

你以为成都想百家

2825

那都是都是整个带团队大团队的

2826

Leader

2827

你问跟北京一样吗

2828

没有啊

2829

所以在这个维度之上

2830

谁

2831

还有谁在成都

2832

你们有谁在成都的嘛

2833

好地方

2834

你说你说个这个

2835

十个人有九个人这么说

2836

我以为你也在成都

2837

所以说这个过程你们一定要遇到难的东西

2838

一定要自己去咬下心来去肯知道吧

2839

咬下心来去肯自己去自己去就是自己去反思这个过程

2840

好吧

2841

继续继续说代理对象就会返回是吧

2842

对象会返回

2843

那所以说我们这收集依赖是吧

2844

同学们

2845

那这块是不是就到收集依赖这个流程呢

2846

我们一会儿再来看收集依赖这个过程是吧

2847

收集依赖他什么时候才会去触发给他

2848

才会去收集依赖它在使用你这个数据的时候是吧

2849

真正使用你这个数据的时候才去才会去获取是吧

2850

但是我们现在并没有使用数据

2851

所以说并不会触发给他

2852

也不会收集了

2853

是不是

2854

让我们继续继续

2855

给他说完了

2856

我们说seat是SOCIETECH就很简单很简单

2857

赛特赛特很简单

2858

我们来看赛特是吧

2859

给他说完了

2860

我们来说赛特赛特很简单

2861

塞在里边还是硬的撒出来的

2862

赛特拿过来

2863

拿过来之后你看可以判断我这个数据是否是老数据是吧

2864

我这个数据是否是老数据

2865

拿到我的老数据

2866

判断我这个数据和老数据是否是相同的

2867

包括我这个数据是否是一些什么瑞福数据

2868

这些瑞福数据我会给大家瑞福数据是什么东西

2869

然后判断你这个数据是否是新增的K是吧

2870

如果是新增的K

2871

他会有一些相对一些处理

2872

就是比如说像素组这些东西都会有一些处理

2873

然后去拿到去触发修改的依赖然后去触发什么trigger trigger是什么

2874

派发通知是吧

2875

就是通知所有的依赖去通知了是吧

2876

拍完拍完通知之后返回数据

2877

你看

2878

所以说这这个东西

2879

这个数据这个这个过程明白吗

2880

同学们

2881

Relative这个过程明白了吗

2882

他的过程就是什么的过程

2883

是不是就是跟我们这个一样

2884

就是一个什么

2885

是不是跟我们这个一样

2886

是不是跟这个是不是一模一样是

2887

是不是

2888

是吧

2889

把这个这个数据这个这个这个东西在给大家拉进来

2890

拉进来

2891

把这个过程

2892

这个嵌套的数据处理的逻辑在给大家记录下来

2893

记录到这儿来是吧

2894

所以逻辑大致是不是一样

2895

你只是觉得代码里边有很多其他他有很多兼容性的处理

2896

像我们这种我写个DEMO

2897

我还需要写个什么兼容性嘛

2898

也比较兼容性

2899

就是多多种方案的考虑

2900

是不是

2901

所以这个维度之上

2902

这个维度之上我们再回过头来看

2903

就要看什么

2904

我们现在已经聊了什么

2905

他只是把数据处理成想硬数据了是吧

2906

怎么又把它关了吧

2907

我只是把数据处理成小意思

2908

那什么时候触发这个get or

2909

什么时候触发这个theatre呢

2910

他才会去收集依赖

2911

才会

2912

才会去收集依赖

2913

才会去派发通知呢

2914

是吧

2915

在真正获取数据的时候

2916

那什么时候获取数据呢

2917

按照我们这个逻辑执行effect的时候

2918

是吧

2919

所以我们现在要到APP里边儿去了

2920

是吧

2921

这块儿你给他一份

2922

里边我们说了

2923

也给同学们以非逻辑

2924

一沸腾

2925

我们要以飞鹤里边去了

2926

我们的effect

2927

这是trigger派发

2928

然后这是我们的track收集

2929

然后这是cleanup清楚一来

2930

就是所有的备注

2931

我备注写的特别特别完整

2932

都给大家写好了的

2933

所以这块儿都是你们下来之后都可以去重新看一下我的备注

2934

我包括也写了很多原因

2935

咱们这块儿给他

2936

你的ID是不是给一个a分是吧

2937

给一个分他会判断我给到这个N是否是已经是A1FE TE什么意思

2938

就是我已经声明了这个东西这一块儿

2939

这个东西很有意思就是

2940

模板读取使用数据和

2941

e fe TE

2942

你先不要着急嘛

2943

我还没到那块儿

2944

我说了我这块儿完了

2945

说这串给给大家串的时候就会串到这个知识点

2946

给你们串的时候就会看到这个时间好吧

2947

所以说在这块儿

2948

你看这块儿就会有什么

2949

你看在这块儿有一个什么

2950

有一个拿到获取数据是吧

2951

这是我们的APP

2952

他在APP的时候会返回是吧

2953

这块会返返回一个

2954

新的一课

2955

那我是不是可以这这也是一个函数

2956

我是不就还可以在这这块儿再来

2957

我是不是可以在这块儿再来出来

2958

看到吗

2959

我是不是可以把这个返回的H

2960

它是返回一个新的给了我

2961

这一刻再欠他

2962

所以在这里边他就在嵌套的时候

2963

它就返回你原来这个IP就不会再去带领一层

2964

所以说他在你返回的这个FX上边儿

2965

它会把你自己原生的effect拿过来返回

2966

知道吧

2967

明白吧

2968

所以这一步然后继续同学们他会通过create a rock effect来创建一个函数

2969

是吧

2970

来创建一个函数

2971

因为我们这个函数要去做什么

2972

要收集依赖是不是

2973

他收集这个依赖一定是个函数是吧

2974

所以说这块儿会创建一个函数

2975

然后把这个MS执行一次是吧

2976

他会出判断是否是懒加载

2977

如果不是懒加载就会执行一次

2978

同学们看见执行这个就可以了

2979

就执行什么

2980

执行的这个玩意儿是吧

2981

就执行这个玩意儿

2982

这个玩意儿执行什么我们这个东西是吧

2983

这就是首次你执行这个一份的时候

2984

外边的时候就会执行这个F的原因

2985

就会执行它

2986

你的N就包到这里边儿了

2987

所以执行这东西

2988

执行这个东西的时候

2989

之前那个东西的时候他会做什么

2990

他会把你这个L来加上ID

2991

这就是我们的water

2992

是不是一样的

2993

你是不是也需要ID

2994

是不是需要判断你这个water是否激活

2995

是吧

2996

包括你这个地图里边儿依赖了哪些数据

2997

是吧

2998

有哪些响应式数据来使用

2999

是吧

3000

我这个店铺里边儿

3001

我这个的里边只有只有这个counter是不是

3002

但是我这个deep是不是还可以由其他的详细数据来使用

3003

所以我这个地

3004

我这个effect还要维护什么

3005

维护哪些数据的依赖下知道吧

3006

明白吗

3007

还不只是就是维护

3008

维护了一些数据的依赖下

3009

这个东西又是一点

3010

所以说这个其实还稍微这个这个东西稍微有一点绕

3011

但是没关系

3012

这个不影响逻辑

3013

我这会儿备注给他写的很清楚

3014

好吧

3015

然后你把这个N你看原始得分拿到这儿来

3016

你看了吗

3017

这是你原始的份

3018

到家了什么

3019

然后active是吧

3020

所以说最你最后还是在那边跑到这边来了是吧

3021

到这边了

3022

因为你的N

3023

你这个effect

3024

你外边返回那个X执行的effect是不是就是这个东西

3025

是不是就是这个APP

3026

是不是这个函数在这个函数里边儿

3027

在这个函数里边

3028

这个函数里边呢

3029

它会判断当前IP是否不是激活的状态

3030

如果不是激活的状态

3031

没有激活的状态

3032

他才会去执行这个回回掉这个东西执行这个调度的东西

3033

这个歇一会儿给大家说吧

3034

然后会判断你当前这个肺上是否已经在站内

3035

当前这个IP是否在已经在站内

3036

什么意思呢

3037

就是effects嵌套effect这种情况

3038

又嵌套X这种情况

3039

如果这种情况

3040

如果是以这种情况

3041

他会做一个什么

3042

做一个清除处理

3043

是吧

3044

就会掉嵌嵌套多的站内是吧

3045

你看这里边儿收集费的

3046

那么这里边呢

3047

就会出现问题

3048

出现什么问题呢

3049

在这种情况

3050

你看我这里边有

3051

同学们这都是都会有这种这些我写的情况

3052

这这里边都会有这种

3053

我处理这些这些这些这些各种小问题

3054

他为什么要去做cleanup

3055

或者说判断是否在站内这些东西对吧

3056

然后

3057

处理完了之后

3058

这些东西都是一个兼容性的处理

3059

处理完了之后

3060

我教大家还有一个

3061

还有一个大家准备去看一下代码

3062

你不知道他要用的原因是什么

3063

把他做事了

3064

做事了之后重新去编一下这个代码

3065

重新编一下这个代码跑

3066

或者重新跑一下这个东西的单侧是吧

3067

跑一下这个东西的单测测试用例是吧

3068

跑一下这个东西的测试用例

3069

跑一下这个东西的测试用例

3070

重新跑一下这个文件的测试用例

3071

跑一下哪个通不过

3072

你就知道它的它的功能是哪个了

3073

明白了

3074

明白了吗

3075

这就是看源码

3076

就是开源码最好的一个方法就是跑测试用例

3077

别人以别人的源码是基于测试用例来测试的

3078

那你不知道的时候

3079

你就什么

3080

你就把他做事了

3081

你不知道这个代表什么

3082

你把他做事了

3083

做事了之后跑一下测试用例不就行了吗

3084

是吧

3085

那哪块儿测试用例没有通过

3086

那这个代码就是做这个用处的明白吗

3087

这块我们又回到这里边是吧

3088

在这里边儿

3089

你看这里边儿是吧

3090

就到了哪一步

3091

到了这一步了是吧

3092

到了这一步执行是吧

3093

就开始把我当前这个IP的当前ICT是不是就是我这个函数是吧

3094

都是我当前这个函数是吧

3095

我当前这个函数然后加到我

3096

加到我这个什么XD卡里边儿expected就是一个什么

3097

就是一个数组知道吧

3098

压到站里边儿知道吧

3099

压到站里边儿

3100

为什么他要压到占领

3101

我们要做一个标记

3102

要把它记录下来这块跟我们的那个什么

3103

是不是声明一个全局的target没什么区别声明全局的target

3104

我这块儿是升级的生命的全局的

3105

他这块儿是压到数组里面去是吧

3106

为什么要到数组里边儿

3107

我们给大家说了

3108

他是不是可以飞

3109

他又嵌套if a他

3110

那XX又嵌套

3111

X这种嵌套的情况

3112

他是要通过栈来避免是不是

3113

所以这块儿他要占领

3114

要占领之后同学们执行a分

3115

直接分的时候就会触发什么触发什么是不是就处罚我们外边儿获取数据的逻辑啦

3116

是不是是不是就获取这个数据了

3117

是不是获取数据的时候是不是就会触发什么是吧

3118

Get和set a了是吧

3119

To Get ER完了之后是不是就会触发什么收集依赖

3120

是不是我们先不说收集依赖

3121

会收集袋

3122

收集完了之后就会把数据返回回来是吧

3123

回来之后返回到这儿

3124

返回回来之后

3125

FN执行完了之后是吧

3126

FN返回给F里边儿

3127

FM执行完了之后是吧

3128

Render执行完了之后

3129

然后这里边儿

3130

Speak出站就是我当前这个IP是不就出站了

3131

出站了之后

3132

当前这个是不是就不是他了

3133

是不是懂了吗

3134

然后出了站之后

3135

然后这块儿指向对

3136

然后然后把当前这个X只鸡就是当前这个

3137

激活的

3138

因为我在这一步是不是这个active

3139

当前active in fact是当前这个IP是吧

3140

当前激活的ID是当前这个IP

3141

然后我出了站之后

3142

是不是它激活了

3143

就是他站顶出了站之后

3144

其他下一个元素的X是吧

3145

因为为什么有这么多个一卡通有嵌套

3146

给大家说了有嵌套

3147

是不是我可以有嵌套是吧

3148

我的IP是可以有嵌套

3149

我的主见是不是也可以嵌套

3150

我的主见他是我的APP就可以嵌套

3151

有嵌套

3152

明白吗

3153

你非得嵌套的情况下

3154

所以说这块儿执行完了之后

3155

你看这会儿初三

3156

然后初三完了之后

3157

一黑了就完了

3158

所以这块儿是在哪块儿

3159

在执行FM的时候

3160

执行N的时候获取数据

3161

就会执行到一块儿map里边嘛

3162

里边就会什么trigger truck啊

3163

就会触发什么

3164

触发什么门窗什么处罚

3165

我这个逻辑思

3166

下一个逻辑

3167

拖到这儿获取数据是吧

3168

Truck收集依赖收集依赖是吧

3169

收集赖是吧

3170

这块收集依赖

3171

哪块儿

3172

这块是不是收鸡蛋是吧

3173

收集在这里边儿

3174

收鸡蛋也在这里边儿是吧

3175

收集了也在这里面

3176

你看就会穿吗

3177

收机了

3178

这块收集袋

3179

你看收集袋收集一袋收集依赖

3180

你看它会判断你当前没有APP的时候

3181

那就返回

3182

你说没有effect

3183

我还给你收集什么依赖是吧

3184

那么然后收集依赖

3185

它会判断你当前这是我们的take up同伴

3186

会判断我当前特朗普有没有我当前这个依赖

3187

其实就跟我那个一样是吧

3188

维护了一个什么

3189

维护了一个这么这么一个东西

3190

它会判断你当前这个东西是否有没有当前我这个K

3191

他如果没有这个target

3192

它构建一个target

3193

构建一个APP可以了吗

3194

构建一个APP他会构建出来一个这种

3195

你看这是我的数据是吧

3196

这是我的数据

3197

这是我的原始数据

3198

可以判断我这里边儿

3199

我这份原始数据是否已经有X使用了

3200

如果没有APP的使用

3201

那就说明没有构建起来依赖

3202

没有构建起来依赖怎么办

3203

构建一份依赖是吧

3204

够一份儿这份数据

3205

他会构建一个map

3206

这个map这份数据里面map这个K

3207

然后你看的map是吧

3208

然后然后又判断的map里面是否获取了这个K

3209

是不是这个K是什么counter是吧

3210

是否有人用这个counter

3211

如果没有人用这个counter

3212

那就没有是吧

3213

然后又构建一个什么new set是吧

3214

跟那个是一模一样

3215

溜了sight完了之后

3216

然后判断是否已经有了我们当前这个F是吧

3217

是不是跟我们这个一模一样

3218

同学们

3219

跟这个是不是一模一样判断是否已经有了是吧

3220

已经有了一样吗

3221

是不是一模一样

3222

这块的逻辑是一模一样

3223

要敲黑板吗

3224

我的金塔木

3225

听到明白吗

3226

这块儿稍微有点绕

3227

但是带个大逻辑

3228

你要拉通就行了

3229

知道吧

3230

下来之后有些细小的逻辑

3231

你看我的备注就很不错

3232

懂不懂好吧

3233

所以说这块儿

3234

继续啊

3235

这块继续你看

3236

他会判断a是否已经有了

3237

如果没有怎么办

3238

如果没有

3239

把他添加到这个依赖里边儿

3240

看到添加到当前这个依赖里边儿

3241

然后同时我我说了什么

3242

把当前这个依赖

3243

当前你这个依赖

3244

就是我当前依赖你这个东西的依赖叫什么

3245

我这个激活的低谷里边儿

3246

我们说了为什么要有这么这么关心

3247

因为你的这个effect

3248

还有必要看回放

3249

意思意思就是你平时都不看其他项目

3250

其他你平时都不看回放吗

3251

我们一登的课程

3252

你看一次回放会收获一次东西

3253

你看一次回放会收获一次东西

3254

就包括我现在我也有时候也会看一下回放

3255

看一下谁的回放了

3256

就是你们后边会

3257

会应该有一个麻省理工的大佬给大家讲课

3258

我经常看他的一些游戏方面的一些东西

3259

或者说可视化上面的一些东西

3260

知道吧

3261

麻省理工的大佬

3262

有人到时候会给大家讲虚幻四吧

3263

宣武还是虚幻四

3264

应该有吧

3265

后边会给你们讲

3266

他们会给你们讲

3267

数据结构就是这个东西

3268

你们这个课里面就有

3269

你们这人数据结构去了

3270

你们这里边就有他的

3271

他他要跟你讲

3272

是吧

3273

我看我看

3274

我更多看书吧

3275

我更多看书

3276

我更多看书

3277

我看视频

3278

其实偶尔也只看几个人的视频

3279

我也看书看得多

3280

看视频这个东西

3281

太慢了

3282

我觉得有的时候

3283

但是有些生

3284

有些新知识

3285

我可能会去看一些书入门

3286

信

3287

李老师李老师

3288

李老师

3289

继续啊

3290

继续

3291

新知识

3292

不一样

3293

要看你如果没有体系的时候

3294

你需要别人给你体系

3295

你就看视频比较好

3296

就是这个也要看

3297

就是你来我们一登

3298

比如我们一蹬一蹬

3299

当然不出书

3300

所以说你在市面上找不到前端这种东西

3301

老板

3302

继续继续

3303

然后我在这块儿

3304

你看他会把我们的依赖添加进来是吧

3305

添加进来

3306

然后构建起来

3307

依赖是依赖就构建起来了

3308

那么我这个依赖是不是就构建起来了构建起来是不是

3309

然后我再修改数据的时候

3310

它就执行什么

3311

执行trigger trigger是吧

3312

修改数据的时候触发set TE set出发什么trigger是吧

3313

是不是执行trigger出了春哥最后怎么样

3314

懂吗

3315

这

3316

子春哥是什么

3317

你看这个村儿是吧

3318

春哥怎么样

3319

拿到我这个APP是吧

3320

拿到我这个APP然后去做什么

3321

没有收机啦

3322

那就返回

3323

如果有收集了

3324

同学们收集了怎么办

3325

有手机依赖

3326

拿到我所谓的依赖是吧

3327

这是我所有的依赖是吧

3328

这是我当前所有的依赖

3329

我的依赖在哪儿

3330

这个这个是所谓的依赖是吧

3331

我所谓的依赖拿来付一起

3332

付一起了之后

3333

他在这块儿他会构建一个新的ID基于我这种相当于拷贝一份

3334

会把这个地map拷贝到我这个新的APP里边儿

3335

这个map里边儿

3336

它拷贝里边有有一些他的处理逻辑

3337

拷贝完了之后

3338

然后去便利什么便利

3339

我这个effect同学们在下边

3340

拷贝完了之后

3341

必定我这个effect看到吗

3342

便利我的effect

3343

然后执行run

3344

执行wrong wrong里边儿就是什么

3345

就是执行拿到你这个X去执行看到吗

3346

同学看见了吗

3347

里面就有一份去执行

3348

干嘛

3349

所以说这会儿收集依赖和处罚依赖是不是就通了

3350

我们这个东西整个流程是不是通了

3351

数据层这块儿就通了

3352

所以说这块儿还有两个东西

3353

数据上还有一个

3354

还有两个东西要烧给他

3355

给他要要拖堂

3356

差不多二三十分钟的糖

3357

所以说这块儿有一个什么

3358

你看拿到open这块有一个effect

3359

有个open

3360

如果他这块有option的时候

3361

他会在option里面去执行一个什么意思呢

3362

同学们

3363

我们在这儿初始化这个东西的时候

3364

初始化effect的时候

3365

你可以在这儿去加open

3366

知道吧

3367

加op是什么

3368

什么时候他去执行我的那个意思

3369

执行我的什么

3370

执行我的执行我的这个

3371

Effect就是他触发依赖的时候

3372

他怎么去执行我这个effect

3373

你看我这儿是不是可以加一个skin or调度这个scheduler

3374

调度我在里边儿什么时候去执行

3375

他会拿把M传给你

3376

然后我什么时候去执行我这个N

3377

所以说你看他传过来分就什么

3378

就是你这里边儿执行的什么

3379

就是执行的effect

3380

所以说它这里边其实是什么

3381

就是你自己去加了一个调度的过程

3382

现在明白

3383

我刚刚给大家说那个schedule的那个东西了吗

3384

调度的东西

3385

那里边儿给他说的这个调度的东西

3386

刚刚在在构建APP的时候

3387

构建map的时候

3388

大家说一个调度的东西

3389

这块是吧

3390

Scheduler调度的东西是吧

3391

好继续

3392

所以说这个东西全是这两个双向数据是不是就出来了

3393

双数据整个流程是不是出来了

3394

那块儿有个东西要给大家

3395

就是瑞府

3396

瑞福这个数据

3397

瑞福这个数据呢

3398

一个瑞福这个数据结构

3399

你看

3400

瑞福瑞福这种数据结构

3401

瑞福这个数据结构

3402

瑞福的数据结构什么意思

3403

就是说我们这个re active active这组数据结构是不是只能处理

3404

只能鉴定什么

3405

只能处理响应式数据

3406

只能处理什么对象这种数据是吧

3407

那么瑞弗他可以处理什么数据

3408

同学们你看瑞福它可以属于什么数据

3409

处理原始数据看到吗

3410

瑞甫他可以处理原始数据

3411

是吧

3412

他原始数据来监听到吗

3413

把原始数据来监听

3414

那么瑞弗他怎么实现的

3415

瑞甫

3416

实现很简单

3417

瑞夫斯

3418

就很简单

3419

咱们看

3420

这是riff

3421

这是rough的实现

3422

瑞弗

3423

他也有给他是吧

3424

也有给他theatre

3425

你出发了

3426

给他的时候

3427

Truck

3428

看到妈的时候是不是就出了truck

3429

夸是不是就收集了

3430

出生的时候是不是春哥是吧

3431

也是这个东西

3432

他是不是就走到我们那边去了

3433

无非它这就是什么

3434

我们的基础数据

3435

他返回的

3436

你把基础数据传进来之后

3437

他返回的就不是一个什么

3438

不是一个基础数据返回一个返回一个对象

3439

这个对象一个什么

3440

一个点微流这个属性明白了吗

3441

明白了吗

3442

这个对象有一点温柔这个属性呢

3443

这是基础数据

3444

所以说你们平时用瑞福就这个过程

3445

好吧

3446

所以这是数据层

3447

数据层数据层

3448

然后再给大家说编译编译这一层

3449

再说边一层

3450

大家说边一层

3451

就是边一层边一层

3452

说了之后

3453

然后喝康比特

3454

Computer

3455

Commit啥意思

3456

你说的康米是啥意思

3457

我不知道你说的

3458

com是什么意思

3459

Computer的吗

3460

Computer computer又不一样

3461

它computer也没什么区别

3462

Computer

3463

Computer就是你一个

3464

和什么区别

3465

你说它的使用期使用区别

3466

我不跟你说

3467

使用区别我跟你说

3468

它的实现

3469

实现computer实实现吗

3470

你说computer实现不就实现吗

3471

他就包了一个一费

3472

咪咪啊

3473

一米的这个东西

3474

这个一米特

3475

这个东西我觉得都没有必要跟你讲

3476

他就是一个什么event bus

3477

你知道什么叫even的吧

3478

是吗

3479

不知道你去搜一下

3480

就是一个发布订阅的过程

3481

知道吧

3482

这个东西我就没没没必要花时间跟你讲

3483

对

3484

四件吧

3485

四对同学说的很对

3486

这个就是一个这个东西

3487

数据传递这个东西就是一个消息订阅这个东西

3488

就是就是这个L这个东西就是这个样子知道吧

3489

Computer的实现就是这个东西

3490

这个API的实现

3491

Computer这个这个东西API的实现

3492

他的实现也是基于effect和skinner

3493

还有tIgEr tIgEr

3494

所以说没什么好讲的

3495

这个这个知道吧

3496

我这加了备注

3497

你们想想去看

3498

你看一下

3499

然后这个原理我们给大家讲了

3500

这个原理我们也给大家讲这个原理讲

3501

所以他很简单

3502

很简单

3503

我给大家讲那个变异这块的东西了

3504

大家讲变异了

3505

编译模板

3506

模板编译的优化这块儿还没给他讲

3507

模板编译的优化完成这块儿

3508

嗯

3509

模板编译

3510

我们给大家讲了是不是讲了什么

3511

讲了我们编译的模板是不是东dif是吧

3512

他要去什么做一个

3513

什么做一个做一个什么做一个

3514

做一个优化是吧

3515

就是我们之前的

3516

我们之前的动物结构是什么样子

3517

我们之前地洞结构成这个样子

3518

是不是同学们

3519

比如说给大家讲编译画模板变异这块的优化

3520

哪去了

3521

我的

3522

我的我的笔记呢

3523

把笔记了

3524

这是不是我们的那个

3525

动态数据在之前

3526

我们需要我们在修改这个东西

3527

在之前当我这个数据变的时候

3528

我需要什么

3529

先遍历它

3530

先访问他

3531

在访问他

3532

在访问他

3533

在访问他

3534

是吧

3535

然后再修改这个冻结的是不是

3536

是不是

3537

为什么

3538

因为之前他够这个东西它构建出来的威露的是什么结构

3539

这个东西之前构建出来的微辣的是什么结构

3540

他够之前构建出来的VIVO的这种结构

3541

知道吗

3542

他之前构建出来的VIVO是这种结构

3543

是不是他之前构建出来的微弱是不是这种结构

3544

是不是这种结构的V是吧

3545

我这个是吧

3546

这是我的微是吧

3547

DV

3548

然后什么station是吧

3549

是吧

3550

Skating skating还有第二个是吧

3551

Children有个C是吧

3552

Stay下边有个调整

3553

调整有什么标签是吧

3554

我这边儿是吧

3555

这边有什么

3556

一个什么

3557

一个text是吧

3558

一个text text是吧

3559

是不是这种事

3560

Text

3561

明白吗

3562

明白吗

3563

之前是这个样子

3564

之前是这个样子的

3565

之前的微弱的是不是这个样子

3566

那我之前有访问

3567

我就应该先顶着它

3568

然后再敲它

3569

然后再点它

3570

然后再敲它

3571

然后再点他再去

3572

获取它是吧

3573

再去便利这个值是吧

3574

再去修改这个东西的只是

3575

是不是算结构

3576

我的数就应该这么对比算

3577

现在需要吗

3578

现在不需要了

3579

现在我把它

3580

我现在在编译的时候

3581

我一我在编译的时候

3582

我就已经知道这个节点

3583

我会给这个节点加一个什么

3584

加个tag

3585

就这个tag

3586

价格

3587

这个叫做佩奇

3588

Page flag flag

3589

我可以说加个tag

3590

这个tag表示什么

3591

动态节点

3592

只要加了动态节点之后

3593

我就会在这一层加个什么

3594

加一个to的这个这个动态的

3595

就会加一个动态气了

3596

同学明白吗

3597

我就为了这一层去加个动态剪切了

3598

那我以后再修改这当这个整个组件在发生变化的时候

3599

我还需要一层递归

3600

一层递归一层递归的再进来干嘛

3601

我就不需要了

3602

我直接拿到这个动态的跳的

3603

全部去遍历遍历一遍不就行了嘛

3604

是吧

3605

直接拿到这个跳的动态的这个跳的

3606

它里边就有所有的这个下面的动态结构了

3607

是吧

3608

动态结构了是吧

3609

他们明白这个过程了吗

3610

这是怎么实现的

3611

你先不要着急

3612

明白这个过程吗

3613

是不是

3614

那所以这个过程我还需要种地吗

3615

是不需要

3616

是不是对

3617

这就是编译优化

3618

因为变异的时候他加了flag

3619

你在构建的时候

3620

我就可以通过flag

3621

然后把它提升到我的顶层这个东西来

3622

我还需要

3623

当地驸马还需要

3624

为什么还需要

3625

给大家举个例子

3626

大家举个例子

3627

为什么还需要动的

3628

就是原因

3629

有一些不稳定的情况

3630

这种情况

3631

同学们看这种情况

3632

这种情况我第一次渲染

3633

比如说我的范围促的氛围促

3634

我第一次渲染的时候

3635

如果嵌套的嵌套的那个是不是还是一层一层给你讲

3636

我这儿就没有嵌套了

3637

我这哪还嵌套

3638

我不管哪一块儿的东西

3639

我都会收集到这我所有这个节点

3640

所有的嵌套索索有的递归

3641

所有的东西全部会涉及到这一层

3642

它是一一维的一个数组

3643

一维的数组知不知道

3644

意味着数字

3645

他直接遍历所有的东西

3646

直接修改了

3647

对动态拉平了明白吧

3648

所以这块儿你看

3649

如果这儿没错

3650

同学们我问你

3651

我在为促的时候

3652

我这个是不是显示a是吧

3653

显示了a

3654

那现在我变成fourth

3655

我这个是不是

3656

我这儿没错的时候

3657

是不是同学们我收集的动态指令是不是

3658

我是不是收收集的是这个东西是吧

3659

我是不是收集的这个东西

3660

我收集的是这个东西

3661

我收集这个东西

3662

我这为促的时候

3663

我如果只收集动态指令

3664

我是不是收集的这个东西是吧

3665

我收集的数据结构是不是这个东西这个样子的

3666

来看

3667

我收集的动态结构是这个样子的是这个样子

3668

是啊

3669

动态数据是这样子

3670

是不是这个样子

3671

我的跳的我收集的这个动态数据是吧

3672

设置在这上面了是吧

3673

不管这两个是哪个

3674

他都是这个样子是吧

3675

如果按照我们那个逻辑

3676

是不是就这个样子

3677

只收集这个动态数据

3678

现在有问题同学们什么问题

3679

我如果收集这个

3680

我只修改

3681

只修改这个剧里边的具体内容

3682

那我现在他的V杠F便从处变成了force它的节点

3683

他的节点是不是应该从section变成DV

3684

是啊

3685

我这个比如说是个半圆

3686

这个是比如说是个直角

3687

这个是个圆弧

3688

他这样是不是就不一样

3689

他展示形态就不一样是不是

3690

但是我现在只修改的内容

3691

它收集收集了

3692

是不是具体的内容就会有问题是

3693

同学们就有问题

3694

所以说这种情况就会舅舅怎么办

3695

这种情况就不行

3696

知道吧

3697

知道吗

3698

这种情况就不行

3699

这种情况是不是不稳定

3700

这种情况是不是不稳定

3701

威刚衣服他就不稳定

3702

知道吗

3703

知道吧

3704

这种情况他就要降到什么多么地府层面

3705

到地方层面

3706

然后降到目前的层面

3707

把这个维度提升到哪个维度

3708

把这个把这个静态标签提升到哪块儿

3709

提升到这块儿了是吧

3710

把这个漂圈的动态修改就提升到这块儿了

3711

相当于他现在就维护了这个东西

3712

维护了这个东西

3713

维护的是什么东西

3714

维护的是这个东西

3715

维护的是station

3716

这是skate ski下边station下边的child是这个东西

3717

是是是这个东西是吧

3718

然后station下边的切的是这个东西

3719

然后station下边儿还有一个东西

3720

还有什么动态数据是吧

3721

为啥不把指令放进去

3722

所以说他这一步也会去放指令

3723

他这一步会去放指令

3724

知道吧

3725

在这一步会去放指令

3726

他在这一步也会去放动态指令知道吧

3727

所以这是我要跟你说的吗

3728

他这一步也会去放动态指令

3729

具体的我就不给你写了

3730

然后你还会发现还有其他的问题

3731

这是威刚一幅的情况是吧

3732

它会降级

3733

就是把这个指令收集动态东西收集

3734

他不会收集到顶层了是吧

3735

各位收集到离他最近的事吗

3736

动态指令上层知道吧

3737

离他最近的父元素的动态指令上升

3738

明白吗

3739

好这一层这一层搞明白了

3740

那块儿有一个问题什么呢

3741

刚发的情况

3742

恢复的情况

3743

为康复的情况什么意思

3744

比如说我现在是这个样子

3745

模板这样子同学

3746

模板是这个样子

3747

那我现在渲染出来的内容是什么

3748

我现在渲染出来的内容是什么

3749

对吧

3750

我现在渲染出来的内容

3751

比如说我现在list的数据是什么

3752

现在渲染出来的black是什么

3753

就这个样子是吧

3754

是不是现在这个样子是吧

3755

是吧

3756

现在如果按照正常的逻辑

3757

是不是就这个样子收集这三艘艘收集这这是他的直接点是吧

3758

这两个直接点是吧

3759

两个皮圈是吧

3760

动态节点

3761

那现在我在第一次渲染的时候

3762

你见你

3763

我在第一次渲染的时候

3764

你动态收集的是这个标签是吧

3765

现在就有问题了现在

3766

我变化之后是这个样子了

3767

我变化之后是这个样子的

3768

特卖

3769

我变化之后是这个样子了

3770

同学们你说我变化之后这个样子

3771

我这个东西

3772

我这个东西

3773

那我这个我这个东西是不是还被保留着

3774

那我怎么办

3775

这种情况怎么办

3776

就是我之前

3777

我之前是这样是这个样子的是吧

3778

之前是这样子

3779

我现在变成这个样子

3780

那我直接定向修改的就是这三个了是不是

3781

那我这个怎么办

3782

就是他会丢失

3783

是不是有些东西就不会被改造

3784

是不是威刚威刚付是不是就不会被改到

3785

因为我这个长度是不行的

3786

知道吧

3787

所以说在V杠four的时候

3788

在V杠four的时候

3789

这种是动态结构的时候

3790

We go的时候

3791

他会做什么

3792

会降级V杠的时候

3793

只是V杠的

3794

只是V杠的时候

3795

会降低到什么

3796

降级到地府

3797

降级到原本的到地府

3798

明白吗

3799

明白了吗

3800

将降级到原本的盗墓地府

3801

清楚了吗

3802

同学们

3803

这不明白吗

3804

是吧

3805

但是它的内部是不是还可以靶向更新

3806

你每一个比如说你每一个这个这个节点呢

3807

具体下边的动态节电是不是还可以动态更新

3808

它下边如果还有其他动态节点

3809

是不是就可以提升到这个维度是吧

3810

对

3811

所以说这里边这就是一个点

3812

第二个点就是静态提升

3813

静态提升呢

3814

不用说了吧

3815

静态静态静态节点的提升都不用说了吧

3816

就是提升进来

3817

来给大家看一下这个来给来给大家看一下这个这个创建出来的这个虚拟动是个什么样子

3818

怎么创建的

3819

怎么构建这个维度的

3820

然后是是是是是

3821

然后在这里边儿

3822

的这个东西是吧

3823

这个这个东西

3824

这个你可以去编译模板

3825

你看这是我们的模板是吧

3826

这是我们的模板

3827

这是我们的模板

3828

在模板编译的时候

3829

他

3830

你看现在模板汇编一什么会创建一个block

3831

当你创建一个block的时候

3832

这个black这个东西

3833

同学们open block he cried block open black就是开始创建一个create

3834

就是创建一个block

3835

这个block就是一个什么

3836

就是一个我们所谓的提升到把这个东西提升到这个维度的一个一个层面

3837

就是当他创建一个block的时候

3838

它就它这个它这上面就一定有一个什么动态属性

3839

是不是啊

3840

就相当于是在哪个维度哪个层级

3841

比如说我们在这个维度是吧

3842

刚刚说这个维度

3843

我们说一开始

3844

一开始这种情况是在这个情这这上面去创建布拉克

3845

这个black直接维护了这个东西是吧

3846

那在这种情况

3847

我们就应该哪个情况

3848

哪个上边儿

3849

上边儿要去创建black

3850

这个black维护了威刚if he Wei Gang l是吧

3851

然后又需要在这个上面去创建black

3852

这个black创建维护了什么这个东西是吧

3853

这个black又维护了什么这个东西是吧

3854

所以说这上面

3855

所以说这个black就是什么

3856

就是去创建什么

3857

就是一个动态的这个过程

3858

我们看一下

3859

就是你看他这块儿外边儿会创建一个

3860

把这两个东西添加到black上面

3861

然后又在这个指令上面又会创建一个block

3862

把这个动态修改节点的东西维护到这上边儿

3863

就回到这上边儿

3864

明白了吗

3865

所以调用block的时候

3866

你编译出来要用black的东西的时候

3867

就会去创建这个东西

3868

一会儿给大家看这个black

3869

然后他正常创建节点

3870

正常创建虚拟动物节点就是这个微弱的看到吗

3871

正常创建虚拟动物借鉴就是威露的看到吗同学们

3872

证券我们就在这儿微露的

3873

明白吧

3874

明白吗

3875

明白吧

3876

然后在这一步继续

3877

我们再来做一个什么其他的一些点

3878

其他什么点呢

3879

比如说静态节点优化

3880

静态节点优化我们之前我们现在我们现在

3881

我们现在这儿搞一个进来纪念

3882

搞一个这个样子

3883

进镜头节点这个样子是吧

3884

你在这个节点在这块创建是不是

3885

那我现在搞一个优化

3886

你看我把这个静态节点提升到这儿了是吧

3887

我把所有的静态节点同学们提升到最上层了

3888

可以吗

3889

为什么我要把静态节点提升到上层

3890

我是不是我每一次创建render

3891

构建render的时候

3892

我的精彩经典是不是都是一模一样的

3893

我们上街我们之前V2是不是讲了

3894

我们每一次的静态界面是不是一模一样的

3895

那我是不是只需要创建一次

3896

我下一次直接拿到这个东西内存里边来用就行了

3897

是吧

3898

这个静态节点来用就行了

3899

所以我有一个创建静态节点提升的过程

3900

这是第一层优化是吧

3901

这个也是它编译时做的优化

3902

也是根据ST做的优化是吧

3903

然后这个完了之后

3904

这个完了之后又是什么

3905

又是制服又是什么

3906

就是这个静态字符策划

3907

静态字符策划

3908

什么叫静态字符策划

3909

给大家举个例子

3910

我们创建节点

3911

它会创建多个是吧

3912

你看他这种情况是不是创建很

3913

你看我们刚刚

3914

你看刚刚这个他是不是创建了这么多精彩经典是吧

3915

创建了五个计算节点是吧

3916

但是这五个阶段节点他每一次都不会变是吧

3917

那么不会变

3918

它其实是不是就是一个静态字符串是吧

3919

同学们是不是就是一个静态字符串

3920

这个这不是静态的字符串是不

3921

我不需要我都他都不需要去占内存是不是

3922

那怎么办

3923

我把字符串

3924

对

3925

把它直接构建一个字符串的精彩激烈

3926

是吧

3927

那这个样子

3928

你在知道你在使用这个静态节点的时候

3929

直接把它append到页面里面就行了

3930

明白了吗

3931

所以说这也是它的一个优化

3932

知道吧

3933

静态字符策划

3934

静态节点字符串的话

3935

这也是需要做一些处理了

3936

然后还有就是什么事件

3937

四件的提升

3938

四件的也叫实践提升吧

3939

四件缓存举荐的例子

3940

比如说我们现在一个这个东西有一个call back啊

3941

你看有个call back是吧

3942

Call back我这是不是快客这儿创建一个庆姐是吧

3943

庆姐有个bug是吧

3944

我是不是每一次创建call back的时候

3945

我是不是都要重新溜一下我这个这个事件是不是

3946

那是不是每一次也有也有内存的浪费开辟是吧

3947

新内存的开辟是不是其实可以做什么

3948

做一个优化是吧

3949

把这个事件把这个事件的创建

3950

他说没有

3951

你看是不是是不是可以把事件的创建

3952

你看也缓存一下

3953

是啊

3954

我只要之前缓存过一次了

3955

我直接拿来用

3956

看到吗

3957

对呀

3958

明白吧

3959

所以说这就是编译里边儿的不同的层面上的优化

3960

编译层面不同的层面上的优化

3961

都是在这个层面

3962

知道吧

3963

所以说再给大家聊一个就是编译层面的优化

3964

这个create a rock

3965

他创建的这个过程聊完了

3966

我们编译和运行时再把它串一下

3967

基本上就没问题了

3968

是吧

3969

然后

3970

然后然后

3971

然后就是什么

3972

就是我们的那个什么

3973

create blackblack在VIVO的VIVO的里边创建VIVO的那边

3974

创建微弱的

3975

创建微露的在我们的这个是在我们这个不同的不同的东西

3976

我给大家这块有一个备注

3977

问的东西这块儿有一个

3978

这块有一个备注

3979

我给大家把这个东西就是不同的文件夹有什么有什么

3980

有什么有什么东西

3981

把这个备注给大家写到这儿

3982

不同的文件夹有什么不同的功能

3983

不同文件夹不同的功能

3984

这个是re active这个东西是响应式数据功能

3985

对于不同的平台

3986

我们我们是不是说有响应

3987

是有运行时

3988

编译时

3989

这上面儿这是编译时

3990

这是针对于什么编编译什么单个文件夹SFC是吧

3991

这是编译针对于道路节点的冻结点

3992

冻结点的就是在外部层面上的变异

3993

这是什么

3994

真正脱离外部层面上的一些一些变异

3995

然后这是运行时

3996

这是脱离

3997

动冻结冻冻环境的运行时就是

3998

动物环境的运行时

3999

就是比如说他要操作一些东西

4000

或者什么一些东西是吧

4001

打配器

4002

修改真正修改配置这其他的东西是什么

4003

SP rain的这些东西

4004

我在这儿目录结构都写着的

4005

里边有一些备注

4006

当然核心的东西

4007

Compare这些东西

4008

这里边的东西ST语法编译这些东西

4009

它就是一个一门

4010

其他有备注

4011

同学们下来可以看一下里边的备注

4012

这个编译的东西我们就给大家讲了

4013

因为编译它其实是一门编译原理

4014

一个实现

4015

编译原理的实现

4016

这是什么东西

4017

你要去点右上角

4018

右上角不是有个东西吗

4019

右上角不是有一个有一个那个那个东西吗

4020

老师

4021

为啥一个同学都没编译

4022

什么意思

4023

你说你那个吗

4024

你要去点右上角

4025

右上角有个开启静态编译的那个东西

4026

它默认

4027

他要去点右上角

4028

要去点右上角

4029

右上角不是有一个有一个优化吗

4030

这个是在优化的情况下做了处理

4031

知道吧

4032

我的天

4033

哎呀

4034

我这都关了

4035

现在自己玩儿吧

4036

他要去点右上角

4037

在这里边在这里边这里边有这个这个文件夹

4038

这个文件夹

4039

这个文件夹就是这个这个template文件夹

4040

你们直接去把这个取个http server

4041

把这个东西运行起来

4042

他有个右上角

4043

右上角上面有几个功能

4044

你直接去玩就行

4045

知道吧

4046

这个很简单的

4047

然后这边就是不同的文件

4048

不同文件不同的目录

4049

所以编译这一块儿的东西

4050

基本上就是你们要去学一下编译原理

4051

我推荐大家编译原理你们学会了为所欲为

4052

真的为所欲为

4053

很多东西都是在编译原理之上

4054

为派克也是编译原理

4055

知道吧

4056

外派课也是在编译原理

4057

那些东西都是边缘懂

4058

所以他都是一层一层

4059

能写对

4060

右上角好几个优化呢

4061

一个一个去玩吧

4062

所以说我们在这一步来给大家看一下这个

4063

创建微露的威露的里边的维度

4064

不同的文件夹

4065

不同的文件夹

4066

这个是响应式数据是吧

4067

这是响应数据

4068

我们最最核心要关注的就是这个文件夹

4069

这个文件夹

4070

这个文件夹

4071

其实这三个文件运行时的几个文件夹

4072

就编译的文件夹

4073

说实话真的能把编译时这里边的源码全部看明白的人很少

4074

我也只是看了个大概把编译运行时里边的大体逻辑

4075

因为这一套东西是一个什么

4076

是一个一门学问

4077

没有必要去

4078

我会的

4079

我本来就会

4080

我还为什么我需要去看它每一个API呢

4081

你看它每一个这些东西

4082

每一个节点的定义

4083

我还需要去看它每一个节点的定义吗

4084

不需要去看的

4085

知道吧

4086

不同的节点定义

4087

你看他在里边儿

4088

知道吧

4089

他这你要去学的是他这套思路

4090

它的源码的思路不需要去看它每一个节点的定义

4091

知道ST的定义

4092

这些东西不需要去看

4093

学习有方法

4094

然后我们来看一下威刚black

4095

微辣的

4096

微露的

4097

在这里边儿的威露的

4098

创建温柔的

4099

VIVO VIVO的里面有个什么it black啊

4100

这是create VIVO的

4101

VIVO的就很简单

4102

他就是一个什么

4103

VIVO的就是一个什么

4104

就是构建需就是构建一个动物对象

4105

就是构建一个对象

4106

你看这里边儿就是判断是否是冻结点

4107

如果是多么节点

4108

你看这里边儿

4109

他会判断是否是动态标记

4110

如果是动态标记

4111

如果是动态标记

4112

如你如果你这个上边儿有动态标记

4113

就是你这个上面有配码

4114

动态配气吗

4115

是不是有动态配气吗

4116

是吧

4117

如果有这些东西

4118

他就会你看

4119

然后拿过去做一些处理是吧

4120

拿去做做一些处理

4121

然后这上边儿构建威乐的

4122

威乐这是我微弱的上面所有的属性

4123

就是你一个你一个虚拟我们上面所有的属性嘛

4124

你看动态戒严是否是动态戒严

4125

是否是动态属性

4126

是否有动态翘的

4127

是不是这些东西就是来就来了

4128

他维护起来了

4129

就属性就构建起来了

4130

然后他在哪块儿做处理

4131

Create black是吧

4132

我们要给大家聊的是credit block创建微露的

4133

其实还好

4134

这个东西就是构建一个对象出来

4135

为的就是一个对象

4136

Quick book啊

4137

这是

4138

Open black open布拉克

4139

他维护了一个对战

4140

维护了什么对战呢

4141

维护了一个多层

4142

我们刚刚是不是给大家说了

4143

他是多级嵌套的一个不拉客是吧

4144

他一级布拉克

4145

一级black嵌套一个布拉克

4146

所以他这块儿我会为维护一个站

4147

当你当前这个black创建完了之后

4148

他会回到你下一个站里边儿去

4149

知道吧

4150

所以这一块儿我们就回到这里边儿

4151

布拉克里边儿

4152

它会创建一个什么微露的

4153

创建微软的时候

4154

它会创建一个同学

4155

你看创建微博的时候会创建

4156

为什么创建我们一个他会把这个家一个醋

4157

这个醋是什么

4158

代表是什么动态block了吗

4159

他代表什么动态不了看到吗

4160

动态布拉克

4161

如果是动态black

4162

你这个微了这里边儿

4163

你这个VIVO的这里边

4164

VIVO的这里边儿

4165

是吧

4166

就是一个什么black low的

4167

如果是一个black leather

4168

它这边就会做一些处理

4169

知道吧

4170

在这里边儿

4171

这块儿就加一个a

4172

这里边儿这下边儿你看如果是black处理在这里边就会添加到把把你当前的微弱的添加到你当前这个站里边儿是吧

4173

添加到你当前这个blog的在里边

4174

然后去处理其他直接点是吧

4175

处理其他直接点

4176

然后继续回到这上边

4177

然后这个处理完了之后

4178

然后判断你当前这个微弱了

4179

是否这个这个节点是否已经有子节点了

4180

就是我这个节点是否已经有动态直接点了

4181

有动态直接点的情况之下

4182

就怎么创建

4183

就拿到我们当前这个credit block是吧

4184

因为你其他的所有动态节点已经全部往black里边添加了

4185

是不是我们说了

4186

如果是一个动态节点

4187

是不是就会往里面添加

4188

是不是

4189

是不是看着这个代码呢

4190

如果是一个block节点

4191

是不是就就会往black里当前这个black里面去添加是吧

4192

是不是往这个当前这个博客里面去添加

4193

添加完了之后

4194

然后你看它就会把这个当前这个brock里边儿添加我当前这个VIVO的节点的动态属性上面是吧

4195

你后续

4196

所有往这里边添加的东西都会添加到这里边儿是吧

4197

因为它是引用吗

4198

明白了吗

4199

这个block就构建出来了

4200

就是一个出战的情况

4201

当你整个吧

4202

当你当前那个bug

4203

对呀

4204

冬天接进来的时候不就是credit but吗

4205

你刚刚刚看那个代码

4206

它编译出来的时候

4207

不就是有一个扣儿吧

4208

就不就是有一个为促嘛

4209

是吧

4210

那个标识不就为促嘛

4211

是吧

4212

就是动态纪念

4213

Quick but的时候不就是往里面去添加吗

4214

是吧

4215

刚刚不看到了吗

4216

看到编译出来的代码是吧

4217

这块结合起来

4218

现在你你们下来之后肯定要看代码

4219

再结合这个东西来看

4220

你现在这么看

4221

肯定稍微有一点绕

4222

但是你现在能明白这个大致的意思

4223

下来之后自己看

4224

肯定要自己下来再看一下这个东西

4225

再结合这个代码再看一下

4226

那你不然说实话

4227

这个东西你就这就这样

4228

你我我怎么讲呢

4229

你就说V3你就学完了

4230

那肯定不行的

4231

对吧

4232

很多同学我一直用都没用过

4233

然后我给你讲了之后

4234

你说V3你学完了

4235

那肯定不行

4236

是吧

4237

懂了吧

4238

V2版

4239

没所谓啦

4240

继续啊

4241

所以说这是black知道black创建完了

4242

他就其他就完了呢

4243

我们继续

4244

最后就是一个什么拉通的流程

4245

拉通的流程

4246

怎么啦

4247

通就是你使用VIVO的时候

4248

他怎么去拉通的

4249

拉通我快速给大家过一下

4250

快速过一下

4251

里边儿有些东西

4252

你们下来之后要自己去再看一下里边的核心的东西

4253

快速给大家啦

4254

通过一下里边的那个流程

4255

主要流程

4256

主要流程其实已经给大家讲了的

4257

她跟威尔一模一样

4258

我给大家再拉

4259

再拉一下

4260

是想要大家给大家说一下他这个玩意儿

4261

然后我们回到这个里边来

4262

还有还有还有十分钟

4263

我们回到这个里边来

4264

讲一下这个里边儿的在

4265

在在在这个里边这里边

4266

这里边儿有一个在index里面这儿

4267

在里边

4268

你看我们使我们使用的时候是怎么使用的

4269

我们使用VI的时候

4270

你使用AOE的时候是怎么使用的

4271

同学们

4272

我先给大家说一下使用APP的时候怎么使用的

4273

你们使用A1的时候是怎么使用

4274

使用A3的时候是怎么使用的

4275

怎么使用的同学们

4276

这块儿有例子

4277

使用V3的时候怎么使用呢

4278

傀儡APP是吧葵的APP

4279

然后怎么样

4280

就是就是把你的APP实力传进来是吧

4281

然后调用这个APP的什么挂载是吧

4282

Monkey的是吧挂载

4283

所以这里边我们的使用也就这么使用的

4284

然后我们回到回到这里边儿来聊一下他这个东西的一个

4285

开始的一个过程

4286

开始真正的一个过程串一下

4287

创业的过程

4288

Create APP

4289

我的APP哪去了

4290

我的create APP是在

4291

傀儡PPT

4292

这傀儡PP

4293

同学们首先拿到你的APP

4294

这是你所有的V代码是吧

4295

你的所有的V代码是不是

4296

然后拿到你的VE代码

4297

然后拿过来之后这儿去它会调用一个APP这个方法

4298

用APP方法它会创建一个APP实例

4299

然后APP实力我快速给大家过一下

4300

下来之后你们再跟着我的这个代码看看

4301

这块儿全都有备注

4302

然后APP实力创造APP实力之后

4303

然后APP上面会有一个monkey的方法

4304

在浏览器端它会重写这个monkey的方法

4305

它会重写这个monkey的方法

4306

Monkey的方法怎么重写呢

4307

它会判断你这个东西

4308

是否已经有temperature

4309

如果有template没有render

4310

如果没有render

4311

他会去什么

4312

拿到你这个temperature

4313

然后去做什么

4314

就是同学就是去变异

4315

就是变异

4316

知道吧

4317

就变异

4318

这块也要去变一

4319

是吧

4320

你如果没有这个template

4321

他也会去变异

4322

没有leader也会去变异

4323

知道吧

4324

所以这块儿monkey的

4325

所以说什么时候执行这个monkey的

4326

在你外边儿亏的APP

4327

它返回这个APP实力是吧

4328

然后你再调用AP的时候

4329

它执行OT了

4330

就是说我们再来看它返回这个APP实例

4331

是反馈什么

4332

然后他执行帮T的时候执行了什么

4333

所以首先

4334

首先啊

4335

首先我们来

4336

访问一下看一下它它返回这个APP实力返回APP实力进到这里边来

4337

他会亏的APP

4338

这里边它会掉一个这个东西是吧

4339

这个东西会掉一个render

4340

这个render他会根据不同的浏览器端去创建不同的方法

4341

不同的端调用不同的方法

4342

比如说有的端你看

4343

比如说我们不同的端

4344

你看这个不同的端

4345

你看不同的端改变多么的方法

4346

是不是就是改变浏览器端的方法

4347

是吧

4348

所以说它会有跨端的这个过程

4349

就是在这个过程你可以去传你对对应端的read the render options知道吧

4350

然后render

4351

然后render完了之后

4352

这边就会返回一个什么

4353

Quick basket render

4354

这里边有反映一个什么过程

4355

同学们里边会返回一个我们的

4356

这里边有一个

4357

最核心的

4358

这里边全所有源码全都有

4359

全都给大家备注了的

4360

嗯

4361

嗯

4362

这就是主要串起来的过程

4363

这是多么的过程

4364

这一块儿的过程是多么的过程

4365

这个你不用管

4366

稍微有点绕

4367

多么的服你这块儿其实也不用去管

4368

你不用也不用去学

4369

你只要把算法学好就行

4370

所以这块儿其实我只是只是说把这个东西发给你

4371

给你给你搞出来知道吧

4372

知道吧

4373

所以在这一步它会返回什么

4374

它会返回你看可以返回这个对象是吧

4375

会返回这个对象

4376

这个对象返回的是什么

4377

这个APP看到吗

4378

这个APP你在外面调是奎的PPT

4379

你这个APP就会调用什么API里面会返回这个函数

4380

这个函数会返回什么

4381

一个APP实力

4382

看见这个APP使命键

4383

这是APP实力吗

4384

这个APP里边儿你看这是各种ID

4385

这是你的config UR

4386

然后这是你的youth是吧

4387

你的APP里面的use mix component是不是全在里边儿

4388

还有什么APP的

4389

什么monkey的挂在生命周期

4390

Monitor挂在周期是不是

4391

然后挂载生命周期有什么

4392

有什么生命周期挂载的时候就会初始化有什么

4393

如果没有挂载

4394

就是第一次挂载会初始化一个什么

4395

出会初始化一个整个大的微露的节点

4396

是吧

4397

把整个大的威力的节点

4398

把当前这个APP的实例挂载到我的VIVO的实力整个微弱的节点上

4399

知道吧

4400

然后去掉用什么

4401

去掉一个render

4402

看到掉render

4403

这个render是哪儿传进来的

4404

是外边传进来的

4405

这个render事儿传进来的

4406

是不是这传进来的

4407

所以说调人的时候

4408

同学们调用的时候会发现你这个

4409

实力当前

4410

我这个V的AP实例给了他

4411

然后掉扔掉扔掉了什么

4412

掉在里边掉了什么

4413

来看一下render是一个什么过程

4414

咱们看一下如果调render

4415

你这里边儿没有去做一个什么过程

4416

因为我们这块儿是会走挂载的流程

4417

会走EMS流程

4418

我们在外边儿是走EMS流程

4419

在走的流程是吧

4420

Monday的流程如果是不是如果等于na

4421

那就是嘛

4422

说明是卸载的流程是吧

4423

就是你现在新的微了等于浪了

4424

如果不是

4425

那什么就是搭配其就是不断把打配器的过程

4426

那么不断打配齐

4427

我们尽到不断地配齐

4428

不断打佩奇呢

4429

它又分为很多不同的组件儿

4430

知道吧

4431

佩奇又分为不同的组件配齐

4432

又分为第一次修改

4433

你看佩奇又分为处理文本节点是吧

4434

对比嘛

4435

就是冻的付了吗

4436

其实也现在也还没到东地府

4437

因为现在还没有到

4438

只是对于一个正常维度的一个什么刚开始挂载的维度

4439

你赶快处理处理几台几点

4440

处理文本节点

4441

处理这些东西

4442

那他什么时候会到什么到了我们那里边儿门组件是吧

4443

处理组件的时候是吧

4444

处理组件的时候

4445

所以说这块儿他会处理什么

4446

处理组件

4447

这就是处理组件的逻辑

4448

我们会我们的东西是不是组建

4449

VIVO的是不是一个组件

4450

准备处理组件

4451

会处理组件

4452

抽取组件儿就到我们这里边了抽取组件这里边做了这些事情

4453

这里面有些事情呢

4454

这里边儿首先是

4455

这里边儿有好几部

4456

咱们下来之后你们自己看杯子

4457

我这儿给大家看一下未处理组件

4458

处理组件在里面

4459

第一次处理组件的逻辑主要是

4460

如果是第一次

4461

更新就不用说了

4462

更新就是动的

4463

如果是第一次就是挂载是吧

4464

也是挂载

4465

挂载组件

4466

挂载主角

4467

怎么执行挂载组件儿走这一步

4468

走这一步挂载组建这一层

4469

首先它会把你这个组件根据你传进来的微弱的传来微弱的去挂在这个主角的实力

4470

是不是就挂在你这个主角的实力

4471

同学们生成组件实例是吧

4472

生成组件实例完成之后

4473

去做一个什么

4474

去做什么

4475

去设置你主机的实例

4476

设置主角实力是什么意思

4477

意思你这里面有各种setup

4478

是不是是不是

4479

你是不是有setup

4480

是不是有setup

4481

它会执行你的setup

4482

拿到你的setup去执行

4483

知道吧

4484

那这一步就会拿到你的setup去执行

4485

在这这里边儿

4486

你看他会拿到你的setup

4487

拿到你的卡

4488

然后去代理你整个proxy的实力

4489

就是你你的proxy上面我们拿到V的时候

4490

同学们你们拿到微实力上面

4491

你们的一个V1组件实例的时候

4492

是不是可以访问它的各种属性

4493

是吧

4494

那这个种属性都是通过代理来的

4495

那怎么代理

4496

代理了什么

4497

代理了we的purpose

4498

带领we的什么贝塔是吧

4499

带领了we的各种其他的那些数据

4500

全部代理到什么唯一的实力的content上面来了

4501

就是说你可以直接拿到在实力上面了

4502

知道吧

4503

然后去判断你这个component是否有赛特

4504

如果你这个房破门的返回了三条方法

4505

那怎么办

4506

才会去执行的方法了吗

4507

执行的方法设计方法就会返回什么

4508

就会返回我们的什么

4509

我们刚刚那些数据你们没有用过的

4510

自己下来用

4511

不知道怎么set了

4512

自己下来看文档知道吧

4513

晒的方法执行完了之后

4514

它会判断你的方法是否是怕Miss

4515

如果是MS

4516

就处理PAR Ms

4517

正常就是什么

4518

就是SSR这种情况

4519

如果不是怕呢

4520

正常就是不是二米

4521

它会返回你这个赛特拿来做一个执行

4522

这里边儿我们sight执行的结果就是我们返回的那些内容吗

4523

你的sight可能从可能反馈什么

4524

可能返回render是吧

4525

Sight是不是可能返回render

4526

如果是render他就说什么

4527

把你的render函数挂载明白吗

4528

如果你的set a没有返回render就会在外边儿去挂载点

4529

就是等于template那块模板那个一会儿那个一会儿串起来的时候

4530

就给大家说这块儿的点就是什么

4531

就是我们的一个sight里边儿返回的点

4532

知道吧

4533

Sight里面返回的人

4534

如果再返回的对象在里面就会做一个处理

4535

做什么处理你的瑞福

4536

这是我们说的瑞府的瑞福

4537

在访问的时候一定要用什么点video在访问是不是

4538

但是你在模板里边儿使用瑞府有没有用点video

4539

没有

4540

他怎么怎么处理的

4541

她在你这儿反馈反馈你的绕绕他

4542

这是你的sight里面返回的队服

4543

然后拿过来

4544

他做了一层代理键

4545

抹了一层代理

4546

如果你是瑞甫

4547

他直接去返回你rough的什么点

4548

你知道吧

4549

所以说这就是sta

4550

然后这是整个返回的数据

4551

数据数据你返回set的数据

4552

然后返回来之后去做什么

4553

去调用setup执行完了

4554

Setup执行完了

4555

然后这里边儿把你的主角实力给到这里边儿

4556

然后去走这个里边儿这个流程

4557

这个流程执行完了之后

4558

这个里边儿就是什么执行run挂在render

4559

它会判断你这个reader是否

4560

在上边儿你的render里面是否已经挂载

4561

如果没有挂载怎么办

4562

就编译

4563

是吧

4564

就模板

4565

这是这是模板

4566

我们之前刚刚给大家看了他们的模板

4567

然后来怎么办

4568

编译呗

4569

是不是在线编译

4570

是不是在线编译的

4571

如果没有在线就是离线变异是吧

4572

是吧

4573

是离线

4574

离线面积不就还是我们的那个什么微

4575

在线和离线是不是还是一头的东西是不过来是吧

4576

论点是

4577

或者实力是吧

4578

明白吗

4579

挂载完了之后

4580

这不是挂载完了之后这一块儿

4581

这是在线

4582

咱们这在线

4583

完了之后做什么

4584

The option

4585

Option什么叫option

4586

就是你的主主角实力

4587

为什么要option

4588

为什么要有option这一块儿处理

4589

因为他因为我们这一块儿全是怎么处理

4590

全是V3的这种处理逻辑似的

4591

他既然支持支持sight

4592

那这块怎么办

4593

我们就把你看你写的所有品

4594

就是你这个主页上面写着各种对你按option这种写法是吧

4595

你的open

4596

你你们写的时候写的open是吧

4597

写的option的写法全部他把这些数据挂载到主角实力上面

4598

通过另一种方法挂载是吧

4599

通过option这种这种不用说了

4600

就是挂载数据是吧

4601

就是往主角实力上面去挂载数据

4602

没在上面儿

4603

就是往主角实力上面去挂着没事儿

4604

看见了就是挂着没事儿了吧

4605

所以说这一步就是挂着挂着什么

4606

哪去了

4607

就是挂在option

4608

所以说V3里边

4609

它虽虽然它是它的设计就是就是以hooks模式来设计的

4610

但是他也支持什么

4611

支持option是不是支持APP之后

4612

然后这里边儿什么

4613

如果没有便意

4614

如果不需要变异

4615

这是低微的情况

4616

如果不需要翻译

4617

这里边儿这里边儿这个过程

4618

不行不行

4619

挂载这里边儿

4620

挂载了之后

4621

里边执行完了

4622

OK

4623

挂载完了就执行完了

4624

然后就回到哪边哪边去了

4625

回到我们刚刚哪一部

4626

嗯

4627

回到我们刚刚的

4628

赛特赛特主角实力是吧

4629

Sight的主角实力

4630

Sight完了之后

4631

同学们主角实力是不是完了

4632

我现在在整个组件是不是在内存里面已经有了

4633

我组件儿有我的

4634

你给我的各种配置

4635

你给我的各种数据

4636

还有组件对应的render方法

4637

是不是就全部构建完了是吧

4638

是不是这块儿明白吗

4639

是吧

4640

这个过程是不是全部就是构建组件实例这个过程根据你输入的代码和你的render和你的IP是不是有点快

4641

你们下来之后自己看代码再穿一下

4642

然后这块儿完了之后

4643

同学们很简单

4644

这一步这一步我给点进去

4645

你们就看得明白了

4646

还用说吗

4647

还要什么

4648

你飞

4649

你飞是吧

4650

把你的卡用起来

4651

是不是你的ID就用起来了

4652

是不是是不是是不是X

4653

X是不是就监听我们的数据是否第一次执行

4654

这就是他就会第一次执行一次是吧

4655

只要你这么一挂载

4656

它是不是就会第一次执行一下

4657

是不是这块是不是来了

4658

是不是来了

4659

是不是连接连接起来了

4660

第一次执行一下

4661

是不是就会执行一下我们这个函数

4662

这个函数里面就会执行我们什么

4663

就是咨询我的什么

4664

同学们就会执行我们的配器

4665

执行我们佩奇位置执行什么

4666

咨询我们的

4667

执行我们什么

4668

我们在下边儿这里边儿的

4669

各种

4670

同学们

4671

这里边儿

4672

如果是其他其他主角他会打配齐

4673

有就是递归去配气吗

4674

就是因为他还有指数吗

4675

还有其他的一些子组件吗

4676

还有指数吗

4677

是不是稍微去只去指数里边各种搭配去吗

4678

是吧

4679

然后这是挂载吗

4680

这是挂载

4681

然后她在这一步会生成

4682

你看这这一步

4683

它会生成

4684

你看它会生成我这个什么

4685

这里边会生成我的

4686

我的就是执行我这个render

4687

这是我的instance这里边它会执行你这里面传递render

4688

看到吗

4689

这是我们的同学

4690

他会执行你这里边儿传进来的render函数

4691

知道吧

4692

是吧

4693

他会拿执行我这里边儿船舰render函数

4694

看见点函数执行的

4695

是不是就会生成微弱的

4696

执行的函数的过程是不是又是又回到了我们什么获取依赖

4697

生成微露的

4698

然后微露的又往这里边儿不断的递归是吧

4699

是不是

4700

对

4701

微弱了

4702

整个整个递归完了之后就会回溯

4703

不断回溯回溯

4704

回溯完了之后

4705

为什么就会构建起来一颗什么树

4706

是吧

4707

构建一棵数完了之后

4708

同学们构建起来一棵树

4709

回到这一步就是我们的result是不是

4710

是不是

4711

哪去了

4712

这是我们数

4713

这是我们数的指数

4714

我们指数构建完之后

4715

把整个树挂载看到吗

4716

整个树挂载看到吗

4717

整个指数挂载明白吧

4718

这是我们整个指数过的

4719

所以说这个里边就是执行render的时候又往里边儿的规

4720

因为执行render的阶段是不是又会获取数据

4721

又会去执行我的VIVO的

4722

又会执行我的卡盟的实力挂载

4723

是不是

4724

直接window是不是又到又又到哪边去了

4725

又到我们外边那个render是吧

4726

我们外边外边传的传进来的render是吧

4727

那个render又去执行是吧

4728

就是这里边儿这点儿事

4729

然后要执行就会不断的规是吧

4730

所以这一步当component的时候

4731

这是component正常情况

4732

Component挂载的情况

4733

就执行完了

4734

是执行完了

4735

那什么时候动的呢

4736

Element的时候是吧

4737

我们刚刚说的是component

4738

那什么时候

4739

地方element的情况是吧

4740

N的情况

4741

你看处理N的情况什么时候会处理element

4742

同时会触及到你的节点是element情况是冻结的时候是吧

4743

你看这就是文本节点

4744

可以处理文本注释节点

4745

处理知识

4746

但是文element节点的时候

4747

除了element

4748

然后出了element的element节点

4749

拿到你的element前一个节点一个节点

4750

然后判断

4751

如果是烂是吧

4752

就是直接是挂载

4753

如果不是

4754

那就更新来更新

4755

如果更新挂载

4756

其实好说来看更新

4757

更新的情况

4758

你看它会判断你这个是否是什么

4759

佩奇是否是动态

4760

能看到吗

4761

懂了吗

4762

动态翘的

4763

如果是动态翘的

4764

如果动态结合的

4765

如果是动态切了你这如果是这个玩意儿

4766

动态属性大于零

4767

如果是动态属性直接去

4768

所有直接更新动态属性

4769

如果不是动态属性动态class就动态修改动态动态class

4770

如果是动态style就修改动态style

4771

如果动态purpose就给其他的动态purpose

4772

可以吗

4773

这个就不用说了吧

4774

然后是动态text

4775

直接修改动态text

4776

如果是不是动态text

4777

如果不是动态的

4778

就不是这些所有东西都是不是动态的子节点

4779

不是动态的这些东西

4780

那怎么办

4781

这儿还没到这儿

4782

这儿是动态的是吧

4783

是不是

4784

如果不是动态的什么就正常就正常去配齐是吧

4785

正常是佩奇purpose

4786

然后这儿还有一个什么动态经典动态直接面试吧

4787

所有动态直接点

4788

如果是动态直接就打打佩奇

4789

就全亮去配齐动态之恋

4790

这个就拿到拿到之后每个去执行就行了

4791

这个很简单

4792

你看这边就没有都没有代码

4793

直接拿过来重新配曲每一个节点是吧

4794

这个动态节点

4795

因为你已经已经到了对应的节点了

4796

是吧

4797

如果没有优化

4798

如果没有优化

4799

就是没有什么

4800

没有当前你这个东西动态纪念也没有优化

4801

那怎么办

4802

就是到地府

4803

地府全力以赴

4804

全力

4805

地府就到这里边儿了

4806

全都是动物

4807

地府里面就会分为什么K的情况和没有课的情况

4808

没有课的情况

4809

就不会存在说什么洞的这个过程

4810

没有扣课的情况

4811

它它就会它里边儿处理的逻辑就会完全就就就就就很就就咚地服的过程都不会走

4812

没有课的情况直接去去就去全量更新是吧

4813

内坨最全更新

4814

如果有课的情况

4815

他会动

4816

地府才会懂的

4817

所以说平时让你们写K是有原因的

4818

看见

4819

当他默认编译的时候

4820

也会有可以

4821

有些东西也会也可以你看

4822

所以这里边这里边你看

4823

这边就是去更新对比的时候

4824

双端比较第一种你看数组的时候

4825

你看双端比较

4826

先是第一步双端比较

4827

从头比较

4828

从尾比较

4829

旧双端比较

4830

双端比较完了之后

4831

有剩余节点的情况

4832

然后再去怎么比较

4833

然后再去比怎么比较完了之后再去再去做什么

4834

再去打配齐

4835

然后这里边最最核心的就是一个什么公共子序列是吧

4836

有公共公共子序列去做一个东西

4837

这里边就是动地府

4838

知道吧

4839

然后

4840

就这些动物的骨这一块儿补给他讲

4841

你们去弄

4842

驱动算法那块儿自己学完了之后再重新回来看吧

4843

也可以直接跟根据我这个

4844

根据我这个这个备注

4845

其实他的他的备注也很明白

4846

我这个备注

4847

我的备注也很明白

4848

知道吧

4849

它当然它有一些英文备注

4850

我的备注就很明白了

4851

你再拿过来看就行了

4852

说实话对吧

4853

对他的也是英文

4854

但是他也没没我备注的这么这么这么好

4855

咱们就这样

4856

拜拜拜拜啦

4857

今天干了我两个半小时

4858

两个两个小时

4859

两个小时40分钟

4860

应该三三个小时

4861

好吧

4862

拜拜了

4863

下次我把课件发给姥爷

4864

好吧

4865

拜拜拜拜

4866

V3

4867

其实还好

4868

微山还好

4869

下来之后你们要看

4870

这个你们不看肯定懵逼

4871

拜拜

