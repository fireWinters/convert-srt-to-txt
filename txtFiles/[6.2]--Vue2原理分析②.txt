1

咳

2

喂

3

听到声音吗

4

喂

5

喂

6

听到声音吗

7

8.05开始

8

只有

9

你们昨天的内容要去听明白

10

一楼

11

点卡

12

其他同学卡

13

声音卡顿卡吗

14

不卡

15

那就是你卡

16

换网换网

17

你换个网

18

是吧

19

学知识就这个样子

20

4G呢

21

你这不舍得投资

22

你五系手机呢

23

手机是乌鸡吗

24

手机是5G手机嘛

25

你们搜歌儿

26

厉害呀

27

都用起5G5G手机啦

28

这么有钱

29

你们一个个的老师都才用4G手机

30

哎呀

31

真的是

32

你们放的歌

33

放的什么歌

34

这个

35

The light re

36

TE Sha LA

37

地

38

惊醒

39

水像油画一样安静和平

40

鸽慢

41

着心跳的放晴

42

祈祷你相拥的位置

43

总也不懂得生活

44

爱情

45

你在回忆里留下的脚印

46

是我爱的风景

47

思念就代表爱的明信片

48

爱恋真心的

49

就是经典

50

就是经典

51

的想念陪在你身边

52

发生

53

都是

54

为你向往着

55

广场上

56

我要把爱全都装进心里

57

陪我一次旅行

58

送你

59

的想念

60

寄出代表爱的明信片

61

我要送你

62

今天

63

真心

64

就是经典

65

就是经典

66

我的爱

67

对你

68

的想念

69

你在你身边

70

畏惧

71

永远不懂得守护爱情

72

你在回忆里留下的脚印是我爱的风景

73

zhe I

74

不要走越过了

75

怀念真心把世界

76

就是经典

77

的想念你

78

在你身边

79

我

80

想念

81

着心把世界

82

就是经典

83

就是经典

84

我爱你

85

爱你

86

爱你

87

我孟起场地

88

送

89

伞

90

咳

91

咳

92

Hello

93

都在吗

94

同学们喂

95

都在吗

96

可以上课

97

喂喂

98

还是我们昨天那个节奏

99

划划扣起来

100

一扣起来好吧

101

懂得一扣一

102

不懂的扣零就这么简单

103

好

104

我刚刚看到这个同学说什么

105

能不能讲一下那个什么

106

V手写面试题是吧

107

为一般手写

108

说实话

109

最多就让你实现一个什么数据状态

110

或者说一些其他的东西

111

那V3现在目前来说

112

市面上考V3手写的源码是面试题

113

现在还偏少

114

V2其实考手写V1的面试题我觉得偏少

115

他不会浪费让你手写V面试题这个时间

116

他可能更多让你如果是你的技术战士

117

V技术站

118

他可能更多是问你一些VI的东西

119

然后考什么呢

120

考的可能更多的是

121

算法手写这个东西

122

因为它需要20

123

可能十多分钟

124

20分钟

125

是吧

126

15分钟

127

你说这个时间他口味这个东西为手写有啥难的嘛

128

你们平时写的那些东西就是那些东西

129

最多就是一个

130

他会问你一些什么复制卷和芝士圈传递的这些东西是不是

131

但也有些奇葩的公司

132

那种公司我觉得去不去其实都无所谓

133

所以说这个事也就是我为什么跟你们说手写V这个东西

134

其实它是没有意义的一个概念

135

然后我们回到昨天东西

136

同学们回到昨天

137

我们昨天讲的什么

138

我们讲什么

139

专讲什么

140

昨天讲的V1是吧

141

讲为什么编译时运行时是不是

142

昨天涨了编译时运行时是不是

143

编译时运行时还有什么

144

我们呢从编译时去做优化

145

它的框架的对比是不是

146

然后还有VC的编译时的整个过程是吧

147

它的编译怎么去编译的

148

它的编译时做了一些优化

149

他的思路是不是

150

LV的架构是不是

151

是不是

152

那么在编译时的基础之上

153

然后我们就扯到了什么运行时是吧

154

编译时还是打包出来的代码是吧

155

编译时他打包出来代码是什么样子是吧

156

怎么又扯到什么运行失事

157

运行时运行时是什么呢

158

它源码的目录是不是我们源码的目录结构

159

运行时在SRC里边是吧

160

HRC里边就在里边儿

161

这整个扣里边是不是整个空间是我们源码的目录结构是不是

162

那我们就给大家说了什么这个东西微源码的V1的什么这个思路是吧

163

是不是昨天我一整个的一个什么整个大架构

164

是不是

165

所以我们现在再把这个V的大架构复述一下

166

就进入到今天的主课主要内容了

167

昨天我们说了什么

168

昨天说了我们平时打包的代码

169

这是我们写的微指令是吧

170

我们一个什么一个指令

171

你们平时写的这个东西对应一个指令

172

是不是那么一个指令

173

它会打出来一个什么一个render是吧

174

你怎么怎么去修改

175

怎么去修改

176

怎么去修改你这个展示的具体的逻辑是不是

177

然后我们把它怎么办

178

把它这个联系方式就是我们怎么大爷

179

这是我们大一电话本儿

180

是不是我们现在需要

181

通过一个纽带把这个东西记录到什么大爷电话本上是不是什么样的纽带

182

可能是你的电话号码是吧

183

可能是你的微信号是吧

184

可能是你的什么QQ号是吧

185

这些东西都是有可能的

186

那这些东西来做什么

187

他作为一个iWatch儿是吧

188

一个指令对应的water是吧

189

来作为一个纽带是吧

190

作为一个纽带

191

沃尔维护了什么

192

怎么去打电话

193

怎么发微信就怎么联系你这个过程

194

具体怎么联系

195

他是water来维护的

196

Water可能是打电话是不是

197

可能是什么

198

发微信可能是发QQ

199

是不是都是有可能的

200

是不是

201

这一步明白明白

202

明白明白water是负责具体去维护什么

203

触发什么动作

204

答

205

什么动作

206

去怎么执行这个render

207

怎么去执行是吧

208

那谁来维护这个water

209

谁来维护这个water

210

我们说了一个指令

211

一个render

212

对

213

一个water

214

是谁来维护这个water

215

这个东西他收

216

他要收集到大爷的电话本儿里边

217

是不是在地里边

218

是不是要收集到第二电话本儿里边儿

219

那什么时候收集到电话本里边

220

什么时候收集到大源电话本儿里边儿

221

它会经过一个什么过程

222

他会首先把我们这个东西拿过来做一个什么处理

223

拿过来做什么处理

224

把这个东西拿过来执行一次是吧

225

执行一次我们说了

226

执行的时候

227

昨天我们说了是吧

228

执行的时候

229

执行这个的时候

230

他会去访问什么

231

访问访问什么问什么

232

我们这上面是不是应该有位置

233

是啊

234

是因为有位置

235

位置这上面是不是应该有D是吧

236

是吧

237

执行的时候它会发生什么

238

有D是执行的时候

239

他会反问什么

240

访问this上边儿

241

它会访问这个this上面的这个message是访问的

242

上面的这个message访问的时候就会触发什么

243

触发我们这个get是吧

244

我们这个get是吧

245

怎么去触发get了

246

你先不用管是吧

247

他会能够监听得到你访问这个属性

248

监听到你访问这个属性的时候

249

我现在就把这个东西记下来

250

到底是谁来访问我这个属性

251

是不是

252

发现是water来访问我这个属性

253

我把water记录到这里边儿是不是

254

因为是通过water来发消息嘛

255

是不是

256

我把握而进入到这里边儿

257

然后数据返回它渲染是吧

258

然后下一次当我数据发生了变更

259

发生了变更

260

然后我就通知什么

261

我监听到了

262

就通知我所有的什么这个地铺去给大爷打电话是吧

263

所有打电话是吧

264

打电话然后给所有water

265

让他来a说我这儿发生变化啦

266

然后water又重新来拿新的数据是吧

267

拿新的数据

268

拿到新的数据之后

269

然后又重新去渲染明白这个过程嘛

270

这是整个大架构

271

同学们明白的

272

扣个一

273

好吧

274

昨天给他们说了

275

好不好

276

同学

277

昨天我们在这块儿又聊聊了一个什么

278

让你们下来之后

279

我们说了ever他负责什么

280

我们又把这个东西这几个归类了

281

是几个归类了

282

归了什么几哪几个类规哪几个类

283

过来几个来

284

我们归类了是吧

285

哪去了

286

等一下

287

意思意思

288

这没有吗

289

我们昨天归了几个类似

290

首先监听数据是吧

291

监听数据

292

监听数据就谁来监听它要监听的数据的什么访问

293

什么访问

294

还有什么修改是吧

295

这个东西用谁来实现

296

这里边有一个什么东西来实现observer是吧

297

Odds are这个东西来实现是吧

298

Odds are这个类

299

它定义了一个类叫做observer是吧

300

Observer来实现

301

然后他又做了什么

302

又做了收集是吧

303

收集了什么

304

你现在这块儿还没到一块儿

305

你不要着急

306

又做了一个收集是吧

307

搜集搜集数据是吧

308

收集什么数据收集

309

收集什么搜集打电话是吧

310

收集电话搜集阿搜集搜集搜集具体的是吧

311

具体通知的操作是吧

312

具体通知的怎么操作和数据的关系是吧

313

就是电话本儿是吧

314

电话本儿似的

315

是吧

316

打开电话本

317

电话本儿打电话

318

这个东西是谁来谁来收集dip是吧

319

他负责打打电话是吧

320

那么这块儿有一个东西是吧

321

具体怎打电话

322

打给谁的电话

323

打了电话之后他打给具体谁是吧

324

这东西是谁打给谁的电话

325

打给谁

326

打给谁

327

对应的指令是不是对应的指令的指令是什么

328

对应的water是吧

329

对应的指令是什么

330

对应的render就是渲染是吧

331

渲染执行修改修改页面交互的

332

指令是吧的动作是吧

333

动作这个东西是谁来实现的

334

Render是吧

335

我们打包的render实现了是吧

336

打包的render就是谁来通知他

337

让让他来修改的是吧

338

Water water维护了关系

339

Water维护

340

什么维护

341

维护

342

维护了如何

343

通知根据关系维护了根据

344

根据关系就是根据我们这个电话号码是吧

345

根据关系根据关系根据电话本电话本儿信息

346

电话本上面可能记微信号是吧

347

可能记QQ号

348

可能系电话号码是吧

349

电话信息维护根据关系如何通知是吧

350

如何通知我们什么如何通知

351

维护了根据关系

352

就是我们的电话本信息是吧

353

如何去通知什么

354

如何去通知我们的

355

那个那个那个那个阿伦德是吧

356

如何通知这个东西

357

是谁来维护

358

是water是吧

359

他他维护了这个具体怎么去通知的这个动作是吧

360

是不是这个动作

361

那这里边儿

362

这里边儿就这里边儿这几个东西就造成了什么不同的一个什么不同的一个几个关系

363

那所以说我们现在一步一步来

364

先搞这搞明白

365

这个在搞明白

366

这个在搞明白这个在搞明白这个a

367

这个其实已经搞明白

368

这个东西其实已经搞明白了是吧

369

对对对对对

370

就是具体的事物

371

对这个同学觉得很对

372

具体处罚的事物

373

就是如何去根据关系如何去通知render是吧

374

具体的触发25是吧

375

就具体触发的四五

376

是吧

377

那么这个过程现在就回到这里边儿是吧

378

回到这里边儿

379

这个里边怎么去通知的同学们

380

昨天晚上大家去看一下object DeFine property这个同学有同学下来看吗

381

同学下来干嘛

382

有没有同学不知道这个API的

383

有没有同学不知道这个API的

384

不知道扣个零

385

我看一下

386

有什么不知道的

387

都知道

388

那说明都看听话

389

听话就真好

390

我跟你说真好

391

真的是这好多东西

392

我们就可以稍微多讲一点点

393

这真的真的很好

394

真好

395

就怕那种不听话的天天说我这说说这这也不行

396

那也不行

397

这是不行吗

398

这是懒

399

知道吧

400

更新啊

401

你说这个这个更新它就是一些小版本迭代

402

微小版本迭代

403

这个没没没什么其他东西

404

WE2

405

小儿迭代

406

这都是

407

其他的未提交的东西

408

就是我的一些我自己的备注这些东西

409

这是我其他的一些备注的小版本的迭代

410

这个其实没什么主要的功能

411

细节上的东西

412

同学们学知识

413

就有人跟你说深度递归它是很难的一个过程

414

所以说不要去关注这些细枝末节

415

当你们学到一个程度的时候

416

再来关注细枝末节才会有收获

417

现在你去关注细枝末节

418

会把自己的路就卡死在那个维度

419

知道吧

420

你的围度就很低

421

明不明白

422

我们来说一下object的a PR object的这个API是怎么一个怎么一个过程

423

首先我们可以定义一个对象是吧

424

我们每个对象是不是都有个K是吧

425

每个对象是不是都有K

426

你就算这个空对象他没有K

427

但是你如果只要往他里面加入这个K是吧

428

那么我们这儿有K

429

我们怎么办

430

我们可以定义这个对象

431

重写这个对象的某一个K是不是

432

这个object DeFine property

433

它的作用就是重写

434

重写o be je这个对象

435

你看我们在这儿

436

他会

437

给他一个APP

438

然后重写这个K是吧

439

重写这个K

440

我们重写OBG上面具体的K

441

就比如说我们现在重写了

442

重写了OBGOBJ下边的什么具体的a

443

这个K是吧

444

点a是吧

445

点a这个K

446

具体重写这个K是吧

447

AJK这个K里面的触触发操作是吧

448

就是具体这个K的各种不同的操作是吧

449

我们在这儿重写

450

重写了什么K

451

重写它的OBd.a是吧

452

他这个操作这个操作怎么操作

453

这个操作怎么操作

454

你看这个操作他怎么重写

455

它可以重写你这个a的访问

456

A的访问就是你OBG访问a的时候

457

我可以鉴定得到

458

然后也可以重写什么

459

重写赛特是吧

460

重写赛特

461

是吧

462

从1OUT set是什么

463

你修改这个a的时候

464

我可以防止它

465

让我们来执行一下

466

执行一下之后呢

467

我们来怎么办

468

OBg.a是吧

469

A等于一你看

470

是不是特维斯特sight就是这就是不是就出发了是吧

471

然后我现在又来获取是吧

472

你看吧

473

他就会监听得到了

474

那这一块儿同学们这个东西是不是就这个东西听不清楚这个就是最基本的什么监听是不是

475

是不是这个明白了吗

476

这个也填明白了吗

477

是吧

478

那现在这个维度我们又来了

479

把这个东西

480

我们现在不看源码结合到这里边来

481

就在这里面

482

我们说了谁根据我们这个图

483

谁他他订阅了这个数据

484

把你这个数据重写了

485

重写了get是吧

486

Get get它会监听得到是吧

487

监听得到你这个给他是吧

488

听得到你这个什么

489

谁使用你这个数据是吧

490

监测到你谁使用这个数据

491

然后什么

492

然后你修改的时候

493

我能够监测到什么

494

你修改这个数据

495

然后我就来具体哪个K是吧

496

所以我在这块儿就是个什么操作

497

我这个case

498

这个是o be是

499

我这个OBG我怎么去处理

500

同学们给我这块儿这个OBG

501

我在这块儿是不是就可以做什么

502

我在这块儿访问的时候就是一个什么访问

503

你看看这一部这块访问的时候

504

我访问数据

505

什么时候会访问数据

506

这个东西是不是会返回数据

507

是不是你在render的时候

508

我们在render的时候

509

在里面的人的时候

510

再再render的时候

511

是不是就会访问数据

512

访问数据的时候

513

Render是不是就会获取你在this上面这个数据

514

我监听的这个数据监听的是谁

515

我监听这个OBG是不是就监听了VV这个实力是不是

516

就是VM是不是

517

是啊

518

明白吗

519

是不是听了这个实力之后

520

我坚定了

521

你这实力上面的这个K是不是这个K是不是你这上面的这个message是不是今天没C之后

522

当你来取这个赛季的时候

523

当你来取这个message的时候

524

是不是就走到get里边儿

525

你render就是你在这块儿页面渲染的时候

526

第一次渲染是不是就走到这里边儿

527

走到这里边儿

528

我就通过电话本儿往他那边儿去添加

529

添加你现在使用了我这个数据是吧

530

是不是使用了我这个数据

531

是不是首先我知道你使用我这个数据

532

是不是不是

533

首先我知道你现在在使用我这个数据

534

第一点你使用我这个数据

535

我知道我现在被使用这个数据的K是什么

536

是吧

537

这是我的K

538

那么我还知道什么

539

现在正在市政

540

是哪个东西在使用我的数据

541

什么意思

542

同学们

543

GS是个单线程的执行过程

544

明白吗

545

GS是个单线程的执行过程

546

我执行这个render的时候

547

执行了之后

548

他这会儿出发了

549

访问的过程是吧

550

访问的过程它会触发什么

551

触发给他是吧

552

那这块儿他就会什么就为什么

553

为什么就会退出这个这个执行

554

就会把这个东西站知道吧

555

这块就会压占压占执行这一块儿就会执行到这里边来明白吗

556

这块就会暂停

557

懂就会暂停

558

因为电池是个单线程的过程

559

你一直执行到这儿是吧

560

他现在访问这个东西了

561

访问这个东西

562

但是你看现在什么

563

他是一个同步的过程是吧

564

就是我必须我先执行完再执行完

565

再执行完再执行完

566

我必须排在你的后边执行是吧

567

那我现在render执行到这儿

568

但是我现在访问这个数据

569

我这个数据现在访问是吧

570

那访问的时候就触发了什么

571

就走到这个这个这个逻辑就走到这边了是吧是吧

572

明白吗

573

这个逻辑是不是走到这里边儿啦

574

是不是

575

那走到这边的时候

576

我在这里边儿

577

我的同学们

578

那是不是我现在问你

579

是不是同一时间我只有一个render在执行

580

是不是我同一时间是不是只有一个render来执行

581

是吧

582

所以说你看我在这块儿我可以做一个什么操作

583

我在执行这个render的时候

584

我在执行这个render之前

585

执行这个render的时候

586

我可以做一个什么操作

587

同学们

588

执行这个render之前

589

我可以做一个什么操作

590

我可以赖他是吧

591

我可以在执行扔那儿之前

592

是不是可以在这儿声明一个类特

593

Net net是什么

594

Net一个

595

比如说类的一个

596

类的一个

597

一个water water啊

598

Later water

599

就是怎么去

600

是啊

601

我们去

602

记录一下是吧

603

记录一下怎么去执行这个论点是吧

604

是吧

605

我这儿记录下来

606

就是我现在这是不是就可以记录关系了是吧

607

记录关系看到吗同学们

608

我在这儿是不是可以记录一个关系

609

这个关系我的名称叫water

610

他的观察吗

611

是吧是吧

612

这一步明不明白

613

我在执行render之前

614

我是不是可以这么直

615

可以可以可以在这包一下是吧

616

那这包了之后

617

同学们这就很有意思了

618

我这是不是记录了的

619

然后记录了之后

620

然后我咨询这个water是吧

621

我执行render其实就是执行的water是吧

622

我执行的是water的那些

623

执行完water之后

624

同学们执行render的时候

625

我在这里边儿

626

因为我们说了

627

这是个同步的过程是吧

628

你这块儿执行water是吧

629

Water执行water water执行到执行到他到render里边来了

630

Render他访问Macy的时候

631

反应到Macy的时候是不是就跳到这边来了

632

是吧

633

跳到这边来的时候

634

我的勒特

635

我的我在

636

我现在这个是不是就可以访问到你全局这个变量的water

637

是啊

638

我是不是可以访问到你全局变量的water

639

是不是同学们

640

是不是可以访问到全区边上的龌龊

641

这块明白

642

这个明白吗

643

其他同学

644

因为我是单线程的是不是

645

全面的这个water是不是当前正在访问的

646

是不是

647

是不是就是当前正在访问

648

当前正在访问

649

我这个kid什么render是不是是不是

650

是不是同学们这块明白

651

不明白的同学扣个一好不好

652

这块一定要搞明白

653

一定要打通

654

其他同学都明白

655

是不是都明白

656

都明白明白

657

明白吗

658

同学们好

659

同学们

660

所以说这一步

661

他在这一步就可以访问到这个wap是不是

662

那访问到water之后

663

同学们

664

我这块儿是不是就可以做一个什么操作

665

做一个什么操作

666

你看我知道我具体是哪个K是吧

667

我也知道我具体这个K在被哪一个东西使用

668

是不是被哪一个记录下来water使用是吧

669

是不是对

670

我就可以去构建一个映射关系的

671

是不是我就这个映射关系

672

我可以是不是可以是个map

673

是不是我是不是可以是个APP

674

是不是啊

675

是不是是不是这都是可以的

676

是不是这个K具体对应的water是不是bug或者什么的都可以是吧

677

是吧

678

地浦mof都可以是吧

679

我说的嘛

680

不就是一个什么OBG是吧

681

OBJ都可以的是吧

682

你只要能够记录下来

683

他们这种映射关系是不是都可以的

684

是不是

685

这不明白吗

686

这不明白了吗

687

好

688

这一步明白了

689

那现在我修改数据的时候

690

我这样修改的数据的时候

691

我这样修改数据的时候

692

是不是又触发了赛特

693

那触发set的时候

694

我这儿是不是知道我具体的哪个K

695

吃饭

696

我本来这个K就是我我知道的

697

是吧

698

我在这儿是可以拿到具体的K

699

知道吗

700

同学们

701

我在这儿是可以拿到具体的K是不是

702

我在这儿是可以拿到具体的K

703

知不知道这我可以拿到具体的这些东西都可以拿到了是不是

704

你们可以去看那个API

705

那么拿到具体的case之后

706

我在这里边儿是吧

707

就是我这个当前正在触发这个赛特

708

因为我这个K我知道是哪个吗

709

是吧

710

拿到我这个K

711

那我能拿到这个K的时候

712

同学们这就有意思了嘛

713

这还这还用说吗

714

是吧

715

怎么办

716

通知是吧

717

我拿到我这个全局的这个依赖是吧

718

这是我构建起来的地步是吧

719

我拿过来我获取到我这个指令是吧

720

我获取到我对应的这个指令是吧

721

获取到我对应的这个指令是

722

是不是我对应的这个指令

723

A

724

它对应的什么

725

所有的什么

726

所有的water是吧

727

所有的water全部去执行是吧

728

全部去执行

729

是吧

730

全部重新执行一下

731

是啊

732

同学们

733

明白了吗

734

明白了吗

735

这儿明白吗

736

全部重新执行一下

737

是不是就重新访问数据了

738

Render是不是又重新访问数据了这块这块就是render是不是重新访问数据

739

拿到访问数据重新又走到get里边儿

740

是不是访问新的数据是不是是不是这个流程明白了吗

741

就要访问新的数据啦

742

就把新的数据是不是给到他了

743

是不是

744

因为你这儿先是set了是不是完了之后通知是吧

745

这块有一个问题了

746

那我每一次你看我每一次修改的时候

747

我第一次是不是第一次

748

我是通过什么

749

第一次我通过初始化执行的时候

750

构建了一个依赖

751

是是构建了一个依赖

752

五就是二什么意思

753

明没明白吗

754

这块没明白

755

这块明白

756

你看同学们这块我是不是构建了一个依赖

757

是不是这块是不是构建了依赖

758

在第一次是构建了一个选举的依赖

759

那他什么情况下构建了选举的依赖

760

是什么情况

761

只要你触发给他

762

他就会去构建全局的依赖吗

763

并不是说我们在这儿也会有一个什么初始化的标识

764

就是我第一次

765

我第一次我这个water

766

构建的时候

767

Water构建的时候会有一个标识

768

知道吗

769

同学们

770

我在water

771

比如说这儿water在构建的时候

772

我的water是不是要构建

773

我这儿也有一个构建的过程

774

知道吧

775

就是留一个莴笋

776

一个构建的过程

777

知道吧

778

在构建这个water的时候

779

构建这个water的时候

780

这里边就是有一个标识的

781

是不是啊

782

这里边有个标识的

783

这个标识会标是什么

784

是否是第一次

785

如果是第一次就什么

786

就比如说就会有一个

787

他就有一个

788

就有一个标识

789

这个比如说标识就是is first

790

First first等于数

791

会有标识等于数

792

知道标标识等于数

793

当你这个water

794

当你这个render执行完了之后

795

在最下边的时候

796

我们是不是一个对战是吧

797

同学们

798

这儿执行完了之后

799

在这在这一步

800

他的face就会变成fourth

801

相当于这块儿是个醋

802

这是错

803

这就是false

804

同学们你说我这块儿

805

你看我第一次执行这个render的时候

806

我在这里边就会判断

807

是不是就会判断

808

判断是否有意思

809

First是吧

810

这个标识是否第一次是吧

811

第一次的时候他才会构建什么构件映射关系是不是

812

印色关系是吧

813

那么

814

第一次构建完映射关系之后

815

你看这块儿回来重新走render render走完了之后是吧

816

就是第一次执行完了之后是吧

817

第一次执行完了之后是吧

818

执行完给他返回数据关系构建完了之后

819

然后回来回到这里边是吧

820

到这里边儿走render render执行完了之后

821

我们构建完之后到你那边去到这儿来是吧

822

就返回到这儿了是吧

823

认真执行完到这儿

824

这儿就是force了是吧

825

那我第一次渲染是不是就执行完了是吧

826

那下一次我在修改的时候

827

同学们你看我在修改的时候

828

我这个东西是不是就已经为false了

829

是不是我在修改的时候

830

我这个东西是不是已经为负数

831

我在修改的时候

832

我这个water是不会在构建的

833

不会再重新构建的

834

明白吗

835

明白吗

836

所以说我在修改的时候

837

我这个标识这里边儿这个标识就不是第一次了

838

所以说他就不会在构建buff了

839

明白了吗同学

840

这个初步的思路啦

841

通了吗

842

初步第一次的思路

843

张同学

844

有没有不明白的同学

845

小八小八

846

小八儿不明白小吧

847

还是有不明白的

848

有两有几个同学不妙

849

有点迷糊

850

迷糊是来是在哪一点

851

前边儿这些会吗

852

就是出就是不

853

我们不不算上初次构建这个过程

854

不算上是否是初次构建的过程

855

这个这个这个过程明白吗

856

小八号这个call UPS

857

不算上初次构建的过程

858

Co UPS呢

859

都明白是吧

860

那意思就是说现在不明白的是

861

不明白的是他怎么标识每一次是吧

862

每一次是否需要初次是否需要出构建这个关系是不是这个意思是不是这个关系

863

是不是这个意思

864

这块不明白是不是

865

是不是

866

是吧

867

就是不清楚的点是这块儿第一次怎么开始的

868

第一次你溜AOE的时候开始的

869

你留意的时候

870

你留意的时候we里边的代码里边儿开始

871

你流为一的时候

872

你留意的时候

873

We里边里边的代码

874

你的VB实现

875

再见啊

876

你的微微一实现

877

知道吗

878

你第一次开始式微里边实现的一个过程

879

这个我们一会儿给大家讲

880

你现在只需要知道它有一个第一次

881

这个第一次第一次的过程是掌控在V1的手里边

882

第一次构建这个东西的时候

883

掌握在V1的手里边

884

你第一次他的触发源头

885

你看我们第一次的处罚源头是什么

886

第一步

887

构建龌龊是吧

888

构建

889

Water是构建water

890

构建water

891

构建water的时候

892

里边儿是不是有一个什么

893

是否第一次的标识

894

是不是有一个适合第一次的标识

895

因为water全局只会构建一次

896

我一个指令只会在全局构建一次

897

他从此以后他一直就保持着这个water

898

从此以后

899

她就关系就一直被维护着了

900

他就不会每一次你render的时候都去构建知道吗

901

明白吗

902

这个call up4明白吗

903

所以说第一次会有一个什么构建water

904

构建water是第一次的时候

905

他会构建water

906

就是初始化的时候会构建water

907

构建water的时候就会有一个第一次的标识符

908

标识符就是什么

909

First是否是第一次的标识符

910

然后构建water的时候

911

中间会触发什么

912

会触发render

913

这个时候标志物是吗

914

为醋是吧

915

标示为醋

916

然后在这个过程会触发render render会走一个什么过程

917

同学们

918

Render会走一个什么过程

919

Render他会走一个我们去访问什么

920

访问get数据的过程是吧

921

因为要获取数据是吧

922

访问get数据的过程是吧

923

给他数据是吧

924

Get数据的过程会做到什么

925

在构建render之前

926

是我们这块儿是不是也会加一个什么

927

就是在这块儿我们会保存是吧

928

受淹还会什么

929

把当前的render把当前

930

的把当前的render是吧保存在应该当前的water是吧

931

当前的water

932

保存在什么

933

保存在一个全局标识符中是吧

934

全局变量中是吧是吧

935

全局变量中是吧

936

那这个时候你的全局变量之后就是执行了

937

是吧

938

就是执行

939

龌龊是吧是吧

940

执行龌龊龌龊的时候就会什么触发点是吧

941

出发的时候就为什么

942

构建get是吧

943

获取给他是吧

944

获取给他

945

那获取get的时候就会做做什么什么就会获取到数据是吧

946

是不是获取了数据是同时做什么

947

同时做什么

948

同时能够拿到什么

949

拿到你具体的当前获取到获取到什么

950

获取当前的这个全局标识

951

全局变量保存了

952

全局变量

953

保存的当前的什么water

954

就是当前是谁来访问我这个数据的是吧

955

当前谁来访问我这个仿

956

谁来访问我这份数据

957

他是全局变量保存着了

958

为什么他可以保访问

959

因为我们说了JS是一个同步执行的过程

960

是的

961

他在执行render的时候

962

执行render执行到这块儿获取数据那一步的时候

963

他这块儿就会暂停

964

进入到哪块儿去战

965

进入到这里边儿去

966

是不是进入到这里边儿去

967

是不是所以说这一步之前

968

他只需要保存一个全局变量就行了

969

就在这块儿全局保存的这个东西

970

然后也知道也明白具体是哪一个数据

971

数据K被使用是吧

972

是啊

973

被使用

974

然后就怎么办

975

就构建关系

976

还要判断是吧

977

他要判断是吧

978

要判断什么

979

判断是否

980

这个东西是否为醋是吧

981

判断是否first

982

如果是构建什么

983

构建关系是吧

984

构建完关系之后

985

数据是吧

986

把数据返回

987

数据是吧

988

数据返回

989

返回之后做什么

990

Render render是不是就即使这块儿执行完了之后

991

数据是不是就返回来了

992

是吧

993

同学们返回来之后是不是又走到这块儿来了

994

到这块儿他继续往下执行了

995

是不是就render render

996

Render

997

Render是不是render又执行是吧

998

不是为了什么浪费内存

999

是为了不需要每一次都去构建关系

1000

构建完关系

1001

你每次你有一个water

1002

你的引用都不一样

1003

你的引用不一样

1004

你店铺里面保存的是什么

1005

保存的是引用

1006

你的卡里面就算保你的卡里面保存的是方法

1007

但是方法是引用明白吗

1008

首先你看这一步就是什么构建关系是吧

1009

返回数据了

1010

那么第一次渲染是不是就完了

1011

同学们第一次渲染是吧

1012

还有这块儿render执行完了之后是吧

1013

数据返回render执行完

1014

任务执行完了之后

1015

是不是要到这一步了是吧

1016

到这一步了他就又继续走了是吧

1017

是什么标识符是吧

1018

是否is first

1019

变成什么

1020

变成first是吧

1021

Is first变成什么

1022

Boss是吧

1023

变成粉丝之后同学们怎么办

1024

变成boss之后怎么办

1025

那就很简单了

1026

是不是就完了

1027

第一次卷就完了是吧

1028

变成粉丝之后他render render完了之后就是生成虚拟动虚拟DOM

1029

就是去做什么

1030

去做真正的什么页面需修改是吧

1031

是吧

1032

那这一步完了之后就做什么什么

1033

这不完了之后

1034

就是这么个过程

1035

是什么过程

1036

数据发生修改的时候是吧

1037

当数据发生修改是吧

1038

发生修改的时候怎么办数据发生修改的时候怎么办

1039

怎么办

1040

他就会去做一个什么过程做一个什么过程

1041

他会把我们当前这个

1042

出就会出发赛特是吧

1043

哇塞

1044

那么出发SP的时候就是什么拿到我整个的什么

1045

音色算构件

1046

构建关系是吧

1047

拿到我们的关系是吧

1048

是吧

1049

拿我们的关系通过通过什么

1050

通过K是吧

1051

通过K是去执行是吧

1052

执行

1053

是不是执行render

1054

执行render执行的是什么

1055

执行water

1056

执行water是吧

1057

执行water执行的water什么

1058

执行water执行了他是他你保存的这个函数

1059

并不是你整个water初始化的时候这个过程

1060

所以说他只会执行这一块儿

1061

这里边就不会执行了

1062

那执行这一块儿的时候又去做什么

1063

执行握手又会执行什么

1064

Render是不是是不是是不是执行render又到了一块儿

1065

又到了一块儿

1066

同学们

1067

又是不是又到这一块儿获取数据啦

1068

是吧

1069

就是给它里面啦

1070

是吧

1071

又到我们这块儿给他获取数据

1072

但是get获取数据的时候

1073

这个时候他已经是什么

1074

已经是fourth了

1075

是不是这个时候已经是fourth了

1076

这个这里边这我们没有地方把他之前没有把它变成醋是不是

1077

所以说这块儿就指挥怎么

1078

指挥走什么

1079

我们的render获取数据返回

1080

获取数据返回render明白了吗

1081

明白了吧

1082

所以

1083

同学

1084

小八

1085

还有这个call off

1086

我可记

1087

我可记着了

1088

是吧

1089

就说这个大架构在代码之上是不是又拉了一遍

1090

又又稍微渗透了一下

1091

我们再来再来这是整个流程是吧

1092

那么再来

1093

再聊这个observer

1094

再聊这个observer这块有一个考题

1095

O2是不是可以监听数据数对象是吧

1096

这块一般会出一个考题

1097

就是observer

1098

恕微数据

1099

那个什么微里边儿数组监听是怎么处理的

1100

Object DeFine property

1101

应该有同学听过这个object DeFine property可以监听数组吗

1102

同学们想一下

1103

Object DeFine property可以监听数组吗

1104

是否

1105

是否可以监听速度

1106

可以吗

1107

有的方法可以

1108

大多数同学说不行

1109

其他同学

1110

其他同学

1111

有人说可以

1112

有人说不行

1113

到底行不行

1114

你们有没有去试验过

1115

先说

1116

没有百分之100%的人应该没有

1117

通过索引不行

1118

通过索引怎么不行

1119

通过索引就行

1120

所以怎么不行

1121

看一下吧

1122

我问你

1123

这个东西监听

1124

Object监听

1125

不应该监听OB叫做什么

1126

重写是吧

1127

它是什么

1128

它是重写

1129

重写对象的K是吧

1130

重写对象的K是重写对象的

1131

我现在问你

1132

宿主也可以马

1133

速度也可以吗

1134

有的

1135

是吧

1136

有没有

1137

数字有吗

1138

速度有K

1139

很简单

1140

是不是K

1141

不这这是零

1142

这试一试吧

1143

这是不是K是

1144

那速度有K

1145

那他为什么不能见的速度

1146

怎么就不能接听数组

1147

它监听数组也是遍历数组的每一个K去监听

1148

所以说你们平时看的文章都是有问题的

1149

知道吧

1150

我经常跟他的同学说

1151

你们要去自己动手实践

1152

不要去看别人怎么写

1153

很简单的一个API

1154

看文章就可以看懵了

1155

所以说他可以接听速度

1156

我们平时在这里边儿一般怎么怎么使用的

1157

是怎么使用的

1158

看吧

1159

我们拿到这个对象

1160

我们如果要坚定一个对象是吧

1161

我们拿到这个对象的所有地市

1162

拿到所有对象的K

1163

然后去遍历每一个K是吧

1164

遍历每一个K的时候

1165

然后你看我们的这个方法封装了一下

1166

怎么封装

1167

封装了这个对象的事吗

1168

推塔是吧

1169

具体这个data是不是

1170

是不是

1171

是不是

1172

是不是带塔是不是

1173

重写我们这块儿封装是什么封装呢

1174

他直接就是一个data

1175

还有具体是什么

1176

这个data上面的这个数据上面的是吧

1177

就这么风刮了一下

1178

因为我这个数据既然要给它是整个数据每一个K都要接听是吧

1179

是不是

1180

是不是

1181

对

1182

那么数组怎么办

1183

数组也很简单

1184

数组也是

1185

你看我们这个样子是不是获取每个K是吧

1186

我们获取每个K

1187

然后做出来

1188

我们看一下这个

1189

运营一下这个

1190

你看一下这个之后是不是这个方案是不是就这个样子获取所有的K

1191

你看我们拿到L1L1.a你看是不是获取嘛

1192

就这个样子的阶梯呢

1193

我们来看一下数组

1194

速度

1195

数组也是这个样子是吧

1196

同样的鉴定方法

1197

数组给他之后

1198

他也是这个东西拿到数值K

1199

是不是也是同样的方法拿到数据的

1200

比如我们用这个他也是同样的方法拿到数据的K是不是是不是拿到数组的K之后他做什么

1201

对

1202

也是去鉴定具体的K

1203

然后去执行

1204

落到这块儿就会

1205

你看我们是不是在这块儿运行一下

1206

我们a是吧

1207

爱若玲是吧

1208

给他修改一下二零

1209

比如说修改成什么

1210

修改一下是不是也可以触发set

1211

是吧

1212

也可以触发set

1213

触发set是不是就监听得到是不是

1214

是不是我获取

1215

我获取的时候是不是也可以获取得到我获取的时候也可以获取到是不是

1216

你看获取的时候是不是也可以获取得到

1217

那什么情况下接听不到同学们

1218

你看我们这儿是具体重写的是吗

1219

重写数组的K

1220

那我问你

1221

没有被重写的可以可以背箭道吗

1222

这个东西没有被重写的可以可以见证了吗

1223

没有被重写的

1224

可以可以被监听到吗

1225

可以听到吗

1226

如果用这个OB的地方发出去

1227

没有被重写了

1228

其实我一开始我比如说我一开始把对象

1229

我一开始给他监听的对象是吗

1230

是A1是吧

1231

然后这个时候我把这个对象里边加一个属性B是不是

1232

这个时候我拿去接听接听是吧

1233

这个时候我给他鉴定

1234

那我现在给他B

1235

我问你可以见到吗

1236

也听不到听不到

1237

这个不只是数组的东西

1238

这个是对象你都不行

1239

知不知道我们这块儿执行一下这个东西

1240

这个是你的对象就不行

1241

L1L1钻

1242

这个是我们的L一世一世

1243

我们的这个数组对象是吧

1244

拿到a是吧

1245

然后我现在设置比如C是吧

1246

会触发CD吗

1247

应该没有出发的

1248

也没有出来给他

1249

我获取是吧

1250

也没出来给他

1251

这个东西是你宿主只要是新增的K

1252

就是说新增的key新增的

1253

新增的K都监听不到知道吧

1254

都监听不到

1255

都监听不到这个东西

1256

你们得明白

1257

这不只是对象

1258

不只是入主对象也是

1259

所以说你们平时会用一个什么dollars

1260

我记得应该是我好久没有V了

1261

V2是一个大人在她她说你用心的K的时候是用这个东西

1262

是不是就是这个原因

1263

就这个原因

1264

因为你调单人赛的时候

1265

就是掉了这个方法

1266

就掉了这个方法

1267

重新去做一下处理是不是

1268

是不是

1269

是不是为什么达人sight才能触发数字动物更新

1270

因为只有单身才能鉴定到K

1271

见到K才会触发什么

1272

触发你整个render的过程

1273

是不是

1274

明白吗

1275

这些同学

1276

同学这块儿这块儿这块儿明不明白我就

1277

是不是就这个原因

1278

那现在我问题又来了

1279

既然数组能够

1280

你们平时是不是你们平时都是看文章

1281

有没有同学说看文章的时候

1282

对啊

1283

必须这个过程

1284

是不是你们平时看文章的时候

1285

是不是说数组不能够被接听

1286

数组可以被监听吗

1287

数组是不是可以被监听

1288

我们现在学了是不是数组可以被监听

1289

是呢

1290

被为什么别人说数组不能被监听

1291

为什么说是他表达式数组不能被监听

1292

宿主

1293

不能

1294

被监听

1295

是

1296

不能被监听

1297

然后导致什么

1298

要重写

1299

重写速度是吧

1300

重写速度是吧

1301

是不是有这个过程

1302

同学们是有这个过程

1303

这个过程你们之前是不是学有没有

1304

有没有明白这个过程

1305

你们看看过这些文章有没有

1306

有没有看过这种这种类型的文章

1307

看过是吧

1308

这个东西是有问题的

1309

数组可以被监听

1310

只是说数组新增的缩影不能够被监听是吧

1311

是啊

1312

是不是数组新增的缩影是不能被接听

1313

我们这个这个同样也是

1314

这东西数组新增的声音是不是也能也不能被监听

1315

我们这块儿给他搞一个什么算寺是吧

1316

搞个四是不是是不是也也不能被监听

1317

是不是也不能被监听是不是

1318

老猿题库那个

1319

因为那个题库是找找找找我们班的一些学生

1320

那些学生呢

1321

一开始可能是比较老的学生

1322

那个时候比较老的学生不是我带知道吧

1323

所以说有的学生呢

1324

而且很多学生的知识面

1325

他是不听我的课的

1326

就跟你们咱们班也有

1327

知道吧

1328

咱们班也有

1329

咱们班现在45个学生

1330

我现在把这个东西讲了是吧

1331

我这我把这个东西给你们讲了

1332

然后你们下来之后照样是去看文章

1333

很多同学

1334

应该说20个同学

1335

现在最多有20个同学在在仔细听课

1336

还有20多个同学就梦游了

1337

他不知道我讲的是什么东西

1338

然后下来之后看了文章说那个不能接听

1339

他也不能见

1340

他也说不能接听

1341

是不是

1342

那个题库那个东西是是一些一些一些一些学生做的

1343

那些学生可能是那些学生就是也自己也没学明白是吧

1344

对

1345

就是我跟你说了

1346

你还是说不会接听

1347

所以说你要跟面试官怎么聊

1348

你要问他数组object的方法不对

1349

他怎么监听的

1350

到底是怎么监听

1351

他是从几K

1352

那你就问他

1353

你就把它引到了你的思路上来

1354

你要问问

1355

把它引到你的思路上来

1356

是不是那既然那既然那既然那既然是重写K

1357

为什么我的数组没有K吗

1358

你就问他数组没有K吗

1359

他会对

1360

速度也OK

1361

他心里也会对你产生一个敬畏

1362

知道吧

1363

哎哟

1364

就这种知道

1365

就是说有些90%的面试官这些东西都是都是这个样子

1366

就是所以说前端领域的人很多很多

1367

你能够往上走的原因

1368

你能够往上走的原因

1369

就撒于在很多知识体系不能够

1370

自己去实践的过程

1371

那这个实践的过程

1372

就是你正在往上走的过程

1373

你不能人云亦云去看别人怎么说怎么说怎么弄

1374

咱们是写代码的

1375

咱们不是看代码的

1376

也不是听别人理论的

1377

知道吧

1378

所以这块儿为什么数组数组能够被接听

1379

为什么数组又要需要被重写是吧

1380

为什么数组可以被可以被有些东西接听

1381

为什么数组要重组重写

1382

这块我给大家举个例子

1383

那我现在问你

1384

我如果数组在这上边儿添加一个on shift

1385

在数组的头部添加一个

1386

比如说一灯

1387

我问你现在会打印什么

1388

同学们会打印什么

1389

我如果执行这个东西

1390

他会打印什么

1391

我执行这个方法

1392

一单

1393

会打印什么

1394

同学们看一下

1395

我这里边儿是给他是吧

1396

他会打印给他是吧

1397

是不是

1398

能背景看一下他打印了什么

1399

哈哈哈哈哈哈

1400

打印什么

1401

打了什么这些东西

1402

但是我现在只是只是往头部添加了一个一灯

1403

那为什么就触发了这么多次get和set

1404

为什么

1405

Luo落队

1406

对挪啦

1407

这个就很

1408

对

1409

所以说这就是数组的原因就在这儿

1410

知道吧

1411

数组不能要重写的原因在这儿

1412

什么原因看一下同学们

1413

比如我现在原来的数组是三个是吧

1414

现在是三个

1415

比如说这是五是吧

1416

这是七

1417

这是酒是不是

1418

我现在要往这个头部是吧

1419

我现在要往这头不

1420

添加是吧

1421

添加内容添加

1422

比如说添加个儿是不是

1423

那我问大家

1424

数组存储的时候存储的是什么

1425

存储的是你的起始值

1426

它在内存里面存储的什么起始地址

1427

还有什么数组长度是不是

1428

是不是起始地址和数组长度是不是

1429

那这个时候我需要我的事

1430

我需要往头部去添加一个内容

1431

我应该怎么办

1432

需要头部添加怎么内容怎么办

1433

难道我在后边儿地址不变

1434

去改变前面地地址

1435

前面的地址内存空间去减减一部分

1436

然后往这边儿肯定不是是吧

1437

对把后边的数据往后挪

1438

那么把后边的数据往后挪

1439

就就是一个什么过程

1440

就是把九

1441

是吧

1442

他这块儿会开辟一个新的位置

1443

把灸挪到这块儿来是吧

1444

把酒挪到这块儿来

1445

它会触发什么

1446

给它就会获取到这是第一位是吧

1447

这是第一位

1448

这是第二位是吧

1449

就会获取到第二位的

1450

你看第二位的K是吧

1451

第二位的你看这get到第二位的K是吧

1452

Get到第二位拿到之后

1453

往这里边去吸它

1454

但是往这边sight的时候

1455

因为这一块儿这个K没有被监听

1456

所以说不会触发set

1457

是吧

1458

只会触发这个这块地给他明白了吗

1459

明白吗

1460

这块地给出发完了之后

1461

这块儿来了是吧

1462

这个东西也会获取

1463

获取的时候就触发第一位的这个这个位置是吧

1464

第一位的这个给他

1465

然后把这个给他拿到里面去或去触发设置

1466

设置第二位的塞特

1467

第二位set不就是什么

1468

出发第二位的了是吧

1469

是不是就出发第二位的了是吧

1470

所以说这儿就会出来这个

1471

然后这一位又又这个过程

1472

这一位操作进来明白了吗

1473

明白了吗

1474

On safe是吧

1475

那这一块儿就会有一个什么过程

1476

同学们

1477

这还只是on shift啊

1478

是不是还有很多东西

1479

比如说a还有什么

1480

比如说short是吧

1481

绣的

1482

Receive嘛

1483

这个东西是不是他也是不是也会重新挪

1484

是不是也会重新挪

1485

也会重新排

1486

是不是他

1487

是吧

1488

是不是也会重新挪

1489

也会重新拍是吧

1490

是吧

1491

所以说只要

1492

是操作数字索引的东西都会造成什么多次

1493

因为数组是内存

1494

连续内存是吧

1495

连续

1496

内存多少是吧

1497

所以说会造成什么修改的时候

1498

数据移动是吧

1499

数据移动就会造成的处理的处理就会造成频繁

1500

到末频繁

1501

触发给他是不是

1502

是不是频繁触发给他射他

1503

那么频繁触发get和set之后就会做什么就做什么

1504

我们吃完get之后就坐我们前面联系了

1505

就是什么

1506

是不是water

1507

就render这些东西是不是就来了

1508

Render后边是不是就是虚拟多么多么的负修改页面

1509

是不是这些东西就来了

1510

就算他后边有一些优化

1511

有些有些比如说有些节流的优化

1512

他是不是也会也会因为你这些原因导致很多内存的浪费

1513

多次的执行没有必要的意义是不是

1514

是不是

1515

所以说这一块儿它就会导致什么平凡的render吧

1516

没必要的一些东西浪费

1517

所以说这块儿就是重写数组的原因

1518

明白了吗

1519

这是重写数组的原因

1520

同学们这会儿明白吗

1521

明白了吧

1522

所以说你们那么这块儿

1523

所以说性能优化这些东西

1524

你看这其实一聊一聊完全就这就是优化

1525

这一聊一聊就完全聊到优化

1526

就可以聊到rock的很多东西上面去了

1527

那数组怎么重写的

1528

数字怎么写的

1529

怎么监听的

1530

他这个observer到底是怎么鉴定的

1531

来我们就看源码

1532

所以说这块我们是一层一层叠近了

1533

我们要看源码源码

1534

看我们的源码在低位里边儿是吧

1535

在第一位里边

1536

你把V2就明白了

1537

V3这里边我们就完全不需要浪费时间讲数组这块为三的数组

1538

它这块儿照样也重写了一下

1539

是吧

1540

V3他就算proxy

1541

只要是所有东西都会造成数组是连续内存

1542

它避免不了

1543

是吧

1544

避免不了

1545

所以说不管怎么样

1546

他都会造成连续频繁移动

1547

懂不懂

1548

所以在这一块儿

1549

我们又回到这里边儿

1550

哪个里边来我们的这个observer是吧

1551

Observer是做什么

1552

监听数据是吧

1553

监听数据

1554

那他怎么监听数据

1555

我们说了

1556

他会有一个observer是吧

1557

这个observer我们是把把数据变成什么响应式数据

1558

我们也说了

1559

Observer是一个什么过程

1560

是一个去监听数据的过程

1561

所以说你看这块儿

1562

我们会把这个东西拿到什么

1563

把这个数据给到我们这个欧博尔

1564

这是这是你的数据

1565

有个电话本

1566

电话本现在你先不用管

1567

你先不用管

1568

你先只管电梯数据这一块儿

1569

所以说你看这一步

1570

它会把我们可响应的数据加一个标识

1571

这是重写原型链重写原型儿这块儿

1572

那么重写重写这个数组的这个数据的这个K

1573

这个这个这个私有属性K表示这个数据是什么响应式数据好吧

1574

然后它会判断你给进来的这个数据是否是数组

1575

如果是数组去做数组里我们来看不是数组

1576

如果不是数组

1577

This week调用this week this week这里边儿数据拿过来获取看看了吗

1578

获取到你所有的BG是吧

1579

获取到你所有的K是吧

1580

如果我做主是这个

1581

他会就会获取了什么这一块儿是不是获取了K之后

1582

同学们是不是便利K

1583

便利可以不用说了吧

1584

点了吧便立刻完了之后是不是a是不是就我们我们这个东西一模一样

1585

有区别吗

1586

这就是我们的东西

1587

就是我们这里头的东西是吧

1588

是不是

1589

什么东西

1590

是不是这种东西

1591

明白吗

1592

就这一套东西

1593

就这一坨

1594

所以说这块儿你看这块便利

1595

便利完了之后

1596

同学们便利完了之后

1597

便利K完了之后

1598

这里边儿就有一个什么过程

1599

你看它会变成一个什么过程

1600

A

1601

relative DeFine re active在这里边儿了是吧

1602

这个六这个电话儿你先不用管

1603

这个电话儿你不用管

1604

这是我们的数据是吧

1605

这是我们数据这里边你看

1606

是吧

1607

这里边儿这些有一些它的兼容的一些处理

1608

各种兼容的处理

1609

你不用管这里边儿

1610

这就完了

1611

看到吗

1612

这就是数据

1613

这是你的数据

1614

数据拿过来你的K

1615

这是你具体的K是吧

1616

你要监听的K

1617

然后拿过来接听K

1618

然后这里边你看他去做什么

1619

同学们就是给他给他他就会什么触发我们的给他去获取数据

1620

看见吗

1621

把数据给到他

1622

然后你看这里边就会有标识

1623

你看这块儿有个标识

1624

这个标识就会把把你这个东西

1625

添加到电话本儿里边儿

1626

你看这就是电话本

1627

Dip就是添加电话本儿里边儿明白吗

1628

这块就是添加电话本里边儿知道吧

1629

这标识添加电话本

1630

所以在这一步你看

1631

这是添加电话本儿是不是拉通了

1632

这里边儿具体怎么添加电话本儿

1633

你先不用管什么时候添加电话本儿

1634

我们刚刚给大家说了

1635

但是与代码这一块儿你也先不用管

1636

你先把这个数据监听这一块搞明白

1637

东西先拿桶好不好

1638

然后给他更不用说了吧

1639

是吧

1640

Sight不用说了吧

1641

是吧

1642

拿到你对应的原来的数据是吧

1643

拿到你原来的数据和现在的数据对比

1644

如果数据是一样的返回是吧

1645

就没有话费了

1646

如果数据不一样

1647

那怎么办

1648

怎么办

1649

触发一个打电话是吧

1650

打电话被通知被所有数据被修改是吧

1651

是吧

1652

明白了吗

1653

是吧

1654

同学们

1655

所以说这个LV这个这个object地方party是不是就这样

1656

这个observer数组那块儿我们还没还没说这块儿我们这块儿嘛

1657

所以我们现在回到这块儿来看数组是吧

1658

这是我们正常对象的一个走法是吧

1659

正常对象的走法是吧

1660

正常对象走这块儿

1661

是吧

1662

找对象走一块儿是吧

1663

咱们再来看数组

1664

如果是数组

1665

如果是数组怎么办

1666

他会去你看判断是否是宿主是吧

1667

是否是主是否是数组

1668

如果是数组

1669

它会重写一下原型链

1670

你看这块就重写一下这个原型

1671

他这块儿会有一个不同的方式

1672

所以说有一个兼容的处理

1673

这块儿先不用也不用管它

1674

它会重写一个圆形儿

1675

你看我们重写原型链

1676

你看拿到我们这个数组的原型链

1677

这是你住数组本身的这个原型链

1678

然后来重写

1679

所以你看我们这一步会拿到你这个数组本身重写它的原型儿

1680

是不是重写它的原型

1681

这个同心圆系列是什么意思呢

1682

同学们

1683

今天这个就不用了吧

1684

这就不用说了吧

1685

宿主

1686

不能说了吧

1687

这是它的原型对象是不是

1688

是不是就是它的原型对象

1689

是不是就是他最根本的数组的方法

1690

是不是都在这里边说这一步它会重写这个东西怎么重写

1691

我们来看

1692

重写重写重写这个东西

1693

重写就是你看直接把这个东西写的对象

1694

所以我们要看它的原型对象怎么被重写了

1695

这是她被重写的原型对象

1696

主要改的是重写数组

1697

就是改的原型对象

1698

首先我们拿到它整个的什么数组的

1699

原型对象是吧

1700

原型定向原型对象就是你剩整个数组的什么

1701

最初始的这个对象是吧

1702

最初始的对象就这个东西是最初始的速度的对象是吧

1703

是不是是不是最初始的原型对象

1704

然后拿这个最初的原型对象之后

1705

基于这个原型对象构建一个是吗

1706

构建一个新的对象是吧

1707

构建一个新的对象

1708

这个有没有构建一个新的对象

1709

是不是

1710

这个不用说吧

1711

你看就够一个原型对象

1712

然后在这一步构建完了之后

1713

他这块儿

1714

就要去判断哪些数组会被需要被重写

1715

哪些数组需要被同学不写

1716

是不是会就是会改变数组索引的东西是不是都需要被重写

1717

这些东西是不是都会改变数组索引是吧

1718

是不是所以说改变数字索引的东西他都需要被重写

1719

那怎么重写

1720

他会便秘

1721

我这个所有的K是不是便利

1722

我这个所有的哪些数组是要被重写

1723

哪些方法被重写

1724

这个方法然后拿过来之后

1725

去辨别我这个K

1726

便利我这个K之后

1727

我是不是要获取数组

1728

如果要发生修改

1729

我是不是需要让数组本身发生修改

1730

我就需要去调查数组本身的方法

1731

所以我这拿到K拿到什么

1732

拿到这个谱系

1733

你看我这个铺

1734

比如说我这个master拿到什么

1735

就是我这个谱系是吧

1736

然后我在原型对象上

1737

这个原型对象上去拿到我最原始的这个方法是吧

1738

圆形的这个破十破十方法是吧

1739

是不是最充实的剖析方法

1740

就是拿到我最原原始的这个谱系方法

1741

拿到这个复习方法

1742

然后在这保留下来

1743

保留下来之后

1744

然后同学们怎么办

1745

重写重写我这个方法这块是重写重写你看重写这个是重写我这个数组原型对象上面的剖析方法看见了吗

1746

把这个MR了拿进来重写

1747

这是一个什么

1748

这是我

1749

这是我们刚刚那个构建出来的新对象是吧

1750

然后这个你看重写这是我们具体的方法是吧

1751

然后这是我们重写方法的值

1752

是不是就是重写了这个方法看见了吗

1753

重写了这个这个这个对象的这个剖析的方法

1754

是不是他重写了这个方法

1755

怎么重写的同学

1756

重写的内容就相当于你之后吊铺写调的是什么

1757

调的就是这个内容是不是掉的

1758

就是这个内容是不是掉了

1759

你之后的数组掉了是不是就是这个内容

1760

你接听之后的数组调的内容是不是全是这个内容了

1761

复习方法是掉了这个方法了

1762

那怎么调的

1763

首先第一点拿到你的原形了

1764

你拿到了他的原始方法是吧

1765

这个原始方法拿到原始方法

1766

既然我们要族谱写

1767

我原来是这个样子是吧

1768

原来是这个数是这个样子

1769

我现在普及了这个

1770

那我是不是返回值应该这个

1771

那这个过程一定是通过谁来做

1772

一定是通过数组最原始的方法来做

1773

所以说我们要执行它最原始的这个方法是吧

1774

把它你拿到这个参数拿进来

1775

然后执行

1776

是不是就是说返回就是这个这一步明白

1777

宿主重写这一步能明白吧

1778

所以说这一步拿到之后

1779

然后会拿到什么

1780

我们当前这个当前这个数据的observer对象

1781

就是我当前这个observer

1782

当前这个维护我这个数据的observer对象

1783

我们这个东西吗

1784

对吧

1785

当前维护我这个数据这个整个的这个实力

1786

我找我对象拿了东西之后

1787

同学们这一步这块儿拿了之后

1788

他会判断什么

1789

判断你的方法什么方法

1790

有新的

1791

有些方法是不是会有新的来源是什么意思

1792

就是说我向pushy he on shift s ines这些方法

1793

他是不是会插入新的值

1794

是不是会给数组插入新的值

1795

是不是是不是是不是会给数组插入新的值

1796

速度插入新的值

1797

如果插入的是对象是不是

1798

如果插入的是对象吧

1799

如果插入的这种对象

1800

我是不是这个对象

1801

我一我这个对象

1802

我的数组是不是变成了什么

1803

我的数字是变成了这个样子是吧

1804

咱们是变成这个样子

1805

这是我的对象

1806

那我问你

1807

我这个对象是不是也应该被变变成可监听的对象

1808

因为你在访问的时候访问什么error

1809

六点儿什么

1810

这个是你这个样子

1811

我是虚

1812

这个对象是不是也需要变成可见的对象

1813

这不明白吗

1814

是我这个K这个a是不是也要变成可监听的

1815

不然别人再用这个a的时候

1816

完全就接听不到你的这个更改是吧

1817

所以我这个a是不是要变成变成可见

1818

那变成可见的

1819

但是我现在就应该怎么办

1820

应该拦截到你具体

1821

插入的是什么

1822

就比如我现在是135135我现在要普及

1823

普及完了之后普及的是吗

1824

我叫复习的内容是这个是吧

1825

但是这个内容我应该怎么办

1826

我在访问这个内容的时候

1827

现在我就是我的a to Xi之后我要访问就放这个K是吧

1828

我访问这个的时候

1829

我需要把它变成一个什么可监听的事吧

1830

我的视图里边

1831

如果访问这个数据的时候

1832

我需要处罚

1833

处罚我的gate是吧

1834

我修改这个东西的时候也需要处什么处罚我的ST是不是

1835

是不是

1836

是不是去修改页面是不是

1837

所以说这一步他需要变成可见的

1838

那他怎么变成可见的

1839

我先把它记录下来

1840

这个应设置的对象记录下来

1841

记录下来之后

1842

如果我这一步有可监听的数据

1843

重新调用

1844

可以吗

1845

我重新调用我这个东西的opera可以吗

1846

是不是重新调用我这个里边

1847

看了吗

1848

这是我我的observer点这个东西重新调用

1849

调用这个observer

1850

这是我们的L码

1851

重新用这个方法可以吗

1852

便利你所有的插入的选项是吧

1853

插入你所有的选项

1854

因为我们拿到这个数组吗

1855

是吧

1856

这个insert a拿到这个参数是不是数组这个参数是不是参数参数化数组是吧

1857

是吧

1858

所以说这块儿拿到遍历所有的参数

1859

插入的象插入相之后

1860

然后便利

1861

是不是变完了之后

1862

每一项又重新走

1863

我们这个递归的方法

1864

看到每项又重新走

1865

我们这个递归的方法

1866

不知道是不是这一步

1867

这一步在一块儿是不是就找不到明白了吗

1868

那这块儿那块儿我修改了数组是吧

1869

我现在修改了数组

1870

修改数组我们只应该应该做什么

1871

不应该只是

1872

我们修改数字之后

1873

最最终要做的是什么

1874

最重要处罚的是什么

1875

最终要出发的事

1876

让他重新去render是不是

1877

是不是修改完一个数据之后

1878

最终要让他重新render

1879

那怎么重新扔的同学们

1880

Sight的

1881

这是怎么认得的

1882

打电话是吧是吧

1883

打电话

1884

那我重写方法的时候

1885

我这儿直接让他打电话不就行了吗

1886

是吧

1887

我直接让他打电话不就行吗

1888

直接去打给我这个数组监听的上面去重新打电话不就行了吗

1889

所以说这块儿打电话了吗

1890

这个楼盘打电话懂了吗

1891

同学数组就是这么抽血的

1892

明不明白自己就是这么写的

1893

同学

1894

明白啊

1895

我们继续了

1896

好速速这块observer observer这块我们继续OB的地方吧

1897

这个我们说了它的作用是吧

1898

然后这个water

1899

订阅abra abra这块是吧

1900

饿不着

1901

而我们往这里边儿

1902

我们来看一下这个

1903

这是我们的打电话是吧

1904

我们来看一下打电话的过程是怎么实现的是吧

1905

那么你们说打电话的过程怎么实现的

1906

打电话的过程是怎么实现的

1907

打电话的过程给大家看我们这个简版的意思

1908

看这个

1909

看这个简单简单的例子

1910

看看一下这个打电话的过程怎么实现的

1911

你看

1912

我这是一个地铺

1913

我这是个电话本是不是

1914

我这是不是个电话本儿

1915

是同学这是个电话本

1916

我的电话本上面有两个方法

1917

第一个方法是什么

1918

就是一个数组是吧

1919

我的电话本就是个数组

1920

那么怎么过程

1921

我往这里边去添加

1922

是吧

1923

往这个数组里面去添加是吧

1924

看到吗

1925

往这个数组里面去添加

1926

添加我这个什么

1927

添加我这所有的什么

1928

添加我所有的是吧

1929

看见了吗

1930

就是你具体什么是什么电话

1931

我我这个数组里面去添加

1932

添加完了之后

1933

通知怎么通知我

1934

便利我这个数字

1935

便利我这个数组打电话

1936

调用water上面打电话的功能是吧

1937

Update a是吧

1938

通知的功能就这个过程明白吗

1939

这就是

1940

怎么订阅发布的过过程

1941

没有啊

1942

我们在这儿再串一下

1943

是不是就就明白了

1944

在这儿再看一下

1945

是不是就明白了他是一个什么过程

1946

维护订阅怎么维护订阅

1947

这个K上面维护了一个什么

1948

维护了一套DF是吧

1949

这个地方上面有个什么什么

1950

这个地方有什么

1951

这个每个K上面是有一个的

1952

上面有什么所有的电话

1953

所有的电话是吧

1954

是不是你打电话就是什么

1955

就是个数组是吧

1956

所以我们在这一步

1957

你看我在L这块儿

1958

是不是对这个打电话的用不到的时候

1959

你看

1960

我们这个APP上面

1961

这是不是就一个SR deep

1962

你每一次掉一个a的时候

1963

它是不是就一个deep

1964

是不是是不是是不是有个电话本

1965

是不是同学呢

1966

我们在这一步的时候

1967

他是不是又还还又还会维护每一个K的电话本儿是吧

1968

你看这一步的时候会维护每一个K的电话本明白吗

1969

就是每一个K

1970

我们这是这是这是不是就相当于每一个K电话本儿了是吧

1971

是吧

1972

所以这一步

1973

这一步是不是打电话的功能

1974

所以说这块儿我们再来给大家穿一下

1975

再来看一下这个维度

1976

再来看一下

1977

我们这现在最主要核心的维度就是把water和这块儿串起来了

1978

把water和这块儿串起来

1979

Water是怎么串起来的

1980

同学们给大家

1981

给大家看一个我们的这个render

1982

他是render

1983

卧槽

1984

我们到这里边儿

1985

它会执行我

1986

Instance

1987

说实话

1988

一塔一塔

1989

我想我想一下怎么给大家讲这块儿

1990

执行render

1991

自信mountain

1992

执行mount

1993

私信蒙特

1994

等一下他们我看一下怎么给大家讲

1995

这块儿稍微把这块儿给大家讲透一点点

1996

Opera

1997

嗯

1998

先这么讲吧

1999

先用这个简版的给他讲

2000

简单讲了之后

2001

然后再看这个复杂的就很简单

2002

我们用捡来捡了

2003

把这个water到这个绑定的过程

2004

明白

2005

主要是绑定这块儿

2006

绑定的过程

2007

虽然我给大家用那个什么

2008

用那个笔记给大家演示了一下是不是

2009

用这个很简单的这个笔记

2010

是不是给大家说明一下

2011

就是怎么去绑定维护这个关系

2012

但是对于很多同学来说

2013

没有看到真实的代码

2014

其实还是有点恼火的

2015

所以说我们通过什么

2016

通过一个简版来给大家讲一下

2017

我们实现了一个简版的V

2018

我们一步一步带着

2019

咱们并不是说讲了简版

2020

简版的原因只是为了把让你把这块儿拉通拉拉通之后我们再讲那个你就很清楚了所以这一步你看我们这一步是吧

2021

就是双向数据绑定简版是吧

2022

简版简版这块儿

2023

我们这块儿给大家看一下我们代码实现这块儿这是我们的事吧

2024

HTML是吧

2025

这是我们的HTML

2026

各种不同的HTML

2027

我们的VIP是吧

2028

V1然后这里边我们六一个V是吧

2029

我们六一个V6了V之后了we之后

2030

我们这一块儿是个hello word是吧

2031

然后我们遍历一下这个爱就不停去修改我这个text是吧

2032

最后给他改成99

2033

所以说我们在这一步展示的也是99是吧

2034

展示的也是99是吧

2035

那么在中间他会有一个批处理的过程

2036

我们会给大家

2037

就是唯一的性能优化批处理的过程

2038

我们会给大家

2039

那么这一步这一步we这一步需要聊的是什么

2040

需要聊的就是他这个什么

2041

那个那个那个那个那个

2042

我们怎么去实例化构建的过程是吧

2043

那么这一步你看我们实现的时候很简单

2044

就是我们的模板是吧

2045

模板我们拿到这里边来

2046

当然我们没有写自己的编译这一套

2047

我们首先index是吧

2048

这里边会去初始化什么

2049

这是我的index

2050

Index应该是没有的

2051

应该是在MVM

2052

你看刘威是吧

2053

你在刘威的时候

2054

我们是不是留了一个V1 V1的时候

2055

你看这是我们传传传进来的参数是吧

2056

进来的时候我们的就是我们要挂载的动是吧

2057

还有这个是我们的什么数据是吧

2058

然后这一块儿拿到我们具体什么

2059

拿到我们队的带塔是吧

2060

这是我们的卡是吧

2061

这是我们的塔

2062

然后又拿了什么

2063

我们对他们的什么

2064

具体的data是吧

2065

获取具体的data

2066

然后把data拿过去做一个监听

2067

到莫把这个does he data给到a是吧

2068

做一个监听

2069

这个October就只有什么过程

2070

同学们

2071

就是我们之前给大家看的这个初始化一个电话本儿是吧

2072

就是我们刚刚给大家看的这个过程是吧

2073

初始化一个电话本

2074

然后去做一个什么

2075

Get和set是吧

2076

监听这个数据

2077

但是监听这个数据之后

2078

它这个数据现在并不会使用

2079

是不是

2080

它这个数据是不是并不会马上触发get和set a

2081

那什么时候出发给他

2082

是他要获取数据的时候是吧

2083

获取数据的时候

2084

那什么时候获取数据

2085

我们先来看

2086

是不是获取数据的时候才会触发给他喝

2087

所以说在这一步

2088

你看我的电话本儿一出出画好了是吧

2089

我们这个get和set OB既地方

2090

Property是不是这块儿也也已经

2091

把数据鉴定好了是吧

2092

现在就等着使用了是吧

2093

使用的时候它就会构建映射是吧

2094

我们现在继续回回到这里边儿

2095

因为是单线程吗

2096

是吧

2097

单线程它那块儿构建好了之后

2098

就回到这里边儿

2099

然后就拿到我们什么APPDL是吧

2100

拿到我们APPAPP

2101

那个K

2102

然后拿到我们怎么拿到我们整个这个里边什么内容

2103

看到了我们整个这个内容

2104

整个这个内容是什么

2105

就是这一头的内容

2106

是不是就是我们相当于这里头的内容是同学们相当于这里头的内容

2107

是不是是这一坨的内容

2108

是不是是不是那这一坨的内容

2109

最后的内容在你的那个微里边儿

2110

这儿是不是就会返回一个什么

2111

就会返回一个什么

2112

同学们

2113

返回什么

2114

返回一个render是不是

2115

是不是

2116

是不是就会返回一个render

2117

这个compare是不是就返卡梅尔之后是不是就会返回render是不是

2118

这个不用说吧

2119

我们昨天给大家说的是不是卡

2120

是不是就返回终点是吧

2121

返回render之后

2122

他就需要把render和我们的water联系起来

2123

是rain的water联系起来是不是这里边我们来看我们这里边儿

2124

你看我们的代码

2125

这里边儿他会去做一个树林看

2126

这是我们的代码

2127

这是我们代码

2128

这是我们传进来代码

2129

是传进来代码是吧

2130

我们传进来代码

2131

传来代码之后

2132

他在里面拿到我们这个代码

2133

拿到我们代码去调用我们这个东西

2134

拿到我们所有的代码看到吗

2135

这是我们最基本的API

2136

拿到我们所有的代码

2137

拿到代码之后去做一个什么

2138

去调用一下我们自身的这个complain complain complain的方法了吗

2139

用我们这个complete的方法

2140

这个每一个

2141

我会循环我每一个这个跳的

2142

就是我拿到这个

2143

拿到这个东西看到了

2144

拿到我这个内容

2145

这里边的这个内容是不是去便利他是不是同学们你看去便利这里边的每一个这个这个露的节点是吧

2146

每一个节点你看我拿到第一个节点遍历

2147

遍历完了之后

2148

然后往这里边儿

2149

去做处理

2150

处理完了之后

2151

把这个漏的节点添加到我新创建的文本文档里边儿

2152

文档片段里边儿

2153

同学们这个up EP有一个APP

2154

有一个过程叫什么

2155

叫做剪切过程叫什么

2156

什么叫剪切过程

2157

就是我一开始我的这个

2158

我所有的节点全部在什么在

2159

全部在什么什么

2160

全部在哪个上面

2161

全部在我这个load里边是吧

2162

但是我现在通过一个这个ipad的这个API

2163

就会把握这个文内容

2164

文档剪切到我这个里边儿去

2165

剪切到我这个这个里面去

2166

就相当于是水龙头一样

2167

从这个地方留到这个地方来

2168

就是留的过程

2169

我做一些处理

2170

这个碎水的过程做一些处理

2171

那这块儿有意思吗

2172

这是一个剪辑的过程

2173

是不是这块儿的过程

2174

就是一个什么剪辑的过程

2175

明白吗

2176

这个内容就是一个什么剪辑的过程

2177

所以呢

2178

在这一步就是一个什么

2179

把我对每一个节点拿过来做处理

2180

做处理

2181

处理完了之后

2182

处理完了之后把这个节点

2183

然后重新加到我这个新构建的文档里边儿

2184

这里边的文档就没了

2185

然后处理完了之后的文档节点返回

2186

返回到这里边儿

2187

返回到这里边儿之后

2188

然后就返回到这里边儿

2189

返回到这边

2190

反正这边之后and就完了

2191

所以说它的核心是在哪一部

2192

是在处理这一步是吧

2193

处理每一个节点的这一步

2194

每一个节点这一步

2195

就相当于是我们每一个指令是吧

2196

每一个我们render的指令这个维度是不是

2197

同学明白吗

2198

就相当于处理我们每一个

2199

这是一个指令

2200

这是一个四个指令

2201

明白吗

2202

这个过程就相当于处理每一个指令的过程

2203

不同的指令

2204

每一个指令有不同的处理方法

2205

我们这块儿先说这种展示型的指令

2206

再说输入性的指令

2207

输入性的指令是触发set是吧

2208

我们先说展示型的指令

2209

你看我会出发complete complete

2210

如果是什么文本节点

2211

就是这种文本节点

2212

他这块儿有一个正则匹配

2213

就是文本

2214

文本里面它会有一个正则匹配

2215

正则匹配会匹配到什么

2216

会匹配到我们当前这个东西

2217

就相当于你看这是我们这一个正则表达式

2218

是同学们

2219

这是我们的一个正则表达式是吧

2220

我这个正则正则表达式它是可以匹配

2221

可以匹配我这个内容的知道吧

2222

可以匹配什么

2223

可以匹配我这个

2224

比如说匹配我这个这个这个这个内容知道吗

2225

可以匹配我这个内容是不是

2226

匹配我这个内容

2227

对匹配完这个内容之后

2228

我在这儿

2229

是可以去拿到我具体的这个这个匹配的内容的

2230

是只知道吗

2231

可以拿到我具体匹配具体的这里边的内容

2232

你看我在里边可以去拿到了

2233

看到吗

2234

我可以拿到我匹配这个里边的这种

2235

可以通过这种东西

2236

对

2237

我可以拿到这里面这个东西是不是就具体的K

2238

所以我这边拿到我具体的K

2239

拿到我具体的K之后

2240

同学们我们说了一个指令对应一个什么

2241

一个指令对应什么

2242

一个指令是不是对应一个render

2243

一个render是不是就对应一个water

2244

是不是现在就关联起来了

2245

是不是润一个render是不是就相当于

2246

是不是就是render

2247

我们在那里边儿是不是就是那个你的那个render函数

2248

就是具体的render函数

2249

就是具体怎么去修改的那个render函数

2250

所以这这一步你看

2251

一个指令就对应一个water

2252

看到吗

2253

我们water

2254

我们拿过来之后

2255

他就初始化water了

2256

看到初始化water这块就会传入一个不同的指令

2257

有不同的打电话的过程

2258

是不是就是怎么去修改冻结点的过程

2259

是啊

2260

我是不是说了每一个water

2261

不同的指令是

2262

有不同的不同的修改

2263

Render的过程是吧

2264

我们这块儿地render是什么

2265

就是low的video看到吗

2266

什么叫low

2267

我们要修改这个洞节点的文本节点的值

2268

是不是就要去获取这个漏的

2269

漏的节点的什么load这个属性是吧

2270

然后去获取这么修改是吧

2271

这么修改是怎么修改

2272

这个懂吗

2273

这个懂吗

2274

这个基本的jsapi懂吗

2275

是吧

2276

你现在就这么理解好吧

2277

你现在就这么理解

2278

所以说这个就是你看我把我传入的是什么

2279

具体去修改我们节点的render方法是吧

2280

Call back

2281

这就是我的render

2282

这个就是个render

2283

你就把把这个东西构成render

2284

然后传入了什么

2285

传入了我的V1实例

2286

传入了我的露的节点

2287

就是我当前的节点

2288

就是什么

2289

就是我这个冻结点是吧

2290

我当前这个冻结的

2291

当前这个冻结的还有什么

2292

我的name name是什么

2293

我具体的key是吧

2294

我具体的这个这个K就是我这个特色是吧

2295

匹配的

2296

然后water

2297

我们来看new water怎么了

2298

我们来看模特儿里边

2299

Water里边儿

2300

首先这是我的卧室吧

2301

它传入了什么

2302

我有些实力

2303

还有我这个节点是吧

2304

还有什么

2305

还有什么

2306

这是我的露的节点

2307

这个节点还有吗

2308

还有我的对应的这个K是吧

2309

还有我具体的render是吧

2310

这个是属于什么

2311

具体的render函数是吧

2312

你可以把它理解为render函数是吧

2313

咱们这个没有问题吧

2314

这个这个东西把它理解为点数没问题吧

2315

是吧

2316

因为他就是修改多么的具体的方法是不是

2317

所以这一步拿到这个东西之后

2318

然后这一步他做什么

2319

他会判断

2320

他会把我们这个东西给到

2321

把我当前这个东西

2322

把当前这个water给到什么的

2323

铺点儿他给他

2324

我的DNF是什么

2325

我的电话本儿是吧

2326

我的电话本儿是不是我们在初始化那个数据的时候

2327

是不是把电话本儿已经升级好了的

2328

是不是初始化这个数据的时候

2329

是不是已经把电话本声明好了

2330

同学们是不是

2331

是不是构建O2O的时候

2332

是不是电话本生病好了的是吧

2333

是不是

2334

是不是那证明好了之后

2335

我这块儿就是一个什么

2336

就是的

2337

不是他给他是吧

2338

我这个的谱是不是一个全局的对象是吧

2339

全句是吧

2340

然后我拿到这我这个什么target是吧

2341

这不是他给他这个target

2342

就是把我这个什么唯一的这个时

2343

这个water的实力就给到我这个他给他上面了是吧

2344

就先给到他上面儿明白吗

2345

就先把我这个water挂在这上面

2346

是吧

2347

把这一步先挂在上面那挂在那上面之后

2348

然后同学们就把这些属性给到这上面

2349

就就把我这些具体我这个water

2350

因为我要维护一个关系嘛

2351

是吧

2352

我现在就把这个关系构建起来

2353

构建一个什么样的关系

2354

构建我这个water的名称是吧

2355

Name name name是什么

2356

就是我获取的这个具体的K是吧

2357

这个water具体使用哪个K

2358

是不是他使用了哪个数据是这个water具体的ID是什么是吧

2359

这个water它具体的什么

2360

哪个节点使用的这个是吧

2361

这个water它的负载的这个挂载的什么威实力什么的

2362

Water具体的render对象是什么

2363

是吧

2364

是吧

2365

具体具体去做操作

2366

修改我们操作的东西是什么

2367

然后water这些关系构建好了之后

2368

他去调用什么

2369

调用一个up data

2370

调用update update我们说了什么

2371

同学们

2372

我们在new water的时候就会第一次执行他的什么render函数

2373

是吧

2374

Update就会掉什么

2375

这就是它的update

2376

看到掉了update update首先会做一个什么处理

2377

懂upset首先会做一个什么处理

2378

就是先不说

2379

S

2380

首先会做一个什么处理

2381

After首先会做一个什么处理

2382

首先会做一个什么处理

2383

首先是不是他他要去拿到最新的数据

2384

我们说了他是不是要去拿最新的数据water是不是要去拿最新的数据

2385

对

2386

因为water我们在

2387

Water是不会触发render是

2388

我们这里边儿就没有触发render

2389

就通过这种这种update是update就会触发render

2390

这就是我们具体触发render逻辑我这里边儿封装一下

2391

那这里边我们是不是就处发热啦

2392

发热的时候是不是第一步他他就会去获取数据这这是不是就

2393

就会去在那个里边是不是就会触发点触发

2394

触发render是吧

2395

触发render就会什么

2396

最后吃完是不是update是吧

2397

最初我们是吧获取数据是吧是吧是吧

2398

获取数据

2399

获取数据就这就是什么

2400

我们的sister get是吧

2401

就会把我们最新的数据获取过来

2402

看到获取数据

2403

因为我们render执行run的时候就会获取数据

2404

我们这儿模拟了他的render

2405

同学们这一步明白吗

2406

最不迷吗

2407

是吧

2408

所以说这一步它会获取到我们这个render

2409

获取了这个render完了之后

2410

去获取数据是吧

2411

获取我们这个数据

2412

获取完这个数据之后做什么

2413

最新的数据

2414

获取最新的数据的时候

2415

同学们就会做什么

2416

就会获取我们什么

2417

就会惩罚我们是什么

2418

给他是吧

2419

就会触发我们的歌

2420

但是这个时候触发get的时候

2421

我们的皮儿他给的上面刚好是不是有获取我们这个

2422

这个东西的water是不是

2423

Water实力是不是刚好有这个water实力是不是

2424

是不是

2425

明白吗

2426

是不是刚好有这个water的实力

2427

是不是就回到我们刚刚说的映射关系的

2428

刚好有一个龌龊的实力

2429

然后他做什么把关系

2430

把这个deep添加到这个依赖里边儿

2431

就是你刚好这份数据

2432

你自己的这份数据维护他所谓的依赖

2433

是不是就是你所谓的电话本是不是全部收集起来是吧

2434

这不明白收集起来这一步明白吗

2435

同学们明白吗

2436

这一这个这个这个这个这么难吗

2437

是吧

2438

好关系收集起来之后做什么返回数据

2439

返回数据是吧

2440

返回数据到这一步了是吧

2441

返回数据

2442

返回数据到这一步了是吧

2443

返回到最新的数据

2444

返回到最新的数据到这一步

2445

返回到最新的数据完了之后就是什么

2446

触发render

2447

是不是错在哪

2448

我这个就是

2449

This type就是我具体要更新的render类型吗

2450

就是我这个东西嘛

2451

是吧

2452

这个load就是我自己的logo吗

2453

然后去获取最新的数据

2454

出发render吧

2455

是吧

2456

你看这块儿出发点

2457

出发点完了之后就什么就到我们这里边儿是吧

2458

点出来完了之后

2459

这一波这事不就完了

2460

这个字是不就完了

2461

所以这个关系是不是就构建起来了

2462

这个关系是构建起来

2463

同学们这这现在明白吗

2464

现在明白通过代码这一块儿

2465

是不是构建起来了

2466

构建起来之后

2467

那现在我要修改

2468

我修改这个数据

2469

这是不是input的修改

2470

那对于这种修改的时候

2471

Update的时候是先触发render还是先获取数据

2472

我们这个update其实就相当于render

2473

我们这个update其实就相当于render

2474

你的render里面不就是我们的update

2475

是不是就相当于人格

2476

这块是不是就先获取数据

2477

获取完数据再去真正修改动力那你这里边你这里边是不是也你这update是就相当于我们这个东西

2478

Update做的事情就就两件

2479

第一件就是获取数据

2480

这个是不是就获取数据

2481

第二件就是真正去真正操作动

2482

这个不就是真正操作动吗

2483

对了

2484

就是这个东西

2485

你就把可以把它理解为是个render明白吗

2486

明白吗

2487

这就是我们昨天说的

2488

想换个名字

2489

你现在还想换个名字吗

2490

现在你明白吗

2491

你的APP就相当于是我们这块的render

2492

想换个名字

2493

你是不明白就继续扣个零

2494

明白就扣个一好吧

2495

我们这儿是模拟

2496

所以在这一步

2497

你这里边儿真正做的就是这个这个过程的

2498

是不是就这个过程来获取数据

2499

触发修改

2500

明白吧

2501

在这一步完了之后

2502

完了之后做什么render发完了

2503

我们再来看

2504

再来看什么

2505

再来看输入型的是吧

2506

输入性的

2507

那输入型的又是一个什么过程

2508

你看我们这输入型的

2509

你看他是一个什么过程

2510

当等于一的时候就是input是吧

2511

Input的情况

2512

他要做一个什么监听是吧

2513

监听我拿到它会获取到我所有的属性

2514

你看获取了我所有的属性

2515

然后拿到我这个属性是指令型的属性的时候

2516

就是刚抹的时候

2517

属指令性的属性的时候

2518

会拿到我这个属性

2519

具体使用这个指令

2520

具体使用了哪个K是吧

2521

它使用的是text是哪个K

2522

然后做一个什么处理

2523

同学们

2524

我们说了

2525

然后做一个什么处理

2526

监听我这个input是世间听我这个音频的

2527

是不是

2528

是不是今天我这个衣服的

2529

同学们

2530

今天我这个input的输入输入完成之后

2531

我在这块儿去初始化一个water

2532

是初始化一个water

2533

对

2534

说实话

2535

这个water我们说了一个指令

2536

会构建一个water是吧

2537

是不是一个指令构建一个莴笋

2538

是吧

2539

那一个指令构建一个water

2540

这块就很有意思啦

2541

什么意思

2542

就是说我们在这一步

2543

你看明白

2544

我们在这一步是一个什么过程

2545

是一个指令

2546

构建一个腿儿

2547

那么这块我们这个input是不是也会构建一个water

2548

是不是因为我要定向

2549

到时候修改的时候

2550

因为我们的V脸我要修改input这个里边的修改

2551

你们修改input里面的值是怎么修改的

2552

是不是就是video是吧

2553

就是通过微来修改的是吧

2554

所以这一步你看我们的render是什么

2555

修改video的render

2556

所以双向数据绑定在这儿

2557

双向了看见没有

2558

看见了吗

2559

就这双向了

2560

就是什么时候去修改我这个音谱的

2561

在这儿相信了是吧

2562

就是我的展示性的东西

2563

我的water是这一部water了

2564

明白吗

2565

我的input是不是也需要发生改变

2566

在这一步发生了改变

2567

然后监听我在输入的时候

2568

我在监听input就拦截了你的所有输入

2569

拦截了你所有的输入

2570

你的输入全部拦截

2571

拦截完了之后

2572

在这一步做什么去修改我V1实力上面的这个

2573

把你这个输入的这个值拿来修改

2574

我这个威力实力上面的这个具体的什么某个K看明白了吗

2575

看明白了吗

2576

然后修改这个K的时候

2577

修改了什么text是吧

2578

修改text

2579

修改text的时候是不是就走到这里边儿修改什么

2580

修的是什么

2581

修的是不是这个东西

2582

是不是这这一本如果不一样

2583

是不是这一步了是不是

2584

这一步修改

2585

修改完了之后

2586

触发什么的

2587

不是note PHY note就是我所有的water是吧

2588

我所有的water刚好就是什么

2589

就是这两个water是吧

2590

这窝儿还有什么

2591

我这个卧室是不是我这个龌龊

2592

那这两个窝腿

2593

这个腿就修改我们什么文本展示

2594

那这个water就修改什么修改修改

2595

我们铺在这一步

2596

你看

2597

明白了吗

2598

现在明白了吗

2599

同学们

2600

这个过程明白了吗

2601

明白了吗

2602

是吧

2603

那现在这一步明白了

2604

咳

2605

等一下咱们

2606

想通了通透了是吧

2607

通透了

2608

同桌之后呢

2609

我们再来看这

2610

再来看什么

2611

再来回到这里边儿来看我们什么

2612

看我有意愿嘛

2613

是吧

2614

有意愿吗

2615

老师看你的代码应该是编译的时候创建的water吧

2616

编译的时候没有创建沃特碧的时候老在创建沃特

2617

编译的时候创建的render

2618

在执行构建V1实力的时候

2619

我现在还没讲到这儿来

2620

我还没攒到这儿来

2621

你说我这块儿

2622

我的实力这一块儿是我我给你们演示这个例子是

2623

但是真正这里边儿不是这里边儿

2624

它是结合起来的

2625

知道吧

2626

我演示这个例子是在编译的时候

2627

不影响知道吧

2628

不影响这个没有区别

2629

所以这一步我们回到这个这个里边来

2630

圆满里边儿是吧

2631

元宝里边来

2632

我们现在刚刚说了监听数据

2633

监听是不是已经完了

2634

数据是不是已经完了

2635

同学们

2636

这个东西数据源码里边的数据监听是不是已经完了是吧

2637

是吧

2638

我们已经给大家看了源码是吧

2639

已经学学明白了是吧

2640

那现在数据听明白了之后

2641

那么在这里边我们再来看除了数据监听还有什么

2642

还有DF是吧

2643

DFDF是做什么收集袋是吧

2644

你看也是一个他给的是吧

2645

是不是他给的是

2646

Check就是一个什么当前去挂载哪一个东西

2647

应该背什么

2648

哪个当前渲染的刚好就是我对应的water是不是是不是是不是的给他

2649

这是我们刚刚给大家看的ID还是我的ID

2650

就是我们的速度是吧

2651

数组它存在所谓的事吧

2652

然后这里边儿你看这是我所谓的什么

2653

有数组初始化是吧

2654

我的deep电话本

2655

说实话

2656

然后去不不就是什么

2657

你看就是我往这里边去做什么懂吗

2658

做什么是吧

2659

往这里边儿去做一个什么过程

2660

全部去浦西是吧

2661

把我这个water往里面去添加的过程是吧是吧

2662

就是往电话本里边去添加的过程是吧

2663

累就不用说了

2664

类目depend

2665

这个depend就是做什么

2666

这个depend就是什么

2667

这个depend这个过程其实是一个什么过程

2668

同学

2669

这个depend其实才是一个

2670

添加的过程

2671

但是这个depend的添加过程

2672

它相当于是调了这个depend target是什么

2673

就是我们的water是吧

2674

Water它有一个APP这个东西

2675

这个东西谁来调用的

2676

这个东西谁来调用depend这个过程

2677

同学们是谁调用了阿德萨的这个过程

2678

是谁调用的

2679

这个过程谁动了

2680

我们来看一下这个谁是谁调用的

2681

你看这是谁调用的

2682

这谁掉的

2683

是不是dip里边的调用depend是吧的喷的

2684

喷的时候你看的调研的时候

2685

那么这个里边儿就调什么

2686

调的water是吧

2687

第二个water是吧

2688

Water上面的地煞的deep

2689

那么调用water里边儿的地方other water里边儿的地方又调了什么

2690

又调了这个water的other shop

2691

明白吗

2692

相当于是我调用了

2693

这个

2694

电话本儿里边儿

2695

我通知打电话

2696

这个人打电话

2697

那这个人打电话

2698

他要拨号的过程

2699

那怎么拨号

2700

是他自己去播是吧

2701

怎么拨号

2702

视距自己去播

2703

所以的话

2704

这里边它有一个

2705

具体自己怎么去播的过程

2706

阿拉伯你看具体怎么自己去播的课程

2707

拿到我的deep

2708

拿到deep之后

2709

你看我这里边儿

2710

如果已经有这个依赖了

2711

他就

2712

不会去添加是吧

2713

是吧

2714

如果没有这个依赖

2715

这块其实也做了一个拦截

2716

除了deeper tIgEr

2717

你看他这儿还做了一个拦截

2718

是不是

2719

除了第二他在这儿做拦截

2720

他这儿还做了一个拦截是吧

2721

如果没有这个依赖他怎么办

2722

再去调用我当时那个地方

2723

往这里边儿把我这个water添加到我这个地方里边儿

2724

明白吗

2725

明白吧

2726

这个明白吗

2727

他就是一个什么

2728

就是一个天价

2729

其实稍微这儿有人绕

2730

但是不管怎么绕

2731

它还是绕到什么

2732

把这个water添加到店铺里边儿看了吗

2733

只说这个过程是通知

2734

就是这个过程是什么

2735

是我这个数数字数

2736

数据监听

2737

数据监听observer这块儿

2738

去掉用什么打电话

2739

这个电话本儿

2740

去找到电话本儿里边的这个什么water是吧

2741

找到电话本里边这个water

2742

然后通过water

2743

然后来打电话是吧

2744

通过water

2745

然后来通过water

2746

然后来记录记录到这里边来是吧

2747

现在还没打电话记录

2748

记录我本身记录到这里面来

2749

记录到这儿来明白吗

2750

它记录了还是我说明白吗

2751

所以在这里边呢

2752

就不用说了

2753

你看调用所有water

2754

调用water是什么

2755

用water up data

2756

用water update up water update就是更新

2757

知道吧

2758

Water的update就是render

2759

你现在就可以把它理解为render

2760

明白

2761

现在就可以把它理解为这同学明白吗

2762

现在怎么去

2763

他怎么怎么挂载到这个update上面的

2764

把人挂了

2765

我先我一会儿给你讲

2766

你看就是去调用notify

2767

然后去遍历所有是吧

2768

遍历所有然后去render

2769

明白吗

2770

是吧

2771

所以这块儿你看就是这个电话儿就不用了

2772

就不用了说再往下来

2773

再往下再往下来

2774

我们就可以看到什么

2775

也可以看到我们的water water我们说了

2776

在初始化的时候是吧

2777

说话的时候有很多东西是吧

2778

有很多东西

2779

说话的时候他要给到什么

2780

我们的唯一实例是吧

2781

还有什么

2782

还有我们自己的回调的方法是吧

2783

就是具体我怎么去打电话这块

2784

他也需要去做一些处理是吧

2785

是不是也需要做一些处理是吧

2786

我这块儿是不是一斤

2787

我这块儿我这块代码已经被干过了

2788

有一次被做什么被干过了

2789

这是不是地铺

2790

你们下来之后可以看一下

2791

对比一下这个代码和我那个代码

2792

我这块儿好像被干过了

2793

应该是deep we的实力上面

2794

复习我当年那个this

2795

把我这个东西复习进去

2796

应该是

2797

你看一下

2798

然后它里面有一些物品

2799

这些物品都不用管了

2800

各种懒加载各种东西

2801

然后call back

2802

这就是我回调的render

2803

所以我具体要做什么事情

2804

我具体要做什么事情

2805

我的water一开始是不会维护的

2806

知道吧

2807

我的water自己是不会写死的

2808

他是通过什么

2809

通过你初始化的时候

2810

我来把他传进来的

2811

然后去添加

2812

然后我这个water具体维护了哪些依赖是吧

2813

哪些人

2814

用了我这个这个对应的这个什么

2815

这些这些东西是吧

2816

这些东西然后去做什么

2817

这是我的打电话

2818

电话完了之后这边给他

2819

Good

2820

其实就没有什么东西

2821

然后D添加清空update update就是调用

2822

Update就是调用

2823

用water update water update就是什么wrong wrong这里边儿就是出发

2824

Render就是render

2825

但是他在里面做个批处理

2826

一会儿再跟你说批处理

2827

这一会儿再跟你说批处理

2828

它里边就是调用update update就是粗壮

2829

粗壮这里边就是什么

2830

先去获取数据

2831

你看this To Get是获取数据

2832

这个数吗

2833

获取数据56行什么意思

2834

想我

2835

我说想我是吧

2836

这个嘛

2837

所以你看这一部this term that就是说什么

2838

就是获取数据是吧

2839

就是获取数据是不是添加依赖

2840

处处处理数据

2841

然后这一步完了之后是吧

2842

This target完了之后拿到我们的微

2843

你拿到崴了之后

2844

然后去做什么

2845

拿了完了之后去做什么

2846

去调用回调是吧

2847

就执行回调叩拜嘛

2848

就直接回到这里边儿

2849

就执行回调call back

2850

回调call back就是我们什么

2851

就是我们的render

2852

所以说现在的关

2853

我们现在叫什么

2854

现在要关联起来

2855

关联什么

2856

怎么把water和render关联起来了

2857

是不是什么时候什么时候去关联出来写了什么时候初始化

2858

这里边儿威斯利

2859

刚刚是不是给他说了这是你的微是吧

2860

这是你的微

2861

你的微信在初始化的时候

2862

会找到一个方法里边儿

2863

会找到这个生命周期这个方法里边是吧

2864

找到这个方法里边儿

2865

Mount a

2866

我们刚会走道蒙特

2867

嗯

2868

Even to

2869

他的MT是在哪儿

2870

挂着mount文件夹

2871

这儿

2872

这儿会调用下回骂她可以吗

2873

用下划线下划线MT这一块儿

2874

就是我们的各种生命周期嘛

2875

是吧

2876

初二初二的时候你看它会调用初始化

2877

初始化的时候他会去挂载各种东西嘛

2878

是吧

2879

挂载各种各种东西

2880

然后就把你的render的render代码

2881

我们之前是不是给大家看的

2882

你的render代码是在这里边儿的render代码

2883

在那边的render代码

2884

我们之前是不是给大家看到的

2885

在这里边儿是不是的代码

2886

是吧

2887

这是你的render代码是不是

2888

是不是你的render代码

2889

我们在这里边儿会把你的render代码拿来

2890

挂在你的上面

2891

如果编译的情况下

2892

他会他会把你的任何代码

2893

编译的情况下

2894

会把你的render代码结合进去

2895

这块稍微有点儿

2896

这块代码稍微写的有点乱

2897

因为它这个东西因为有点儿这是执行render

2898

执行render编译的时候

2899

应该是在初始化挂载的时候

2900

我记得是

2901

他会把你的render给挂载上去

2902

明周期

2903

把你的render

2904

把你的render给挂载上去

2905

我们之前给大家看到这个render a

2906

等一下咱们

2907

把你编译的这个render

2908

这里边应该没有focused update a monkey的没有

2909

这是厨房的

2910

这下发现扔点儿挂载

2911

这是刘易斯

2912

不对的

2913

来收一下吧

2914

真得儿

2915

DV

2916

Render

2917

小眼

2918

Build

2919

哎呀

2920

我慌了我慌我慌了我慌了

2921

他这个人就在这儿挂着呢

2922

是在那个那个那个编译的这块儿

2923

这块儿挂着了

2924

说实话这块挂着了

2925

我慌了

2926

我是懵逼了

2927

我说怎么这什么情况他会在这块挂着

2928

因为不同的都不同的

2929

不同的什么不同的端它就挂在不同点是吧

2930

我们是不是错了

2931

他不同的端去掉挂在不同的render

2932

应该是在这里边儿

2933

像我们的那个complaint里边儿

2934

应该是在plant plant里边有个web web端是吧

2935

不同的端它就挂在不同的问题

2936

而是说这一步你看

2937

在你初始化的时候

2938

在MT的时候

2939

你初始化monkey的时候

2940

这个生命周期的时候

2941

是啊

2942

他就会去做什么

2943

他就会去初始化你的render是吧

2944

你的render他会判断我们这是之前是不是讲的

2945

判断你的render是否有

2946

如果没有的话

2947

他就做什么

2948

就会render给初始化

2949

通过compare编译出来

2950

这个就不用了吧

2951

这个昨天花了基本上半个小时来给大家讲render这一块的东西是吧

2952

编译这一块儿

2953

它就是一个什么

2954

就是你编译出来的with是吧

2955

With render

2956

然后拿过来这块儿这个什么

2957

一会儿做一个什么

2958

这是compare compare在线编译是吧

2959

这compare在线编译

2960

在线编译出来的render是吧

2961

在编译出来的

2962

然后拿过来挂载是吧

2963

是不是

2964

这块明白吗

2965

这是昨天给大家说的

2966

清楚吗

2967

同学们

2968

这个知道吧

2969

是吧

2970

这个不用再花时间收了吧

2971

是啊

2972

然后这是你的template

2973

这是你的render

2974

拿过来这块儿执行

2975

包括挂载这些东西都是这个样子

2976

都这个样子

2977

昨天是给大家说的

2978

然后这里边儿拿到render之后

2979

他这边会做一个什么处理

2980

会做一个我们的那个

2981

他会做一个什么处理

2982

哪块儿去了

2983

做一个render的挂载

2984

这是compare

2985

里面有备注

2986

他们你们下下来之后

2987

可以去稍微去看一下

2988

后边儿都可以去看一下他们的备注

2989

我这里边儿

2990

我刚刚说的那个东西到哪去了

2991

这

2992

Render如果没有render

2993

他会去把我们的这个东西去做挂载

2994

去模板编译

2995

模板编译画是吧

2996

然后去把它处理这儿这儿是吧

2997

挂载是吧

2998

模板编译

2999

然后扔点儿这块儿点完了之后点是挂在上去是吧

3000

是不是点挂在挂在APP上边儿

3001

挂APP上面之后

3002

就回到我们这边

3003

到我们什么

3004

说实话还是在说话的阶段是吧

3005

还是在我们生命周期刷一个阶段这里边

3006

实例化这个这里边儿

3007

这里边儿这里边儿看到这里边这里边的时候

3008

它这里边儿就已经

3009

你看它这里边儿是不是就已经是一个什么过程呢

3010

同学们

3011

它这里边儿是不是就已经

3012

这个缩小缩小在这这里边

3013

这里边是不是就已经就走到这里边儿了

3014

是吧

3015

Mon ti了吗

3016

是什么

3017

是什么呢

3018

生命周期

3019

包括你的up data的update

3020

就是你更新的一些逻辑吗

3021

你更新的一些逻辑

3022

这里面会有一些一些一些一些处理

3023

包括搭配齐这些东西

3024

这个还好

3025

这个还好

3026

但是这块儿我们会找到什么

3027

找到我们的更新逻辑monkey的是吧

3028

Mounted挂载

3029

Mount挂载的时候

3030

你看它会判断你这里边儿有没有

3031

Render

3032

如果没有render

3033

他会去找一些

3034

就是什么处理

3035

因为你的option里面没有

3036

没有

3037

竟然还没有人儿

3038

没有人儿就报错是吧

3039

然后去走一些

3040

然后去做什么

3041

做一个挂载

3042

就是真正去更新数据的方法

3043

他会怎么去做一下

3044

这个是第一位环节呢

3045

你可以不用管

3046

就是怎么去更新数据的方法

3047

他会去把它封装起来

3048

怎么去更新数据的方法

3049

同学们

3050

这是我的render

3051

这是我的render

3052

这是我自自定义的render是吧

3053

然后把这个render传到一块儿去

3054

传到我这个

3055

我这个update里面去是吧

3056

我这个APP在里面去

3057

我这个APP里边儿还维护了一些什么

3058

维护了一些东地府是吧

3059

构建好了之后

3060

你看这是我的东地方是吧

3061

这是我的之前的DF

3062

这是我之后的DF是吧

3063

然后去动的这个过程

3064

所以说在这一步他会拿着我是吧

3065

他会构建一个方法

3066

这个方法就是包含了我这个render

3067

包括我们的这个方法

3068

然后拿到那边去

3069

拿到那边去

3070

你看到这里边来看到吗同学们

3071

把这个方法吗给到这里边来

3072

看到这儿出错

3073

看到吗

3074

这说实话

3075

然后在这之前

3076

在调这个生命周期之前

3077

调一下before update

3078

明白了明白了吗

3079

听明白了吗

3080

这不就赚钱了吗

3081

不就算起来初始化的时候

3082

这个过程就算起来了吗

3083

你这个render

3084

你这个render执行完了之后

3085

你这个文件执行完之后

3086

它这里边就是做什么过程就是什么过程

3087

就是去不断

3088

东帝夫的过程是吧

3089

地府的过程是多么地服

3090

我们这块儿不讲

3091

兄弟

3092

府里边儿有一个算法的目的

3093

我们在

3094

我们在那个什么

3095

嗯

3096

你应该下的是V1

3097

下的不是V2吗

3098

我这个一我这个应该是有几问题

3099

应该差不多吧

3100

差不了差不了太多知道吧

3101

应该差不了太多

3102

差不了太多

3103

没什么区别

3104

这没什么区别

3105

还有什么区别吗

3106

这不就这些区别吗

3107

你说这些没有备注吗

3108

你说没有备注吗

3109

备注是我写的

3110

这文中文备注全是我写的

3111

这位妹子是我写的

3112

我下来之后给你们

3113

你以为呢

3114

你

3115

你见过哪些人血中中文备注

3116

他会觉得写中文很low逼

3117

那其实现在中国话

3118

全世界都在学中国话是吧

3119

她觉得写中文很牛逼

3120

是不是其实就应该写中文

3121

所以你看他这一步

3122

他完了之后就会地府

3123

地府我们这块儿讲东地府在数据结构与算法那块儿

3124

有专门的结论给大家讲好吧

3125

我们这块就不用给大家说这一步

3126

你看整个过程是不是就拉起来了

3127

是吧

3128

绌发动触发

3129

整个东西是不是全部拿拿起来了

3130

所以这一步整个过程拿起来完了之后

3131

稍微出发render是吧

3132

Water里边儿出发render

3133

Water

3134

调用

3135

然后出发去update a是吧

3136

同学

3137

明白了吗

3138

这整个过程

3139

现在整个整个过程你们现在自己再看一遍吗

3140

很多小的细节上的东西

3141

就比如说他哪块儿什么时候去执行生命周期

3142

比如说什么monkey的

3143

那些生命周期

3144

那些生命周期

3145

那些什么before after的这个各种生命周期

3146

它就是不同的一个流程

3147

直接拉下来就执行就行了

3148

这个东西我就不给大家讲了

3149

生命周期这个东西很简单了

3150

知道吧

3151

所以说这个整个流程就基本拉通了

3152

这个流程拉通了

3153

现在我还要给大家讲几个东西

3154

第一个批处理

3155

我们刚刚说了water

3156

你看我们这个water掉update的时候

3157

他直接跳掉软是吧

3158

调入如果如果如果是同步的情况下调用

3159

他会调人

3160

那调人的时候会走什么

3161

会走这里边儿这个转是吧

3162

走这个转的时候

3163

他判断当前这个状态是激活了的时候

3164

他会走什么call back call back不就是我们的render嘛

3165

是吧

3166

就是我们那个update component是吧

3167

我们这儿写的update component是是这个东西是吧

3168

就用这个东西掉这个东西的时候就会执行update

3169

就会执行render是吧

3170

那这个过程同学们

3171

这个过程我要给大家说的是

3172

他这儿做了一个批处理

3173

什么叫批处理

3174

就是说他不会

3175

每一次都直接去重新调

3176

为什么我要调update update一个批处理

3177

批处理是什么意思

3178

就比如说我现在

3179

我不断

3180

我现在我们刚刚说了

3181

这修改了99是吧

3182

修改了

3183

你看我这循环了

3184

我们这个洞这个洞

3185

哪个洞

3186

这个东西是吧

3187

我们这是循环了99次

3188

是不循环了99次是同学是吧

3189

那么循环了99次

3190

这里边他只修改了一次是吧

3191

只展示了一次

3192

那怎么办

3193

他怎么处理的

3194

怎么处理的

3195

在这里边儿

3196

我们在这儿做了处理

3197

在这做的处理是吧

3198

我们是在这里边做的处理

3199

在这里边儿再update的时候

3200

After的时候在这儿做了处理是吧

3201

这做什么处理

3202

同学就很简单

3203

这是做什么处理

3204

你看我们在这一步

3205

它会把如果你当前全局没有全局这个全局对象

3206

全局没有B

3207

这个BTE我会初始化一个闭气

3208

然后把我当成这个water添加到我这个BT里边

3209

添加到我这个BT里面是添加了这个BT里边

3210

就是我这个对象里边这个东西

3211

这个这个this添加里边儿

3212

我这里边儿这个S呢

3213

是不是有字具体的render

3214

有具体的call back呀

3215

所以说我不用管

3216

我只要water添加里边儿来的时候

3217

然后这个water

3218

这个BT什么时候执行呢

3219

我们来看一下这个B什么时候执行

3220

你看这个必选

3221

这是个闭气

3222

我说实话

3223

这个时候它会调用rest rest是什么

3224

会判断

3225

会构建一个空的map空间

3226

空的队列

3227

给一个标识符

3228

没有等待的过程

3229

然后在这一步你会调调用谱系是吧

3230

我们调用谱系的时候

3231

同学们你看用细的时候

3232

判断你这个东西的ID

3233

如果没有里边添加是吧

3234

往这个队列里面添加

3235

然后给他加个标识

3236

食醋

3237

然后我在里边判断是否在等待

3238

没有等待就是没有正在运行的过程

3239

那怎么办

3240

就把字为正在运行的过程

3241

字为韵正在运行的过程之后

3242

然后去判断我当前是否支持Thomas和system out就是支撑红任务和微任务

3243

如果支持的话

3244

要用什么this flash调用一个什么全局更新

3245

调用flash flash会有一个什么过程

3246

这个party是什么时候

3247

这是宏任务

3248

微任务啦

3249

是吧

3250

他在下一帧

3251

才去做处理了是不是

3252

那所以说你只要在这个宏任务微任务这个时间段内

3253

你都来修改这个这个这个操作

3254

他每一次都来修改这个操作

3255

你都会触发这个water是吧

3256

都会触发这个water的update

3257

都出了这个water up data

3258

但是他在里边一直就有你这个ID是吧

3259

他在里边儿

3260

里边儿就不会去做什么

3261

就不会往这里边儿去再再复习了

3262

知道吗

3263

它这里边就一直保留着你这个东西懂不懂

3264

一直保留着你这个东西

3265

保证这个东西之后

3266

然后到了下一帧的时候

3267

到了下一针下一针的什么那个那个那个V任务的时候

3268

下一站微任务的时候

3269

这段时间内你触发所有的修改

3270

调用它的update

3271

你是不是每一次修改都会调用water的update update都会去添加这个任务是吧

3272

但是每一次添加这个之前

3273

因为这儿有一个了

3274

所以说这都添加不进来是吧

3275

他只会维护一个卧室吧

3276

这个我一个water

3277

然后在你到了下一个生命周期的时候

3278

要调用这个flash是吧

3279

用flash调用flash的时候去便利你这个water里边儿的是吗

3280

队列是吧

3281

这个队列然后去执行什么

3282

Call back water call back water call back就会执行什么我们具体的什么render

3283

对water

3284

课外就会执行我们具体的render

3285

所以说这边water你看

3286

如果是批处理

3287

你看把我的water添加了什么

3288

添加我这个队列里面去

3289

看到添加了

3290

我这儿也维护了

3291

他这儿也维护了对立

3292

到维护这个对立

3293

然后判断有没有

3294

你看它也是这个样子

3295

看到判断有没有

3296

如果没有没有刷新

3297

往这队里边儿

3298

这他做了一个排序

3299

做一个排序

3300

然后去拿这个玩意儿

3301

然后拿这玩意儿判断有没有带

3302

如果没有等待

3303

怎么

3304

加到下一个红微任务队列里面去是吧

3305

Next tick是什么

3306

让他们next tick就是一个什么过程

3307

就是一个去执行这个promise的过程

3308

包括next tick没有喷嚏的时候

3309

你看

3310

Next tick这个东西你看

3311

如果扣他

3312

有的时候

3313

因为有

3314

就会把你这个东西拿放到你这个call back里面是吧

3315

加到一个全局的课外课

3316

然后没有喷顶

3317

就会盼就会执行处

3318

然后去执行这个timer function function就是很多

3319

你看就他们function就是什么

3320

就是不同的per me是封装起来的

3321

然后去执行你的回调

3322

你的回调就是不同的什么

3323

你的回调你看这是任务回到回到这全都是微任务

3324

就是泡米丝这他妈的

3325

所以说你们说那个什么

3326

对呀

3327

什么时候他更心动

3328

他什么时候可以更新动态

3329

他为什么在这个在你next dick的时候你才可以拿到动

3330

因为他在next dick的时候

3331

他才会更心动

3332

这个时候你才可以拿到更心动

3333

现在明白了吗

3334

这个时候才会到调用call back呀

3335

才用掉才会调用科派克

3336

才会触发render

3337

才会去更新动漫

3338

所以说你在这个时候才去拿到动物才是才是对的

3339

对呀

3340

对呀

3341

这不就是一个微任务吗

3342

是不是这就是like dickX的课

3343

然后你的call back是吧

3344

然后你的content嘛

3345

是吧

3346

它里面就是一个网

3347

你这个call back里边儿去加回调是吧

3348

加回调是吧

3349

Cur加回调

3350

然后将回调

3351

然后在里边儿触发一个什么唐门

3352

然后去执行我这个回调

3353

这个回调是什么

3354

就是我这个东西吗

3355

不就是你这个

3356

就是你这个什么

3357

你这个这个这个这个call back吗

3358

是吧

3359

是吧

3360

我这里边儿执行的也就是我这个flashback flashback就是吗

3361

拿到你这个扣扣全部及时执行明白吧

3362

这是客

3363

所以你看这个东西就是一个什么

3364

异步任务为二

3365

基本上就这些

3366

还有最后一个点

3367

还有最后一个知识点

3368

V2和V3基本上

3369

V2基本上就是这些

3370

基本上这些虚拟的

3371

我们这个就不用说了

3372

我们这个就不用说了

3373

需要我们这个就是他的一个

3374

他有同学不知道虚拟到底是什么

3375

有没有同学不知道虚拟到底是什么

3376

有没有有的同学抠个零

3377

我看一下

3378

有一个同学

3379

续洞是什么洞就是一个

3380

同学们看

3381

我给大家说一下虚拟动什么

3382

这是我的真实动物是吧

3383

这是我的一个真实动物节点是吧

3384

是不是

3385

那我真实冻结点

3386

我是不是每一次操作都是一个什么操作的过程

3387

都是一个什么操作的过程

3388

都是一个真正要去做什么读写操作的过程

3389

比如说很简单的例子

3390

我这个冻结

3391

我这个怎么减

3392

这是个冻结

3393

我这动节点

3394

我每一次操作它的时候

3395

它上面有原生的点

3396

有多少个属性

3397

你看一下

3398

你看有多少个属性

3399

你看上面有多少属性

3400

有这么多个属性看见了吗

3401

我正常的多么节点有多个属性

3402

我如果我的页面

3403

我直接每一次操作的洞全是直接操作这些动

3404

全是直接操作的这些东西

3405

我是不是每一次就会就会就会修改很多数据

3406

是不是我的性能是不是就很低

3407

是不是因为我每一次修改的时候都会有数据的监听

3408

都会有数据的处理是不是

3409

我在内存里边儿保存能够保存这种数据吗

3410

是不能够保存这种数据

3411

是不是因为我要做多么的负是什么

3412

VIVO的对对对对对

3413

就这微动就是微动

3414

我我是不是我这里边会有遗漏的

3415

为什么要微漏的

3416

就是我们要当dif是吧

3417

我们就需要去对比是吧

3418

我们说了第一次修改和第二次修改是不一不一样

3419

我们才去修改某一个节点

3420

这一次修改和这一次修改是不一样是吧

3421

我是去修改这个节点是吧

3422

那些这些点是不是就不需要修改

3423

那怎么去修

3424

对比是我需要保存起来才会对比

3425

我我需要把上一次节点保存起来才能对比呢

3426

我保存上一次的节点

3427

那我如果保存的是这个节点

3428

同学我问你

3429

原时间是不是

3430

你看有这么多属性看到吗

3431

是不是特别占内存是不是

3432

那怎么办

3433

我就把这个节点

3434

对比的时候也要对比这么属性

3435

那怎么办

3436

我把它抽你一下

3437

我真的我们真的使用的时候就得几个属性

3438

就这几个属性是吧

3439

就是他的标签儿是吧

3440

他的标签名是什么

3441

它上面的这几个ID属性是什么是吧

3442

还有它的子节点是什么

3443

它的子节点是不是又是标签是什么ID子节点是吗

3444

你看就抽离层这种节点

3445

这种结构是这种结构

3446

是不是

3447

我要把这个人禁言了

3448

出问题了吗

3449

反正不管怎么教

3450

你们明白这个意思就行

3451

好吧

3452

不管怎么教

3453

你们明白这个意思就行

3454

好不好

3455

你别说话

3456

你一说话

3457

我现在又看到好多条

3458

你们先别说话了好吧

3459

你们别说话啦

3460

别说话啦

3461

我问

3462

你们在说话

3463

别说话啦

3464

可别说话了

3465

我的滚动条出问题了

3466

他这是是不是

3467

所以你看这一部这个这个东西明白了吗

3468

这个东西明白了吗

3469

徐总

3470

我们这个这个东西明白了吧

3471

所以这一步一

3472

我看见你们的意啦

3473

所以这这就是虚拟动物为什么要有的

3474

他就抽了一个过程

3475

那需招募

3476

你看把徐州牧拿过来

3477

根据这个项目我我们可以制定render

3478

知道吧

3479

你们下来之后自己去搜一下虚拟动物的那个render

3480

其实很简单

3481

你看我拿到我这个虚拟动

3482

然后便利你这个对象是吧

3483

便利这个对象拿着我这个胎给他

3484

我他根据他创建我们标签是吧

3485

然后便利你这个target的purpose

3486

然后往这purpose上面去添加属性

3487

然后便利你这边是L的

3488

然后在人在递归这个东西不就行了嘛

3489

就是创建我的真实

3490

懂了明白吧

3491

所以这个过程

3492

也就是这个过程吸引动动地府就不用说了多么的这个有一点算法后边儿在那个那个那个那个什么那个

3493

数据结构与算法的时候大家讲

3494

然后整体流程这块儿基本上就是这些

3495

整体流程

3496

整体流程基本上就这些了然后

3497

然后然后然后

3498

整体流程基本上这些

3499

然后还要聊一个就是运行计划也给大家讲了

3500

还聊一个

3501

就是LRU

3502

还有一个就是low的东西

3503

我们是不是有个keep live

3504

你们是不是用那个用用了用了一个那个主角叫做keep live

3505

Keep liv k啊

3506

KL是吧

3507

KTV的K5件是吧

3508

对

3509

We keep liv是吧

3510

那么KPL是什么意思呢

3511

就是你看我现在是两个组件儿

3512

我在这儿点了这个东西

3513

然后我切换再回来

3514

它没了

3515

QQ是什么意思呢

3516

我点这个东西我会切换回来

3517

有知道吧

3518

对这个东西是怎么实现的

3519

这个东西怎么实现的

3520

他就是保存是吧

3521

我们刚说了

3522

就是我们保存的是威露的是吧

3523

我们页面里边儿的那个东西会保存我们的威露的是吧

3524

我这个keep liv

3525

当他离开这个时候

3526

离开这个东西的时候

3527

他也会保存我的VIVO的

3528

知道吧

3529

也会保存微露的

3530

保存的是当前的威露的保存

3531

保存的不是状态

3532

懂不懂

3533

但是微露的就很大

3534

所以说怎么办

3535

会有什么过程

3536

VIVO的就很大

3537

他会用什么过程

3538

他会用一个算法叫做LRU算法

3539

你们如果刷了

3540

刷了那个

3541

刷过那个题

3542

刷过那个妮蔻

3543

刷够Nico

3544

就有一个LRU算法

3545

缓存算法

3546

下来之后一定要去

3547

这个缓存算法我就不讲了很简单很简单

3548

一个换算下来之后去看一下

3549

就是这会儿给大家提一嘴

3550

换成了

3551

Are you

3552

他会去相当于是一个什么过程

3553

他会去把一把你的

3554

就是相当于我们有一个

3555

比如说有有有五个内存是吧

3556

现在他可以存五个东西是吧

3557

是不是对超出放前活跃放前面有五个内存

3558

是不是有个内存

3559

我现在五个东西

3560

第一次进来

3561

然后存不存存储

3562

第二个进来全部存储

3563

然后存储完了

3564

我现在第六个要进来了怎么办第六个要进来怎么办

3565

我是不是把醉酒没有使用的给删除了是吧

3566

删除了之后

3567

然后把最新的来使用

3568

那这个过程当中

3569

我在使用的时候

3570

这里边儿如果有有有有有一个缓存

3571

比如说这儿有一个缓存被使用了

3572

那我也要把它删除

3573

删除了之后

3574

又重新把它拿到什么

3575

顶不来

3576

因为他醉死又使用了一次是吧

3577

所以这就是一个把它缓存放到最顶部的一个过程

3578

就是最近使用的

3579

和超出的删除

3580

删除删除的是什么

3581

删除是删除的是最久没有使用的

3582

最久没有使用了

3583

那么最久没有使用什么东西会变成最久没有使用

3584

就是不断往里边儿添加

3585

就会变成不断没有使用

3586

那不断往里面添加的东西

3587

如果中间有使用

3588

那就把他删除了之后重新拿到拿拿拿进来往里边再添加懂不懂

3589

他有更新里边的这个这个这个顺序删除醉酒没有使用懂了吗

3590

这个所以说这个LRU淘汰算法你们这块儿要明白

3591

同学们

3592

下来之后你们看一下

3593

只知道这个概念

3594

刷题Niko

3595

有这个有这个题

3596

你可有这个题

3597

这是有提啦

3598

这都有提的

3599

这边都有解答啦

3600

下面有解答有答案是吧

3601

体检

3602

这个答案的ru算法这都有的

3603

作文

3604

是吧

3605

所以这一步明白了之后

3606

这不明白了之后V2

3607

我想想还有什么讲V2

3608

V2、基本上没什么讲的了

3609

We are基本上没怎么讲的

3610

然后我就要V3 V3我们花个再花个十分钟吧

3611

再花个十分钟

3612

V2没讲的

3613

V2

3614

没讲到的

3615

同学们

3616

威尔基本上就这些

3617

威尔基本上就这些

3618

We are基本就是这些

3619

下来之后把课件发给他

3620

为啥都没用过

3621

没用过我无所谓

3622

没用过无所谓

3623

知道原理就行

3624

缓存不讲什么缓存

3625

刚刚缓存吗

3626

不讲了吗

3627

LRU算法

3628

Keep live吗

3629

你说

3630

这个东西没有什么

3631

讲的就是一个算法

3632

这一个算法K

3633

你不用去关注它这里边的东西

3634

这里边儿就是一个组件

3635

你看keep这个东西

3636

它就是一个组件儿

3637

你看他生命的一个组件儿

3638

你看这个组件

3639

这个组件有自己的purpose

3640

有自己的name

3641

是有自己的生命周期

3642

看到吗

3643

有自己的生命周期

3644

那你这个组件儿

3645

当你用它的时候

3646

当你用它的时候

3647

你包包裹它的时候

3648

它就会把你的子节点

3649

你所谓的节点全部存起来

3650

你看render

3651

他会把你的节点你看

3652

他会拿到get component

3653

他会拿到你所有的子节点

3654

看见了吗

3655

拿到你说的直接点

3656

这是你的

3657

直接拿到你的直接就往里面存

3658

它有一个数组

3659

它有一个数组里面就是一个数字

3660

你看它有一个数组

3661

这里边儿干嘛

3662

在里面会存储一个数组卡其

3663

为维护一个数组

3664

这个数组哪去了

3665

妈的

3666

这个数组可以存储一个数组

3667

这是它的卡气

3668

宿主宿主在宿主刚刚说错点去这这

3669

他闻出一维护存储一个数字

3670

知道吧

3671

存储一个数组

3672

存储一个数字之后

3673

他就往里面不断去擦

3674

知道吧

3675

他又不断叉

3676

然后刚刚那个算法就看他

3677

扑西扑西的就是扑稀

3678

包括日暮这些东西

3679

他都是你看他会存储知道吧

3680

他不吸墨付息的是K和K

3681

但是它存储的时候会把这个微弱的存储到什么

3682

存储到我们的这个APP上面知道吧

3683

所以说这块儿有一个删除的过程

3684

换成几个威尔

3685

换成几个这个

3686

我还没有看到他这个设置的这个max

3687

我都没有看见他这个max是是什么情况

3688

这个你这个这个你们下来之后可以去看一下

3689

我都没有看他的max默认是多少

3690

这个你们可以下来自己看一下

3691

所以这块儿这块儿这个就就就就

3692

现在看不到你们这个这个这个

3693

这个

3694

这个评论所以说现在现在我很我很懵逼

3695

谁给我送花

3696

我看一下会不会把这个bug给清了

3697

别送了

3698

别送了

3699

别送了

3700

送太多不好

3701

Despite up

3702

没有区别

3703

没有区别

3704

一个是在内存里边儿

3705

一个是在浏览器里边儿维护

3706

一个是内存里边帮帮你维护

3707

一个是内存里边帮你维护

3708

一个现现在就是之前

3709

之前是浏览器帮你记录display none给你不展示这个过程

3710

但是浏览器的缓存会帮你记录

3711

现在是哪个这个缓存挪到了什么JJS轮流的V这一块儿知道吧

3712

所以这块儿基本上就是这些

3713

然后V3我们讲一下

3714

V3V2基本讲完了

3715

V3我们开头开头

3716

V3

3717

开头呢

3718

我们怎么开头呢

3719

微商我们还是说

3720

监听是吧

3721

我们昨天说把监听这个东西搞明白

3722

你们下来之后

3723

所以说一定要去

3724

研究一下这个什么

3725

所以说你们这边一定要去搞一个什么

3726

这块一定要搞一个什么

3727

我还在讲课

3728

所以说这块儿

3729

我还是讲

3730

所以说这块儿给他给他同学们要讲一个什么奖

3731

一个那个V3这块儿的这个什么东西

3732

等一下

3733

同学们

3734

我

3735

迪丽丝记不起来了

3736

同学们我我同学们我我跟我媳妇儿说一句话

3737

我要讲课

3738

我讲课

3739

我不去喊他们去了

3740

我还要你喊我去吃外卖

3741

我肯定还讲

3742

讲到12点

3743

继续继续继续继续

3744

对

3745

所以说这块儿

3746

这块儿我们

3747

呵呵

3748

这块儿我们回到我们的问题

3749

我们讲V3

3750

我们V2 V21个问题是吧

3751

V2是什么问题

3752

回来回来回来回来回来吧

3753

V2

3754

有什么问题

3755

同学们

3756

VR是什么问题

3757

威尔士

3758

Object object

3759

地方party是吧

3760

威尔斯

3761

是不是

3762

不对

3763

顶峰吧

3764

不理他会做什么处理

3765

他们会做什么处理

3766

拦截是拦截

3767

拦截拦截什么

3768

它会拦截修它是兰

3769

他去修改是吧

3770

修改每一个K是吧

3771

修改每一个对象的K是吧

3772

对象的K是不是

3773

这个东西是相当于什么情况

3774

相当于我这儿原来有一个人

3775

我直接去修改我这个人上面是什么应该说人这个东西

3776

这个这个不好去

3777

就比如说我这儿要接这是一个这是一个人是吧

3778

然后原来这里边儿我直接这个人

3779

我要接收消息是吧

3780

接收一个消息我原来是怎么接收的

3781

我原来直接给这个人牵了个线是吧

3782

给这个人牵了个线

3783

牵了个线

3784

牵了个什么线呢

3785

牵个线就是说我需要给他通知

3786

就是这每一次不管是哪个K

3787

我都会去给这个人说

3788

这个K我会重写

3789

怎么去接收

3790

这个K我重写

3791

怎么去接收

3792

不同的K我会有不同的处理逻辑

3793

都需要去做处理

3794

但是现在在V3里面他怎么去处理

3795

同学们在V3里面他怎么去做处理

3796

V3里面他是拦截知道吧

3797

他是拦截

3798

一个是修改你具体的K

3799

重写每一个K一个是拦截

3800

拦截这个就很有意思了

3801

就是你这个对你这个对象

3802

你这个对象是什么意思

3803

你这个对象所有的操作都需要在外边走一下

3804

他这个拦截就相当于他外边有一个铁门

3805

外边有保安

3806

你可以这么理解

3807

外边有个保安

3808

你所有的处理都需要经经过这个保安

3809

所有的处理就要经过这个保安

3810

你所有的K访问都要经过这个保安

3811

那我这个保安就可以拿到你所所谓的访问地了

3812

明白吗

3813

同学们

3814

所以说这个拦截和劫持就不一样了

3815

所以这个proxy这个V2V3里边

3816

用了一个什么

3817

就用了一个proxy这个东西

3818

就用了proxy这个东西

3819

Proxy他就是做什么

3820

Proxy他就是去拦截拦截拦截它会拦截拦截所有的

3821

拦截所有K

3822

他就不会去针对某一个K

3823

不针对

3824

不挣

3825

他的围度就不是在K的维度了

3826

他的维度是什么

3827

他的维度是针对于这个对象

3828

对象这个对象的

3829

这个对象所有的什么K拦截是吧

3830

只要你对针针对这个对象去做处理

3831

它就会做所有的拦截

3832

所以说这一块儿他就不需要去什么便利了

3833

是不是同学

3834

是不是

3835

是不是就不需要去便利了

3836

不需要去便利这个对象的每一个K了

3837

我们之前是不是还需要去便利对象的每一个K

3838

是不是

3839

是不是

3840

所以这一步

3841

这一步遍历对象的某一刻

3842

遇到递归的时候

3843

我们还需要去递归

3844

是不是

3845

是不是说这块儿给大家留个任务

3846

第一个任务是吗

3847

Proxy这个用法你们下去看一下

3848

一定要去看

3849

一定要下去看X的用法你们一定要下去看好不好

3850

好吧

3851

Proxy这块儿这个用法一定要下去

3852

然后我们明天

3853

明天

3854

再给大家把这个proxy这块儿

3855

您看了之后

3856

我再给大家讲他的东西

3857

所以用法的时候

3858

你要看他监听数组

3859

数组你们要去怎么看

3860

数组的就是正常对象

3861

正常对象的修改

3862

然后第二个什么数组

3863

对象的修改

3864

第三个是什么数组的修改

3865

数组修改

3866

你可以照样谱系CF这些东西

3867

还有第三个什么深度

3868

嵌套的数据修改

3869

拦截之后的数据修改

3870

你看一下它的各种不同的处理

3871

所以这次然后就是对于运行时它的price

3872

我们说了

3873

运行时就是监听数据是吧

3874

然后维护一套映射

3875

然后把它

3876

就是把你的render和map维护一套音色去做处理

3877

是不是

3878

那么这一块儿我们再给大家讲一个什么

3879

就是我们要讲的性能优化

3880

昨天我们来讲讲一个什么奖那个那个那个那个那个对

3881

我我说我就说我始终惦记着要有个什么东西要讲

3882

我们回到V2这里边儿

3883

V2里面我们一直给大家说什么

3884

一个指令是吧

3885

一个指令一个指令

3886

一个指令对应对应

3887

一个render是吧

3888

一个指令是不是对应一个render

3889

那现在我意思就是说我这个指令

3890

比如说我现在我现在现在是

3891

DV

3892

是吧

3893

典韦

3894

然后这里边儿是个name试试吧

3895

Names试一试吧

3896

这是不是就是一个指令

3897

M11是不是我第二次为二是吧

3898

那么是为二

3899

我如果一个指令对应一个数据一个指令

3900

对

3901

一个render对应一个指令对应的render

3902

然后一个指令对应一个water是吧

3903

是吧

3904

同学们

3905

一个指令我对应的water

3906

那么我这个water

3907

是不是直接就可以执行render直接就可以修改这个东西

3908

是不是直接就可以修改这个东西是吧

3909

直接修改这个东西是吧

3910

我就不需要去动的服了

3911

我还需要冻的干啥呀

3912

是不是啊

3913

我为什么还需要的

3914

我就直接修改这个定向的这个东西了

3915

我必须要去到目的地了

3916

是不是我为什么还需要这么低俗呢

3917

是不是

3918

所以说我们这块儿这个是这个这个就是V1 V1的V1的方案

3919

V1的方案就是没有动地方

3920

V1没

3921

有没有多么地府

3922

他直接就一个双向数据绑定

3923

然后绑定了什么一个指令

3924

对应的是什么

3925

一个water

3926

那同学我问你一个water

3927

是不是需要跟对象映射起来

3928

你的water是不是需要在低谷里边儿保存起来

3929

是不是

3930

你们送花

3931

你们送花我看得见

3932

好吧

3933

你们明白就送花

3934

送花我这儿看得见

3935

不用说吧

3936

是不是一个water

3937

一个water是不是可以被保保存起来是吧

3938

是不是

3939

那么我现在我们维护的是什么

3940

维护的是water是不是

3941

就是我们在V1和V2里边儿是不是维护音色

3942

维护的是water

3943

就是你数据

3944

数据对应的映射

3945

具体的是water是吧

3946

那现在我的water

3947

你如果一个指令维护一个water

3948

我的页面如果有多个指令

3949

我的页面是

3950

比如说我的页面正常页面

3951

如果是这种页面

3952

我的页面如果是这种是吧

3953

特别特别多是吧

3954

哎呀

3955

我我重新搞一下吧

3956

对特别特别多的

3957

特别特别多特别特别多的指令

3958

这个正常

3959

我们正常页面里边的是吧

3960

你页面正常V2现在是不是就是这个样子指令比较多是吧

3961

全页面都是动态数据是不是

3962

那这个样子是不是就需要维护

3963

你有多少个指令

3964

我就需要维护多少个render是吧

3965

同学们

3966

我有五个指令

3967

你就需要维护五个render

3968

我这儿是个指令

3969

你看我这是个指令

3970

这个指令这儿又是个指令

3971

我这儿有三个指令

3972

我就需要维护三个点

3973

我是三个维护

3974

三个water

3975

是不是我三个WATER3个意思

3976

那在内存里面就要维护

3977

那内存越占用的越多是不是就越卡

3978

是不是内存占用的越多是不是就越卡内存

3979

内存占用

3980

越多

3981

就越卡就越卡

3982

这还不止是性能泄漏的问题

3983

是不是就性能就很

3984

很低了是吧

3985

因为你占用了很多内存吗

3986

你的性能是不是就很低了吗

3987

是吧

3988

是不是内存越多

3989

是不是越卡

3990

是不是

3991

是不是

3992

那么是因为什么

3993

是因为你一个water对应扔

3994

那怎么办

3995

怎么办

3996

他就优化了

3997

这是V1的版本优化怎么优化把握的维度提升一个维度

3998

Water维度提升一个维度

3999

一个water对应一个component组件

4000

明白了吗

4001

一个water对应一个component组件儿

4002

你一个组劲儿

4003

我维护一个water water就现在

4004

就是我们昨天昨天给大家说的

4005

你render编译出来的一个东西是一个是一个你编译出来的render

4006

这个render是不是这个东西是一个整个你当前这个微组件

4007

你唯一的template里边儿那个组劲儿

4008

编译出来的论点

4009

它并不是某一个指令编译出来的认证

4010

懂了吗

4011

落尘

4012

明白吗

4013

我现在是一个组件去编译一个论点

4014

那我现在一个组建去一个认证

4015

现在问题就来了

4016

我的water直接去修改

4017

去执行call back是吧

4018

执行render

4019

那执行render执行的就是什么

4020

整个组件的render是吧

4021

那整个组件重新就需要重新去扔这儿了吗

4022

整个世界全部都重新扔了吗

4023

所以说这一步他就会有一个什么我们的福的维度

4024

懂了吗

4025

所以说他这个维度就是在主角东地府

4026

V的动物地府是什么

4027

层面上的动物地复式组建内部的动物地府

4028

组建

4029

组建内部的动物地府知道吧

4030

组建内部的这种地方

4031

组建外部是直接通过water d项更新到的是吧

4032

组织外部是直接通过water

4033

Water d项更新

4034

定向更新的明白吗

4035

同学们这回用了吗

4036

现在用了吗

4037

一个water对V2不是V对对对

4038

微微1V2是一个组建一个water

4039

一个render

4040

因为一个render对应的就是一个组件是吧

4041

一个组件为主

4042

我们平时编写的代码是不是就是这些的

4043

你们平时你们平时编写的代码是不是就是这些东西

4044

就是就是一个template

4045

那这个template

4046

对呀

4047

所以这就是编译词优化

4048

这是编译时优化

4049

它编译时

4050

他天生就做了很多编译

4051

私有化呀

4052

它的性能

4053

它的架构就决定了

4054

所以说这个东西你再聊跟we的架构的时候

4055

跟react的架构的时候

4056

这些层面不就出来了

4057

他天生就做到了定向更新

4058

定向更新到某一个组件

4059

所以说他不需要去做什么动物地府飞奔的一套的东西

4060

他不需要全局去

4061

全局去非本

4062

全局去盗墓地府

4063

Rocker需要全局驱动地府

4064

所以说搞得出了非本这套东西

4065

懂了吗

4066

这不是解释到位

4067

这是这不是解释到位

4068

对呀

4069

因为你的因为你的数据映射

4070

你现在数数据映射添加的water water维护的是什么

4071

是一个主机的render知道这不是解释到位

4072

这个东西是你学到了深度的之后

4073

你对这个架构

4074

对两个框架的架构

4075

你在背后看到的思维

4076

他的优化它的维度

4077

它的设计的维度

4078

它的不同的维度

4079

所以说V2V3为什么不适合大应用

4080

就是这个原因知道吧

4081

我就说我一直想讲一个什么东西

4082

我一直在想

4083

一直在想就讲这个东西

4084

现在明白了吗

4085

这是V2V1

4086

这V1和V2的区别呢

4087

V3就是proxy这一块儿

4088

还有就是静态编译

4089

V3更有静态编译的东西

4090

静态编译的优化

4091

我们知道正则匹配一个回溯的过程

4092

Sight的时候为啥还要处罚

4093

我讲了这么多

4094

你就

4095

Proxy会讲什么意思

4096

Proxy会讲编译运行是吗

4097

我现在V3

4098

会讲会讲

4099

静态编译就是离线编译

4100

Theatre

4101

CTE的时候为啥还要触发water

4102

不是在组件内部吗

4103

那你是完全这个东西

4104

你下来之后

4105

你中间是不是有没有在的时候

4106

就想换个名字

4107

你是不是昨天你是不是有没有在的时候

4108

没有在的时候

4109

那你下来之后要自己去再看一下

4110

这个东西完全就是整个架构的东西了

4111

我们都讲了好多遍了

4112

知不知道

4113

Sight的时候

4114

肯定要出发喔

4115

村啊

4116

因为water

4117

Sight

4118

是不是数据发生了改变

4119

是不是是不是数据发生了改变

4120

数据发生改变之后应该怎么办数据发生改变怎么办

4121

那就应该改变页面是吧

4122

那改变页面

4123

改变页面是谁来做做改变页面的

4124

改变页面是谁来改变页面的

4125

是不是具体的water来改变的

4126

因为我们的render是封封装的water里边儿是吧

4127

谁来打电话

4128

是不是就需要他来打电话

4129

明白吗

4130

你明天再把你下来之后再把一块儿再看一下好不好

4131

对这些同学都可以解释

4132

在群里边也可以问一下同学们好不好

4133

然后明天我们要给从几个维度给大家讲

4134

Proxy静态编译

4135

还有就是运行失

4136

就这几个点

4137

这几个点

4138

V3优化也就是这几个点

4139

他的大价格完全没变

4140

所以说你V2学明白了

4141

V3我们讲那一块儿的东西

4142

就讲的特别快

4143

没有什么好讲的

4144

就是家就是什么为构建构构造映射关系那一块儿

4145

没错

4146

这东西没什么好讲的

4147

知道吧

4148

说不同就是变异形式

4149

我就明白你说的这个什么意思什么

4150

然后今天就到这里

4151

今天在这里

4152

你们下来之后看一下我给你说的这个proxy好不好

4153

看一下proxy这个东西然后明天我们继续好吧

4154

嗯

4155

你要从多个维度来讲

4156

好吧

4157

拜拜拜拜拜拜

