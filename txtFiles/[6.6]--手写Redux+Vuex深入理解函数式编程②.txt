1

哎呀

2

你们这英语也是的人生绝对肥胖

3

我知他乘风破浪去了黑暗一趟

4

感同身受给你救赎

5

热望

6

不能忍受加了一点彩虹

7

樱花偷偷

8

当世间美好与你环环相扣

9

此时已莺飞草长

10

爱的人正在路上

11

我知他风雨兼程

12

途经日暮

13

不赏

14

穿越人海

15

只为与你相拥

16

爱的人手捧星光

17

我知他乘风破浪去了黑暗一趟

18

深受给你救赎

19

草长爱的人正在路上

20

我知他风雨兼程

21

途经日暮

22

不赏穿越人海

23

只为与你相拥

24

星光

25

黑暗

26

深受

27

救赎

28

热望

29

知道你不能

30

还要你感受

31

让星光加了一点彩虹

32

当樱花开得纷纷扬扬

33

当世间美好与你环环相扣

34

偏偏秉烛夜游

35

午夜星辰

36

似奔走之友

37

爱你每个结痂伤口酿成的陈年

38

可不到一半儿了

39

咋

40

很快你们就毕业啦

41

非常快

42

此时已莺飞草长

43

爱的人正在路上

44

我知他风雨兼程

45

途经日暮

46

不赏穿越人海

47

只为与你相拥

48

此刻已皓月当空

49

爱的人手捧星光

50

我知他乘风破浪去了黑暗一趟

51

感同身受

52

给你救赎热望

53

能让你感受到幸福加了一点彩虹

54

樱花偷偷

55

世间美好与你环环相扣

56

此时已莺飞草长

57

爱的人正在路上

58

我知他风雨兼程

59

途经日暮

60

不赏穿越人海

61

只为与你相拥

62

爱的人手捧星光

63

只他乘风破浪

64

去了黑暗一趟

65

感同身受

66

给你救赎热望

67

此时

68

草长爱的人正在路上

69

我知他风雨兼程

70

途经日暮

71

不赏穿越人海

72

只为与你相拥

73

我知他乘风破浪去了黑暗一趟

74

深受给你救赎热望

75

直到开始

76

吧

77

好

78

我们继续这个DEMODEMO吧

79

哎哟

80

我去

81

你们这是什么情况

82

怎么

83

这到课率什么鬼

84

这是

85

干什么这是

86

这还这还学个毛线了

87

这还

88

其实像你还记得这个老袁这个开课的时候说的

89

就成都一点儿都不拥堵

90

你想想

91

在咱们这样一个小范围的班级里边儿很多人他慢慢都掉队了

92

对不对

93

那你想想这个社会

94

这个大的团队集体里边儿

95

它其实一样

96

是不是很多人他坚持不住

97

或者说他这个有些东西他就就莫名其妙的就把它抄过去

98

咱也不废话

99

那车子不来人多讲吧

100

IPHONE5只要专讲DEMO4呢

101

其实我们已经进行了一大部分了

102

然后我们来这个进行呆萌呆萌舞

103

讷河呆萌四呢

104

这个是

105

对呀

106

你坚持的东西

107

这个东西就不一样

108

我们来实现一个新的API叫replace reduce or

109

这个东西

110

我们来看一下这个

111

这是什么呢

112

Replace reduce or呢

113

是替换reduce or啊

114

也就是说当我们的这个

115

对应的一个style

116

这个里边儿接触这个reduce or

117

中间动态的加载一些东西的时候

118

那么我们原来的reduce而是一次性合成的

119

那现在需要动态的往里加载这个reduce

120

而把原来的

121

比如说换掉

122

我们就会使用到一个replace reduce or

123

对吧

124

就换掉那个什么

125

换掉那个原来那个reduce

126

那这个时候呢

127

我们首先呢

128

要接受一个叫nice的reduce or

129

然后nice身上呢

130

这一块儿呢

131

我们直接把这个对应的recruiter等于一个nice的reduce or就可以了

132

然后呢

133

耐水测试完成之后呢

134

你重新换了之后

135

要记得还要把所有的都是重新的给dispatch一遍

136

这时候就替换什么

137

替换这个reduce

138

但我觉得老师什么时候有这种场景呢

139

就是动态的什么

140

动态的

141

这让我们这个reduce or发生一个变化

142

那可能刚开始只有一个reduce or

143

后边呢

144

我们使用了一个这个对应的reduce or来发生了一个这个替换

145

就是说如果你没有这种动手术的话

146

那无所谓

147

我们来做两步操作

148

好

149

然后这是我们的一个nice的reduce or是这里

150

好

151

那刚开始我们只有一个reduce

152

那如果只有一个radio的话

153

这个上面呢

154

是不可能有这个info相关的内容

155

对吧

156

好

157

那我们这是一个creates

158

到以后呢

159

我们创建了一个reduce or

160

但这个时候呢

161

我们又合成了一个新的reduce or

162

对啊

163

就是你有一些JS可能是通过你动态加来的

164

合成一些新的reduce

165

这个新的reduced呢

166

我们这时候需要一个replace的方法

167

把它给这个替换掉是吧

168

然后这边呢

169

我们就使用一个使到

170

这样的点

171

我们replace这个对应的reduce

172

是吧

173

这里边儿

174

咱们这里边儿有个十道光

175

Replace reduce or replace了

176

再把这个什么

177

Nice to reduce or把它丢进去就可以了

178

当然可以啦

179

这样的话实际上就是我们达到了两层reduce or的概念

180

所以这个那really those are比较简单啦

181

但是这个其实挺有用的

182

尤其我们动态加载一些reduce or的数

183

这边实际上能给我们带来很多的这个艺术呢

184

我们这是在浏览器里面看一下

185

是吧

186

这个有这样的一个reduce or

187

这样reduce or呢

188

然后之后呢

189

我们就可以做一个什么

190

我们这边我们就可以做一个这个值了

191

它就出来了

192

没有问题是吧

193

这边其实没有什么太多的毛病

194

那我们可以通过把这个下面这个代码打开

195

把replace以后呢

196

通过一个动态的这个总共的一个获取这是一个默认的全局的

197

吧

198

全局的默认

199

然后下边儿这个是什么呢

200

下边儿这个东西就是我们的一个

201

使用这个reduce or进行一个啥呀

202

使用这个reduce or进行一个

203

这个替换的时候

204

然后咱们再来看一下这个页面

205

都没有任何的问题是不是

206

这边都OK的是吧

207

所以说呢

208

这个我们的replay的肉食做完了

209

那这个replace这里千万不要忘了

210

就是重新计算一遍

211

因为你的全部被重写了

212

对不对

213

是这样的

214

就是以前的reduce or这边实际上全部被咱们给冲洗掉

215

也就是我们通过一个dispatch

216

然后这样的一个tab是symbol这样的一个类型

217

那OK

218

那如果这个时候呢

219

我们就基本上已经把这个reduce的大部分的完成了

220

那

221

可是还没完

222

我们还得继续往下

223

还有单模六袋膜期待磨吧

224

代码九是吧

225

还得继续往下写

226

因为这个只是说把这个什么完成了

227

刚才的一个replace reduce完成对吧

228

然后replace完成以后呢

229

我们接下来要做的一点呢

230

就是说要写M6

231

写M6

232

W这边呢

233

咱们该搞什么呢

234

搞那个蜜豆儿

235

是不是搞那个密度板儿

236

因为那个对应的这样的一个middle呢

237

我们昨天看

238

就是说它是一个异步的IO的一个东西是不是所以这里有一个这样一个文件

239

就是专门管理这个对应的一个密度儿

240

这

241

在啊

242

他在这个

243

他在这个我们对应的文件里边

244

这个颜色好像没有写用

245

这这这瞎了

246

这个play

247

这个middle

248

使用这个自定义的meanwhile来扩展这个widows

249

对吧

250

所以咱们建这个职业

251

这个职业主要是管理这个所有的这个对应的中间键

252

所以在这个resource里边儿呢

253

就有一个文件

254

是这个play mid one the planes were

255

A plane middle ware呢

256

这边呢

257

主要做的事情呢

258

他主要是还是为了去把所有的重经验

259

然后让他给运作起来

260

因为他是义务对吗

261

所以在这文章里边儿

262

我们突然就多了一个这个中间链这样的一个项目

263

算一个middle of us

264

我们做这样一个中间

265

第一个就是说出错了

266

怎么办啊

267

出错了这个中间怎么办

268

在做第二个就打一个日志

269

那这里

270

这是有日志

271

然后再做一个什么

272

时间的一个中间

273

就我们中间再打印一个时间

274

这个中间键呢

275

就是一个完完整整的颗粒化

276

非常非常什么

277

非常这个在我们开发里边非常简单直接的这样的一个

278

就所谓的高街这个颗粒化函数是吧

279

那他也是高阶了是吧

280

那肯定也是高级了

281

我们接受一个死到那那然后呢

282

这个词到呢

283

返回的是一个函数

284

这个函数呢

285

在接收一个nice的

286

所以它有三层

287

然后再返回一个啥

288

再返回最后的一个东西

289

用来接受一个我们的action

290

这是咱们那个中间

291

然后咱是这个这个函数的执行

292

对不对这个里边才是这个函数的执行所以这边首先我们就坑收点log

293

这里有个闹钟

294

这个闹钟然后闹钟呢

295

这里就是一个

296

对应的new

297

我们的H这个DH然后

298

我随便写一下

299

点get time get time OK

300

那这就是一个它的中间件

301

然后一定要记住所有的中间

302

这跟那个coco的中间差不多

303

我们通过nice的方式

304

然后把这个中间件的给他丢进去

305

那是X是不是把中间是不是也给他丢进去

306

那咋整

307

然后记得把这个中间把它倒出去

308

我们的export default啊

309

咱们这样的一个中间件

310

OK

311

那这个第一个中间写完了以后呢

312

我们就剩下这两个中间呢

313

也比较简单了

314

咱也不啰嗦

315

就是直接这是第二个中心店

316

第二个中间呢

317

也是跟上面一样

318

你记住它上面有三层颗粒化

319

所以一会儿在你

320

把这个

321

三个直径倒出来的时候

322

一定要记住每一个

323

每一个东西记得都要把它执行掉

324

然后这里边儿是我们的一个just s age啊

325

然后这是action

326

这是next action啊

327

中间件里边最核心的就是一定要记住去传递这个nice

328

这是我们比较重要的一个环节

329

就是我们的中间键

330

一定要记得及时的

331

传递

332

Nice啊

333

然后把这个next往下传递过程中呢

334

其实我们就可以干什么

335

把nice往下传递过程中呢

336

我们实际上这里就可以让下一层面继续运作

337

最后这个可能比较稍微复杂一点

338

中间就是我们出错

339

如果挂了怎么办

340

咱们可以先让下一个单词串

341

如果挂了

342

这边我们就可以做一个error

343

好这样的话

344

咱们几个中间件呢

345

就已经聚齐了

346

就聚齐了接下来的话

347

我们这个up lay me的味儿

348

那显然这个对应的

349

要做的事儿呢

350

Play那块儿

351

他想要做的事就是怎么把这个对应的这个几个中间呢

352

再把它给合成到一块儿

353

是不是啊

354

这是我们比较这个在乎的

355

就是你把这个中介给他弄到一块儿

356

然后首先咱来走一把

357

先在什么项目当中

358

先在咱们的有的像在项目过程中

359

把这几个中间给他放到我们的银代填表里边儿吧

360

这个项目就可能复杂一点了

361

这是三个中间键

362

就是依次的把它给晕泡起来

363

是不是143给他进行拥抱

364

那么这些中间件

365

如果咱不需要其他的

366

这个方式怎么做呢

367

如果您不需要其他的这个方式

368

就这几个文件

369

你别忘了他是颗粒化

370

所以现在咱们不借助任何的三方的这个对应的文件吧

371

直接的咱就干这个啥

372

直接咱就干一把

373

就是把这个对应的文件

374

咱就通过一个人肉的方式给他组织到一块儿

375

那怎么做呢

376

反正他是颗粒化嘛

377

对吧

378

所以这边首先我们得到一个食道

379

这边有一个用的

380

可以直到完成以后

381

在这里边儿咱们初始化

382

他所有的中间念

383

他说初始化所有的理念

384

那么在初始化所有中间的时候呢

385

第一个就是我们的next next那他其实主要的管呢

386

为什么之间能够参与到整个results中来呢

387

就是他重写了这个dispatch

388

是不是就是说他在despite的时候

389

我们重写掉

390

这也就是中间的原理

391

它的原理

392

它的原理

393

就是说重写掉重写掉咱们的这个对应的一个死掉的这样一个dispatch

394

是不是把它给重写掉重写掉以后呢

395

然后接下来要做的事情呢

396

就是说如果你把这个对应的

397

这个中介给重写完了

398

对不对

399

别把中间重写完了

400

然后你要使用我们的对应的三个中间把它给执行了第一个就是costcos我们得到的是一个logologo

401

唠嗑儿呢

402

她呢

403

就执行那个上边儿的一个log的这个对应的中间

404

Lo GE men were

405

他执行的时候

406

大家看一下这这几个证件

407

他需要一些什么东西这种念他需要执行的时候是需要第一个需要一个拾到

408

这个拾到呢

409

就是咱们的什么

410

就是咱们的这个咱创建出来这个词造

411

就这个东西

412

这没有什么太多的

413

所以现在中间执行完了

414

第一步IDE不吐完了

415

现在吐给你一个叫做next

416

你得把下一个中间给它

417

实际上最后呢

418

才是一个执行

419

因为他实际上还是一个啥呀

420

最中间执行完了

421

分成三步执行完

422

最终他其实还是相当于说一个

423

Reduce or能够接受action

424

所以其实中间的原理就是说一个特殊的reduce

425

只不过是前两步

426

你得通过合理化的方式把它执行完

427

然后这是第一步

428

就是我们的一个

429

刚才写过了

430

这里边是我们的

431

死哪去了

432

看一下

433

这是我们的这个nice

434

就是logologo记住把这个啥呢

435

把这个我们的style把它丢进去是不是一个logo logo完成以后呢

436

接下来就是这个对应的出错

437

出错再往下是啥呀

438

我们的时间

439

这几个中间见一次的

440

把它执行完

441

然后咱把它给串起来

442

咱把它给串起来

443

穿起来怎么穿呢

444

这里边儿就是重写这个死到的dispatch

445

让她直接等于第一个是出错

446

然后出错的nice的是谁

447

看

448

Tom的nice是谁呢

449

世人的logo

450

是不是呢

451

Locker的nice的又是谁

452

就是最早的第一个咱们默认的食道的dispatch

453

也就是说通过这几层颗粒化

454

咱们给他包裹上

455

也就是说最后得到的实际上是一个特殊的reduce or啊

456

这也就是我们的中间的原理

457

特殊的

458

特殊的reduce or

459

是吧

460

而这个特殊是多少

461

所以这边其实我们就stop的翻译重写了

462

其实现在就可以了

463

就这么简单就可以了

464

所以代码在执行的时候

465

我们看夏目溜

466

他应该把那一堆把那一堆中间件给带过来了

467

就这么简单

468

键抹是不是来了

469

就这么简单

470

其实它就是拦截了一下dispatch

471

是不是这边儿的话

472

它实际上就是拦截了一下dispatch

473

没有什么可复杂的东西

474

所以很容易看到中间就是一脸懵逼

475

这有什么懵逼的

476

但是我们之前学过咱你已经不能这么傻傻的写代码

477

因为咱们专门学过函数编程

478

这种代码我们用到了什么

479

A

480

是不是啊

481

用我们的函数组这面是会让你手写的帖子们

482

就就是说面试会让你手写个函数组合

483

让你手写个隔离画

484

让你手写的

485

或者手写这东西

486

那如果就是说你手写这个东西的话

487

其实给我们带来的一个

488

给我们带来的一个这样的特需求是什么呢

489

就是说

490

那么我们要把它给背下来记下来

491

甚至说能在这个项目过程中把它给用的蛮好

492

是不是蛮好所以这边的话就是首先有一个

493

对应的函数的这样的一个despite重写

494

那你明白肉的原理

495

但是童乐园刚才你在弹幕里面建了一个APP

496

里边儿你完全没用的上对我们呢

497

暂时先放到这儿

498

我们下一步一步到位把这个空间是咱们补上

499

先把这个中心店咱把它补全

500

咱再建一个什么W

501

这样的话是不是咱就把这个原理一点一点的就手写就窜出来了

502

还是那样

503

就是你如果不相信这个东西的话呢

504

或者说可以自己去探究的话

505

我们刚才可能昨天写了一个对应的

506

这和病入骨髓

507

那你看这合并的是不是一模一样代码

508

所以它里边除了一些常规的这个容错的信息以外

509

剩下的我们代码基本上跟我们写的一模一样是不是这样的一个合并的sir就绑了一个动态的key

510

这都没什么是不是接下来我们要写这个对应的

511

单模七

512

戴沐七

513

这边呢

514

我们要处理两个问题

515

第一个就是我们的radio的问题

516

第一个就是我们这个另外这个问题

517

刚才这里边儿是空的

518

是不是那么刚才我们也讲到了

519

他用到了一个函数颗粒化

520

一讲到函数颗粒化

521

我们也应该能想到第一周的函数的组合

522

所以咱们一次性到位把这两个东西给他补全这里函数的组合呢

523

我相信各位

524

应该也能够写的比较清楚

525

就是我们expanded default

526

然后这里是我们对应的一个函数的组合是吧

527

韩组合

528

那么这个组合里面呢

529

第一个就是我们对应的f oren SI CS这样然后呢

530

接下来的话

531

如果啊

532

咱们判断一下

533

如果呢

534

对应的

535

如果对应的咱们对FUNC加了点认辅

536

如果等于零的话

537

如果这个东西等于零的话

538

那么就代表了啥呢

539

如果这个代表了并没有我们传递任何的function是不是这是我们进行函数组合咱们都一学过

540

然后这里呢

541

咱就可以使用一个RG啊

542

就接受一个什么参数

543

然后你给他吐回去一个什么参数就完事儿了

544

因为其实你作为一个函数组合

545

最终还是要给返回的这个函数

546

如果呢

547

这个时候

548

如果我们的对应的FUNC的f oren啊

549

他的live

550

如果这边的EMS

551

它等于一是不是如果这个结果等于一的话

552

那我们直接执行一个对应的f Yun

553

A1UCS这里边儿呢

554

赶紧把这个第零项给他给执行完了

555

是不是啊

556

那么现在其实面试的时候

557

有的时候大家就不管你做什么题的话

558

你往一个东西上考虑

559

就是如果多个怎么办

560

哥哥

561

很多人可能使用了for了

562

其实多多个的话

563

Reduce是一个独家的处理的小秘诀

564

你会发现不管你写什么代码

565

只要你上了六次

566

一般面试官脸上会洋溢洋溢出一个特殊的笑容

567

就是觉得

568

这个人还可以

569

那就哎哟不错

570

就这个脸上它会这个有有一点点特殊的笑容就是这个reduce实际上确实是有的时候帮我们解决了一些问题吧

571

确实这里边有一些问题对对对对对

572

就是首先你能用到reduce

573

然后他也会试试的考你熟悉reduce

574

那么这个时候即使他对你的印象跟别人就不太一样了

575

是吧

576

就觉得

577

这个人好像还不错

578

是不是啊

579

跟你的印象首先就跟别人不一样

580

所以对于reduce这个东西来讲的话

581

我们常用的这种

582

就是我们这种常用的这种reduce的方式

583

就是大家不管你做什么题

584

你看你能不能想到想到riOS

585

如果能想到的就上

586

那最棒了那最好了

587

对吧

588

如果能想到这种事

589

那就是简直是非常的啥了

590

非常的棒那如果说你没有能想到这个reduce上呢

591

那也没关系

592

但是这个最好

593

这个但是这个最好

594

我觉得这个相对来讲是比较棒一些的那所以大家在那个什么的过程中

595

在整个的这个流程里边儿是吧

596

也不用说特别的焦虑说我的

597

不会如此就很很差吗

598

那它主要是一个相对来讲比较相对来讲比较好的一点

599

就是说他会觉得你比别人要要专业一些

600

对不对

601

你别人好像专业一点

602

然后呢

603

再往下是什么

604

再往下的话

605

实际上就是手写reduce那一块儿吗

606

那如果手写reduce这一块儿的话

607

你能过

608

你能把它也写过了看一下官方的profile

609

那有的时候基本上一面就这边就应付了

610

一面这边可能应付的比较厉害一点然后你再说后面的话

611

其实对于什么其他的一些

612

手写也差不多没有什么区别

613

那我们来看一下

614

这是就是直接写

615

所以这个面试大部分的同学遇到了

616

尤其这种就是面试手写的这种

617

大部分的同学是遇到了

618

这个我们的一个去去执行一个reduce

619

一个reduce的话

620

然后呢

621

首先呢

622

咱们就是一个对应的AB是不是接受这两个对应的参数

623

然后呢

624

咱们返回一个

625

让我们对应的一个杠LGS啊

626

接受一个参数

627

然后不是ABI这样的两个函数吗

628

然后这不是reduce每次给你的吗

629

一个上一个下一个

630

对不对

631

然后所以咱们就在这里边儿给他实行一个a杠B

632

是不是这里执行的

633

然后把一些参数一交就完事儿吧

634

这是就是一个reduce吗

635

不就完了吗

636

不是一个智库而已

637

是吧

638

那不安逸

639

这块就基本上就OK了

640

就让你手写一下这个对应的函数的组合的话就行了

641

对不对

642

很简单

643

然后是不是很想

644

就是主要依靠如果你不告诉的话

645

这边比较烦了

646

还有一个中间变量去保存一下才能nice的人呢

647

对不对然后这个这个写完了以后

648

咱就把这个经历移动到这个叫a play这个谜团

649

咱们怎么样才能摆脱掉这么去写这么啰嗦

650

这现在咱们要做一件事情

651

做什么事儿呢

652

就是说把刚才的这个东西

653

咱能不能像合并reduce or一样不搞得这么的烦

654

这简直太烦了

655

对吧

656

能不能这个样子

657

这是我们的一个a plane in one

658

然后这个APP呢

659

咱们从这个上面呢

660

再一次的把它给导进来

661

就是合并reduce or养成

662

让这个语法呢

663

变得轻简洁轻盈一点

664

是不是这里边儿AB段

665

然后这里边儿会重新会得到一个

666

从这里边会得到一个我们的

667

这也不需要在这重写了

668

对不对

669

这不都不需要了

670

是不是啊

671

所以在这个replace的时候呢

672

我们这里首先传个栈为空的state

673

然后这是空的有关系吗

674

没有关系

675

因为它默认都会despite一个symbol是不是

676

然后所以这里边是我们的一个重写这个create一个store的这样的一个function

677

所以会有123

678

这时候传给我们这三个东西的话

679

我觉得哎呀

680

这好像也不是很容易

681

对不对是不是我们核心要解决这个问题

682

没管他容易不容易

683

总之是简单了

684

不像刚才那样搞得太烦了

685

对吧

686

一个一个的

687

这是我们函数的组合的目的

688

不就是为了解决掉颗粒化的问题那我们在M6这个ATM上遇到了这个非常严重的这个颗粒化的问题

689

这这一般人顶不住

690

对吧

691

这写代码明显就增强了

692

所以说我们用自动把它展开

693

然后把它展开

694

然后再看一下这个弹幕器

695

带帽七呢

696

现在你是前端是简单的

697

但是把这个压力留给了后边儿

698

那我们最后呢

699

咱把这个相关的一个值是不是

700

这个是一个我们的合并之后的这个充电

701

是把它给直接丢进来吧

702

我们经过合并之后的

703

咱们资产中介给他给展开一个丢进来

704

那么我们之前也说过了一个对应的什么合并refuse or什么的

705

那咱也咱先不管他了

706

是不是啊

707

咱现在不管他了

708

把这个死到这个东西

709

咱们把它换掉

710

咱先往下简单一点

711

把这些东西呢

712

都把它换掉这里

713

这个研究中间念

714

好

715

然后下边儿是一个replace reduce啊

716

那这个replace reduce or呢

717

实际上应该就等于一个这样

718

吧

719

是不是可以这个stop那厮道

720

咱们把它拿到上面来

721

这个nice了

722

咱也不要了

723

他现在只有一个流水

724

是吧

725

也没有这个

726

这个别的都只有一个

727

这边reduce or啊

728

然后这就是我们那个对应一个reduce or

729

然后states加上一个中间

730

这时候会发现creates door又多了一个啥呀

731

第三方的这样一个函数

732

在这个reduce里边儿

733

我们有一个crystal

734

这里又多了一个东西

735

你先别管那个crystal是个啥是吧

736

但是我们这里边儿呢

737

陡然又新加了这么一个文件

738

这个文件我们就把它叫做重写

739

这个什么creates到

740

所以就因为我们要把中间柔和进来

741

所以这里边又新加了第三个参数

742

这个主要是为了处理啥呢

743

处理这个我们的中间件

744

来处理我们的中间件吧

745

处理这个东西

746

处理这个中间件

747

然后咱就把这个第三个

748

把他给丢进来

749

那么处理中间件呢

750

他需要这第三个函数

751

这个第三个函数是个什么鬼

752

这个第三个函数实际上就是咱们所需要的这个经过

753

经过这个

754

经过咱们up lay me down one合并之后的谜团

755

那么刚才迷路而原理大家已经看了

756

它原理实际上就是重写那个store的dispatch

757

是不是啊

758

实际上他的整个原理就是重写那个对应的一个stop despite

759

那么你在这个时候

760

其实如果你把那个对应的dispatch给重写了

761

这边就能省很多事儿

762

这边是鞋厂能省很多事儿

763

所以这边的话我们就继续往下去搞

764

你继续往下去搞

765

OK

766

那把这些没有用的都把它现在删掉

767

就让他清洁简单轻便一点

768

在写这个中间这个对应的值的时候呢

769

那么大家一定要把上一个DEMO6那个搞清楚

770

就是说自然界的原理到底是什么

771

要不然你写这个可能有点迷糊

772

这是什么对吧

773

这是什么鬼

774

可能会有点迷糊

775

不要迷惑

776

这个其实没有什么

777

就是我们可以直接把这个思路移过来

778

所以现在主要的这个代码应该是在a playmate were这里呢

779

他怎么做才能把这个像W一样

780

把这东西让我们看得这么清晰

781

M6这个东西呢

782

看着呢

783

虽然说麻烦一点

784

但是清洗对吧

785

是吧

786

这是我们的一个WW好像看起来这边比较麻烦一点

787

但是说整个代码逻辑还是非常清晰的

788

那我们如果把这东西自动化的展开的话

789

势必这个代码上可能会有一些比较复杂的地方需要我们去折腾了

790

是不是比较复杂的地方需要折腾

791

好

792

那首先呢

793

咱们就写

794

咱们的核心呢

795

就是说如果展开一个课的话

796

就得需要谁函数的组合

797

那么我们的卡瓦的原理

798

垮裤的原理和这个一模一样

799

基本上一模一样

800

知道吧

801

酷的原理

802

然后我们函数组合

803

写呗

804

对不对

805

首先我们第一个a play密度

806

而他接受啥呀

807

接受这一堆对应的密度为二

808

然后咱们把这个弥陀万对就是洋葱模型

809

然后把这个密度而通过这个我们这边把它导出

810

这个也很清晰

811

然后通过那个GS呢

812

把它给导进来这里需要一个需要这样一个密度万

813

吧

814

然后把它给挪下来

815

我们把它给这样

816

就是我们mid y OK

817

然后这里是我们的AB段

818

然后外面是一个对应的一个middle one

819

然后这个6万呢

820

在这里边儿执行的时候呢

821

会有一个中间态的值了

822

对吧

823

这个对应粉把这东西给搞开

824

这里比较啰嗦一点

825

就首先呢

826

大家要明白

827

就是说你通过DEMO6

828

大家回过头来看一下DEMODEMO6这个东西呢

829

它最终返回的一个东西是不是函数

830

是不是啊

831

是不是说最后执行了第一层就行完了

832

他三层

833

第二层到第二层结完了

834

实际上我们最终的一个密度万应该给用户

835

这个最终返回的是不是这一步

836

就是这一步就是这样的一个结果

837

这是一个不管你说你怎么办

838

就是你怎么执行

839

实际上用户这边得到的应该是这么一个玩意儿

840

是吧

841

这种啊

842

那你在这里边儿就得不能草率了

843

在里边儿不能草率了

844

你就得跟他做一样的事儿

845

对吧

846

你做一样的事儿

847

OK

848

那在这个过程中呢

849

我们既然想要执行这个对应的一个printed one

850

那那咱先把这个思路呢

851

就得一点点理一下

852

一点理一下

853

那这个丁的mini one

854

而我们给封装一下

855

但在creates到这个JS里边儿

856

这个东西又干什么呢

857

好像到现在还没有什么用途

858

刚才我们讲DEMO的时候讲到了一点

859

就是你要劫持那个谁

860

DEMO的时候

861

你要是不是劫持那个默认的一个despite

862

是不是劫持他

863

怎么劫持他呢

864

我们如果自动化的写的话

865

肯定是需要在这个creates到上下文章的

866

是吧

867

从这里下面也就是说来管一下这个

868

因为你看一下这个代码的逻辑

869

再待末期里边儿

870

它这个单模七的默认接受了一个第三个函数

871

所以这个第三个函数在池子里边儿我们似乎还并没有用到

872

那怎么办呢

873

怎么把它用到呢

874

就来

875

就是如果

876

如果这边如果传了第三个参数

877

那他就是优先级最高的

878

对吧

879

咱要不默认的把这个stop despite给代替了

880

他就是原籍默认最高的

881

如果这边什么样

882

如果这边儿有这样的一个重写

883

这个我们的十刀

884

那么这个时候来

885

上活了

886

咱得把这个啥呀

887

咱得把这个老的重写

888

我们为了

889

拦截

890

这个对应的store dispatch

891

是吧

892

被拦截这个store的dispatch

893

STOE为拦截这个东西

894

我们就是相对来讲直接对大函数进行重写

895

我们第一周

896

也讲过这个东西

897

其实我们专题一的时候专门也讲过这个

898

就是说把这个creates door给二次的

899

就给重新的代理够

900

那咱们就其实拦截的是一个started despite

901

我们这个Dis tor despite呢

902

也就是这个despite在这个creates到里面

903

所以我们直接把它给重写掉

904

是不是

905

直接把它给冲洗掉

906

那么如果这个时候呢

907

把它给冲洗掉呢

908

我们的

909

Cast啊

910

这是一个new creates到

911

它就等于它其实相当于是个高级函数

912

对吧

913

所以为什么说函数编程这么这个re达斯这么践行的函数编程的这边处处都是函数编程的影子

914

然后这边儿把这个老的垂死到呢

915

咱给他丢进去吧

916

这时候来了

917

咱要看一下

918

那他既然能够去接受这个老的

919

科瑞斯道

920

它是经过

921

它是经过这个PLAYMATE2封装的

922

然后把这个东西传进来

923

那么这个东西呢

924

在里边儿用第一层函数给执行

925

所以咱先来执行第一层是吧

926

让他接受第一层做什么

927

接受老的这个creates到

928

我们来对这都是颗粒化

929

一层一层的颗粒化这些同学说老袁不太明白

930

颗粒化我一不执行到位就行了

931

你像这种颗粒化呢

932

跟偏函数是什么

933

就接受颗粒化

934

只接受一个函数

935

然后在等着处理剩余的逻辑

936

但是偏应用函数呢

937

他可能就是接收很多个就无所谓了

938

对吧

939

所以我们的颗粒化

940

他说是他是偏应用函数的这样一个子集吗

941

它是基于偏应用函数创建的

942

好嘞

943

那咱们这个creates这边呢

944

既然创建完了

945

然后呢

946

记得就是你这个科瑞斯道和这个做的逻辑应该是一样的

947

你得把这个方法给人第三方反馈回去

948

所以我们直接returned这个牛Christian

949

这就起火这是起火

950

这样的话

951

如果有人使用了终点

952

我们把整个大的这个Kris的对象这个拦截了

953

大的可乐style都给拦截了

954

我们自然能够拦截到那个dispatch是不是

955

这边我们自然能够拦截到那个dispatch

956

那这个时候里面又开始做什么呢

957

我们既然已经拦截到这个老的一个克斯到了

958

大家想想

959

大家想一想

960

你已经能够拦截到老的词就知道了

961

那我们第一层就已经执行完了

962

接下来这里边又得到了第二层

963

然后我们这里就是一个returned

964

3X这里边儿开始到了第二层

965

就这么个逻辑了

966

是不是这么个逻辑

967

那这么个逻辑

968

这个第二层的参数又该接受些什么

969

是不是啊

970

我们的第二层的参数

971

这里边应该接触一些什么

972

还有还有就是再往下还在需要return一些什么

973

这是我们需要关注的

974

好

975

我们再把目光锁定回来

976

这里是带默契

977

这里是带默契

978

第二层的这个对应的时候对吧

979

我们在执行对应的一个第二层内容的时候

980

这里边首先我们要这个明白一点

981

就是说你时刻是为谁服务的

982

你时刻还是为了我们的最后的creates到去服务

983

是不是啊

984

这里边儿实际上还是为了我们最后的科学的style去服务

985

所以在我们第二层的这个阶段

986

大家首先把这个思路要在弹幕六合单模七两层上做个切换

987

在DEMO6的这个阶段

988

在在魔力这个阶段

989

我们最后

990

是不是啊

991

你看这是第一层第二层

992

他把这个辞掉的第四拍给重写了

993

然后实际上呢

994

我们想去做这个一个中间件的时候

995

我们没有遭太多的心了

996

因为死到第四派车都被你给重写了

997

是不是啊

998

所以第四不都被你给重写了

999

那么大家这个时候要做的一点是什么呢

1000

是说你要明白

1001

就是说我们在新写这个reduce里边儿

1002

A player这个心写这个result里边儿

1003

气啊

1004

新写的这个东西的时候

1005

第一层的把它给拿过来了

1006

然后你要执行

1007

执行完了

1008

你是不是等同于谁

1009

等同于这个壳的制造

1010

也就是这块儿

1011

他就是老的壳的制造这块儿第二层还要接受我们的这个两个状态值

1012

是不是老的第二层

1013

也就是说现在你给你给这个原来的壳子都是被你给重写了

1014

他就是那种老的鬼东西

1015

所以这就是一个新的creates tor

1016

第一次方接受这个老的这个crystal的总方法

1017

第二层呢

1018

重写一个啥呀

1019

重写一个crystal

1020

也就是说你以前该怎么用

1021

还是让用户怎么用

1022

是吧

1023

这边我们重写一个可以得到用户该怎么用

1024

该的就是以前的

1025

给用户的API

1026

所以这边就是这两层

1027

这两层呢

1028

既然这两层已经来了

1029

我们应该明白一件事儿

1030

咱们应该明白这事儿

1031

明白啥事儿

1032

就是人这个老的这个方法里边儿给吐出去什么

1033

你在这个上面就应该吐出去什么

1034

这个不应该有任何的这个不一样

1035

那首先呢

1036

老的里边儿给他执行一下

1037

Creates到

1038

那么等于o的creates到这是老的

1039

Old crust

1040

然后把这个这两个函数

1041

然后给他丢进去

1042

一个reduce or

1043

一个NGC

1044

那这个东西返回来什么

1045

咱就该原封不动给他还回去就完事儿了

1046

所以这就是代理了老的方法

1047

对吧

1048

这边的话

1049

这边的话实际上就是那边儿格瑞斯到那边该反馈什么

1050

我们这边还是反馈什么

1051

但是我们说了

1052

中间件的原理是重写dispatch

1053

所以这里呢

1054

咱相当于来讲要做一个dispatch a

1055

那么JS对象有个特点

1056

就是你的despite如果写到了下边的话

1057

那么他会把上面这个点儿点儿的对象给覆盖掉

1058

是吧

1059

他会把这个点的对象这个通过我们这个方法直接给覆盖掉了

1060

那我们这边有一个对应的pad

1061

是不是就把原来的方法给我们的pad到了这样这个逻辑

1062

那么这个的派去可不能那么简单

1063

那这个的派去可不能那么简单啦

1064

就是不能是个空的字符串

1065

这啥玩意

1066

所以我们这边应该等于谁首先然后等于一个链儿

1067

一个链儿

1068

咱看一下

1069

在这个所有的mid worse里边儿

1070

咱把它给铺平

1071

爸给他铺平

1072

就是现在不是一个数独骂

1073

数独好

1074

咱们再把这个middle miles呢

1075

咱们进行一个map

1076

咱把第一层给它执行完

1077

这里边是每一个密度为咱把第一层先把他要给执行完

1078

对不对这里边儿是不是执行完了

1079

然后这个里边

1080

咱们给它传递creates到这个krzysztof

1081

非常的简单是这样

1082

就是crystal就是有一半儿该死的该死的该死的

1083

也就是说这里边每个周念这一步等于什么

1084

这一步代码就等于我们在DEMO6中

1085

做的这个这这几块

1086

是吧

1087

就等于在咱们六中老的这个M6中做的这几块

1088

就这块操作

1089

是不是啊

1090

以前的话咱是手动执行的

1091

现在是不是咱们给他给便利执行了

1092

那么现在得到老板和他是不是已经经过第一步了

1093

我们第二步干啥呀

1094

第二步然后呢

1095

第二步的话就是一次一次的

1096

刚才是怎么写的

1097

DEMO里面是怎么写的

1098

第二步的话是一次一次得到哥们儿的nice的是谁

1099

对吧

1100

一次一次的这个写起来

1101

我刚才说这是洋葱模型怎么样

1102

这种

1103

这个是我们的一个函数的颗粒化

1104

那我们这时候要解决一个问题

1105

怎么去解决掉这个函数的颗粒化

1106

把这个对应的函数的颗粒化给什么地方给拆开

1107

A给拆开OK

1108

那怎么拆呢

1109

就很简单了

1110

用咱们这个是不是

1111

用咱们这个东西

1112

把这个链儿给一丢是不是

1113

这一丢的话的参数是什么

1114

就是我们第一个最早的死到的点despite这这点儿这堆东西是不是就是等于W里的这一堆

1115

一模一样

1116

就是这是咱下面这句代码

1117

实际上就是等同于这个

1118

但是这些东西是用户自己执行的

1119

而且这种代码的话

1120

现在太深了

1121

现在咱就使用函数的这个什么样组合

1122

把这个函数的颗粒化彻底给他拆开

1123

这就是函数编程的魅力嘛

1124

对不对

1125

我们用函数的组合

1126

函数的组合组合函数吧

1127

拆解了咱们的函数的颗粒化

1128

不是这几个科学化

1129

这个

1130

是不是

1131

这这就是咱们学以所用吗

1132

那这个第四派车你得到了重写完了

1133

那现在你弹幕器就可以跑了

1134

对吧

1135

但目前就可以跑了

1136

这里报了个错

1137

他说已经被定义了

1138

咱们看sorry

1139

在以内的点HTML里边能改一下业务逻辑

1140

在这里边儿呢

1141

咱们有一个四道

1142

这个四道铁定是不要了

1143

是吧

1144

这三个不要了

1145

因为咱们重写了这个扫

1146

好咱们刷新一下

1147

他没有找到这个reduce下边的a plane的

1148

JSDEMO期

1149

有啥疑问就及时在公屏说

1150

别到时候扫过去了没跟上

1151

这个有一个

1152

有啊

1153

就在这儿

1154

看下这个错误报哪儿

1155

他说DEMO期的这个文件发生了一个404

1156

少了个一12点

1157

这样啊

1158

是不就可以了

1159

那我们稍微改动一下米德尔代码吧

1160

然后在logo里边儿咱们随便输出一个

1161

随便输出一个随机数吧

1162

好事不就齐活了

1163

这样的话就把这个什么

1164

这样的话就把这个手写那一部分

1165

通过这个恶劣外耳手写那一部分

1166

反正把它给还原了

1167

是不是这部分

1168

就是一部分手写的那个换了吧

1169

要不然以前你得自己一个一个的这种颗粒化

1170

那面试的时候函数组合

1171

这两个东西高频考题

1172

是不是啊

1173

这是我们高频考题

1174

这样这两个东西

1175

就是基本上是在很多的这个

1176

在很多的环节必考的这么个东西

1177

必考的这种东西

1178

高频考题

1179

所以我们在所有的这个环节里边儿

1180

还是希望大家能够真的对函数编程能够吃到心里去

1181

咱们已经讲了这么多了

1182

对吧

1183

因为这些东西如果你没有吃到心里边儿

1184

你这种源码看起来或者写起来就比较痛苦

1185

不知道他干嘛在我们再次的回到源码里面看一下这个read

1186

对吧

1187

S21第一个a claim one是不是就是老袁刚才写的原型

1188

是不是基本上就是原封不动的API拿过来的

1189

没有任何的变化吗

1190

是不是

1191

通过一个map

1192

然后把这东西给丢进去

1193

只不过它这里边稍微做了一点点复杂的事

1194

我就直接就煮

1195

尤其这里吧

1196

是不是啊

1197

尤其这来看这个还是组合呢

1198

呵呵

1199

是不是原封不动

1200

所以你觉得他源码有什么复杂的地方吗

1201

没有

1202

这如果你记住机制夯实的话

1203

看这些东西源码的话

1204

可能扫一眼就知道了

1205

不用说

1206

为了为为这个源码付出太多的时间吧

1207

然后再往下呢

1208

就到了这个剩下的

1209

几个无关紧要的东西呢

1210

比如说有个棒的action creators

1211

这个bang action creators呢

1212

实际上对于我们来讲呢

1213

还是有点啥的

1214

有对于我们来讲还是稍微有点用的

1215

因为咱们真实业务中的代码不可能像这个里边儿这么写是吧

1216

真实业务中的这个代码呢

1217

我们一般要做的事情都是什么呢

1218

DEMO吧

1219

对吧

1220

在这个里边我们一般要做的事情都是把所有的东西往外曾去吧

1221

是不是这边我们把他绑到这个外层的一个action身上

1222

要绑到这儿action

1223

那么X呢

1224

咱们主要做的一点就是不可能这个在我们的业务逻辑中去写的despite despite的话

1225

他不会在我们的这个业务逻辑中

1226

除非出那些衣服代码

1227

所以说我们要做action

1228

做封装

1229

大家如果写入打死也知道

1230

所以一般写的话

1231

至少要建这么几个项目

1232

一个是action

1233

一个是mid v2

1234

一个reduce or

1235

这几个东西是你

1236

必备的一个根本都少不了的

1237

首先咱们先写一个X

1238

咱们看这个很简单嘛

1239

这个就是增加是不是

1240

还有呢

1241

就是我们这个Richard

1242

这是一个康这个info

1243

这个写到这儿

1244

这是info

1245

然后这边就是咱们的一个counter吧

1246

那齐国吗

1247

一个是增加

1248

还有一个就是我们的counter的一个赛内幕

1249

所以这两个JS是已经

1250

就为了两个JS是不是已经就位了

1251

这两个杰斯就为以后呢

1252

我们就不能在这里呢

1253

天美二种再这么折腾了

1254

就是你这个despite不要出现在你这个despite实际上不要出现在这个这个里边

1255

出现在我们的starter despite这个这个东西是隐藏的

1256

就是这个stored despite实际上是一个隐藏的方法

1257

不让你显示的调用

1258

这里边儿

1259

不让你显示的去

1260

调用

1261

对不对

1262

这里边儿不让你显示的去调用这个萨despite

1263

实际上这个隐藏的方法大家如果鞋子大的同学都知道

1264

如果一般的情况下才能去使用这个stat是吧

1265

这个就不是说让你去动

1266

但是VS里边就没有那么多讲究啦

1267

就是说直接可以干就完了

1268

好

1269

那咱们怎么做呢

1270

这个时候

1271

咱们需要一个棒的action creators啊

1272

咱们在这里边需要一个叫做bang action creators

1273

最棒的action creators呢

1274

这里边儿替咱们做了一层绑定

1275

就不让你写了

1276

让你怎么调呢

1277

这么去写

1278

这个F是咱们需要一个三

1279

另还有一个这个增加

1280

然后这里边呢

1281

这个style的第四派去

1282

咱也要把他给传进去这样的话就形成了一个X的体系

1283

所以说以后呢

1284

咱们想这么去教action是什么什么

1285

这个答案就是直接对上你的Q了

1286

你的right的right这个view

1287

然后这边直接去调用这个action action就开始运作了吗

1288

大家看一下这张图

1289

Action发起一个这个流程图是不是大家看一下这里这个才能符合这个flex的思维吗

1290

所以他也也是一点再去也是一点再去那个实验那个flash的一个理论

1291

这里啊

1292

用户这边发起一个action是吧

1293

在这里我们用户发起了这样的一个action请求

1294

然后这X开始到哪去

1295

我们这个X呢

1296

开始往后走

1297

这个逻辑

1298

是吧

1299

这个X

1300

用师傅发现X了

1301

X这边呢

1302

开始X里边去掉despite一个是为什么要把这个地图隐藏呢

1303

因为它实际上就是为了践行这个整个的一个

1304

他这边实际上就是为了践行整个这样一个despite的一个节奏

1305

就在这里边

1306

我们可以清晰的去去运作这个dispatch这部分

1307

是不是我们就可以把这个地方给它给搞起来

1308

就是说可以执行一个对应的splash

1309

好

1310

那咱们又多了一个新的东西

1311

就是bang action creators

1312

继续来

1313

对吧

1314

带着大S里边儿

1315

所以咱们基本上

1316

已经快把啥呀

1317

快把read and源码都给实现完了

1318

这个bang action creators呢

1319

就更简单了

1320

对吧

1321

他也是一个搬砖的

1322

和这个合并reduce做的是基本一样

1323

是不是基本没有什么特殊的

1324

基本上差不多一样的东西是吧

1325

我们在import import我们这个棒的action creators这个东西

1326

好

1327

然后这是棒的iPhone creator

1328

然后这边我们在新加一加一是不是就就有了

1329

然后这个bang action creators呢

1330

它其实就是一个搬砖的活儿了

1331

而且也没有什么

1332

也没有什么特殊的

1333

这个看起来很难的样子

1334

首先呢

1335

In sport对吧

1336

Export

1337

我们的default

1338

然后function bang action creators

1339

我们看一下这个里边接受两个参数

1340

第一个就是我们action creators啊

1341

所有的action

1342

第二个就是默认的dispatch

1343

默认的dispatch

1344

那么这个东西呢

1345

最后呢

1346

他实际上返回的是一个对象

1347

也就是说这里有一个对象

1348

这个对象a呢

1349

是调用

1350

这里边儿就走了despite

1351

怎么这么个逻辑

1352

这是对象a

1353

所以这个a呢

1354

将来咱们可以在view中

1355

就是right view中直接调用

1356

那么他势必返回的就是个对象吧

1357

好

1358

那这里边儿咱们就构建一个对象

1359

就叫做一个count这个东西

1360

然后呢

1361

把这个对象呢

1362

通过这个东西给送出去

1363

是不是啊

1364

通过一个bang action帮里的action可以考试

1365

然后通过一个bang bang action可是把他给送出去

1366

然后就好整了

1367

报

1368

报cost它竟然是个对象

1369

那我们就因一下

1370

这个音不是不建议用吗

1371

是咱就为了实现一下业务逻辑吧

1372

就爱生crisis是不是把它给执行一下这个T呢

1373

当然你编了一个数组也可以然后首先呢

1374

得到他是不是这个action creator是不是有这个APP是T

1375

就每个选项

1376

可是他说

1377

刚才也并没有看到说

1378

这个隐着点儿听见没

1379

老袁

1380

你这是啥呀

1381

这两个并没有看到

1382

一倒就完了

1383

是吧是吧

1384

这重新往里倒就行了

1385

一个我们的增加一个赛内容是从action倒进来就行了

1386

所以其实这已经跟我们也有逻辑非常的相似了

1387

为什么

1388

这么麻烦呢

1389

因为所以很多同学就是尤其尤其是刚去接触瑞拉斯的同学

1390

接触来接触去

1391

这啥玩意绕来绕去的

1392

对吧

1393

看着就蒙登的这什么玩意儿

1394

这是

1395

但是呢

1396

就是他呢

1397

就第一个去这么

1398

他是第一个这么去把这个

1399

阿弗拉斯思想实现完整的人

1400

所以其实他也如果有一些不足

1401

也可以理解是吧

1402

而且他这个

1403

是啊

1404

就是这没办法

1405

这个reduce的话

1406

实际上他是第一个去这么去健全去实现一个flash

1407

想这早期了

1408

你想这个你想这个re LA SI到今天来讲

1409

咱们是一六年的夏天开了第一个班儿

1410

那时候咱们就开始在讲瑞达思想

1411

到现在到都多长时间了

1412

是吧

1413

现在今年都已经是属于

1414

走过了将近有五个年头了吧

1415

对吧

1416

五个多了都快

1417

其实那时候

1418

其实那时候我们在什么

1419

我们那个在讲这个大之前人家就有了

1420

是不是

1421

那相当于有六年多的时光这个result

1422

但现在来讲很多人还在用

1423

那他太早了

1424

所以现在很多框架呢

1425

就把这个reduce的缺点给规避掉了

1426

你比如说这个reduce很多人就觉得没有必要吗

1427

那我为什么非得去让我的action非得经过你的reduce or呢

1428

那我action直接操作不行吗

1429

可以啊

1430

所以毛boss就是这样的毛笔奥斯就是轻量级

1431

而且觉得没必要去去让那个这个reduce or去折腾它干嘛呢

1432

对不对呢

1433

我就直接action view不行吗

1434

所以后期的这两年的所有的状态管理都基本上都抛弃了reduce or

1435

就把整个reduce的体系其实都是抛弃掉的那

1436

就是rewrite

1437

前两年基本上对瑞达斯就是个标配

1438

就是如果说你使用redux的话

1439

这边使用了re的话

1440

基本上result就基本就跟上就OK

1441

因为没有别的科

1442

就是值得信任的选择

1443

所以当年你要说你会个reduce

1444

那确实是比别人要强

1445

不一样

1446

他确实别人就不会吗

1447

你说这玩意儿绕来绕去的

1448

一般人早都整懵逼了

1449

一个reduce干干废了多少人呢

1450

对吧

1451

你想想你品你细品

1452

对不对

1453

一个radio的干废了多少人呢

1454

所以reads的一些标配

1455

然后随着这个这个项目地向前推衍

1456

公司业务逐渐的发展

1457

那老项目代码你还一般人还真就动不了

1458

对吧

1459

大家一看就是光一个view

1460

光一个Vue

1461

光带的状态管理工具就七八个

1462

有的甚至十几个文件

1463

JS文件谁敢动

1464

那这个老项目主任来弄来弄

1465

弄到今天你就得接

1466

然后所以呢

1467

也是导致水倒到今天为止

1468

一直就是不能被这个为什么一直都没有这个淘汰的

1469

也是这1.1个是他跟right这个整个资料太多了

1470

再一个很多公司的这种老项目全部是使用的哈呢

1471

也去不掉

1472

你根本就你根本都没有这个业务能力

1473

说能就是一个人得多么的强

1474

说把这种老项目业务能力全部使用新的去翻

1475

而且即使说实话

1476

你把它给翻掉了以后

1477

后期再出什么新技术你怎么办

1478

所以很多公司就默认

1479

我就这么干挺好

1480

这种方式也没有什么不好的

1481

挺好

1482

我就这么干

1483

你别瞎给我搞

1484

你来了你就按我公司自己去做

1485

很多同学就没有办法

1486

就开始学习redux

1487

但是这个东西你看了源码以后

1488

你发现其实对results原理真的非常简单

1489

但它主要是提供了新的概念

1490

让很多同学非常的猛吧

1491

好的

1492

咱们往出倒

1493

那么如果发现这货是一个什么

1494

如果发现这个action creators

1495

它是一个我们的function

1496

这个时候呢

1497

直接在上面留一个专门处理每一个对应的function

1498

写到这儿

1499

就是一个专门处理独立的这样一个function

1500

其实一样

1501

一个是action creator

1502

一个是dispatch

1503

也没有什么区别

1504

好

1505

这边呢

1506

大家就是returned

1507

记住啊

1508

返回一个匿名函数二

1509

这怎么又来了

1510

所以他这个颗粒话传来传去的

1511

确实有的时候比较的

1512

Cuo确实是比较粗

1513

你还真的就没有辙

1514

为什么这边要这么的折腾一下呢

1515

大家想想这action action呢

1516

他实际上最终是一个什么

1517

这action他这个最终给我们返回的实际是个对象

1518

他姥爷

1519

对呀

1520

他是对象

1521

但是你别忘了

1522

你别忘了

1523

我们这边儿是还得给谁用呢

1524

咱确实是这里是没有问题的

1525

就是他的T吧

1526

他是没有问题的

1527

但是这里还有一部

1528

对吧

1529

就是你棒的action执行完了

1530

这边棒X执行完了

1531

把这个我们对应的这样的两个参数也给他丢进去

1532

他执行完了这个对应的T是不是个函数

1533

你得给这个东西

1534

它将来给right

1535

它叫什么right这个事件句柄是吧

1536

他有个事件句柄

1537

那right人家不一定非得这么执行

1538

也可以直接让他等于一个a的函数是不是

1539

所以他必须得是个函数

1540

那也就是这一步

1541

我们要给人留一步啥呀

1542

留一部在这部里是一个怎么不

1543

这边儿再一次的Richard

1544

Despite这个时候真正的把despite活给干了

1545

要不然你们这里不留一步的话

1546

这边直接执行完了

1547

他的状态数据就出来了

1548

没等人家调你这个业务事儿就给干了

1549

所以肯定不能这样

1550

那么一般的这个定的despite呢

1551

他其实做的时候就老的这种项目里边儿

1552

老项目里都都爱使这个啥呀

1553

这老项目里

1554

老项目里

1555

一般呢

1556

都爱去使用这个叫a play这种方式是不是

1557

就是都在使用这个APP的这种方式

1558

这种方式为啥用位置控制does

1559

是不是啊

1560

是不是就是没有啥

1561

其实这里边就是despite这个对应的一个X

1562

那也就老爷这个despite是个什么

1563

不就是一个啥嘛

1564

不就是一个这个跟最早的一样的

1565

对吧

1566

所以折腾来折腾去了一圈干嘛呢

1567

还是那点儿事儿

1568

只不过是多了几个概念

1569

多了几个概念

1570

然后这时候咱就把他一把也齐活了

1571

这到现在就完事了

1572

所以我们的DEMO呢

1573

又活了吧

1574

咱们再来看一下DEMO吧

1575

是吧

1576

这边有个错误

1577

说帮action creators is not the fact啊

1578

为什么

1579

因为咱们还没有导进来

1580

在这个M8的眼袋的这些表里边

1581

把这个

1582

找进来

1583

再刷新一下

1584

然后这里有一个抗sorry

1585

这里还有一个current reduce or

1586

我把那个

1587

两个reduce or被我删掉了是吧

1588

叫叫叫叫叫叫叫这

1589

Cant

1590

是吧

1591

这

1592

然后这里返回一个问题

1593

就是说我们想得到一个style的订阅

1594

是不是啊

1595

这时候食道的订阅就没有了

1596

这style的利润是不是就没有了

1597

那这得到这个问题的话

1598

一般就是肯定是因为什么呢

1599

咱们看一下这个style

1600

这个stop是搞了一个什么了

1601

搞成了这样一个鬼玩意是不是

1602

这个stock感觉不太对是吧

1603

他是一个匿名函数

1604

接受一个reduce or在接受一个

1605

这个好像缺了一步执行

1606

是不是啊

1607

这里好像缺了一步是吧

1608

这里呢

1609

就是有一个就有一个颗粒化

1610

就有点被我们给没没没hold住

1611

是吧

1612

有是不是有有一部颗粒化就没有hold住

1613

所以这个颗粒化搞来搞去

1614

有的时候比较烦的就是这里

1615

就是有的时候如果你没有控制住的话

1616

你这个这是stall是吧

1617

这可以到然后我们reduce or这都没有什么太多的问题

1618

上一个我们已经看了

1619

那就还是在这个bang action creators上

1620

那有一部哪里他没有给执行到位

1621

是不是啊

1622

就是可能他需要执行

1623

但是他并没有执行那棒的爱神推特

1624

然后这里边呢

1625

是returned这样一个dispatch

1626

看起来这个代码也没有什么毛病是吧

1627

这个也没有什么问题

1628

还是说在这个creates道上

1629

这里大家下一下那个逻辑吧

1630

在这里他这个创建什么呢

1631

说创建这个

1632

确实比较烦

1633

确实是是是

1634

有的时候会比较的讨厌你说这客气话

1635

如果哪一步你没有给执行到位

1636

这边是不是就凉凉了

1637

是不是就凉凉

1638

那我们在在这里边咱看一下咱返回这个style是个啥玩意

1639

是吧

1640

咱们看一下这个返回来

1641

这个石头

1642

看起来像是一个函数一样

1643

对吧

1644

这个世道

1645

嗯

1646

是吧

1647

咱来看一下这个东西是个啥

1648

是不是这玩意儿

1649

就缺了一步给执行的到位

1650

是不是现在等于这个什么一个这个这个鬼东西是吧

1651

这咱肯定不让他

1652

这这这肯定是缺了一步执行

1653

Reduce和current state

1654

那从这里边我们大致地走了一眼

1655

他好像在printed word里边儿不大对

1656

是不是老师是不是在额本来米之外

1657

这里不对

1658

因为我们在实际上刚才执行的时候

1659

这里边儿看到了一点

1660

就是说首先呢

1661

这是一个执行之后的是不是那这边显然看一下

1662

这里边儿是指第一个我们的创建

1663

重新创建这个函数

1664

然后下面是我们一个reduce or合并对应的reduce or

1665

然后这里呢

1666

就是我们的中心店

1667

对吧

1668

咱把这个中间呢

1669

先写到这里边儿

1670

无所谓了

1671

对吧

1672

这中间呢

1673

咱把它写到下边去了

1674

是一个producer

1675

先创建我们对应的一个producer

1676

然后呢

1677

这里边呢

1678

我们创建一个中间件

1679

对吧键

1680

然后接下来就是stop creates tor

1681

就是reduce or

1682

还有重写这个函数

1683

是吧

1684

从引力函数

1685

然后这边stow呢

1686

我们也再次的执行了一次订阅

1687

所以现在这个思路肯定就是说我们在create的时候是不是加Q的时候有点小毛病

1688

让他找一下

1689

找一下

1690

那他就是说我们在creates到的时候

1691

这个东西他居然等于这么一个鬼玩意

1692

这部分大家显然他在哪儿

1693

他在我们的陪练米德万里边儿

1694

是不是那在M2里边它值就等于这了

1695

并没有给我们往下去执行

1696

对吧

1697

是不是这里边就没有往下执行

1698

那我们如果想执行这个对应的a playmate万的话

1699

这里啊

1700

想得到这个对特万

1701

首先在这个我们得下点儿啥呀

1702

下点儿就行

1703

那首先老师说这样吗

1704

这肯定不对

1705

这样吗

1706

你想想可能是这样吗

1707

这就不对了

1708

对吧

1709

因为这种方式的话

1710

你得到的一个东西就更有问题了

1711

对吧

1712

这肯定是不对的

1713

是不是所以呢

1714

他肯定缺了一步执行

1715

那种颗粒化有的时候就是这种比较烦

1716

但如果中间哪一步没有执行到位

1717

你这个啥都干不了

1718

那啥也干不了

1719

好

1720

那再找找

1721

再找找再执行下一步的这个逻辑操作的时候

1722

比如说当帮我们合并文件

1723

什么也好

1724

咱们再看一下

1725

这是我们的bang action creators

1726

这边

1727

它是一个函数执行传递两个参数

1728

OK

1729

回到科瑞的道上

1730

回到我们的这里

1731

先这样

1732

先不要这个

1733

先不要这个

1734

先不掉这个

1735

Bang action creators是不是

1736

这样啊

1737

这里边儿跟那个棒男生格子是没有关系

1738

但是我们上一把还能够用

1739

那我们看这里

1740

这是哪里

1741

跟单模七比起来

1742

是不是老袁哪里有问题就是一个

1743

Reduce or

1744

然后合并

1745

Reduce or or play middle ware啊

1746

看着也都没有什么毛病

1747

待末六还是可以跑的

1748

这个

1749

但默契还是可以跑的

1750

是不是太默契

1751

这边还是没问题的

1752

这个看一下

1753

刚才可能改错文件

1754

嗯

1755

我看一下带木漆

1756

那可能这里面改错文件

1757

就是抗这是有损

1758

先把末期改啦

1759

他呢

1760

是这样的

1761

就是M7

1762

这个DEMO期和这个W是不是有一样的毛病

1763

是不是一样的毛病了

1764

我们得回过头来往过

1765

刚才是不是改

1766

改来改去

1767

哪里改呢

1768

啥了

1769

改错了

1770

我看一下末期吧

1771

先给他抹七八

1772

然后再再再说再磨吧

1773

在磨溪上刚才可能动来动去

1774

哪里弄错了

1775

我们先看这个reduce

1776

Reduce or呢

1777

这里边儿我拿到了

1778

这两个reduce or

1779

先把它改一下吧

1780

我跟他没关系呢

1781

先叫这两个reduce or

1782

然后这个reduce而在这个OK了

1783

是不是啊

1784

大家来看看目前

1785

一样

1786

抽烟

1787

Rough

1788

Crystal

1789

Read us的creators到

1790

这块儿错了对吧

1791

这块儿刚才给那个什么

1792

这块儿还得把这个谁

1793

这不得到一个新的状态管理工具嘛

1794

对吧

1795

所以咱们记得把这个二次执行到这里

1796

吧

1797

这里了

1798

就可以了对吧

1799

这刚才不是那个就得到一个新的

1800

可能刚才给什么撤销给弄坏了呢

1801

还是cant

1802

一个counter

1803

一个info

1804

这代末期

1805

刚才咱把那个什么

1806

咱把那个删的时候给删错了是吧

1807

是不是这这是OK

1808

好

1809

再回到刀疤里边

1810

M8

1811

Chris top

1812

这里啊

1813

记得得到把这个得到新的经过重写之后的咳嗽药要给执行了

1814

经过重写的

1815

哲学思考

1816

要给二次执行

1817

这里边儿接受

1818

这两个状态

1819

西湖吧

1820

然后我们的DEMO吧

1821

大家来看一下

1822

在函数组合

1823

达摩吧

1824

他说

1825

B is not tough action

1826

看一下这个reduce

1827

Reduce or

1828

然后是合并的流水

1829

再录吧

1830

哎哟

1831

我去

1832

那跟这个下边儿也没有关系

1833

还是我们刚才给删删哪里删错了

1834

函数的组合

1835

发射的组合来于来源于这里

1836

Crystal这里边吧

1837

New crystal这里边

1838

这样啊

1839

我把这个DEMO期给复制过去

1840

然后把这个这样

1841

避免咱们那个咱们改错了

1842

还得挑塔等我吧

1843

然后把这地方挖bike这个对应的actions

1844

给他拿过来

1845

是不是把这个放到这个

1846

待末巴黎热这样

1847

然后再把这个

1848

这个index这个给他复制到这个字幕吧

1849

Results

1850

是吧

1851

这样啊

1852

然后这里呢

1853

咱们写了一个

1854

Results

1855

这里边咱们写了一个a playmate玩儿吧

1856

咱们也给它放到

1857

该MOBA的reduction

1858

这就差不多了

1859

把它替换掉吧

1860

就OK了

1861

是吧

1862

这就这就行了

1863

这样的话

1864

咱们这个也是全的全的再把这个对应的是ML

1865

咱们给它稍微的

1866

休整一下下

1867

先看一下再抹吧

1868

怎么能跑得动

1869

带包包里边儿缺了一个

1870

咱们班没有HTML

1871

这不是有吗

1872

呆萌

1873

M号吧

1874

然后这里就说了一个

1875

他缺了一个什么棒的action creators是不是

1876

这个再把这个棒的action creators1到result里边儿

1877

这就正常了是不是刚才咱不管他这个可能有点问题

1878

然后现在咱把这个核心的这个这一部分放在action creator是这部分

1879

咱们把它放到SD卡里边来

1880

是吧

1881

咱就不要这个啥啦

1882

不要这种显示的了

1883

说不要这种显示的

1884

还要了这么一套逻辑

1885

要了这么一套逻辑

1886

是

1887

我们通过bang action creators将可以通过一个view直接调用这个事件句柄

1888

然后再刷新一下

1889

帮男人creatures呢

1890

咱们从那个引入一下

1891

从这儿我们这边儿刷新

1892

他这时候来了

1893

他说这个我们并没有得到这个什么

1894

并没有得到这个玩意

1895

它是按的

1896

按道理来讲

1897

我们这个时候action应该是一个啥呀

1898

大家想想

1899

我们看这时候我们得到actions应该是一个

1900

在这儿

1901

Sorry

1902

还没有去引入那个啥呢

1903

还没有去引入咱们内两个

1904

X2

1905

烦不烦

1906

瑞纳斯

1907

确实比较烦的

1908

就是写东西太多太多了吧

1909

是不是前期准备也准备这么多东西

1910

然后再回来就可以了

1911

这时候我们就不再需要什么了

1912

不再需要这种人肉的dispatch了

1913

所以说我们通过一个事件句柄

1914

通过red这样一个事件句柄

1915

然后来什么来做这个准备的工作吧

1916

就这种

1917

所以其实

1918

怎么说呢

1919

Action和reduce or是这个

1920

首先它是这个函数编程里边儿的一个实时的映射

1921

还有VIVO X纯抄的

1922

对吧

1923

VS是纯纯的抄的

1924

这个我们的拉丝

1925

最终咱就分各位

1926

再继续待末吧

1927

咱再复制一下吧

1928

所以VIVO X就就是抄的他妈纯纯的抄的抄抄的这个啥抄的这个

1929

这是respect

1930

然后我们在这个什么

1931

在这个带魔酒

1932

单陌灸呢

1933

我们其实已经不需要做什么特殊的了

1934

别忘了

1935

在creates到里边儿

1936

人家居然能够什么

1937

既然能够去订阅

1938

人家那个里边还有个啥呀

1939

还有一个取消订阅是不是所以在订阅这个时候呢

1940

我们再给它里边儿加一个啥呀

1941

在订阅这个时候

1942

咱们这里再加一个return

1943

一个function

1944

就取消订阅

1945

是不是啊

1946

在这里边咱们再来一个取消订阅

1947

首先怎么取消的

1948

Cos的领带是等于listen and as of这个对应的在哪个上

1949

然后如果取消订阅怎么做呢

1950

我们就直接listener这个东西就把它干掉了

1951

是不是啊

1952

那就取消订阅

1953

然后怎么在这里待着下面都用

1954

咱们就实际上在你订阅完成之后

1955

这边儿到你的这个这里

1956

比如说你不是订阅了吗

1957

是吧

1958

我们的抗死这样比如说index

1959

然后就是如果说你不要了

1960

你就直接调一个什么index点安是吗

1961

这就完了对不对

1962

它不是反过来这么一个

1963

他不是这边儿其实也不用了

1964

其实这边他反过来是一个函数是不是所以这边你实际上就执行就完事儿了

1965

就不需要这样是不是取消订阅对吧

1966

这就把这个东西给去掉吧

1967

这是去掉

1968

但是你一般很少大家就就能取消订阅

1969

但是人家这个给你留这个口子了

1970

他给你留这个口子吧

1971

就是你可以去取消订阅的

1972

没有任何关系是吧

1973

实际上别的也就没有啥了这是大事原理的话

1974

无非这样东西

1975

看着好像很复杂

1976

是不是

1977

看着这边儿是吧

1978

好像说是我丢这东西

1979

整个用起来就比较复杂

1980

但实际上原理的话

1981

它源码的话

1982

他实际上并没有太多的官方是存水大四去写的

1983

存这个JSTS去写的

1984

那也没有什么特殊的难点

1985

也就是这点儿事儿

1986

无非这点儿事儿

1987

对面试的时候

1988

你直接把这个DEMO9写出来的话

1989

差不多了

1990

咱们看你的面试官了

1991

那有的面试官如果加面的时候

1992

基本上就让你手写个什么

1993

那不一定

1994

谁知道手机会考什么东西呢

1995

那咱们同学们

1996

快手给大家讲到的就是工资不满意吗

1997

给了他29吧

1998

二十二十九点儿几

1999

他非得要三十四三三十三三十四点儿几

2000

然后他说给不了给不了

2001

那你说怎么才能给呢

2002

加面

2003

然后加面的时候

2004

最后一面就考了他这个玩意儿

2005

让他手写手写一个result

2006

但是咱有一个同学面试被手写过VS的都有

2007

不一定

2008

谁知道他鬼鬼知道他让你写个什么

2009

然后三个面试官呢

2010

盯着你

2011

然后你写完了就过了

2012

但是当时手写完了之后是面试就没有废话了

2013

直接就结束了

2014

然后就基本上很简单

2015

他一直在写

2016

他写了有也有这个四十来分钟

2017

一直在写

2018

写着写着

2019

中间如果写出啥问题的话

2020

面试官也会阻止他说这里可能不太对的

2021

然后这里怎么样也会边写边问

2022

然后最后就写完了之后

2023

这个家面就算结束了

2024

因为一般的话就是已经决定肯定想要你了

2025

只不过级别上可能还有一些这个差距

2026

那级别上的差距就来巩固一下吧

2027

OK

2028

那我们这个来看一下它的官网吧

2029

看一下瑞纳斯的官网到今天为止

2030

虽然说这个这鬼玩意发展了这么多年了

2031

但是依旧受人之重

2032

你怎么弄

2033

你说你不搞他

2034

一个项目

2035

项目中用面试也考

2036

但是考的少

2037

我个人觉得不像以前考的那么凶

2038

以前那是真的是挺凶的

2039

大家可以看到它的SRC的线程都是使用TS写的呢

2040

大家举个例子嘛

2041

就是说这个create这个是吧

2042

这个可能刚才你想想

2043

一到TS这个代码就没有那么容易啦

2044

因为这里要搞很多这种啥呀

2045

搞很多这种范型

2046

是不是

2047

所以人老让我不会看人

2048

看人怎么写的

2049

跟着学

2050

他这个也是从网上抄的

2051

你看这里边儿第一个臭functions three fashion for functions reset

2052

是不是也是从网上抄的

2053

是从网上抄的

2054

也不是自己写的

2055

所以这边是IP的这样的一个函数的组合

2056

所以让他能够接受很多个functions

2057

是吧

2058

所以这个东西一旦写到TS就比较有意思

2059

就是代码代码量的话

2060

首先肯定就是骤增的

2061

你看这里边的蜜桃味儿

2062

恶心不

2063

不要讲着好像说这个他写的多么的多么的神奇

2064

他们多么的屌一样

2065

是不是啊

2066

这里边儿一就是

2067

这种看着恶了吧唧的这种TS吧

2068

就是没有什么代码

2069

都是太什么

2070

主要是TS这边确实占了很多的版面

2071

是不是

2072

但是后来重写的以前都是JS的

2073

那老师为什么我们art下来的是TS呢

2074

因为你art下来的是你得到项目中用吗

2075

然后它这里边儿不是给你带了一个这个点

2076

这个ts ma

2077

是不是把所有的文件合并一个了

2078

我那个SDK的时候

2079

SDK那边那些工具下课你要用

2080

就SDK所有那个拍摄的这个包已经跟你说过了

2081

而且用

2082

你自己要体会一下

2083

反正我就没体会

2084

我也就看着没看

2085

那咋整呢

2086

是吧

2087

那咋整呢

2088

所以这就是整个一个手写一个relax

2089

大家要跟战地一的时候

2090

咱们第一周的课结合起来

2091

你这样的话

2092

你才能面试的时候

2093

把这个还是变成说的倍儿清楚

2094

这还是变成说的倍儿清楚

2095

要不要不确实不太不太容易

2096

就是说你不太好

2097

太理解

2098

把海尔变成真的

2099

巴巴的让面试官心服口服

2100

是不是啊

2101

好

2102

那我们稍事休息一会儿吧

2103

休息一会儿的话

2104

我们把这个思路呢

2105

放到VSVS3分钟就完事儿

2106

V2和V3的VS原理

2107

三分钟解决非常简单

2108

就是啥都没有

2109

简单的就想哭

2110

然后我们讲recall

2111

就讲这个东西

2112

这

2113

在哪儿

2114

这个现在还是炒的挺那个的

2115

因为他给这个谁官方用了

2116

给这个整个red官方用的

2117

休息会儿吧

2118

两块六块六块

2119

这人间两茫茫

2120

把利字摆中央

2121

是夕雪伤了自己

2122

自己去品尝

2123

这人生何其短

2124

愿你我尽喜欢

2125

可谓苦乐

2126

此生迷茫

2127

为了碎银几量

2128

为了酸菜有汤

2129

山

2130

为了锋味的是哪位姑娘

2131

偏偏这些眼镜

2132

能解世间方丈

2133

纵然有情无任

2134

何方

2135

问孔千疮

2136

人生何其短

2137

愿你我尽其欢

2138

可谓苦

2139

此生也迷茫

2140

为了碎银几量

2141

无奈户口他乡

2142

山高路

2143

长

2144

你现在是什么模样

2145

可偏偏这碎银几箱

2146

压断了诗人的情况

2147

纵然万劫不复

2148

何方遍体鳞伤

2149

为了碎银几量

2150

喂了三菜一汤

2151

车

2152

房的是哪位姑娘

2153

偏偏这碎银几两

2154

能解世间慌张

2155

纵然有情人

2156

又何妨

2157

万孔千疮

2158

为了碎银几两

2159

虎口

2160

山高路

2161

长

2162

你现在是什么模样

2163

可偏偏这碎银几两

2164

压断了使然的肩膀

2165

纵然万劫不复

2166

又何妨遍体鳞伤

2167

纵然留情不认

2168

又何方

2169

遍体鳞伤

2170

好

2171

那我们继续

2172

哎呀

2173

嗯

2174

OK

2175

那

2176

首先这个

2177

就是说我们的VIVO X的话

2178

那么它是纯纯的超额咱们这个relax的理念

2179

纯纯的是从这边抄过来的

2180

因为对于这个readers来讲呢

2181

他已经把flash这个实现的非常的完整

2182

所以呢

2183

对于

2184

所以对于整个一个VS来讲

2185

基本上就是白白白搞

2186

也是白嫖

2187

然后到今天为止这个

2188

在这个什么过程中

2189

在今天为止的话

2190

其实像view的很多东西还是在老的

2191

Red上进行一个服用了

2192

咱不能说人超读书人的事儿能不能叫超

2193

所以大家只能说是一个服用

2194

那么对于VX呢

2195

它是可以跟这个一一对应

2196

He does是完全可以一一对应起来的

2197

完全是一一对应的关系

2198

那么咱们如果大家想看一下那个

2199

就继续再补充一点

2200

Reduce的这个里面还有一些

2201

就是read跟read原理

2202

他这个首先style大家说了

2203

他这几个东西不对外的

2204

一个Galaxy的一个dispatch

2205

一个是订阅号crystal

2206

她是不对外的

2207

是不是

2208

那我们所以通过action才能访问

2209

它是走flex这套理论

2210

那如果没有flash这套理论的话

2211

其实没那么多事儿

2212

但是如果说

2213

按flash这套理论来讲的话

2214

那这些很多东西就莫名其妙的就就复杂了起来是不是

2215

那么最终呢

2216

如果想把read和我们red连接起来的话呢

2217

还需要一个叫red刚results这鬼玩意呢

2218

怎么说呢

2219

就是说

2220

在这个

2221

我们的整个开发过程中呢

2222

还是比较至关重要

2223

它又提供了一个provider

2224

它实际上就是一个外层容器

2225

它的作用呢

2226

就是使用那个这个我们content做这个容器的连接

2227

然后使用的时候呢

2228

将这个provider定义从整个外层

2229

并设置好stop

2230

那么整个项目就会直接获取的这个style

2231

对吧

2232

那也就是说这就是我们一个provider

2233

其实这个provider比较简单

2234

第一个就是get child count就返回一个store.pops的stop

2235

然后是构造函数

2236

这是一个render

2237

所以这个连接的整个的原理呢

2238

其实就在我们容器外面包了一层

2239

接受provider的stocks date

2240

然后这边有两个东西

2241

一个是maps date to pops

2242

一个是map dispatch to pops啊

2243

这两个内容是不是

2244

然后这两个这个大致内容呢

2245

我们如果你感兴趣的同学

2246

你可以大致的看一下这两个东西的整个连接的是吧

2247

它接受一个map state props和map state出dispatch to pops

2248

也就是说把咱们的state he dispatch

2249

最终全部在二次的转换成咱们的pops

2250

就是全转成pops

2251

比如这里边在render的时候

2252

咱们做了一层包装是吧

2253

Render

2254

这个web commitment

2255

然后咱们做了一层高阶这个其实如果有面试问的话

2256

如果就是说那red杠read是什么原理

2257

它就是一个高级组件

2258

然后把这个

2259

我们外边这个通过reduced到state和他那个dispatch做一个pops

2260

然后传到那个组件里面

2261

我把这个PPT里给大家

2262

但现在感觉很少有人再问了

2263

就是我们面试的同学感觉问的较少了

2264

已经较少

2265

好

2266

那我们再回过头来看一下relax的原理是什么

2267

再看一下VIVO X原理是什么

2268

那VIVO X呢

2269

这边大家已经说过了

2270

他完全是这个抄袭的relax

2271

包括整个一个flash思想

2272

但是他为了

2273

为了自己呢

2274

不搞得那么复杂

2275

因为大家都知道Vue呢

2276

本身就是因为简单才吸引了大批量的人

2277

所以他为了让这个VIVO X啊

2278

也变得不是那么复杂

2279

所以他就做了一个算是抄袭吧那么首先呢

2280

这边的话它是怎么抄的什么呢

2281

第一个的话

2282

他用了一个叫做

2283

Dispatch这个despite呢

2284

和我们那个还不太一样何日何日

2285

大S里边儿这个还不太一样

2286

但是呢

2287

他这里边儿多了一个大家可能喜闻乐见的东西呢

2288

就叫我们的什么a mountain

2289

是不是mountain呢

2290

是吧

2291

这里边有一个mountain

2292

这个mountain实际上就是什么

2293

这个mountain实际上就是我们的reduce

2294

吧

2295

这个mountain就是reduce

2296

因为这个mountain它接受什么

2297

这个mountain它实际上是接受了我们这样的一个X什么

2298

是不是啊

2299

那reduce the mountain接受这个对应的一个action是吧

2300

那这个就是action

2301

对不对

2302

很简单

2303

那么这个X其实也是那个什么

2304

这个它里边这个actions呢

2305

也是我们的

2306

对应的一个resource里的action

2307

然后就完事儿了

2308

剩下的很多东西

2309

他就其实没有太捣鼓

2310

就没有太捣鼓

2311

然后他也提供了一个叫做ke MIT吧

2312

这可meet是不是

2313

这可meet实际上是让你调谁的

2314

这可密的

2315

实际上让你调那个咱们的mountain

2316

这个mountain的话当然是不能调的

2317

然后又提供了一个什么

2318

Despite

2319

对不对

2320

Despite让你调谁的

2321

调X的

2322

所以这个对

2323

所以这个定的这个

2324

Mountain action呢

2325

我们外部看不到

2326

他给了我们两个这个破函数是吧

2327

这那这个有什么区别

2328

一个可逆的就是什么

2329

这可密的一个

2330

这commit实际上是commit我们这样的一个X

2331

然后X内部呢

2332

在dispatch就完事儿了

2333

对不对

2334

这是V2 V2包括现在三

2335

经典的三

2336

那么首先view的话

2337

它是怎么做的

2338

这个VS原理呢

2339

那他他的双数据绑定

2340

VU12的这个有关于VS双证书绑定

2341

他是怎么做到的

2342

其实就是又弄了一个V

2343

也就是说当你在使用VIVO的时候

2344

默默的他给你弄了两个V

2345

当然这个状态管理

2346

他也跟整个view的主见没有关系

2347

New we干嘛为了整他那个双人数据保密

2348

所以在没有任何的这个数据的基础上

2349

他就单独的往里塞了一层被

2350

对吧

2351

它是单独往里塞了一层的

2352

他做了一层霜

2353

数据保密

2354

这里看到吗

2355

然后那么那种人人家用的很方便呢

2356

它这个只是用一个对应的一个这世道是不是

2357

他是不是因为这个世道

2358

这哪来的

2359

是这样的

2360

使用一个叫做missy的方式

2361

这个东西会执行N遍

2362

特恶心

2363

不信你可以在这里边儿打一个日志

2364

因为这个因为这个install的时候在很多身份证都掉了

2365

所以这块做了一个判断

2366

如果在APP上已经有了一个style

2367

那就可以干什么

2368

这边就直接在这个就不创建了

2369

那老人家没什么

2370

但是你别忘了

2371

这个函数执行

2372

很多遍的函数执行

2373

但是还是耗内存的

2374

所以屋里边儿有很多细节确实做的一般般

2375

然后还有就是这个style

2376

为什么我们能通过直接view的生命周期里边直接能调这次到

2377

因为它挂在了原珠链儿上

2378

咱说心里话

2379

这这段位还是有点儿接受不了

2380

对吧

2381

他挂在原料上对吧

2382

那

2383

是不是啊

2384

这玩意儿

2385

这个view如果不回收原料的时候能回收吗

2386

那不仅它挂在账上

2387

所有的view的这个啥呀

2388

三方组件全都挂在墙上

2389

所以will的对象大不大

2390

陡然变了

2391

而且这个对象你是你是你不能回收的

2392

你会说页面就废了

2393

是不是这个东西能回收吗

2394

你回收了页面怎么办呢

2395

他是全局的对吧

2396

所以他也不回收不了

2397

那么这些思道也证明

2398

不管你所有的到对吧

2399

所有的style其实都是挂在这个上面

2400

其实所以VIVO当中早期这个东西本身就是很low的

2401

为什么说V三进行了大量的重改重写

2402

就是V2

2403

就是他已经他已经骗不下去了

2404

真的

2405

他已经彻底骗别去了

2406

你说稍微为什么是很多这种做的老点儿的前端非常鄙视呢

2407

因为这种形式其实我入行前11年的时候

2408

就是那时候呢

2409

我就从网上各种文章看

2410

不要往上绑太多东西

2411

除非说你第一次就是说构建一个勾内裤的时候

2412

额外的舒适不要往上绑的

2413

但是会发现VIVO的所有这种主见

2414

什么都是往上绑

2415

如果说no

2416

人家自己控制的好可以

2417

对不对

2418

就就是他自己

2419

就是整个体系生态还不错

2420

控制好可以

2421

那这个第三方的项目的这个质量你怎么控制呢

2422

是不是第三方那些组件

2423

大家想一下你怎么控制

2424

没法控制

2425

是不是啊

2426

那这个东西你说就这种什么

2427

这个element UI啊

2428

或者是其他东西

2429

他们的这个项目质量你是怎么怎么才能把控的

2430

你你死甜你也把那个把控不了

2431

那如果你把控不了的话

2432

这边就可能出现了这个大的内存泄漏

2433

不是

2434

那这边呢

2435

就是说这个这store就是从这上来的

2436

然后他去拿到了这叫options的这种option style是什么玩意呢

2437

他这个东西又是咋来的呢

2438

他其实这个最早options的话

2439

它就是一个内部的什么样

2440

内部的这样一个数据了

2441

就是戴高乐福的

2442

那都是view的内部的这样一个结果

2443

是吧

2444

这屋有内部的结果

2445

那我们通过实际上这个食道的话

2446

对吧

2447

从这个时候大家可以看一下

2448

他向外暴露的是不是这个知道

2449

那这个流程是什么样呢

2450

流程是说我们通过一个VOEX到

2451

这个VXX

2452

从这个上面导出它的点四到

2453

然后咱们就得到了这么一个鬼玩意

2454

是吧

2455

得到这样一个方法

2456

而且它里边传了这么一个数据

2457

那么VIVO X减stores是啥呀

2458

这里边儿是不是UX从十到上边儿一等到X

2459

我们是不是得到这个class的这个东西

2460

然后这个上面咱们实际上

2461

在这个上面你注意看

2462

他是否返回一个store

2463

是不是

2464

那就是证明了这个实到呢

2465

实际上这个死到

2466

这一个install还有一个store大四到

2467

所以我们实际上调动就是这个大的对象

2468

这么大的对象

2469

然后往这里边儿传的一些方法

2470

你别让她拗的

2471

是不是就把那个时就把我们这类给调用了

2472

把类调用

2473

然后呢

2474

在这个这个style呢

2475

设置完成以后呢

2476

他这边有一个export default

2477

然后我们又再回到了这个外边的man上面

2478

Man上面就是不是这就是options上一个stop是不是来了

2479

这个Stuart等于什么

2480

这个imports stopped from这个什么from这个咱们这个Stuart j X d那儿JS

2481

然后挂到这个上面呢

2482

就是我们那个options

2483

也就是说

2484

如果这个已经被new过了一次了

2485

那么再一次的执行这个一等点VIVO X的话

2486

就不要再往这个上面去挂这个词到已经得到了

2487

所以这个this option呢

2488

实际上就是什么

2489

就是我们在这个manage a ES上面这个options

2490

那么接下来这个思路就都放在这个我们大的累上了

2491

因为你想救他吗

2492

New他怎么着呢

2493

第一步

2494

就这么来了

2495

看到吗

2496

咱就QQ的时候单独就给个date

2497

这个state就是外面丢进来的什么action a mountain

2498

那state gets是不是一样的

2499

然后就就干

2500

就完了

2501

他这个代码能减到什么程度呢

2502

首先呢

2503

就是如果用户给用户调了这个对应的可密

2504

他是不是呢

2505

我们这边是什么可密

2506

它它就掉了这个mountain bike mountain接受一个什么样类型

2507

就在这个mountain对象里边儿找啥呀

2508

这个猫是不是就在外边

2509

Mountain是不是就在这儿

2510

就非常的简单

2511

没有那么多绕来绕去的

2512

就是mountain这边是不是就在这个对象里找谁

2513

找找这个R

2514

找到以后呢

2515

如果有执行

2516

完事儿了

2517

完事儿了

2518

Mountain就结束了

2519

就是实际上就是给这个对象这个执行一下对不对

2520

那么执行执行完成

2521

它是有inter吗

2522

这个inter给C的几个点起火

2523

就这么简单

2524

没了

2525

那它而且它不像那个什么

2526

真正这个科密特这边儿

2527

他科密特调这个这个mountain mountain这边呢

2528

就是非常简单没了

2529

那如果有人要第四排

2530

第四排局找XX直接没了

2531

完事儿

2532

这有什么可说的

2533

没了

2534

就因为你已经传进来吧

2535

你这个action不是给了吗

2536

给了我就调

2537

就完了

2538

就这么简单

2539

是吧

2540

没那么多特殊的事儿

2541

就就就很简单的这么地方

2542

对象你都给了

2543

直接把对象这个方法执行了就完事儿

2544

就这样

2545

那么gets呢

2546

Gets就是什么

2547

做了二层便利

2548

把这个啥呀

2549

把这个对象给取出来就完事儿了

2550

他没啥函数变成他走毛线都没有

2551

他是面向对象

2552

这哪有还是变成面向对象

2553

他没有任何函数编程

2554

所以它就是抄的redux又没抄明白

2555

啥玩意儿

2556

又没抄明白

2557

啥玩意儿呢

2558

就没了

2559

对吧V3的源码更蠢呢

2560

V3已经变了

2561

V3已经不带这么整了

2562

因为V3的刷数据绑定变了

2563

所以其实的话

2564

现在这种什么对吧

2565

他现在的这个状态管理就这么几种工具第一种就是说这种早期的re达斯维达斯

2566

他其实不好的一点就是说方法在这个

2567

泰永娱乐就是这个太复杂了太复杂了

2568

然后第二个就很多人考虑这个对应的一个柚子reduce or对不对

2569

就是acer re use reduce or这个东西呢

2570

它其实就是最麻烦的一点就是这样

2571

Provider

2572

是不是还有这玩意儿

2573

所以有的时候就会出现大量的这个所谓的嵌套

2574

这样啊

2575

就这种

2576

就出现了大量的这种

2577

这谁顶得住

2578

这然后这个他们之间的相互影响

2579

所以其实像这个什么

2580

像这个柚子柚子什么柚子的一直没用起来

2581

就是这个标太烦人了

2582

对吧

2583

然后呢

2584

这个后期呢

2585

就是属于了这个什么毛病呢

2586

为什么说已经这个帽子已经算是也是外形只要签到一个就可以了

2587

这个provider

2588

然后呢

2589

也不像S那么复杂了

2590

为什么他这不行呢

2591

因为这玩意儿闭包这个太损啦

2592

这个B包就是猫boss的话

2593

如果你怎么想一个return的主键更新呢

2594

你得在一个函数组件上

2595

比如说咱们叫翻个身APP这个组件上

2596

你这里干什么

2597

这是什么

2598

这是不是就闭包

2599

他编织之后就是闭包

2600

就把这个APP函数交给了他

2601

你这玩意儿

2602

你项目多了

2603

得产生多少DB高

2604

所以现在就有了什么

2605

就是recall

2606

那recall是个什么鬼呢

2607

Recall其实就是原子C

2608

对吧

2609

不是很好用

2610

也不是很好用

2611

Re mobiles有一个非常简单的东西

2612

你知道吗

2613

对不对

2614

Mobiles又一个非常简单

2615

这个东西没有火起来

2616

就摸

2617

这个东西经过了两个阶段

2618

最早的时候他就为了拒绝掉

2619

去掉的那个东西

2620

有一个叫mobile slight

2621

加上一个什么

2622

加上官方那个裤叫什么鬼来着

2623

就是叫什么

2624

什么玩意儿

2625

这两个东西

2626

一盒就可以去掉脑瓜顶上那个啥了

2627

就可以去掉他的脑瓜顶上那个那个S了

2628

那但是呢

2629

后来为什么这个东西就没有火起来呢

2630

就是说为什么说这个东西就没有没有去恶

2631

这叫mobile state tree

2632

这个东西

2633

但是他俩

2634

那简直是一时

2635

我们当时有一个阶段

2636

有几个月吧

2637

咱们上下班的时候就用这一套

2638

太完美了

2639

但是呢

2640

为什么这个东西后来没有火起来呢

2641

因为啥

2642

因为这个它目标时的去里边儿

2643

它是使用了这个gentry

2644

他使用了gentry做了一个状态管理的管控

2645

就是用腥

2646

但这个腥呢

2647

他这个就是整个性能优化这边做的就特别不好

2648

所以呢

2649

到这个mobile or ST里面呢

2650

就就就慢慢的就没人用

2651

就官方好多S你可以去看

2652

有好多effort去反馈

2653

他那个真的是能不能去掉

2654

能不能think对吧

2655

这就是函数

2656

阿星函数这些函数

2657

所以然后这个就是当初呢

2658

就针对函数吗

2659

对吧

2660

所以它这个东西就用这个东西吗

2661

就一定会想去控制他

2662

就好多人反馈能不能用

2663

这个位置就不可以

2664

必须得用这玩意

2665

然后就熄火了

2666

就没人用了

2667

那目标slight呢

2668

做了一次二次改版

2669

二次改版的猫咪slide和猫BOSS1完全不一样

2670

然后这玩意就彻底的销声匿迹了

2671

没有任何一个人在积极的

2672

那大家知道

2673

前端的框架库

2674

如果做APP改版的话

2675

如果你做了breaking Chinese

2676

用破坏性的变化

2677

他肯定没人叼你

2678

然后这个东西呢

2679

不能用a wait

2680

必须使用这玩意儿

2681

现在谁还用这玩意

2682

没人用

2683

然后很多官方就就爱数字

2684

就说说能不能把它改掉

2685

他改不了

2686

他说这个这个原理就这样的

2687

然后这个这就销声匿迹了

2688

要不然其实如果有了猫boss和她用的很好的话

2689

根本没有任何机会

2690

Recall讲的是原子化

2691

他是说谁用了就放到自己的主见里边儿

2692

他讲的原子状态

2693

一小块儿一小块儿的原子状态就自己用

2694

就搁到自己那里边儿

2695

因为早期的read的话

2696

是所有的状态库存在一块儿

2697

包括VS是吧

2698

整个项目的状态

2699

对整个项目的状态其实都是塞到一块儿的

2700

所以会导致这个一个没有用的状态

2701

但是和我这个主键也会发生关系

2702

因为她是挂到最多的父组件

2703

现在他讲的是什么呢

2704

就是谁用挂谁

2705

谁用就谁饮

2706

而且也不用去挂盆waiter了

2707

不用挂牌儿

2708

谁用谁引我就可以了

2709

为什么他这么做

2710

因为它的原理是顾客

2711

所以就是他肯定跟单

2712

能跟单用单个的组件箱

2713

完了呗

2714

它的原理是护士是吧

2715

就挂一层就可以了

2716

就是但是挂一层了

2717

你不用往这个上面最外层那个

2718

不用往这个read最外层挂这个状态

2719

就是你状态的话跟着组带走

2720

但是如果是reads的话

2721

你挂到最外层的一个这个对应的一个provider

2722

你得把所有的状态都放到这儿

2723

然后这个就是说你的所有的这里边儿的全部状态

2724

对吧

2725

这是全部的状态

2726

然后就像这种吗

2727

但是像这个record的话

2728

他只是做了一个标识

2729

20最外层做了一个标识

2730

然后你比如说你a组件需要用到a状态是8a点儿这个TSX用到这个a点7a.stated.ts他俩就是一对儿

2731

但这也没有什么任何的provider什么

2732

你用就行了

2733

那为什么大家想想他不再需要外层挂那个provider什么

2734

因为他用了hooks

2735

它的原理是hooks

2736

那这个hooks和这个状态组织肯定是息息相关的

2737

也就是说如果这个C则变了

2738

他强制触发一个hooks的变化

2739

然后让这个a.TS感知到

2740

然后这是它的原理

2741

这是它的原理

2742

它的这个原理过程

2743

他是强制触发了什么

2744

这边是强制触发了状态的变化

2745

那他的强制的处罚状态变化

2746

这个TSX肯定也跟着你走

2747

对不对

2748

那stayed都变了或state变了

2749

这个组件能不重新渲染吗

2750

所以这个时候一重新渲染

2751

这个组件的状态就跟着变了

2752

要不然他也得挂盆为主

2753

对吧

2754

盆地等

2755

那么恰恰是这种贝瑞达斯淘汰了N多年的鬼东西

2756

VIVO的VIVO X新版再一次的把他给拉上了征程

2757

大家可以看一下这个最什么

2758

最新版本VV的新版用的是什么

2759

Provider given jet

2760

就是最新的这个什么新版本

2761

他已经跟那个以前不一样了

2762

对吧

2763

没有S

2764

我们在阅读班里面已经讲过了

2765

形态就是增强S

2766

所以那个你没看呢

2767

我一定要回去看

2768

那个我们已经不会再讲了

2769

就是那个就是肯定不会

2770

你不看可不行那已经那个特别重要

2771

你知道吗

2772

就在这个中级实战班里边儿吧

2773

使用它不断增强VX啊

2774

然后这个东西的话

2775

实际上就是现在大家可以切一下这个他的踏歌

2776

她切她哥现在看一下4.0.2

2777

他那个代码呢

2778

也是很简单

2779

大家看一下S2这里边有一个十道看见了吗

2780

这个style呢

2781

他这个东西新的这个版本的变化

2782

没有在拗了

2783

没有再溜了

2784

他是用的什么

2785

他是用的这样的一个叫

2786

这看了吗

2787

这是不是还是install方式还是一样的

2788

Install provided in jac key

2789

然后呢

2790

这边就完事儿了

2791

对吧

2792

那providing that key啊

2793

然后呢

2794

这里边儿printing it是个什么东西呢

2795

大家可以从这里边儿看到

2796

这个in GT

2797

从这个story key上咱们去找一下

2798

这个叫做index JSP代码

2799

就这么简单

2800

他也就是说往全局住了一个叫做什么in jac key的叫style的这么个玩意儿

2801

当然新的微商的语法吧

2802

咱们都讲过了

2803

中医上面讲过了

2804

这能看不懂

2805

我得说你干哈呢

2806

你中级上面讲你干啥去了

2807

对不对

2808

然后这里边就是他想用的数据引战

2809

是不是住的就是provide就这么简单没了

2810

这是新的V3的原理

2811

VIVO X新的三的原理然后在这个里边呢

2812

那他数据是怎么想的

2813

怎么想的

2814

你们应该也知道了吧

2815

他是不是应该是怎么想的似的

2816

应该是这里

2817

你看这里边儿就知道吗

2818

对不对

2819

You stole是怎么来的呢

2820

就这么来的

2821

又从哪来的这里

2822

你看这里从从这个什么

2823

这不是一个used or嘛

2824

对不对

2825

这个USI的话

2826

实际上当我们去找的时候

2827

那你这边你看我们export export这样一个you stop you stole是不是在那批里边儿

2828

那怎么这USI的原理是什么

2829

有磁道的原理

2830

无非就是一个伤害

2831

无非就是这样一个

2832

你这样的JS就这么简单

2833

简单的这个垃圾都想哭

2834

这什么鬼玩意

2835

然后呢

2836

这边是一个啥

2837

这边是我们的一个就是现在状态管理吗

2838

那大家已经学过什么呢

2839

学过这样的一个状态管理了

2840

应该在这里边儿倍儿清楚这个什么

2841

这个状态管理应该是怎么做到的

2842

是不是啊

2843

应该怎么做到的

2844

是不是应该从新的这里

2845

他用了watch是不是

2846

你看她用了一个watch watch这东西肯定是一个什么呢

2847

观察这个数据是否是变化

2848

那什么东西能被被录取到

2849

什么东西能够被曝渠道

2850

是不是我们的那个

2851

反向的那个双向的一个新的一个代理

2852

对不对

2853

他用了一个新的一个代理

2854

那是一个private根尖的key

2855

这个stop key的一个these把整个的是不是给丢进去了

2856

是吧

2857

然后这边呢

2858

就是一个啥呀

2859

就是returns date点儿data

2860

那咱看一下这个returns date是个什么玩意

2861

是不是啊

2862

是不是在这里

2863

这里边儿也有一个replace的Thursday to是吧

2864

那么这是一个观察他的一个状态值

2865

咱们看一下这个Dis的state是个啥玩意

2866

这state是个什么鬼吧

2867

在这个上面呢

2868

并没有给我们任何体现

2869

咱们看到这个对应的state

2870

这里边就两个

2871

是不是啊

2872

这边是不就两个

2873

你再找

2874

是吧

2875

这不是两个

2876

我们再回到这个对应的

2877

你那JS里边儿吗

2878

我们想创建一个style

2879

还是从这个死对象这里有个create到是不是

2880

咱现在是想创建这个对象

2881

那从这个对应的词到对象再来找一下

2882

所以为什么说V的东西为什么老被人鄙视

2883

就是太low了是吧

2884

这creates到这里返回一个什么new style

2885

是不是啊

2886

News这个style哪来的呢

2887

是不是我们要返回一个这个啥呀

2888

News的

2889

也就是下边儿来的

2890

是不是news道这是对应的一个创建了一个新的一个状态

2891

那可也就是说克丽丝到的时候

2892

这嗑唠的时候

2893

是不是这个面对象这个这个东西来了

2894

你看

2895

然后是什么despite

2896

也没什么的

2897

快点call吧

2898

这是不是跟原来也没有任何的态度的区别

2899

然后再有一个叫做什么的

2900

十点儿什么点儿知识点毛就是什么肉差点sight绕来绕去的是不是这里绕来绕去的

2901

然后里面安装那个什么

2902

安装这些什么模块

2903

都在这里

2904

实际上当你找的时候

2905

他这个新的状态管理工具

2906

就是用了一个新的那个V3的一个语法构建

2907

这里边装了一个新的状态管理

2908

是不是现在正在管理

2909

然后这个什么私盗优图来看一下这个Stuart我们做了些什么

2910

直到you go

2911

在这里的时候你应该能找到了

2912

键啊

2913

就这么简单

2914

这就是V3的V版本的VX怎么实现的双数据绑定

2915

嘿嘿嘿

2916

这个

2917

嘿嘿

2918

嗯

2919

懂了吗

2920

这原理

2921

嘿嘿嘿

2922

你还能说些什么呢

2923

明白了吗

2924

这就是V13S的原理

2925

双向数据绑定这样

2926

然后颇为的做注入引战

2927

大家知道provided in jet吧

2928

V3的Pro干这样的事怎么用

2929

这个应该知道吧

2930

会不会

2931

慧慧

2932

你扣一不会扣个零

2933

哎哟

2934

我去你中级班儿

2935

你们看了吗

2936

铁子们呢

2937

中级包你们看没看

2938

看了吗

2939

没用过

2940

那讲中级班的时候你干啥去了呢

2941

哎哟

2942

我天

2943

那使用TS增强VX也不会

2944

是不是也没也不会

2945

是不是也也也不会那个使用TS增强那个

2946

这课咱说不说你们干啥去了呢

2947

就是这个J这个课

2948

咱说心里话

2949

这个

2950

这这干啥去了呢

2951

这VOVO2的新的API这一块儿

2952

这个这节课

2953

这节课

2954

这两节课听了吗

2955

敢说你工资不高

2956

一看这状态就是没听

2957

没听

2958

没看

2959

没练

2960

这咋整

2961

是不是没听没看没练

2962

是吧

2963

玩了带不动

2964

想给你阳痿

2965

靠

2966

不是VG战

2967

不是V技术站

2968

你觉得面试官会放过你吗

2969

小兄弟啊

2970

你觉得面试官会放过你吗

2971

能吗

2972

对吧

2973

你觉得他会放过你吗

2974

撇

2975

不能啊

2976

你觉得你你是我跟你讲过了

2977

你说你是right基础占的

2978

然后他就不考你

2979

比如落你越是right技术战月考

2980

你抠根刨底的问

2981

那你不能老老拿捏你的什么

2982

就是跟着你节奏走

2983

他就扣保底的问题

2984

是不是

2985

看了王了

2986

平时也没用

2987

你工资想高不高

2988

老师说

2989

那没有用的事儿

2990

你工资想高不高

2991

六个

2992

哼哼

2993

你工资想高完了就就就就自己

2994

反正就是借口就比较多

2995

看了也没用

2996

不是你现在这面是这种情况

2997

跟你讲的就是你你没有一个什么

2998

没有一个说你你啥的

2999

没有一个说你这个这边儿就会一个技术站

3000

那个就无所谓了

3001

是不是没有人说是这样的

3002

是这个技术站这边就这样

3003

然后那个就无所谓了

3004

你这个哪不可能这样的

3005

那肯定得基础

3006

所以像VS这种东西就是属于再简单不过的

3007

那你这个才有几行代码

3008

那你说老爷我连这个V1的private的Internet不知道

3009

你你铁定是你首先自己也没看

3010

然后再给你准备课也不看

3011

然后呢

3012

回头回放也不看

3013

然后也也自己也又不研究

3014

完了我面试我工资得高

3015

那干哈呢

3016

那为什么大馅饼砸你脑袋上呢

3017

咱咱说心里话挺大

3018

人就

3019

咋整

3020

讲不动讲不下去了

3021

还给讲讲讲一个啥呢

3022

讲那个

3023

Recall原理呢

3024

那这个record也没看过

3025

你咋整

3026

不是你至少说把这些东西你全得跟下来

3027

就没讲他讲了什么时代

3028

你得把它跟下来

3029

你不是很多人说老爷我实际上我不会不知道看什么呢

3030

都给你放这儿了

3031

完了你说你不看这咋整

3032

是不是我都把代码和克给你放这儿了

3033

你都不瞅一眼

3034

那我教呢

3035

那主要是你傲娇也行

3036

完你倒是能赶上

3037

也不会

3038

咋整上火

3039

是不是啊

3040

你这可以可以说他说你你自己有自己的学习套路

3041

自己的方法

3042

但是你倒是能把他跟上

3043

那现在呢

3044

是V3的这个Pro的赶紧干呢

3045

那还不会用呢

3046

那还说啥了

3047

你还号称自己号称自己是啥呢

3048

Vue技术栈的

3049

你看AV技术站

3050

你说你这两个东西不会

3051

咋整吧

3052

那汉书1X2这玩意儿多简单呢

3053

就是一个

3054

佛系佛系学习

3055

是啊

3056

这很多人不知道

3057

那你这这不知道

3058

你说你V3那小破原理你不是更更卡壳儿吗

3059

对不对

3060

不是更卡壳儿吗

3061

对不对

3062

你先你先想想

3063

嗯

3064

怎么整

3065

铁子们呢

3066

我现在三个技术站

3067

都有接触

3068

这倒没有啥

3069

这倒没有啥

3070

咱说心里话

3071

你可以接触都接触

3072

但是前提是什么呢

3073

前提是你一个为主

3074

你得有主技术的

3075

对吧

3076

确实咱们咱不可否认有那些牛逼的人把这个三大框架都用的贼精通

3077

但是大家你你如果要是说你在简历上写这几个框架都精通的话

3078

那面临你的就是面试题

3079

那面临你的就是面试官

3080

逮什么问什么

3081

那你所承受的压力不一样

3082

我不是说不让你去

3083

不是说不让你去

3084

那个跟那个面试的时候聊得这么开心

3085

这么专业

3086

你说我都会

3087

这没问题

3088

你都会好

3089

但是你要准备的面试题就读了

3090

源码就多了

3091

你专一一个

3092

你把他源码整的倍儿溜

3093

你面试的时候你有借口

3094

你说这几个

3095

我是这几个东西

3096

我是主什么

3097

我是主副主学习是不是剩下的呢

3098

肯定就是说项目中公司有项目让我用用

3099

你面试不好说

3100

要不加和好

3101

你写一堆了面的时候

3102

你说你说什么为主呢

3103

就这么多重大管理工具是不是

3104

这个状态管理工具的话

3105

其实你面试也要跟人家讲为什么去选他

3106

而且公司可能很可能就问你一句话

3107

说你为什么去选择这个状态管理工具

3108

你说别人也用

3109

这玩意儿

3110

不就显得你很你很

3111

你很那个嘛

3112

对不对

3113

显得你就很苍白

3114

是不是

3115

大家想想是不是

3116

是不是显得你这边就很苍白

3117

嗯

3118

那别人都用你也用

3119

然后就就会觉得说就是你得有有理有据

3120

我为什么去使用它

3121

对呀

3122

你说那你那那他肯定会问你

3123

那你leader让你选了

3124

你就选

3125

那你说那事

3126

那你说那咋地呢

3127

我力度选完了我还其实其实这种回答的话

3128

那铁就不会让面试官满意了

3129

对吧

3130

是不是铁就不会让面试官满意了

3131

那你说你这东西就是显得你就

3132

太不太不懂

3133

对吧

3134

就说你怎么形容呢

3135

对不对

3136

就显得你这个人好像就是四六不懂是吧

3137

嗯

3138

是啊

3139

是是你所以面试的时候

3140

这些东西你总得有一个面试官一个结果吧

3141

是不是你总得给他一个结果

3142

你说为什么去选择他

3143

现在市面上火的比较多的有什么

3144

那才能显出你这个跟别人不一样

3145

要不然别人这个会的

3146

你也用别人这个使得你也使那玩意儿

3147

就差点儿意思

3148

对不对

3149

差点意思

3150

到今天为止

3151

大家的这个项目的简历上技术站应该是这样的

3152

你自己

3153

上点儿心吗

3154

要不到时候面试的时候一脸懵逼

3155

对不对

3156

最好是write是不是你现在的

3157

你现在咱们的技术栈什么no de JS

3158

对不对

3159

加上什么

3160

CSX

3161

加上什么加上

3162

外派加上什么

3163

加上CDCD的

3164

CD平台加上什么

3165

加上我的项目的监控的SDK是不是

3166

然后呢

3167

再加上什么

3168

再加上你对性能的了解

3169

那不就在note里边儿嘛

3170

对吧

3171

性能指标的监控反面问你懂哪些性能指标再加上什么

3172

再加上这个状态管理工具

3173

是不是比如说你呢

3174

是不是这到现在为止的技术栈

3175

至少得应该这样了吧

3176

这是你在简历上给人体验这种项目的基础战

3177

谁的智商都这样了

3178

少一个好使吗

3179

二对吧

3180

然后还得什么

3181

自己开发过自己的小C2

3182

然后到这块儿的时候

3183

大家可以关注

3184

你可以自己完全就可以写什么

3185

这点local你就值钱了

3186

这玩意在茫茫的简历中人海中

3187

你不就跟别人不一样了吗

3188

对吧

3189

这咱们学到现在你的这个简历上应该就是体现出这玩意来了

3190

不能再写的那么水了

3191

用啊

3192

推啊

3193

你这玩意儿

3194

你这老给自己找借口

3195

刚才昨天白给你讲的微兔了

3196

白讲了

3197

那DV to还在这边加什么

3198

加测试工具

3199

祭司是完整的技术站

3200

是不完整的技术站

3201

看看看看

3202

然后如果你这边在什么点

3203

没的项目推

3204

咋就没的项目推呢

3205

这次他就不能推进去吗

3206

单侧在项目中就推

3207

那

3208

那怎么的

3209

非得将来找不着工作的时候玩了才着急

3210

那这次他为什么不能推呢

3211

不然这单侧怎么就推不动呢

3212

这推在公司

3213

在想啥呢

3214

还对不

3215

那单侧你怎么在公司就推不动呢

3216

Note怎么就推不动呢

3217

C re

3218

哪一个推不动

3219

为什么就推不动呢

3220

这啥玩意儿

3221

这耽误影响了你呢

3222

是不是这东西

3223

是不是得写上这一套

3224

然后你在做什么

3225

做单车的时候再做一些类似于MSW做mark的模拟的

3226

你这小项目一说不就OK了吗

3227

对不

3228

还没在公司呆过

3229

上学了吗

3230

上学更好

3231

哎哟

3232

我

3233

天呐

3234

你要上学太棒了

3235

上学太棒了

3236

上学

3237

你要是把这些东西八面我脸上

3238

开心地去做block

3239

做博客

3240

兄弟啊

3241

然后做网站呢

3242

校园呢

3243

不有不有记做开源那座block

3244

然后你供你学校不有那种什么校园的这种信息技术干嘛进去

3245

找关系

3246

B社不行

3247

你不是学校不有啥吗

3248

学校不有那个什么校园信息广播站吗

3249

然后进去之后给学校他们就做一些学校的网站

3250

一些社团的网站进去

3251

找路子

3252

对不对

3253

然后你面试的时候把这些东西往面试官脸上

3254

一家面试官都惊呆了

3255

那你那他那个

3256

那咱们同学呢

3257

S ST offer呢

3258

大三28个offer是怎么下来的

3259

那不就是把这些词霸道面馆脸上了吗

3260

面试官

3261

投吗

3262

比如说我第一个小孩儿这么小

3263

一个大三

3264

知道这么多

3265

你怎么知道的

3266

你说我参与我们校园信息化网站的建设

3267

我感兴趣

3268

然后再在我们这个戏内非常的优秀

3269

完了有一天就找到了我

3270

然后我在这里边儿孜孜不断的学习

3271

然后我把这些东西都践行了

3272

那不就还什么

3273

然后再整两个开源项目

3274

做个小blog

3275

三箭齐发完了

3276

到时候面试的时候头发小

3277

秋招算法一整明白儿

3278

稳稳的22K

3279

这学校稳稳的二十二天

3280

这多好的事儿

3281

不比别人强吗

3282

那你在公司更得推了

3283

对不对

3284

你公司

3285

你公司

3286

咱说心里话

3287

你这些东西没推你更说不过去了

3288

大三小孩儿多好

3289

这面儿关你把

3290

这东西

3291

哎呀

3292

很多社招人都不懂

3293

就咱说就这个东西

3294

就这小东西

3295

你往边关他觉得

3296

那你不错

3297

谁教你这么多

3298

你就说我自学的

3299

我喜欢

3300

我爱研究

3301

我在学校的校园公司的这个维护上

3302

这个东西

3303

整个整个学校的这个都是我维护的

3304

然后你找关系

3305

找找那个什么计算机系的

3306

没啥事

3307

请他喝点小酒

3308

给他送点儿啥玩意儿呢

3309

这学校不就这小社会吗

3310

对不对

3311

你找找关系进去之后

3312

活不就让你干了吗

3313

干完了就折腾

3314

实在不愿意伺候他

3315

你说老袁

3316

我不喜欢这种社会上的这种事儿

3317

上外边找实习

3318

我大二做一个实习

3319

玩儿得好几百块钱

3320

就不用给家里要生活费了

3321

更棒吗

3322

实习网上的活儿多着去了

3323

实习呀

3324

自己实习又要找找活儿

3325

那玩意儿不都是视角在什么

3326

路在脚下吗

3327

随随你

3328

对不对

3329

你这小体系一建立起来还那还怕什么

3330

将来到时候再蹭蹭个秋招蹭个校招

3331

完了把算法再准备准备无敌了

3332

嗨嗨嗨

3333

是不是啊

3334

你想有多少社会上的人

3335

社会上的同学都没有听说过这些东西

3336

你个大三的

3337

懂这么多面试官

3338

他不他不喜欢

3339

你还喜欢谁呢

3340

那咱们呢

3341

咱们同学呢

3342

跟面试官ST offer怎么拿来的

3343

那不就是靠这些词呼你脸上吗

3344

老子就大二我都懂

3345

你随便聊

3346

对不对

3347

我都用过

3348

你做过什么

3349

那你说我是个学生

3350

你能要求我做什么

3351

不就完事了嘛

3352

对吧

3353

下周的课也是周一到这步地落

3354

这周我整懵啦

3355

周一到周日整懵

3356

这突然来了一句

3357

我这边怎么回

3358

那这周不整废了吗

3359

那啥

3360

周一到周日悠着上吧

3361

轻轻轻轻轻的悠着点儿上那被啥了

3362

被整这出了

3363

到时候就没法弄吧

3364

悠着点儿吧

3365

嗯

3366

那接着倒着吧

3367

铁子们

3368

完了一发群里完了

3369

把这个源码的东西

3370

好好看一看

3371

好好看一看

3372

一定不能再傻了是吧

3373

一定不能再再说再那个什么再再

3374

在哪个地方说这个都不会

3375

那个不会了

3376

你说你排位的不会

3377

那个不会说不过去

3378

是吧

3379

晚安吧

3380

摸摸哒

3381

拜拜

3382

嗯

