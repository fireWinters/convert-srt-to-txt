1

喂喂喂

2

同学们听得见吗

3

喂

4

喂

5

听得见扣个一好吧

6

好嘞

7

我们8.05开始好吧

8

8.05开始

9

来给大家唱首歌

10

梦琪

11

到天边

12

心酸

13

三点把

14

逝世

15

感谢信

16

你还上过我的课吗

17

听过我的公开课

18

一起

19

浪

20

三点怕

21

一冷

22

一冷男

23

你看嘛

24

这是什么插件儿

25

你看名称

26

我给你华在这儿

27

你自己看名称

28

还有什么

29

还有这个

30

仓8.05开始

31

你看

32

这个是做仓库的时候用的

33

这个是一起写代码的时候

34

这个是那个

35

那个写的时候写的用的

36

对对对赚差价

37

我们8.05开始

38

我刷了

39

这声音这么熟悉

40

我刷的很少

41

我但有的时候也会看看算法这个东西

42

你首先你得你得知道

43

对

44

算法这个东西你得系统的学习

45

你光刷题

46

刷题是一种输出

47

我觉得刷题是一种对于你已经学到的东西是一种输出

48

但是你更多的我觉得是要系统的学习

49

这个老师讲过之前渲染进程的公开课吧

50

我是声音特别好听是吧

51

这么熟悉啦

52

磁性也还行也还行

53

也还行

54

勉强

55

南方口音南方

56

南方哪位老师

57

楠楠

58

今天

59

今天这位老师

60

对

61

今天是一位很帅气的老师

62

很帅气的老师

63

至少比比你们应该见过老袁是吧

64

你们见过老袁是吧

65

有同学

66

有多少同学知道老袁长什么样子

67

见过是吧

68

那我比老元帅就行

69

非常刺激

70

那我肯定比他帅

71

我开视频你又不打赏

72

你不刷飞机刷火箭

73

不不不

74

十元十元十元十元十元

75

有个朋友

76

有个朋友可以

77

同学你好

78

同学你好

79

这个朋友怕死

80

你

81

喂

82

你好

83

最菜

84

那没有那没有

85

那没有那没有

86

冬天都要穿几层

87

我夏天都感觉冷

88

你懂懂

89

那种受嘛

90

就是那种瘦

91

咳

92

同学们

93

大家好

94

我先说一下我们这几节课

95

的一个一个一个交互的方式

96

应该前面的几位老师也跟大家说过

97

我希望在听课期间

98

因为V这个是你们第一结缘马克

99

我希望你们在听课期间可以给我反馈

100

怎么反馈呢

101

就是你听懂啦

102

你就扣个一

103

或者说我问你

104

你就扣个一对

105

你没听懂

106

或者说你不明白

107

你就扣个零

108

或者说你那儿抠不动

109

你就送个花花

110

你那边应该可以送花花

111

知道吧

112

没听懂你就扣个零

113

或者送个花花

114

就代表我能够知道你到底有什么反馈

115

懂这个样子

116

我们可以持续互动

117

我也知道你到底学的怎么样

118

好不好

119

咱们好不好来试一下好不好

120

对对对对对不好

121

这还有不好的

122

我给大家做个自我介绍

123

我之前一直在腾讯和机峰

124

然后做一些做图形学

125

然后做工程化

126

还做一些基础架构的一些东西

127

然后呢

128

我给大家做一个

129

我之前就是看一个我之前做过的项目

130

应该听过同学的课的同学应该是看过

131

给大家做个自我介绍

132

这是我们之前做的一些图形学上的一些

133

就是教育工具上的一些东西

134

就是它是一个三角形

135

就是你可以去拖拽缩放这种东西

136

然后可以联合

137

但是这种东西相对来说其实是比较简单一点的

138

然后比如说我们这种还可以去做一些

139

比如说这种

140

然后去做一些缩放拖拽

141

稍微这个这个这个比较简单一点

142

然后还可以做一些切割这种

143

这是一个

144

然后当然这些撤销回退就不用说了

145

然后还有就是我们比如说之前做了一些数学一些一些其他的功能

146

比如说给他看这个东西

147

就是我们做过的其他一些功能

148

比如说像这种这种内容

149

这种东西就是自己做一套渲染引擎

150

去渲染文本图片排版所有东西

151

然后包括截图这些所有所有的内容

152

然后都是这么一个过程截图这儿稍微有一点卡

153

然后这是我们之前做的一所有的一之前做的一些图形学上面做了一些简单的功能吧

154

就是它的一些白板的一些东西

155

所以说

156

基本上就是这样给大家做一个初步的自我介绍

157

然后听我的对康老师画的

158

以前听我讲过很多公开课

159

我以前讲我讲过很多公开课

160

前锋

161

机锋不是铅封

162

然后我们继续

163

同学们做完自我介绍之后呢

164

我们现在就开始正式上课啦

165

同学们提起精神

166

提起精神

167

我们这节课呢

168

主要讲什么呢

169

主要讲这三节课

170

主要讲VV呢

171

主要讲什么呢

172

讲源码

173

讲源码我们很多其实现在存在着一个很大的问题

174

前端存在一个很大的问题

175

什么问题呢

176

就是说你们来了精英班

177

你们一定会明白一个问题

178

就是现在很多人都在做前端

179

但是很多人做前端呢

180

他不能叫做前端工程师

181

他叫什么

182

叫做we工程师

183

是不叫V工程师

184

他不会写JS

185

他也不会写什么

186

很多东西他就会有一

187

他就可以写页面就可以做东西

188

对

189

所以说这个东西

190

怎么说呢

191

这个东西

192

你可以把它理解为是一种很基础的东西

193

但是你也必须要明白他是一个什么

194

他是一个就是大众化的东西

195

那么既然是大众化的东西

196

我们首先要区别于别人的一点

197

第一点要区别于别人的一点

198

就是别人知道怎么用

199

你知道

200

你至少得知道它是怎么出来的

201

他背后至少是什么样子

202

是不是背后它的实现到底是什么样子

203

这些东西你至少要去明白

204

这才是你们跟别人区别的第一点

205

当然这只是第一点

206

所以说我们一直在聊框架

207

框架有同学用过rock吗

208

有多少同学用过rock

209

我看看

210

用过的扣一都用过是吧

211

那那就好那就好那就好那就好

212

那就也没用过

213

没用过的也没事儿也没事儿

214

你下来看一下

215

后边也会有rap的源码

216

那无所谓无所谓

217

我们知道我们平时同学们

218

你们平时是不是也用过really

219

也用过react

220

这两个框架

221

这两个框架现在是市面上比较大众化的框架

222

那么像这种框架我们平时在学习的时候

223

你说为什么有will you wrecked呢

224

它们之间的区别是什么

225

是不是之间有什么区别

226

他们之间最后的一些一些东西

227

就是往下走的一些东西

228

背后的思想是什么

229

这个其实从很多层面都可以去聊的

230

知道吧

231

很多很久之前有一道面试题

232

就是说问你really和rap的区别

233

问你VE he right的区别

234

这种问题你应该怎么去回答

235

同学们一个框架

236

你应该怎么去回答

237

应该从几个方面边意思

238

运行死

239

你这么回答是不对的

240

只这么回答不对的

241

运行时是不是

242

然后还有什么开发时

243

是不是开发的时候

244

从这几个过程

245

对从这几个这个东西对他的

246

但是你

247

蹲坑

248

对

249

但是这个东西你有一个维度

250

什么维度呢

251

他都是在框架上的维度

252

既然是框架

253

其实你也可以把它归成一类

254

去做一个对比

255

所以说在这几个方面上你可以做很多不同的区别

256

但是这几个区别我们一会儿再聊

257

所以说这个问题

258

我们先把这个问题留在这儿

259

等我们把今天这一刻

260

或者说后边儿这几节课学完了之后

261

同学们再聊一下

262

当然我一会儿也给大家发一个粗浅的答案

263

就是给大家说一下这个粗浅的答案

264

然后你们再来根据我们这个答案之上

265

然后再去做一些维度的延伸

266

好吧

267

所以我们这节课主要学什么呢

268

学的就是V

269

学的就是V

270

那么药学VE意向学员马这种东西

271

你要学他的几个层面

272

你如果要学一个东西的源码同门

273

你首先得知道它的源码架构是吧

274

我们使用第一步使用就不用说了

275

是吧

276

使用这个层面我们就不用说了

277

他怎么使用

278

基于使用来反推什么

279

通过我们平时的使用来反推他功能上面的一个什么

280

那反推它功能是什么

281

功能是什么

282

功能上的一些实现是吧

283

功能上的一些实现

284

所以我们不能够只看什么

285

不能够只看

286

他的一个一个一个一个功能

287

或者说只看它的一个使用层面

288

或者说只看原理层面

289

它们是相辅相成的

290

是不是是相辅相成的一个过程

291

所以说我们要从使用层面来推功能

292

然后使用知道了

293

使用知道了

294

然后去做什么在看什么

295

在看什么同学们使用知道在看什么

296

在看什么

297

再来看原理是吧

298

再来看原理是原理知道之后

299

从原理应该说使用再来看原理

300

原理知道之后再来看什么

301

再来看对比是吧

302

对比或者说实现是吧

303

实现

304

这个原理是在什么维度上的原理

305

思维就是他的思想的原理

306

思想的原理是思想的原理

307

所以说我们从不同的层面来看来

308

学习才是一个这么样的过程

309

那么第一步你如果要学习一个框架的源码

310

就应该知道他的什么

311

知道了什么

312

他的思想是什么

313

双向数据绑定是吧

314

这个双向双向的过程是什么双向的

315

不是双向的过程是什么双向的

316

那他怎么又是怎么来的

317

怎么对这个这个你很很好很好理解MVM

318

那怎么到底是什么样的

319

我们一会儿给大家稍微聊一下有的同学不知道MVM到底是一个什么双向的过程

320

对

321

对对对

322

所以说我们在这个维度

323

你首先要知道双向他是什么

324

双向的它解决了什么问题

325

然后在这个维度之上

326

我们再来看什么基础的目录结构是吧

327

目录结构就是盖就是它的一个什么源码的什么

328

大致的一个实现是吧

329

所以说我们现在看大致的目录结构

330

微源码

331

这是我下载的V2的源码

332

我们微源码一节课一节

333

一节半奖

334

V21结伴讲V3

335

所以我们都会讲

336

都会讲

337

因为V3是在V2之上做得更多的眼睛

338

你如果把V2搞明白了

339

V3其实很多东西都明白了

340

我们在V3的时候会对比着V2学习

341

所以在这个层面之上

342

它的目录结构

343

我们说了目录结构

344

你看这里边儿

345

这里边儿

346

这里边儿所有的东西最核心

347

同学你们学了这么多东西

348

最核心的东西

349

你说这么一看过来

350

基本上能知道是什么结构吧

351

是吧

352

这东西跑分了是吧

353

性能测试的这个是打出来的disc是

354

但是disc你看我们这里边有很多种不同的版本是吧

355

有什么让time come on

356

有什么让time yes e SM是吧

357

还有直接就是runtime

358

然后又有这种保尔SEM是吧

359

然后有什么这种那种come on

360

就是没有加入M的

361

所以说这就有两个区别

362

就是不同的规范

363

是bodies打出来的第一个diss打出来的代码是吧

364

我们就从这儿就要就要

365

先给你说

366

我要给你说要跟你说

367

说我们这儿有两个区别

368

第一个什么

369

第一个是没有什么

370

没有没有加什么这个runtime这个这个这个东西的

371

第二个什么

372

只加了让他加了让他们这个东西的是吧

373

那这两个东西

374

其他的一些什么就是规范的区别了

375

D

376

其他的这个com JS这个不用说了吧

377

这个SM就是S6的

378

这不用说了吧

379

这个是什么umd是吧

380

是吧

381

这个这个规范

382

这个不用说了是吧

383

所以说这就是三种规范

384

他不同的一些东西

385

那么这几种还有一种就是没有加入M的he加run time有什么区别呢

386

这就是一没有加入M的是runtime

387

Runtime加上

388

Come player

389

有runtime的

390

只有runtime的就是compare

391

就只有runtime

392

他就没有compare compare这个东西是什么

393

叫做编译

394

同学们是不是compare叫做编译

395

那么这个ROM time叫什么

396

运行是吧

397

是吧

398

运行时是不是运行时

399

一个是编一个市运行时

400

所以说这就很有意思了

401

运行时

402

这就很有意思了

403

什么叫运行时

404

你们要知道什么叫运行时

405

我们就回到

406

我们先不说V的运行时

407

我们就说JS的运行时

408

什么叫做运行时

409

同学们

410

什么叫做运行时

411

运行时如果你们学过计算机

412

运行时反应到一个计算机的维度是什么

413

运行的时候对运行的时候

414

晋城晋城它是运行的环境嘛

415

是吧

416

它保存它的运行的状态是什么

417

内存是8G内存是不是内存

418

是不是内存

419

内存里面的数据是吧

420

是啊

421

对啊

422

内存里面的数据

423

保存了我们的运行运行的过程

424

就比如说你的JS

425

你的JS

426

你如果你的JS执行了之后留了一个什么

427

同学们

428

你的JS执行了之后留了一个什么

429

溜了一个object是吧

430

六个object

431

那么这个object是不是保存在什么呢

432

保存在内存里边儿的

433

那这个时候就为就反映了一个什么反应了

434

这个object就反应了什么

435

反应了我们的JS当前的什么一个运行状态是吧

436

是不是运行状态

437

是不是就是这个当前内存里边儿咋保存的这份数据表示了我JS的运行状态

438

包括他的站这些东西

439

它都是一个数据结构

440

是吧

441

那所以说对于我们的这个where这个runtime的运行是什么

442

反应V的状态是什么

443

反应的运行状态有什么

444

V1的运行状态有什么懂

445

什么

446

虚拟到没

447

是不是虚拟道面微露的算不算虚拟组织

448

同学们知道什么需要虚拟动物吗

449

都知道吧

450

是吧

451

替我算算

452

是啊

453

还有什么我保存的数据

454

我上双向数据绑定

455

我需要监听数据

456

是不是我监听监听之后的数据是不是监听的数据

457

是不是我双向数据绑定

458

我把它处理成了数据是吧

459

我的数据要处理成什么

460

可可监听的数据是吧

461

是不是监听的数据

462

还有什么我所有的什么我所有的每色的对各种没事的

463

什么没事儿

464

没没事的这些东西是吧

465

怎么还有我们的component

466

是不是

467

我但我这些写错了

468

你们就你们自己明白就行component component这东西是吧

469

什么APP实力是吧

470

这东西都是一个什么当前的一个状态是吧

471

是不是

472

所以说我说了写错了

473

我不你们你们明白就行好吧

474

所以这些东西都是一个什么

475

他的反应的一个运行状态

476

这些东西什么叫运行状态

477

都是需要什么

478

都是需要我的内存去保存的

479

是吧

480

内存去保存的一个过程

481

我的JS的运行

482

我的ae在运行的时候

483

我可以随时去访问的这些东西是不是

484

这是我内存运行的状态

485

那么什么是compare

486

懂没

487

什么是compare

488

我我问大家

489

我在这儿六一个六一个V61个V1之后

490

溜了一个V之后

491

我在这里边儿

492

这里边儿写的所有东西是不是它它它运行出来之后

493

它就是一个什么运行时的状态是吧

494

那什么是卡梅尔

495

那么

496

什么是compare compare

497

这是compare是什么

498

这就是我们韵诗

499

所以说你看我们这里边儿这个runtime

500

就只有这里边儿这些东西

501

他就没有compare compare又是什么东西

502

编译词

503

编译思编意思是什么意思同学们

504

编译是什么东西

505

我问你

506

你的VIP的代码是怎么写的

507

你的唯一的代码是不是这么写的

508

是不是写的这么写的

509

是不是这么写的

510

是不是写的这个样子

511

或者说你在在写的

512

你们平时工程里边又怎么写的

513

就写的什么底儿的意思吧

514

点儿意思

515

然后里边儿什么template是吧

516

是不是

517

怎么是不对的

518

对

519

是template template

520

然后里边儿有什么又是我们什么script是吧

521

是啊

522

Script是不是就是我们的什么script

523

然后又是什么又是我们的style是吧

524

是不是

525

他是这么来的是不是

526

我看到了

527

我看到了

528

他是这么来的是吧

529

那么这么来的这就很有意思了

530

什么意思呢

531

同学们

532

这儿这个东西

533

我这个代码是直接可以在我这个

534

我写的这些代码是直接可以在浏览器里面运行吗

535

可以吗

536

浏览器认识这个东西吗

537

认识这个东西吗

538

认识吗

539

认识你这个will very temp是个什么东西吗

540

是不是都不知道

541

对对

542

编译

543

他得把它编译成什么样

544

CS这个东西它得把它拆分成什么给DOS待拆到style里面去是吧

545

这个东西浏览器只认识什么

546

浏览器只认识HTML

547

是不是只认识HTML

548

还有什么CS是吧

549

还有什么JS

550

那么JS谁来做JS

551

什么JS这块儿是什么

552

这块就是我们的CS是吧

553

他拆到CS里面

554

让CS来处理

555

这里面可能有一些高级的什么C

556

萨S

557

S这些东西

558

这些东西呢

559

是通过什么APEC打包来处理是吧

560

这个不用说

561

那么这里面呢

562

也是我们平时写的就正常的JS是吧

563

正常的JS可能就是你有一些什么S6的兼容性问题是吧

564

那这些东西也通过什么loader背包来打包

565

那这个东西怎么办

566

这个东西怎么办

567

这个东西它认识吗

568

浏览器认识吗

569

只认识你这个标签儿

570

但是你这些各种什么指令

571

威刚if

572

We杠夫

573

这些东西他认识吗

574

是不是就不认识了

575

他就需要怎么样

576

需要打包

577

打包什么

578

打包成JS

579

编译程JS

580

所以说这个东西把template编译程JS的过程叫做编译时

581

是不是把template编译程JS的过程叫做编译词这一步明白

582

明白吧

583

那现在有个问题

584

我们平时开发的时候是不是都用的外派课

585

同学们开发的时候

586

包括你集成的那个叫你集成的各种什么VCVE集成的工程化是吧

587

是不是

588

工程化它都是这些东西

589

那么他都是在哪儿打包的

590

都比如说很简单的例子

591

很简单一个过程

592

这是我们平时开发写的代码

593

是开发写代码会在你上线之前

594

是不是就会通过工程化把它打包成什么

595

或者说你的Jack

596

或者说你的发布工具

597

就是把它打包什么

598

打包成JS是吧

599

这些东西就打包成JS是吧

600

那么打包成JS之后

601

然后发不了什么

602

你的静态资源里边儿是吧

603

静态资源服务器

604

或者说你的打卡你的容器

605

或者说你的机器里面是不是

606

然后然后去做什么

607

然后我浏览器去访问的时候

608

LA这个资源啦

609

这个资源然后拉回来就已经是什么

610

就是JS了

611

就是我的JS在上线之前

612

是不是我的template在上线之前

613

这一块儿template在上线之前是不是就已经被打包好了

614

打包惩戒是吧

615

是不是是不是这块明白吗

616

是吧

617

所以说这块儿有一个问题是什么问题

618

就是说有一个编译

619

编译又分为几种编译

620

编译代码又分为几种编译

621

第一种是静态编译

622

其实也就是什么离线编译

623

你可以分分为离线编译

624

有什么在线编译

625

蠡县变异和在线变异

626

什么叫做离线变异

627

离下面就是我刚刚给大家说的

628

在上线之前

629

上线之前变异

630

是不是上线之前变异

631

那我现在问大家

632

那我这个东西我会变异吗

633

你看我这这头代码

634

我直接引的AGS

635

我直接拿到这儿来

636

如果这个东西会会提前离线编译吗

637

我提前会把这个H铁明儿再编一下吗

638

会吗

639

会吗

640

我这个要运行

641

会吗

642

是不会啦

643

是不是

644

你这个n PM run build就是离线编译

645

一个n PM run build就是在离线编译

646

N PM run build就是离线编译

647

在线编译我现在还没说

648

在线建议我现在还没说MCL的

649

就是离线编译

650

知道吧

651

打包he MP EL的就是离线变异

652

你打包你在线上不也是m MP m one Bill的吗

653

那什么时候是在线编译

654

同学们你看我现在这个东西是不是直接这么写的

655

直接写的这个模板是不是

656

你看我这这是不是直接写的这个模板是不是

657

是不是直接写这个模板

658

我这个模板没有经过变异

659

没有经过变异让我起一个http server

660

我直接起一个HTTP搜

661

看同学们是不是可以运行是不是

662

你看我直接我直接你看我这儿没有没有编译

663

我直接起了个server

664

直接访问这个东西

665

这个页面是没有经过编译过那么没没有编译过这个页面

666

怎么还是可以展示了

667

它也没有也没有就是说什么什么其他的那种指令这些东西呢

668

这就是我的在线变异

669

什么叫在线变异

670

就是在我的运行的时候

671

在线就是离线

672

这个离线和在线这个概念在什么时候是什么概念

673

就是真正在浏览器运行的时候

674

这个离线盒盖在线这个概念是在浏览器运行这个概念

675

浏览器运行

676

离线和在线的概念是在在于离浏览器运行浏览器你正在运行的过程

677

这个过程叫什么

678

这在线的过程是吧

679

我正在运行就是在线

680

浏览器正在运行的过程叫做在线

681

你在浏览器运行之前

682

全部就把它打包好

683

然后发给浏览器

684

这个过程要离线

685

懂不懂听明白

686

同学们明白

687

这个你明白吧

688

那所以说现在这个在线编译

689

对工程化就是就是离线编译

690

对那什么在线

691

在线是什么情况

692

就是我这种情况就在线

693

什么意思

694

你看我这种情况

695

我这个代码是直接拿过来了是不是

696

那他里边儿什么时候变异的

697

就是我运行的时候

698

我浏览器运行的时候

699

同学们你看我在这儿

700

说实话

701

我浏览器运行的时候

702

它会在我这儿去拿到一些个什么

703

你看他会拿到我这个LAPP

704

他会拿到我这个NAPP里面的东西

705

真正运行的时候

706

在运行在浏览器里边的时候

707

他才会去拿到我这个L里边儿

708

我这个VL里边这个APP

709

然后拿到这里边这个东西

710

他会判断我这里边是否有字符串

711

如果你在里边儿

712

当然这儿要判断没有render这个东西

713

在线离线面积在里边儿

714

它会把这个render给给给给插进来

715

知道吧

716

蠡县面积它会把这个render插进来

717

现在这个东西它没有render

718

所以说他会在线变异

719

所以说他这儿需要做一个什么

720

需要去提前在运行的时候把这些东西编译了

721

运行的时候把这些东西变异了

722

是怎么变的

723

就是在什么

724

在线编译和离线编译都是用的虚拟动

725

知道吧

726

对

727

你们说的这个对在线编译和离线遍地都是

728

都是用的虚拟号码

729

都是虚拟

730

都是微微弱的

731

先说同学们

732

我给大家说一下这个东西最后都会编译成什么样子

733

我们先说他不管离线编译和在线编译

734

他都会变异成什么样子

735

他们都会变成什么样子

736

都会变成这个样子

737

都会变成这个样子

738

WE2都会变成这个样子

739

知道吧

740

所有代码都会变成这个样子

741

看到吗

742

都变成这种样子

743

不管是离线变异还是在还是在现变异

744

都会变成这个样子

745

这个东西一只要一构建这个render函数

746

一执行它就会生成微漏的

747

会生成微露的这个下划线杠C就是生成VIVO的API

748

是不是这个下划线杠C就是生成VIVO的API

749

大家看一下吧

750

你看见了吗

751

这个下方一杠C

752

同学们看见了吗

753

这就是一个什么create element就是去创建VIVO的这个APK的吗

754

现在明白吗

755

所有不管是离线编译和在线编译

756

他们的产物是一样的

757

他们的产物都是这个东西

758

都是这种

759

都是这种东西

760

都是这种东西

761

产物都是这种东西

762

然后这个产物只要一运行这个render

763

只要一运行

764

都会生成什么render运行

765

都会生成什么

766

都会生成什么

767

微露的都会生成微漏的

768

都是都是虚拟动

769

知道吧

770

都是虚拟动

771

所以说这一步这一步这一步

772

这里边儿为什么用位置

773

还有这个状态

774

你先不用管不用管

775

都是编译成这个东西

776

然后这个东西都是变成这个函数

777

不是直接编译程序

778

你知道吗

779

都是变异成这个函数

780

这个函数在运行的时候生成虚拟动明白吗

781

明白吗

782

这个函数运行的时候

783

那这个什么

784

这个函数什么时候运行

785

他现在不会运行

786

他什么时候运行

787

真正在你你初始化了之后

788

他在里边才运行

789

知道吧

790

对被调用的时候才运行

791

那什么时候被调用

792

在你又没有你实力的时候在被调用

793

所以说我们在这儿一步

794

如果你在这儿加一个render函数

795

它也是认的

796

知道吧

797

你在这儿加一个render函数

798

它也是认的

799

懂不懂也是认的

800

在这儿加一个render函数

801

这你返回一个微漏的

802

下划线杠C

803

但是这儿要要你这儿要去要去拿到这些这些方法

804

要拿到这些各种这些东西方法在这里面他也是认的

805

懂不懂也是认的

806

那么他如果认证这些东西就它就不会不会要了

807

就直接把这里边的所有东西全部给删除了

808

懂不懂他只需要全局

809

是不是只需要一个render

810

是不是啊

811

全局是不是只需要一个人点

812

明白吗

813

就是你只需要一个页面

814

你全局指挥展示一样的一个东西

815

你不可能这儿也有

816

这儿也有

817

那我选择哪个

818

所以说你这儿如果有了它这儿就不会要了

819

一会给大家看源码

820

所以说这个render

821

但是你这儿如果没有这个render

822

他就会去接触什么

823

如果是离线编译

824

如果是离线编译

825

这个代码是不是已经编译成JS

826

你看离线编译这坨代码是不是已经变成JS了

827

他直接把这坨代码拿来拼到你那里边儿去就行了

828

知道吧

829

如果是离线编译

830

它直接把这条代码拿过来

831

拼到你这个这个下划线刚扔上面就行了

832

懂不懂

833

如果是离线的

834

它就这么这么玩儿

835

大家看

836

这个是

837

第一位

838

Server给大家看这个

839

初始化的时候

840

初始化

841

说实话看见了吗

842

看见了吗

843

如果是离线面议

844

他直接会把你这个compare

845

你看这是我们compare出来的那个render

846

这是complete compare compare compare出来一个render

847

然后拿直接拿到你这个compare出来这个render这个代码看到吗

848

给大家看一下我们

849

打包出来的这个东西吧

850

先给大家看一下

851

我们我先把这个先出钱过

852

然后我们再回过头来

853

不然你这儿一脸懵逼

854

你看我们这儿挂的就是一个什么

855

挂的就是你变异之后的这个render

856

这个变异之后的这个render就在哪儿打哪儿编译出来的

857

就在这边一出来看见吗

858

这儿有问的函数

859

就编译出来的这个

860

然后直接拿到这儿来一拼接

861

如果这儿没有

862

如果这儿没有

863

这是有的情况下

864

同学们这是你有编译的

865

这个

866

有编译的这个东西

867

如果没有的情况

868

没有的情况他会就会走什么

869

就会走在线编译

870

知不知道没有的情况就会走在线编译

871

什么叫在线编译

872

什么叫在线编译

873

就是说我在浏览器运行的时候

874

通过JS边运行边去编译什么

875

明白了吗

876

就是我在正在我正在运行

877

按理说

878

按理说我如果离线编译

879

已经编译好了render

880

我直接拿过来执行就行了

881

但是我现在没有这个render

882

是啊

883

我现在是不是没有这个render

884

我只有这坨代码

885

那怎么办

886

我需要先把它编译成render

887

是不是需要先把它编译成render

888

是不是编译成这个东西

889

在JS浏览器这先把它编译成这个东西

890

没有啊

891

所以说这一步它需要编译的这个东西

892

就是一个什么在线编译

893

在线变异

894

那么在线变异就需要一个什么

895

你怎么去编译

896

怎么有一个编译的过程吗

897

编译这个东西你就要分析代码吗

898

是不是编译的过程

899

你就分析代码是吧

900

分析代码

901

分析代码

902

然后重新

903

分析代码

904

然后去做什么就是什么

905

生成代码是吧

906

生成render

907

生成render代码是吧是吧

908

分析代码生成的代码

909

是吧

910

会判断

911

会判断这个一会儿给大家你跟你说

912

所以你看这里边儿有深层的代码是吧

913

那么生成的代码这个过程就会有一个什么过程

914

他就需要去拿到我们的什么

915

需要拿到我们的这个

916

在线编译的过程是吧

917

那这个过程就有一个什么

918

就有一个编译库

919

就是怎么去分析

920

什么东西来分析代码

921

什么东西来生成render代码

922

这个东西就要编译编译库

923

要编一库知道吧

924

用JS用JS

925

一会儿跟你说

926

一会儿跟你说

927

你不要着急

928

你跟着我的思路来

929

你们学代码永远是深度的

930

规就是这样这样这样这样这样这样

931

我们学代码应我们学

932

学知识应该是什么

933

学知识不应该是深度的

934

同学们学知识

935

就比如说这是我的一个知识点

936

你们学知识可能是这个知识点本来是一个网状的知道吧

937

知识点可能试一试是一个很深的知识

938

这个东西是不是就是一个网站

939

是不是知识这个东西是不是就是网状

940

是不是他就是一个网状

941

很很大的一个网是不是

942

是吧

943

这个东西是不是就是很大的一个网

944

那你们学的时候

945

就是一个什么过程

946

你们学的时候就是一个直接这么本来就只知道这个

947

你们直接就这么来了

948

直接这么这么来了

949

学知识应该这么来吗

950

不应该这么来

951

应该先把这儿学了

952

然后再再学这一层

953

这一层学了之后再学这一层

954

这一层学了之后再学这一层

955

这个样子

956

你自然也能把这些往全部就给拉通啦

957

明白

958

而且还有一个过程

959

就是这些东西你可能只学这一层

960

你就可能自己思考出来这一层

961

然后再去学一层

962

你就可能学在下一层

963

知道吧这个

964

不一样

965

所以说这一步

966

所以这一步

967

这一步我们知道了什么

968

知道什么

969

知道了我们的一个a

970

需要把我们的这个template模板编辑什么GS

971

他在线上才能运行是吧

972

是吧

973

他在线上才能运行

974

因为山上没有这个点儿是吧

975

那我现在就需要有一个东西来生成这个东西

976

那怎么松懈

977

就是编译库

978

编译库

979

那这个编译库

980

同学们

981

编译库这个东西在线上编译就知道

982

在线变异明白吗

983

就叫变异时

984

明白这个东西了吗

985

你看我们如果在离线编译

986

我们如果是离线

987

就是我们提前编译好了这些东西

988

那我就我在运行的时候还需要这个东西吗

989

还需要再去再去编译码

990

是不是就不需要啦

991

是不是

992

是不是如果我提前编译好了

993

是不是就不需要再再去在线变异了

994

是不是我不需要在线编译了

995

我还需要这个编译编译的这一份代码

996

我的微那个compare v

997

我的V1这个这个包里边儿还需要保存这份代码

998

打包的时候还需要打包这份代码

999

是不是就不需要了

1000

但是如果

1001

但是如果如果我们这块儿

1002

如果我们这块儿这里边儿

1003

你的代码没有这个render

1004

没有这个render

1005

那我们是不是就需要把这个render里边儿这个东西打包打到这里边来

1006

把这个compiler里边儿打到这边来

1007

他是需要去线上变异是不是

1008

对

1009

是不是这种情况

1010

明白了吗

1011

但是这块儿可能就会有的同学有问题

1012

什么问题

1013

就是你用了这个

1014

你用了这个版本

1015

但是用了这个版本呢

1016

你又没有做离线变异

1017

知道吧

1018

你又没有做离线变异

1019

明白莫你用了这个版本又没有做离线变异

1020

有了这个版本还搞了一个在线一

1021

但是这个版本里面有没有在线的扣

1022

那就会报错

1023

很多人说我们不会这么用

1024

那举个很简单的例子

1025

你们用VR的时候

1026

是不是这儿有一个template这个属性

1027

是不是

1028

因为这是一个template这个属性

1029

是啊

1030

是不是有他们的这个属性

1031

这个属性这儿是不是可以用个字符串

1032

是的

1033

咱们是不是可以字符串

1034

我这狗狗

1035

灰杠衣服

1036

这儿搞一个name是

1037

我是不是可以用

1038

是不是那这种东西我问你

1039

这个东西我会在线边

1040

我会先离线变异吗

1041

这个东西我在离线编译的时候

1042

我知道这我知道你这个V这里边儿这一套代码

1043

你这个对象里边儿这一坨代码

1044

这个东西是什么

1045

我知道吗

1046

我知道吗

1047

我是不知道

1048

所以说这个东西需要在线建议知道吧

1049

这个东西就需要在线变异了

1050

懂了吧

1051

那么现在再来看在线编译

1052

既然我们说到这块儿

1053

我们要说编译这块的东西了

1054

主要这个东西就是这两块儿的区别

1055

看到吗

1056

这就是这两块的区别

1057

就是这里面的代码

1058

这一坨代码的区别

1059

这一坨是卡梅尔家装time这儿只是状态这个区别

1060

然后disc我们搞明白了

1061

我们先把目录结构说完

1062

第一次我们搞明白了

1063

你看我们随便一个目录结构就能给你们聊这么多

1064

知道吧

1065

不知道

1066

这个不知道

1067

我这儿说的这个不知道是什么

1068

你们说你们没用过这个template是吗

1069

你们下来用一下这个APP吧

1070

没用过这个API呢

1071

我就不说了

1072

嗯

1073

我们在这里边儿

1074

然后我们这是disc是吧

1075

这个example不用说了

1076

Example就是我们什么

1077

就是我们平时写的他的你的V怎么用的那个

1078

案例是吧

1079

Example

1080

然后flow这个flow这个东西呢

1081

就是一个什么代码检查检查就是一个检查器

1082

这个也不用说了

1083

现在就用TS了

1084

这个你们也不用管了

1085

Model这个模式了吧

1086

这个打包的

1087

然后package这个玩意儿

1088

这个里边的包呢

1089

是用来这个玩意儿

1090

这个里边的包呢

1091

是用来打出来做什么呢

1092

用来打出来第三方的包

1093

第三方用什么叫第三方用举个例子

1094

我们的very loader

1095

We loader这个东西是we loader

1096

这个东西是谁来集成的

1097

是不是外派克莱集成的

1098

是不是那么外派来集成的这个东西

1099

你说我这个东西是外派的一个插件儿

1100

外派的一个loader

1101

我的微会管这个东西吗

1102

我的微是不会管这个东西的

1103

我的V是不会提供VE lo的

1104

那我唯一提供的是什么

1105

提供的是我具体这个load里边怎么他采取的这个语法规则

1106

怎么打包的这个代码

1107

就是我们为你提供了什么

1108

提供的是分析代码和生成render这个代码的这个过程

1109

是不是loader这个东西是外派自己实现的

1110

所以说这里边也需要去暴露出来一个包

1111

什么包

1112

就是说我们这个需要抛出去离线编译的这个东西

1113

是不是离线编译的这个

1114

这个编译的代码应该怎么去编译的这个包

1115

是不是这个你看有个template compare

1116

当然这里边还有什么server服务端渲染这些东西

1117

这不用说了

1118

然后又是什么script

1119

就是我们打包的脚本

1120

同学们打包的脚本儿

1121

这个打包的脚本

1122

这个你看

1123

我们在这里边给大家看看

1124

这里面打包的脚本

1125

就是我们各种什么你看

1126

Runtime only

1127

就是只有runtime的时候

1128

还有runtime加compiler的时候

1129

是不是我们就回到这边来了

1130

是吧

1131

就是打包的脚本怎么去打

1132

怎么去打我们这个包怎么生成我们的d ist是吧

1133

然后还有一个就是什么S2C233

1134

然后就什么test test这个测试文件嘛

1135

然后这个type就是一些也是一些什么

1136

就是那个TS的一些东西嘛

1137

是吧

1138

就不用说了

1139

的一些type

1140

然后最主要核心的就是什么S2CS2S2C核心的就是AC

1141

知道吧

1142

S2C就是我们整个微代码Wei代码核心

1143

核心的东西

1144

核心的东西

1145

甜心

1146

核心的东西就在这里边儿呢

1147

我们再来看HRC里边的东西

1148

A3C

1149

第一个卡梅尔不用说了

1150

看来做什么

1151

就是我们编译

1152

是不是就编译

1153

是不是就编译编译内核代码扣

1154

Cos做什么

1155

Cost同学们cos什么

1156

Cos提供什么

1157

这套东西可以吗

1158

Call就是提供这一套东西的

1159

危运行时的这一套东西

1160

明白危运行时全是扣来提供

1161

是不是啊

1162

怎么监听数据

1163

双向数据绑定

1164

微露的

1165

这些东西全是他来提供是不是

1166

然后喷喷的这个东西是什么

1167

就是不同平台的一些什么

1168

不同平台的一个一个处理

1169

这个变异呢

1170

就是我们会针对一些不同平台的一个一个入口来做一些处理

1171

这个一会儿给你们说

1172

他对不同的平台会做一些单独的一些一些挂载的一些处理

1173

所以在这里边

1174

比如说我们对不同平台

1175

它会挂在一些render

1176

单独去做一些一些一些模板的

1177

说实话

1178

你看这就是我们的在线编译

1179

同学们看见了吗

1180

这就是我们所谓的在线编译的

1181

生成render

1182

如果你没有

1183

这是没有

1184

你看可以判断你这个temperature

1185

你看他这儿

1186

我给大家稍微看一下这里边儿

1187

这是你构建V的时候是吧

1188

构建危机的时候

1189

构建V执行monkey的

1190

执行MT的时候

1191

它会执行什么

1192

首先执行什么

1193

会拿到你这个里边儿

1194

Option里边儿有个render

1195

会判断是否render

1196

如果没有render

1197

她直接走什么就要走编译了吗

1198

这就在线编译是不是

1199

如果有render直接就挂了是吧

1200

就走

1201

因为有render它里边儿走的

1202

那时候那里边就有render嘛

1203

是吧

1204

所以说没有认证

1205

你看这边就会走一些边一词的一些处理是吧

1206

所以说这个这个东西就是一个什么处理

1207

这些东西就是一个在浏览器端的一个挂载的一些处理

1208

因为你在浏览器要去专门拿到这些HTML码

1209

就可能你这么写

1210

所以说它会有一个

1211

你看一个web端

1212

专门去做一些浏览器端的一些一些一些一些API的一个一个一个处理

1213

就是我们这块儿就compare拿到浏览器

1214

是不是只有浏览器才有这个LTEMHDML

1215

那这个V是还可以运行

1216

它还可以运行到哪一块儿

1217

还可以运行到我们的

1218

其他APP端同学们明白这个意思吗

1219

喂

1220

它这个运行到多端里边儿去

1221

这个多端我一会儿给他一下

1222

给他说

1223

所以说这块儿有不同平台的一些实现

1224

不同平台的一些实现

1225

不同平台不同平台的实现

1226

然后还在一个就是several的服装渲染

1227

都不用说

1228

然后这个SFC这个东西是做什么

1229

SFC是做什么

1230

就是把单文件

1231

就是你那个底儿

1232

那个单文件是不是同学们

1233

这是我们

1234

我们微微一点文

1235

你知道我们那个这种点位

1236

这种大文件拆分成什么

1237

拆分成三个模块儿

1238

哪三个模块

1239

第一个是我们的style是吧

1240

给style的话就给到全部给到谁了

1241

全部就给了我们的style是吧

1242

如果是你看还有什么

1243

还有我们的

1244

比如说还有template template就是做什么

1245

就我们自己来编译是吧

1246

他们的自己来编译

1247

还有什么

1248

还有我们的script script脚本呢

1249

就给到script脚本

1250

所以就可以拆分

1251

拆成不同的东西是吧

1252

把你那个MP的模板

1253

就是你们写的那个微模板

1254

拆分成三个不同的东西

1255

就是做处理

1256

所以说这一块儿就做拆分的处理

1257

SSFC就是什么拆分的处理

1258

对

1259

所以说这一步你就知道了

1260

这里面不同的东西是吧

1261

这是什么

1262

编译的代码是吧

1263

编译的代码

1264

编译的代码

1265

那么不同平台的实现

1266

我们只讲web web这一层

1267

它会把编译的代码是吧

1268

把编译的代码把你把什么

1269

把浏览器端浏览器端

1270

浏览器端的API

1271

浏览器端的API结合到什么

1272

结合到V里边

1273

比如说我们的编译

1274

在线编译就需要通过

1275

外表拿到NHLH7苗是吧

1276

Enter

1277

H界面儿是吧

1278

拿到它

1279

然后给到谁

1280

给到我们的

1281

Compare是吧

1282

给我们compare

1283

然后去变成什么

1284

变成render是吧

1285

然后再把render挂在了什么

1286

Open上面是吧

1287

Open上面就是我们那个options

1288

因为所有的论证最后都是挂在options上面

1289

是不是

1290

所以我们在这一步大家看一下

1291

你看这一部刚刚给大家看的

1292

你看这一波你看如果有

1293

如果如果没有

1294

如果没有render

1295

这就没有leader

1296

就什么就是在线变异

1297

我真正运行的时候没有root就在线变异啦

1298

是不是没有root就在线了

1299

没有red IR在线

1300

我拿着我的template

1301

你这里边又没有这个template

1302

就是你的APP里边儿还没有APP

1303

那怎么办

1304

如果有特别的

1305

如果没有之类的

1306

我就会去拿到我这个L

1307

获取我这个L里面所有的什么HTML

1308

就是拿到这里面的所有的JHTML是吧

1309

就会拿到这一坨

1310

然后拿到这一坨H里面这里面

1311

然后拿到之后他就做什么

1312

你看调用卡梅尔这个东西就是卡梅尔这个卡塔尔提供的

1313

你看这卡梅尔看这个东西就是在线建议知道吗

1314

这是在线面议

1315

这是在线的离线变异

1316

和在线一都是一样的

1317

一模一样的代码

1318

只是说这些面就是把这个代码给了谁

1319

把这一块儿的卡梅尔抛出去

1320

抛出去让谁来处理

1321

让谁来执行

1322

让漏斗JS来执行

1323

是吧

1324

让漏斗JS来执行

1325

明白吗

1326

因为都是因为执行JS的地方都最后都是在哪儿

1327

都是在微吧里面执行是不是

1328

明白吗

1329

所以说卡密尔这一块儿的东西

1330

就最后都是都是一模一样的

1331

知道吧

1332

只是他执行的地方不一样

1333

懂了吗

1334

你看他这一步执行完了之后

1335

他那里边儿也是这么执行

1336

你看它那里边儿也是这么自信

1337

在微吧里边儿拿到那个那个卡梅尔也这么自信

1338

拿到你的template to Li鉴别也是拿到你的ipad也这么值钱

1339

拿你的template执行完了之后

1340

会生成这个代码

1341

会生成你的render吧

1342

Render他是个注册吗

1343

是吧

1344

是不是在构建吗

1345

我们刚刚看的构建的过程

1346

是吧

1347

这块儿

1348

你看

1349

Create a

1350

Create a function

1351

个人风险

1352

这块你看拿到你的代码流方显这是扣的吗

1353

拿到你的方代码六风险

1354

看到吗

1355

你看着

1356

堂哥小不小

1357

你看得明白吧

1358

是不是

1359

所以你看这一步就是这个代码

1360

所以现在这一步看明白了吗

1361

这个过程明白了吗

1362

同学们

1363

明白我们继续了

1364

所有编译这一块的东西整个串起来了是吧

1365

川椒运行这一块儿是吧

1366

那现在的问题就出来了

1367

你不需要去纠结那些细节

1368

我现在也不会给你看

1369

你不需要去纠结一些细节

1370

V分为什么

1371

分为几个不同的所有应该说所以UI框架

1372

所以UI框架都分这几种东西

1373

第一个都分为两层

1374

第一层是什么

1375

是我们的运行时

1376

运行是什么

1377

你运行的状态我们刚说了是吧

1378

你的微弱的各种状态是吧

1379

就是运行时运行时保存在内存里边儿是吧

1380

还有什么不同的端

1381

不同的端的实现

1382

是不是V可以在里边实现

1383

同学们为是不是可以在哪一个可以在我们的

1384

外部端实现是吧

1385

We也可以在里边儿小程序里面实现

1386

是不是你们所谓的乌米

1387

你们说you ni you ni APP

1388

是吧

1389

用APP就是用的知道吧

1390

还有什么

1391

还有它也可以在客户端做实现

1392

知道吧

1393

但是这些实现都是基于谁来做的

1394

都是基于我们的什么runtime

1395

就是我们的运行时

1396

我们运行时都是在微吧里边儿是吧

1397

然后它运行完了之后

1398

把他的把他的代码把它把它要生成出来的这个微漏的

1399

怎么去微露的最后

1400

最后是不是要去构建什么

1401

生成崴了之后

1402

最后是不是要去要去什么生成真实的DOM

1403

生成真实的这一步

1404

如果是在web端就去掉用真实的

1405

如果是在小程序端调用什么调小程序构建动物的方法

1406

或者说构建数据的方法

1407

我们后面会给大家讲小程序源码

1408

这个后边给大家还有就是会走什么

1409

客户APP端是吧

1410

APP端就会掉

1411

APP的渲染方法

1412

但是在这块儿都是它运行时这一块儿都是基于谁来说的同学们都是基于我们的什么

1413

都是基于我们的什么

1414

都是基于我们的V的运行时

1415

明白了吗

1416

这块就分了两层

1417

第一个是we的运行时

1418

第二个是什么

1419

不同的端的实现

1420

不同的客户端的实现

1421

不同端去衔接他这个API就行了

1422

懂了吗

1423

同学们明白

1424

明白了吧

1425

好那这块儿明白了

1426

我们继续

1427

嗯

1428

这块明白了

1429

我们就继续了

1430

明白之后

1431

我们就来聊边一词了

1432

我们现在聊运行

1433

说框架

1434

框架这个东西呢

1435

我们要聊运行和编译是不是

1436

运行时是

1437

分为框架

1438

我们说了深度递归是吧

1439

深度递归就是这么一个过程

1440

广州优先是吧

1441

广州的贵

1442

编译时我们就是这么个过程边意思

1443

我说了刚刚给大家看的文件夹就在这边

1444

就在我们的什么compare里边是吧

1445

都在我们科儿里边儿是吧

1446

科尔里边儿我们的代码

1447

Compare

1448

这又从哪儿来

1449

又从index里边儿是吧

1450

你看它就掉了什么creator compare function create a这个东西

1451

然后把我们的代码

1452

这就是我们的H键

1453

把我们的代码给到他

1454

但是这里边你可以有很多option

1455

有很多option

1456

很多option呢

1457

来做什么呢

1458

来做一个做一个什么

1459

做一个他的一个相当于一个一个一个配置

1460

编译CI ou的配置

1461

然后去把它配置好

1462

配置好了之后呢

1463

把你的代码给到这里边来

1464

给到这里边来了就开始变异了

1465

同学们开始变异了

1466

这里边儿就是编译

1467

你看这边一先分析代码

1468

然后再再转

1469

再优化代码

1470

然后再生成转移代码

1471

转移代码之后就是render

1472

你看就会返回这个代码

1473

所以这个东西你看这里就是编译

1474

同学们编译的过程

1475

分为什么分析是

1476

我们说了分析

1477

转换是吧

1478

然后还有什么

1479

生存是吧

1480

是吧

1481

那分析这个过程要分析成什么样子才能去做转换

1482

同学们

1483

我们转换是在谁的转换是在谁的基础之上做的分析

1484

转换是在谁谁的基础上

1485

是在分析的结果

1486

结果代码是吧

1487

分析这一步骤

1488

分析这个步骤执行的结果是吧

1489

那么分析这个步骤执行的结果是什么

1490

S同学知道ST是什么东西吗

1491

所有同学都知道吗

1492

还是有有同学不知道ST是什么

1493

都知道ST我就不讲了

1494

还是有同学布置的给大家稍微说一下

1495

ST

1496

举个例子

1497

我用VR

1498

ay等于一

1499

我如果要分析这个代码要怎么分析

1500

要分析这个代码要怎么分析

1501

咳

1502

STST这个东西有个学名叫做什么抽象语法树

1503

抽象语法树这个东西

1504

它是用来描述你的代码的

1505

描述你的代码结构的描述

1506

代码结构

1507

那怎么来描述代码结构

1508

它就需要有一个什么节

1509

不一样的结构是什么样的结构

1510

一个树形结构

1511

什么样的树形结构

1512

举个很简单的例子

1513

我这个VR ay等于一

1514

这是我们的JS代码是吧

1515

我们这个JS的代码他会有什么规则

1516

同学们

1517

我会在VR后边儿做一个加法吗

1518

会吗

1519

这个不会

1520

We are后边儿一定不能写一个家是不是

1521

能这么写吗

1522

不能这么写

1523

VR后边儿必须要写个a是吧

1524

VR后边儿必须要写个变量是吧

1525

这儿一定是VR后边儿一定是一个变量

1526

是不是一定跟的是一个变量是吧

1527

是不是

1528

是不是VR后面一定跟着四个变量是

1529

或者说跟的是一个表达式表达式吗

1530

表达式是吧

1531

表达式这个表达式

1532

里边儿可以是吗

1533

可以是一个变量是不是

1534

是不是也可以是一个什么声明

1535

是不是是不是也可以是个变量

1536

也可以什么副职这个过程是吧

1537

副职是不是也可以是负值

1538

那我问你

1539

我在VR后边肯定是不能跟什么加号是吧

1540

也不可能跟一个什么a

1541

然后a什么除a什么function a function of a function这种东西我可以这么跟妈都不行是吧

1542

我在后面一定要跟一个什么

1543

要么是一个生命

1544

一个变量

1545

要么是一个变量等于等于后边儿是一个什么

1546

就是我们的一个什么副职这种表达式的其他的语句是

1547

他一定是这种结构

1548

那按照结构

1549

这种结构我们是不是可以画出来

1550

画出来一个树形结构

1551

这是我的一个代码

1552

我的代码如果现在是一个VR语句

1553

如果是个VR语句

1554

We are语句

1555

这边儿一定是一个什么VR

1556

左边一定是个VR是吧

1557

是吧

1558

We are右边这一坨

1559

右边一定是一个什么表达式是吧

1560

一定是个表达式

1561

那么这个表达式

1562

就可以是吗表达式

1563

表达式可以是四个人吗

1564

可以是一个什么

1565

标识符是吧

1566

可以是一个标识符

1567

如果他直接是一个标识符

1568

就是这种

1569

没有这种后边儿这个直接是一个标识符

1570

那么他直接就是标识符

1571

如果不是一个标识符

1572

他就一定是一个赋值运算是吧

1573

那么这个赋值运算它就一定有赋值运算的规则

1574

是吧

1575

赋值运算的规则是什么

1576

我左边的值一定要赋值给右边的值是吧

1577

是不是他一定是个等号

1578

等号后边一定要有一个什么

1579

被赋值的一个值是一定是这种树形结构是不是

1580

那我已经问你

1581

我这块儿可以这么给吗

1582

我可以这可以这么给吗

1583

我这后边儿这个这个就完了

1584

我可以这么弄吗

1585

肯定是不行的

1586

是吧

1587

所以说这里边儿他一定要付

1588

一定要付一个变量或者是什么值

1589

或者是语句

1590

这个语句下面又继续嵌套是吧

1591

我这个语句又可以是其他的什么三元的语句

1592

机缘语句的程序就是按照这种语法这种结构维护起来的

1593

明白吗同学们

1594

现在这个抽象于

1595

这刚刚不明白的同学

1596

现在明白了吗

1597

这就是抽象语法树

1598

明白吧

1599

那这种东西

1600

那这种东西

1601

这种东西描述出来之后

1602

是不是这种东西描述出来是不是就可以描述我们代码啦

1603

那描述出来的代码之后

1604

我就要在我构建出来一个这个东西

1605

构建出来这个东西之后

1606

然后就基于这个东西

1607

这个东西就是基于ST这一步

1608

这一步会构建出来ST是吧

1609

这一步构建出ST

1610

然后基于ST去转换去转换是吧

1611

去转换

1612

这一步会就会基于ST转换转换成什么

1613

转什么

1614

转换成我们的什么render代码了是吧

1615

换成我们的代码是吧

1616

同学们装render代码了

1617

我们的代码这个就很简单了

1618

它里边就会有一些不同的一些声明

1619

怎么去深层认证代码

1620

是不是

1621

所以这一步我们来看一下

1622

给大家稍微捋一下编译这一块的代码稍微有有V2的编译的代码其实完全不没有什么参考性的东西

1623

我推编译这个东西呢

1624

编译这个东西就是编译代码这一块儿又是一门学问

1625

叫做编译原理

1626

编译原理

1627

这个东西是大学里边的

1628

完全是一门课

1629

我希望大家下来之后单独去学一下

1630

再单独去学一下

1631

买本书单独学一下编译原理这门课

1632

这个东西你让我拿一节课给你讲

1633

那是不可能的

1634

不是我不愿意跟你讲

1635

是别人大学里边儿都是拿了一年的时间

1636

一学期的时间才能讲完明白

1637

它这里边有很多很多知识

1638

我这边给你讲

1639

只能说我呢

1640

我在我今天给你讲的

1641

只能说给你带入一个大致的一个一个一个一个思路

1642

V1在里边怎么去编译的

1643

你让我怎么去跟你说他最后编译出来的这个这个这个就是真正编译的原理是什么

1644

说实话同学这个东西需要你们自己下去一点

1645

知道吧

1646

我这会儿只能去给你们做一个粗浅的一个

1647

就是一个拉通明白这个过程

1648

编译原理上是单独的一门课

1649

同学们

1650

所以我在这一步

1651

这块他怎么去编译的

1652

这边呢

1653

我们来看这个代码来看这个代码

1654

我们说了他会分为编译优化是吧

1655

然后运行是吧

1656

所以说你看这这个编译这第一步

1657

这是编译

1658

这是编译

1659

你看这一部编译

1660

编译完了之后

1661

你看我们这边一完了之后

1662

编译完了之后

1663

然后再做一个什么优化

1664

一个优化的过程

1665

优化的过程优化的过程什么意思呢

1666

就是他会去分析一些静态的节点

1667

什么叫分析静态检举个很简单例子

1668

同学

1669

我们知道V里边是有多么的负V是不是有多么的过程

1670

比如说这是你的节点是吧

1671

这是你的节点是吧

1672

对

1673

你的节点

1674

如果我们这些节点全是

1675

没有没有绑定进动态数据了

1676

只有这儿绑定了一个动态数据

1677

是不是只有这房间的一个动态数据

1678

我这儿绑定动态数据可能是个name是吧

1679

这个kiss name第一次是一

1680

第二次是二

1681

那我问大家

1682

我第一次当地府

1683

就是虚拟到我们的对比嘛

1684

是吧

1685

第一次从这这个东西

1686

第一次从这儿跟这个对比

1687

是吧

1688

第一次跟这个对比

1689

那么这个对比完了

1690

那这些东西我还要去对比吗

1691

我问大家

1692

因为这个节点全是静态的

1693

我给大家看这个代码

1694

你这块儿看不明白看这个

1695

比如这个这个代码

1696

我这是这个是动态的

1697

这块的指令是动态的看这块儿你给我给我给我反馈

1698

不明白就不明白

1699

明白就明白好吧

1700

这块是动态的

1701

根据你这个message来动态展示的是吧

1702

但是这块儿是静态的

1703

就是我每一次展示都是一样的东西是吧

1704

我每一次展示是不是都是我爱中国

1705

中国爱我是不是不管你这个东西怎么变是吧

1706

那我问你

1707

我当dif的时候

1708

就是我我的虚拟到我们去的

1709

不去对比的时候

1710

我第一次我第一次试一试吧

1711

第一次是一

1712

第二次是二

1713

那么现在两次去对比的时候

1714

我是不是只需我是不是只需要比对比这个就行了是不是只需要对比这个东西就就行了

1715

是不是

1716

这些东西我是不是都是静态的

1717

我不需要去对比是不是是不是

1718

是不是这就是静态

1719

见我第一次和第二次、第三次我都是静态的

1720

不需要对比

1721

因为你不管怎么对比

1722

他每一次都是一样的

1723

那我怎么知道他是静态的

1724

我怎么知道你这个节节点是静态的

1725

这就是我在编译的时候

1726

去处理的

1727

我在编译的时候

1728

所以说你看我在这儿就会编译

1729

编译完了之后

1730

你看我ST分析代码

1731

分析完了之后

1732

我在这块儿会去分析你这个数

1733

你这个代码结构

1734

会去给你加加一个标签

1735

就会在你这个上面

1736

你这个结构上面加一个标签

1737

知道吧

1738

这块上面去加一个标签

1739

是吧

1740

一加一个标签判断

1741

你这个标签全是静态的

1742

在你构建VIVO的时候

1743

你这块就会构建一个静态的威露的

1744

你就不会去

1745

因为你这个同学们是不是你因为你构建的时候

1746

你构建微弱的

1747

是不是根据这个东西来构建微弱的

1748

是不是根据这一块儿的东西构建微热的

1749

但这个东西又是谁来生成的

1750

这个东西又是谁来生成的

1751

是不是我们compare生成的是不是

1752

是不是这种东西是根据这些东西来构建味道的

1753

那种东西是要根据我们的康贝尔生存了

1754

是不是

1755

是啊

1756

是不是所以说我在这一辈儿我就会

1757

如果你这个是个静态方法

1758

比如说你这儿是个静态的

1759

我就会拿调用一个静态的生成静态节点的这个方法

1760

可能这个杠V下面V就是生成静态鉴定的方法

1761

但是这块儿其实不是

1762

真是我就说了做个做个比喻

1763

同学们要明白这个过程

1764

所以说这个杠V是谁来生产呢

1765

就是我在company来生成的

1766

我的compare就要去分析你这个代码节点

1767

节点是静态的

1768

知道吧

1769

所以这一步我就会去分析代码节点是否是静态的

1770

这一步是不是静态明白了吗

1771

这一步分分析静态完成之后

1772

然后去生成

1773

把你这个生成这个语法树

1774

抽象语法树

1775

然后重新给生成真实的呢

1776

那么这一步来给大家做一个这个这个东西

1777

看着

1778

这是我们刚刚看给你给你看到了什么编译类的代码是吧

1779

我们刚刚看的是编译了一头的代码同学

1780

是吧

1781

编译的代码

1782

编译的代码我们是不是给大家打打了一个console是吧

1783

我们说了编译出来之后

1784

他分析第一步先分析ST出来是什么东西

1785

我们打印一下

1786

看一下这个分析出来ST第一部

1787

你看分析出来ST是什么结构是吧

1788

就这种结构给大家看

1789

这种结构你看他做了什么

1790

你看他这第一层是个DV

1791

看到吗

1792

我们的代码在外边儿

1793

我们这个代码是不是

1794

我们这个代码第一层是不是DV

1795

是不是

1796

是不是个DVDV下边有几个标签儿是吧

1797

DV下面就有

1798

你看的下面就有好几个标签

1799

你看DV下边这是个DV

1800

它下面有几个子标签

1801

你看有个H2是吧

1802

有个button

1803

有个DV是不是有个H2

1804

是吧

1805

一个button是

1806

有一个DV是吧

1807

当然换行

1808

他也算了个标签是吧

1809

也算了个资源数字所以说你看在H2下边儿

1810

你看H2下边儿尤其做了什么

1811

A区下边儿又有它的子元素

1812

你看圈下边儿

1813

你看他又有资源数

1814

你看它的子元素

1815

你看H2

1816

你看就是我们这个子元素是H2

1817

就是这坨子元素是吧

1818

他这一坨子元素

1819

你看这一坨是吧

1820

Text元素是吧

1821

是不是这是他变异是不是

1822

这是变异成这种结构

1823

它把你的代码就翻译成这种结构了

1824

明白了吗

1825

明白了吗

1826

把你的代码就分成这种结构

1827

它会形成这这种结构

1828

V2

1829

这里边儿分析这种结构的代码是怎么分析的

1830

怎么分析的

1831

正则匹配

1832

正则匹配

1833

正则匹配知道吧

1834

这个匹配不

1835

是啊

1836

同学们

1837

所以你看这一部V2

1838

这里边就是一个什么正则匹配的过程

1839

大家看生成这个代码就是正则匹配的过程

1840

这里边就是这一坨一坨看见了吗

1841

这一坨各种正则表达式

1842

这是各种正则表达式去匹配知道吧

1843

各种正则表达式这里边包括这儿也有各种正则表达式去匹配

1844

我们明天给大家讲V2模板编译这一块的缺点是V3它优化会优化什么东西

1845

你看各种正则表达式去匹配

1846

威尔

1847

正匹配真的匹配有一个东西叫什么

1848

正则匹配里边有个算法

1849

正则匹配里边儿有一个什么回宿是吧

1850

正则匹配是采用什么回溯算法是吧

1851

回溯机制是吧

1852

那么回溯机制就会有什么性能问题

1853

如果复杂的正在匹配表达式就有性的问题

1854

所以说这也是为什么他要优化的原因

1855

是吧

1856

性的问题

1857

所以在这一步

1858

他会用正则表达式匹去去匹配

1859

你看这一步拿到拿到之后

1860

在这这边儿他怎么匹配的呢

1861

他维护了一个赞

1862

维护了一个站

1863

维护这个站维护了站去做什么

1864

做了什么处理呢

1865

很简单了

1866

维护那个站去做什么处理

1867

怕谁贴标

1868

拿到你的模板去做什么处理

1869

然后拿到这里边儿

1870

他会去分析

1871

你看拿到你的HTML判断这个H2的B

1872

去便利你H前面每一个字符是吧

1873

他先去看你的字符

1874

就是相当于你

1875

去遍历每一个字符

1876

先去便利你这个字符

1877

然后再去便利地这个字符

1878

然后再去便利

1879

这个字符在便利V这个字符在便利空格这个字符

1880

一个一个字符在遍历完完成

1881

然后再遍历这个字符的时候

1882

他会做一每一个处理

1883

你看见吗

1884

变成不同的字符的时候

1885

它会做不同的处理

1886

所以你看他怕是HTML

1887

这是这块儿会遍历字符看见吗

1888

遍历字符会遍历这个字符

1889

如果这个字符

1890

如果这个字符

1891

你看这里边儿

1892

如果这个字符同学们

1893

这个字符如果是这个东西

1894

这个字符它会判断很多种情况

1895

你看会判断是否是做事条件

1896

做事的这种情况

1897

会判断是否是做事的情况

1898

会判断是否是这种条件注释这种情况

1899

还会判断是否是什么这种这种标识符的这种情况

1900

然后会判断是

1901

是否是结束的为的标签的这种情况

1902

然后去判断是否是开始表示这种情况

1903

看到吗

1904

然后它不同的情况去做不同的处理

1905

看到吗

1906

所以这一步你看它会判断匹配

1907

是否是你看他这儿就拿到什么

1908

拿到证则这种东西来匹配了

1909

你看各种不同的正则表达式

1910

他就用上了

1911

看到的东西不同

1912

正则表达式就用上了

1913

看见了吗

1914

看到吗

1915

是不是各种不同正则表达式它也用上了

1916

看到吧

1917

这是他明天我跟你说这差的东西

1918

为什么GSX又是不同的玩意儿

1919

完全性能都不一样

1920

决定不一样

1921

你看这边是完全的东西

1922

就完全就不一样了

1923

是吧

1924

这里边儿各种

1925

你看正则表达式各种完全不同的东西

1926

他就表达式的东西是不是

1927

是不是完全是不是就不一样啦

1928

这块的东西那就是很多很多很多很多很多不同的这种东西全全部去匹配

1929

匹配完了之后拿到你看

1930

他会拿到你这里边儿东西

1931

匹配完了之后他会拿到你看

1932

就比如说我们现在匹配这个DV标签

1933

匹配完了之后

1934

他会去构建一个调用一个什么

1935

调用一个逻辑去做处理

1936

这个逻辑做处理做什么逻辑处理

1937

就是相当于是我一个

1938

先说我们结束开始吧

1939

开始这个过程

1940

你看他会去处理我们就开始这个东西

1941

开始这个东西要怎么处理的同学们

1942

他会拿到你这个里边的标签儿

1943

然后去拿做什么坐骑

1944

就是去便利你的标签里面所有属性

1945

看到吗

1946

它会判断你这里边个同

1947

因为你匹配到了正则

1948

然后他就便利你正则里边很多各种属性

1949

知道吧

1950

什么威刚一夫各种属性来构建你这些属性

1951

懂不懂

1952

然后这些东西这些属性

1953

你看这些属性

1954

然后构建完了之后

1955

你看这里边儿各种属性

1956

属性构建完了之后就是我们的

1957

这是我们处理那个东西

1958

处理开始标签

1959

所以说他这里面完全没有学习的一个东西

1960

完全没有学习的一个一个一个东西好吧

1961

是不是完全没有一个学习的一个这个这个意义

1962

所以说我们一直在给大家说模板编译

1963

我们学给你讲关于二模板编译的原因是什么

1964

我们给你们讲V2模板编译的原因是什么

1965

同学们

1966

原因是什么

1967

原因是让你知道他的缺点

1968

并不是让你学习他这个模板编译的原理

1969

知不知道

1970

明白吧

1971

对他是一个反面教材

1972

我们给你们讲的这个东西是是是是这个意思

1973

并不是让你来学习

1974

他就说模板编译这块的东西

1975

你们不需要花太大的心思去学习

1976

他懂不懂

1977

知不知道

1978

所以说这块儿东西你们不需要花太多心思去学习

1979

吃这块儿东西吃

1980

然后我们在这一步

1981

咳咳

1982

咳

1983

然后我们这一步

1984

回到这个里边儿

1985

到这里边儿

1986

你看我们挣得这个东西

1987

当然也稍微给大家稍微还是再说一下

1988

就是你看我们这个标签

1989

你看这一步就是然后他就会处理什么

1990

这是几个匹配的标签

1991

匹配完了是不是还有结束的标签

1992

结束的标签匹配完了之后

1993

他会维护一个堆栈同学们

1994

这种这种匹配标签儿

1995

在开始的时候和结束的标识后

1996

他会构建

1997

你看在开始的时候

1998

在一个标签开始的时候

1999

他会构建一个这种这种东西

2000

这种东西同学们看这熟不熟悉

2001

是不是这种这种结构

2002

你看Starr塔是

2003

Start a是不是a tribute to sta

2004

Take name是不是这种东西

2005

Take name是吧

2006

这个是不是就这个东西

2007

看到吗

2008

这种东西就这个东西知不知道

2009

就是他生成出来的这个这个ST

2010

就这儿他就会去在每一次开始的时候

2011

他会构建这个东西

2012

构建一个单独一个标签的ST

2013

然后在结束的时候

2014

然后又会做一些处理

2015

把这个东西先构建好吗

2016

构建好了之后是构建好了之后同学们

2017

哎呀

2018

构建好了之后

2019

然后就就回到哪块儿

2020

就回到了我们这个这个这个这个

2021

这里边儿是在哪儿

2022

这儿是这是构建好了

2023

构建好了他就会里边儿在你便利的过程就会添加这些属性

2024

你看处理的过程

2025

这是我们处理是吧

2026

处理的过程这是我们构建好的是吧

2027

处理的过程他会去把你这些所有上面的属性往这里边儿去添加似的

2028

这是我们各种东西就会添加

2029

添加完了之后

2030

然后在结束标签的时候

2031

结束标签的时候给大家稍微说一下

2032

结束标签的时候

2033

在我们这儿结束标签的时候

2034

它会掉一个掉一个结束标签这个函数结束表现这个函数呢

2035

其实也很简单的

2036

他会做一个什么

2037

可以做一个我们的

2038

相当于把结束这这套东西拿过来

2039

然后去做一个处理

2040

然后到底是什么样的标签儿

2041

然后去做一个什么

2042

做一个堆栈的一个处理

2043

然后我们回到你看他在里边会维护一个堆栈

2044

就是你看同学们

2045

维护对战是什么原因就是

2046

就是你看我给大家看这个H7名H的结构

2047

你看如果我没有处理这个HTML

2048

我是不是先处理他

2049

处理他的时候我要分析代码

2050

我从这儿是不是这么分析的

2051

分析到这儿在这儿在这儿在这儿

2052

然后再在这儿

2053

但是我处理它的时候怎么办

2054

是不是我处理它的时候

2055

处理到这儿的时候

2056

是不是就处理到处理到这儿的时候是不是

2057

说到这儿的时候

2058

处理完成之后

2059

是不是我就要记开

2060

就要把这个东西

2061

因为我他们还没处理完吗

2062

是不是因为他还有结束标签似的

2063

我是不是就怕他先入栈

2064

入站然后继续再处理他是吧

2065

他处理完了之后

2066

是不是又他处理到这儿来

2067

处理处理到这儿来

2068

是不是他这一块儿要入栈

2069

然后是不是要处理文本是吧

2070

又处理这一块儿是吧

2071

处理这一块儿

2072

然后处理到结束标签的时候

2073

拿我的占领是不是拿我占领这个东西

2074

占领这个东西刚好就是H2标签跟他一起出战

2075

那出了站之后

2076

这个标签是不是处理完了

2077

然后就处理这个标签明白吗

2078

他维护一个站

2079

是吧

2080

对构建了一个类似ST的东西是不是

2081

但这个东西

2082

对你就可以这么理解

2083

可以这么理解

2084

可以这么理解

2085

所以说这一步他就会完成

2086

完成了之后

2087

你看同学们完成了之后

2088

它就会生成一个这么样的一个ST

2089

这么样一个ST

2090

你看生成完了之后

2091

这样一个ASP生成完了之后

2092

然后就去做什么做一个便利的优化

2093

你看做优化

2094

做优化的这一步

2095

然后就就会去便利这个就会全部去便利你这个ST看什么

2096

他会去便利这个ST看了吗

2097

对吧

2098

便利你这个ST看了吗

2099

是吧

2100

便利这个ST

2101

便利这个ST呢

2102

有一个什么过程

2103

你看他就是打标签的过程便利ST打标签的过程

2104

打标签的过程怎么打

2105

同学们

2106

很简单

2107

也很简单

2108

因为你已经有了ST的结构

2109

是不是你也知道你具体哪一个节点是动态节点是吧

2110

我们是不是知道这个节点是动态节点

2111

H2这个文本节点是不是动态节点

2112

是不是因为有威刚一幅这个指令是吧

2113

我们知道它是动态纪念

2114

那么打标签就很简单了

2115

我首先

2116

我遍历整个这个ST

2117

我首先给他打一个静态惊人的标签儿

2118

是先给他打一个静态静态标签

2119

然后在递归递归到他地

2120

在他的时候

2121

发现

2122

然后把把把父节点的这个这个这个就是什么父节点的这个

2123

这个静态静态标签传递给他是吧

2124

传递给他

2125

传递给他之后

2126

然后到他这里边儿

2127

然后发现

2128

就是就是一个递归的过程中发现他

2129

这里面是个动态的

2130

那动态的说明什么说明

2131

他所有的父元素都不是静态节点

2132

是不是是不是从他开始

2133

所有的元素都不是进来捡是吧

2134

那么它有什么

2135

D龟幼龟回去是吧

2136

有各地的过程

2137

又归回去是吧

2138

用回溯回去

2139

所以我们在这一步

2140

你看优化这一步

2141

点一会儿你看ST是吧

2142

ST

2143

然后首先你看给root打标签是吧

2144

给root打标签打标签判断静态g ret当前这个静态技能是否就是当前我这个静态节点

2145

是否是静态节点

2146

如果判是否判断是静态节点很简单

2147

判断当前节点是否是静态节点就很简单了是吧

2148

没有动态属性是吧

2149

是不是

2150

是不是你看我这一步

2151

然后判断是否是今天几点

2152

如果不是

2153

如果是

2154

如果是你看如判断是否是静态经典

2155

如果是今天几点

2156

如果是今天几点怎么办

2157

如果静态节点是一

2158

那怎么办

2159

他又递归

2160

你看判断我这个结结结结点什么

2161

所有的子节点是不是所有的子节点

2162

拿到我所有今天截止节点看到吗

2163

是不是拿到子节点

2164

然后遍历我所有的子节点是不是经太经典了吗

2165

变成所有的子节点是不是经太经典了吗

2166

如果只要有一个直接点

2167

它不是静态节点看到吗

2168

只要有一个直接点

2169

不是静态节点

2170

那我这个副节点当前这个点是不是也不是进来捡了

2171

是不是明白了吗

2172

同学们明白这个过程吗

2173

这就是

2174

明白这个吗

2175

这个就很简单啦

2176

就是我所有的子节点

2177

只要他不是静态检

2178

那我这个副节点他肯定就不是静态节点

2179

是不是只要所有的子节点全是静态节点

2180

那块儿就不会走

2181

是不是说明我这个副节点就是静态节点

2182

对啊

2183

他这个就是一个深度递归

2184

他这个就是一个深度递归的过程

2185

知道吧

2186

你看他是也拿到

2187

你看他是先拿到第一个跳的

2188

然后不断去递归

2189

璧归完了之后

2190

就是这个东西就是一个

2191

就这么个过程吧

2192

是吧

2193

如果你看我先到这儿来

2194

到这儿来是吧

2195

到这来

2196

如果这个节节点是静态节点

2197

这个节点也是静态节点

2198

那是不是先判断到这一步

2199

那这个点是不是也是静态节点

2200

但是我我现在只低估了这条路是不是

2201

然后我又递归这条路

2202

发现这个节点不是今天几点那回

2203

那这个节点是不是也就不是今天几点

2204

那我回回再回到这一步的时候

2205

这一步是不是又不是经太经典

2206

是不是因为我递归的过程

2207

我会是什么过程

2208

我是先到这一步

2209

再到这来

2210

再到这儿来

2211

然后再回答再回到这儿来

2212

再回到这儿来是吧

2213

然后再到这来

2214

再到这儿来

2215

然后再回到这儿来

2216

再回到这儿

2217

回到这儿来是不是他是这么个过程

2218

是不是同学们所以这个过程是一个什么过程

2219

这个先弟后归的过程是不是

2220

所以这就是一个什么达标卷打标签的过程

2221

是不是打静态标签的过程

2222

明白了吗

2223

是吧

2224

好这块明白了

2225

好这块明白了之后呢

2226

我们在再回过头来再来看我们这个静态节点标记完了之后再来转换了转换代码就很简单了

2227

就生成代码了吧

2228

是吧

2229

生成代码

2230

生成代码就很简单

2231

拿到你所谓的什么

2232

首先我要构建一个生成代码的一个基本基本的一个代码的样式是吧

2233

生成了基本一个代码的样式

2234

这个基本代码样式是什么意思呢

2235

就是我有一个基本的一个生成代码的一个

2236

生成代码的一个一个一个一个相当于一个配置

2237

生成代码的一个基本的配置虽然买的基本配置

2238

然后这个基本配置呢

2239

然后拿过来这个基本配置呢

2240

你看同学这里边就有各种的什么option什么

2241

然后有一些什么一些一些一些一些各种的一些不同的一些

2242

给你看一下这里边儿不同的一些

2243

各种什么静态接连

2244

你看它如果是静态接连就是生成代码

2245

然后我还是回到这边来吧

2246

深圳的吗

2247

这个是深圳

2248

这是深圳的吗

2249

是不是ST

2250

如果是ST

2251

你看会构建这个什么get element event是吧

2252

就是获取你这个节点

2253

节点把你这个ST

2254

这是我们ST是吧

2255

拿到你的ST

2256

判断你的ST是否是静态点同学是不是今天寄是吧

2257

如果是静态记点

2258

你看它会生成

2259

如果是静态节点调用方法

2260

你看就返回这个东西是不是

2261

是吧

2262

如果是静态节点

2263

如果是静态节点

2264

它会返回哪一套东西

2265

返回这套东西是不是拿到就是拼接

2266

同学们就是拼接的

2267

这一步就是拼接的

2268

就是不断去递归

2269

然后拼接什么

2270

拼接这个字符串可以了吗

2271

就是生成的render就拼接字符串的

2272

看见了吗

2273

就拼接字符串

2274

就根据你不同的节点

2275

然后去不断不断地归拼接注册

2276

如果是

2277

就是那个V杠

2278

V杠ones

2279

那就是这个指令是吧

2280

威刚ones就是这个指令如果是什么

2281

如果是威刚F是吧

2282

如果是V杠

2283

如果是威刚衣服

2284

那就这种指令是什么

2285

就这种指令是不是这种指令

2286

你看这里边儿的指令又不一样

2287

你看

2288

是不是这三元表达式是用三元表达式来处理

2289

是不是如果有什么

2290

如果要是这种指令是吧

2291

如果要是cheer的是吧

2292

Template或者什么呢

2293

他又来走这个

2294

如果是威刚for又是V刚发的指令

2295

你看这里边儿

2296

如果是被干父

2297

他是什么

2298

是风险是吧

2299

就是构建风险

2300

然后生成这个下划线I

2301

就是生成不同的这个方体

2302

就会生成这种模板

2303

方体看到就会生成这种方见这个拼接出来的

2304

明白了吗

2305

同学们这种模板编译

2306

这个模板编译明白了吗

2307

你们生成你们写的所有位置代码

2308

全都是这一套代码

2309

全都是一套代码

2310

全都是一坨

2311

全是这一套代码

2312

全程这一套代码

2313

知道吧

2314

还不明白吗

2315

刘洋

2316

你哪儿不明白

2317

ST明白吗

2318

ST

2319

明白吧

2320

转换的过程

2321

明白吧

2322

代码切得太快

2323

我不能让你你能看个大字

2324

然后下来之后你自己要去看

2325

你能知道我这个思想大致

2326

他这个就是拼接

2327

我不能把这个时间浪费在给你看代码的这个基础上是吧

2328

你能看明白大致的这个拼接的过程

2329

你看这下方杠C

2330

然后他拿到你这个这个东西来拼了

2331

看到吗

2332

我不可能说你这个逻辑

2333

然后去不断循环这个

2334

我们不是看了马六方向吗

2335

刚刚看了马六方向

2336

你放心

2337

之前我们我们刚render构建render的时候

2338

不是给你看了嘛

2339

你放心

2340

你这是什么什么情况

2341

构建render的时候不就放心了吗

2342

这是

2343

这是在线编译

2344

我们看一个离线编译的

2345

不太了解

2346

不是不太了解

2347

我刚才给你看了的

2348

你看

2349

这一块儿是create a

2350

这是拿到complete典render complete典render就是这个东西

2351

就是这个

2352

就是computer典render

2353

你看这个点render就是这个东西

2354

就是编译出来的代码

2355

编出来代码就是一坨就是坨注册了吗

2356

然后再拿到这个东西

2357

然后来create function

2358

对不对

2359

刘芳见

2360

看到吗

2361

这个我们之前我们刚刚上课

2362

前半节课我们给你讲的

2363

然后这个东西就构建出来了render函数

2364

干嘛构建出来render函数

2365

Render就挂载到挂载到整个上面了

2366

挂载到你整个option上面的

2367

明白了吗

2368

所以说这就是什么

2369

这是编译时知道吧

2370

是不是就是编译时

2371

是啊

2372

这个你下来自己看吧

2373

我现在就不回答你这个问题了

2374

我不浪费这个时间了编译时

2375

那么这个编译是同学

2376

我们又回到这一步啦

2377

回到了一步

2378

编译时这一步是吧

2379

那边意识这一步要聊

2380

编译时这块儿我们V2的贬义词基本上讲完了

2381

威尔第一词有什么东西

2382

但是V2

2383

贬义词

2384

它有几个点

2385

第一个点是

2386

需要正则匹配是吧

2387

第一点必须要什么正则匹配

2388

他需要分析ST

2389

所以说它是什么正则匹配是吧

2390

正则匹配来分析的ST是吧

2391

是不是

2392

正则匹配分析的ST是不是

2393

你什么意思

2394

你是觉得这个编译师

2395

你是觉得这个编译时还需要怎么讲吗

2396

因为V2的编译时

2397

这块的东西我说了

2398

他是个反面教材

2399

你知不知道

2400

他就是一个正则匹配

2401

你是哪儿

2402

还不明白吗

2403

不是我就算我就算给你讲

2404

我其实也跟你讲了的

2405

我们不可能每一个细节的去第八个给你讲知道吧

2406

这个过程你要去明白

2407

他刚刚讲了一个思路

2408

你有了这个思路之后

2409

你下来自己要去看代码是吧

2410

是不是

2411

但是我们要把这些点全部给你抛出来

2412

对

2413

好在这一步我们继续

2414

WE2代码这里边儿有几个缺点

2415

编译时这块儿鸡块儿有几个缺点

2416

第一个是正则匹配

2417

正常匹配这一点

2418

因为会造成回溯的过程是吧

2419

回溯的过程

2420

所以说所以说它有一个什么性能的问题是吧

2421

性能的问题

2422

而且它正常匹配

2423

对于他整个代码的分析

2424

它不能够做到特别明确的一个

2425

它有很多就是我稍微加一个API

2426

他的ST

2427

它的正则匹配的代码就可能很复杂

2428

有很多bug

2429

所以说ST

2430

不能够去做一个充分的一个一个一个

2431

相当于一个一个一个一个处理

2432

也基于这个情况之上

2433

也基于这个情况之上

2434

我的ST也基于这个情况之上

2435

我的我的ST

2436

就不能够去做什么优化

2437

所以说我们这儿有一个什么边意思

2438

优化和运行司优化这个维度我就要出来了

2439

这就是我

2440

我再问你们

2441

V2和V1和reactor

2442

它们的区别在哪儿

2443

你如果能从这个区别聊出来

2444

我就觉得很不错

2445

任何框架、任何UI框架都是有优化的层面

2446

是不是都是有优化的层面

2447

编译

2448

私有化

2449

我们我们回到还是回到ST这块儿

2450

他只能你看它这块儿优化它只能做什么

2451

只能打静态标签是吧

2452

只能给节点节点打做静态

2453

做静态标签的处理是吧

2454

是不是只能给节点做静态标签的时候呢

2455

是吧

2456

然后第三个第三个

2457

第第三个就是说他用了什么

2458

用了with用with

2459

用with知道吧

2460

用with

2461

有了位置就会造成什么

2462

这个最后会造成什么内存泄露

2463

同学们为什么内存你他是一直不会释放的

2464

他会造成内存泄漏知道吧

2465

都明白

2466

所以说V3我V2这里边就会有几个大问题

2467

这几个大问题

2468

就造编译时就造成了这几个大问题

2469

那么他为什么要用位置

2470

为什么一定要用位置

2471

为什么一定要用with

2472

她用with的原因是吗

2473

对

2474

作者是想不到吗

2475

作者想得到

2476

但是没有

2477

没有办法

2478

他避免不了

2479

为什么

2480

为什么避免不了同学们

2481

你看这个代码

2482

你看这个代码

2483

我这儿写的是什么样子

2484

我这儿比如说我这儿message几点

2485

B

2486

我这儿写的是什么样子

2487

我这写的什么样子

2488

他在这儿就必须要拿到什么样子

2489

看到吗

2490

我在这儿写的是什么样子

2491

他在这儿就写的是什么样子

2492

看到吗

2493

明白什么意思吗

2494

他分析不了JS

2495

我这一套代码是不是JS

2496

这一套代码是不是JS语句

2497

我问你

2498

这个代码是不是JS语句

2499

是不是

2500

这个你明白吧

2501

那我问你JS语句是不是很动态的一个东西

2502

JS语句是不是动态性的

2503

是不是键词语句是不是动态执行的

2504

动态性的东西

2505

那么它能够动态性的东西

2506

你如果在静态编译的时候去分析

2507

很多种情况你是分析不到的

2508

像这种情况他就不V2

2509

完全不敢分析

2510

知道吗

2511

只要是他遇到这种双冒号的东西

2512

他都不会分析

2513

直接把它拿过来做一个处理

2514

所以你看在这里边儿

2515

他威尔他不敢去

2516

不敢去做分析

2517

他没有这个能力

2518

他的模板编译没有这个能力去分析它这里边的东西看到吗

2519

我们这里边儿写的V杠衣服

2520

对这套代码看到了

2521

他不敢去分析

2522

你看

2523

为什么他不敢去分析

2524

因为他不知道你在里边应该怎么去拆分

2525

应该怎么去拆分

2526

你这个ST怎么去拆分

2527

所以说在V3里边儿分析这一套代码的时候

2528

在V3里边儿

2529

微微三里边儿分析JA哪去了

2530

V3里边儿分析这套代码的时候

2531

我刚刚的代码哪去了

2532

这儿啊

2533

V3里边儿分析这套代码的时候

2534

他是引进了背包

2535

他是用了背包

2536

他是通过背包去分析的

2537

知道吧

2538

它是通过背包去分析的

2539

但是V3的在线编译

2540

她也用的位置

2541

WE3在线医生的代码也是用的位置

2542

为什么V13V在线代码不用背包

2543

很简单

2544

这个例子

2545

同学们

2546

你们不知道用with这个原因是什么

2547

你看这个with

2548

这个this指向的是谁

2549

Wish

2550

这个this指向的是谁

2551

这个this指向的是fat实力知道吧

2552

是指向的威力实力实力是不是

2553

是不是是不是指向唯一实例

2554

是不是啊

2555

这个名这个名不明白

2556

因为你这个render在运行的时候

2557

这个this是指向V10点

2558

那这个message及是谁上

2559

是哪个上面的秘籍

2560

是哪个上面的秘籍

2561

是哪个上班儿没升级

2562

我问你

2563

是不是这个微一使力上面的设计

2564

是不是

2565

是不是

2566

对

2567

那么为实力上面的设计

2568

他这个设计又是从组件上面代理到整个为一上面是不是

2569

是啊

2570

但是我现在的问题就在于我如果

2571

我如果

2572

我要去处理

2573

我要去分析这个东西

2574

我如果没有这个位置

2575

没有这个位置

2576

这个位置

2577

我这块儿生成这个码

2578

生成那个带这个代码

2579

我们这块儿生成这个代码

2580

没有这个意思

2581

我直接这么运行

2582

我这个没涉及

2583

我这没涉及

2584

这个前边儿是不是就应该加一个变量

2585

是不是

2586

我是不是就应该加一个变量

2587

加一个这个变量的实力是不是

2588

是不是

2589

我在这儿就需要去加this

2590

是不是

2591

是啊

2592

是的

2593

我需要

2594

我就需要在这儿去加的斯

2595

或许

2596

但是这二家类似这个this还不一定

2597

就是指向的是我的微实力

2598

因为它里边还可能有你在里边儿

2599

你在里边可能还会有其他的情况

2600

比如说你这个a你这个没设计

2601

你是不是可能在你那个template那个JS里面声明一个什么东西是吧

2602

所以这种情况我就需要去分析

2603

但是我要在这里边儿去加这个message的时候

2604

我需要在你的message前面加S的时候

2605

我是不是就需要去分析你这个代码

2606

因为我不知道你这个代码

2607

我需要去分析你这个JS代码

2608

是我是不是就需要知道你这个JS的规则

2609

我需要GS的规则

2610

我是不是就需要构建一套JS的规范

2611

便利是不是是不是这个明白吗

2612

我如果没有这个位置

2613

没有这个位置

2614

没有这个这个东西是不是就需要去指点儿什么什么

2615

具体哪个哪个上面是不是

2616

但是我如果没有这个东西

2617

我们先不说类似指向明不明朗的问题

2618

我们先说没有位置的情况

2619

正常来说

2620

我们如果没有位置

2621

这是不是就应该加个S是吧

2622

或者什么

2623

或者说给他一个content执行环境是吧

2624

Context执行环境是吧

2625

是整个微实力的执行环境嘛

2626

是吧

2627

全局吗

2628

给他个这个吗

2629

但是我现在就算要给他这个

2630

我是不是也要分析你这个代码是这么写的是吧

2631

很多同学以为这个代码很好分析

2632

但是你这个只是JS

2633

你的JS可以写出花来

2634

你的三元表达式你可以写出花来

2635

当然这里边儿也只是三元表达式

2636

你在里边儿语句你可以写很多种语句表达式

2637

你完全可以写成花了

2638

语句表达师

2639

你是完全可以写出花来

2640

同学们

2641

是不是语句表的事

2642

你是不是可以完全写错了

2643

因为你是个语句

2644

JS语句

2645

妈的

2646

他是不识别我这个东西吗

2647

你看我这里边是不是还可以再写一些其他的

2648

比如说a等于一

2649

是不是可以这么写

2650

你看我这里边它是符合规范的

2651

因为我就是个JS语句

2652

那我这个a等于一

2653

就是在Z上加个一

2654

明白

2655

我这个这我这这这是JS语句

2656

我JS语句要去分析它太复杂了

2657

可太复杂了

2658

他分析不了

2659

知道吧

2660

他这个模板分析不了

2661

所以说V2里边儿他只能把这个东西拿去替换

2662

但是替换了之后

2663

我就必须要有一个

2664

我就必须要知道我这个东西

2665

是哪个上面的变量名

2666

所以说我这会儿就要this指过来

2667

明白了

2668

明白了吗

2669

现在知道为什么要用纸吗

2670

阿们

2671

就这一个知识点

2672

你去问很多大厂里边儿的

2673

大厂那边的人他可能都不知道

2674

为什么V1V2这块儿要用with

2675

缩短

2676

缩短作用意念

2677

我都说完了

2678

你还不知道吗

2679

答案是啥

2680

我都说完了

2681

你这个还没答案吗

2682

有同学其他同学知道总结一下

2683

总结一下就是

2684

我这个JS

2685

我这这一坨GS他是分析不了的

2686

这头GS是不是分析不了

2687

对啊

2688

没有办法分析GS

2689

那没有办法分析GS

2690

我这一坨东西就需要原模原样拿过来

2691

拿到这里边来

2692

这儿到时候这些是怎么执行的时候

2693

他这块儿就怎么执行

2694

但是我这个上边儿这些东西

2695

这个变量是指向的是谁

2696

是我Z实实实例上的变量

2697

我就必须把这个this实例上的变量就指向到这上面来

2698

是不是我就必须要让他把这个东西指向这上面来

2699

不然我这里边就只能什么

2700

只能这么写是吧

2701

只就不然就只能这么写

2702

是不是就只能这么写

2703

是不是

2704

所以说我必须必须要这么弄

2705

是不是提供动态的这个过程

2706

没有办法

2707

你要想在线离线编译

2708

只有背包

2709

只有背包

2710

所以说V3在离线编译的时候微一三

2711

在离线编译的时候

2712

对于这一块儿的东西

2713

它引入了背包

2714

在在线边

2715

但是被捕你知道有两兆

2716

同学们背包的代码有两兆

2717

他可能引到线上里边去吗

2718

所以说微商在线上编译的时候

2719

在线编译的时候

2720

照样是什么

2721

照样适用的位置

2722

照样用出来的也是位置

2723

所以这个又是个考题

2724

有的会

2725

有的同学

2726

有的人以一直以为

2727

包括我见过很多大厂的面试官

2728

他一直以为微山在线编译和离线编译都把位置去掉了

2729

其实不是

2730

这不是

2731

那些人就是直接就去看文章

2732

也没有看源码

2733

脑袋一直接一拍脑袋

2734

对那个就是

2735

咱们班很多同学也是这个样子

2736

天天去看文章

2737

看了文章你要就算

2738

就是学习这个东西

2739

学习

2740

一定是向有结果的人学习

2741

知道吧

2742

在线的意思

2743

我在线来哪个同学给他说

2744

我有讲过在线一天免疫

2745

我可不会再给你花时间讲了

2746

我至少花了

2747

20分钟讲这些变异

2748

你是不是没来前边儿

2749

还说没有听明白

2750

看录播吧

2751

你这个不就是拖节奏的人吗

2752

你这种你这种在团队里边不就拖节奏吗

2753

蜗牛你别急

2754

蜗牛

2755

你还是要加个急

2756

所以说这一步

2757

这一步你看V3这块儿的东西

2758

他就引入了背包离线电影

2759

因为背包它可以分析什么

2760

分析你这个GS

2761

然后去做不同的处理

2762

然后去做转换明白了吧

2763

所以说在这一步我们也就引入了什么离线编译在线边意思优化和运行司优化

2764

边意思优化什么意思

2765

就是我在编译的时候

2766

我可以跟框架做一

2767

做一些很多处理去做优化

2768

我们我们来说编译时优化和运行是优化

2769

比如说举个很简单例子

2770

V he right是吧

2771

V1这个代码

2772

V1这个项目

2773

为这个框架

2774

我们知道首先它会有一个什么

2775

你们写一个template模板式的

2776

会写这种template模板似的

2777

是不是可以写成个种类的模板

2778

是不是同学们

2779

喂

2780

是不是要写成类的模板

2781

你必须按照这种模板语法来写

2782

是啊

2783

他是不是只有这种这些模板语法

2784

而且你必须按照这种模板语法来解释

2785

是不是

2786

那么你按照这种模板语法来写

2787

那么就定死了

2788

你必须有一个什么

2789

它不同的什么

2790

就是它的写法

2791

就是它的写法

2792

开发的写法就必须有就就就就就有规则是吧

2793

有规则就是自定义了

2794

开发规则是不是因为必须

2795

因为你必须按照这么来说这么做

2796

他才能够做什么才能做编译是吧

2797

它能自自己去编译

2798

但是它编译的时候

2799

也正是因为这个原因

2800

她在编译的时候就可以去分析你的代码

2801

是吧

2802

分析你写的代码

2803

分析你的分析你写的代码

2804

就是你分析你写的这个什么结构是吧

2805

然后去做什么静态优化是吧

2806

打标签儿是吧

2807

静态优化

2808

你们今天还没有这个这个这个这个感触

2809

明天我们学V3的一个编译时计划

2810

你们就更有这个感触

2811

我们今天V2的编辑计划只是做了一个静态动地府

2812

不算跳过那个对比V3就更厉害

2813

是吧

2814

只有一个什么分析的代码去做编译时优化是吧

2815

编译时优化是吧

2816

编译时计划

2817

这个就是我们在编译的时候

2818

因为我因为他的规范

2819

你是按照他的规则来写的

2820

所以说我们在编译的时候可以这么有规则

2821

这是第一点

2822

第二点是什么

2823

四

2824

我的

2825

我的V

2826

我的V1

2827

我的所有的我的所有的数据

2828

或者说所有的东西它是定向于我的

2829

比如说我的

2830

我现在这个数据是动态数据是同学们

2831

我这个数据是动态数据

2832

Message是动态数据

2833

动态数据是不是

2834

那么message是动态数据操作message修改的这个render

2835

是不是

2836

我就把这个render和他的这个数据给关联起来

2837

我可以监听这个数据是不是

2838

唯一就是这个样子

2839

它可以监听这个message数据

2840

只要这个message数据发生了变化

2841

他重新执行这个render

2842

所以说他在中间维护了一套什么

2843

维护了一套关系

2844

这个关系就是什么

2845

动态数据发生改变

2846

动态数据

2847

就会做什么

2848

就会到我们的render里面去

2849

就会执行render

2850

所以呢

2851

维护了一套关系

2852

维护了什么关系

2853

维护了监听数据

2854

首先第一个他需要维护一个监听数据的过程是吧

2855

那么间接数据的过程是不是就有成本

2856

内存成本是吧

2857

是吧

2858

内存太满

2859

然后

2860

键的数据

2861

除了鉴定数据

2862

还要维护一个什么定向定向的render是吧是吧

2863

我知道我哪一个

2864

我累我累这个没死机

2865

我弄了之后就是

2866

构建这个东西是吧

2867

构建这这个没事的

2868

改了之后直接就构建这个render是吧

2869

直接执行这个render

2870

那所以说这儿有个定向render

2871

所以说这块儿就隐射出来了

2872

隐射出来了well e

2873

他方便

2874

四和小项目

2875

为什么方便适合小项目

2876

因为他在小项目上它的性能

2877

它反而还比rock的性能还好

2878

为什么

2879

因为他可以定向它的性能

2880

它可以去定向

2881

直接定向到某一个render里边去做修改

2882

是不是

2883

直接定向到某一个component

2884

定向到某一个组件

2885

因为我的微视整个微是不是有多个五个组件

2886

比如说微有五个组件

2887

我现在只有一个组件里面的数据修改了

2888

我是不是可以直接定向到这个主机里边儿的去做修改是吧

2889

所以说可以定向

2890

然后他还做了什么编译词的一个优化是

2891

编译时的一句话

2892

也正是因为他边意思

2893

他的规范导致了它的开发语言

2894

导致了它编译时的计划

2895

当然也到也因为他用了位置

2896

导致了他的大内存就是在大项目里边儿用不起来

2897

所以说大项目里面用不起来的原因是他第一要监听数据

2898

是吧

2899

定向是找到的意思

2900

定向就是一会儿跟你说定向

2901

定向就是我直接知道这个message就是定向

2902

我就就是我直接把message发生了修改

2903

我知道要去做哪个函数的开发是吧

2904

嗯

2905

对映射就可可以这么理解

2906

就相当于是个K

2907

就是你比如说我们现在没事姐

2908

这上面就维护了一个方形

2909

方形就是render

2910

知道吧

2911

这个意思蹲点

2912

是吧

2913

我直接我这个message

2914

我就因为它这边就会维护这一套意思

2915

那么react同学们又回到reactor再来两个框架对比

2916

让特

2917

他的写法是不是就极其灵活

2918

你们写write

2919

写JS的时候是不是写个div

2920

他就极其灵活

2921

因为它为什么它没有规范

2922

没有规范你写的V的时候

2923

他其实写的什么

2924

写的是reactor

2925

Dear create element是她写的是JS

2926

你写这个的时候其实是写的什么

2927

写的是JS是吧

2928

他并不是写这个东西

2929

是不是你所有的每一个标签他都会编译成这个方法

2930

是不是都是这个东西

2931

所有每一个标签都是最后编译出来都是这个东西

2932

是不是

2933

我这块儿稍微扩展一下

2934

你们后边儿学到的这块儿

2935

再回过头来看我这个录播

2936

你就会很明白了

2937

知道吧

2938

所以说在这一步你看

2939

对

2940

所以说你写的所有东西全是写的DS

2941

那么写的JS

2942

那么JS可以编译时优化吗

2943

JS可以编译时优化吗

2944

不行是不是

2945

JS不能编译时优化

2946

是不是

2947

键是不能编译词优化

2948

那所以说他不能分析

2949

他就分析不出来

2950

到底是哪一块的render对应哪一块的数据

2951

是不是

2952

是不是

2953

而且我们的react他到底维护这些数据

2954

他定他会维护这一套映射吗

2955

他不会维护这一套映射关系

2956

是不是所以说

2957

因为每一次数据修改

2958

它整个react都会全部构建一套

2959

咨询一遍

2960

同学们

2961

如果你现在可能听到懵逼

2962

但是你现在就算蒙逼

2963

你也不要管那么多

2964

你就先听

2965

等你后面把react学完了之后

2966

等你所学完了再回过来听我这个录播课

2967

你会觉得

2968

思想就会拔高一个维度

2969

所以说GFX在编译的时候

2970

JS是不能编译的是吧

2971

JS的编译时是不能够优化的

2972

不能够分析的是不是

2973

所以说他不能够在编译时优化是吧

2974

编译时优化是吧

2975

那么而且他没有什么没有关系的映射是吧

2976

关系的映射

2977

就是我们平时我的rock里边的数据全是存在着什么呢

2978

全是基于我的status是吧

2979

全是我的state包括的purpose

2980

它是抽离的是吧

2981

是吧

2982

这个东西它维度完全就不一样了

2983

它的维度是建立了一个映射这个维度

2984

REC的sight的维度

2985

他不一样了

2986

他的维度是什么

2987

它的维度是一个一个一个什么维度

2988

它的维度更多是一个数据

2989

就是数据

2990

知道吧

2991

数据是触发

2992

Render改变了一个动作

2993

所以说他会全部所有的东西

2994

没有这个东西

2995

所以说他会全部的全部走一遍

2996

全部走一遍冻地府

2997

全全部走一遍动物地府

2998

他现在新的动物地府其实也就是fiber比较的过程

2999

Fiber构建为reactor心动地府的过程

3000

其实也就是fiber构建的过程

3001

构建比较的过程

3002

所以说他在里边儿

3003

他就没有什么编译时优化它

3004

没有编译时优化它只能什么运行时优化

3005

它的运行是优化就只能放在了他只能他既然没有变形计话

3006

就只能运行计划

3007

那它运行优化就只能构建什么发一本架构

3008

Fiber可中断

3009

架构就这么来的

3010

知道吗

3011

因为他如果有编译时优化

3012

那他还需要去搞这么一套架构吗

3013

不需要了

3014

他是因为没有便意

3015

是优化

3016

他每一次运行的时候

3017

你每一次修改一个state的时候

3018

他可能整个全局

3019

整个页面都会需要去构建一下fever

3020

所有都都需要去构建一下版本

3021

然后重新来对比

3022

如果你的代码写的还烂

3023

那就性能就更差

3024

明白了吗

3025

V1还没变意识优化呢

3026

我在讲的啥啦

3027

V1同学哪个同学给他说微友有什有什么编译优化

3028

我才讲了几个小时

3029

还没变异是优化呢

3030

我这儿静态标签

3031

静态界面

3032

静态标签

3033

东地府才跟你说的

3034

还有关心社

3035

你你可能这个这个同学可能你们

3036

你们下来之后可能前后因为子

3037

知识的密集量还是很大的

3038

知识的密集量还是很大的

3039

所以说这就是编译时

3040

这就是框架层面的东西

3041

知道吧

3042

同学们好

3043

我们这个维度聊完了

3044

我们就聊边一词

3045

聊完了框架我们对比我们就完了

3046

我们就聊唯一的运行时了

3047

唯一运行时就只是为了运行时他没有优化

3048

知道吧

3049

Reactor就不一样了

3050

知道吧

3051

那肯定的

3052

我跟你说

3053

像你们这种这种人

3054

继续啊

3055

咱们继续

3056

然后我们就要聊什么

3057

聊我们的那个

3058

框架啦

3059

假够了是吧

3060

价格我们也聊完了是吧

3061

价格我们聊完了

3062

康奈尔是吧

3063

康奈尔我们也聊完了

3064

我们要聊什么

3065

聊真正核心的东西啦

3066

真正核心的东西了

3067

聊这个里边儿的东西

3068

继续编译运行时

3069

运行时的东西全在里边

3070

这个文件夹里边儿

3071

扣里边

3072

是不是全在里边儿呢

3073

来进到坑里边来

3074

扣里面呢

3075

空里面有几个地方

3076

第一个是我们的X

3077

Index这个东西就不用说了

3078

就是我们的这个最主要的这个indexnext也没什么东西

3079

它分了几个东西

3080

第一个是component component呢

3081

做一个什么

3082

这个是我们的come on a come on a它是声明一个字

3083

自定义组件是吧

3084

就是keeper lived这种组件是吧

3085

Come on a就是V1的组件

3086

V1支持的那种原声就是V1支持的这种组件

3087

科目呢

3088

然后完了之后就什么

3089

完了之后就是我们的全局global

3090

全局global API呢

3091

就是做什么

3092

就是一些我们的一些什么我们的比如说我们的事件呢

3093

事件说实话

3094

事件呢

3095

Youth啊

3096

什么什么柚子

3097

什么max

3098

你看youth

3099

Mix这些东西

3100

然后extent

3101

这些API就是去挂载这些东西

3102

全局的API都没有说了

3103

然后这个一会给大家说

3104

我先我们先说先做一个深广度优先的地位

3105

然后global完了之后

3106

然后就是instance instance这个东西就是

3107

构建实例

3108

包括我们刚刚说的那个render

3109

去构建render的过程是吧

3110

构建render的过程

3111

同学是吧

3112

构建的过程这块儿扩展render

3113

构建render是吧

3114

在这里边儿是吧

3115

SORN的过程这些东西是不是都在这里边

3116

都在这里边看到吗

3117

这是我们的过程

3118

都在这里边

3119

我刚刚给大家看了English儿是吧

3120

刚刚看到render的过程

3121

包括下划线杠C

3122

看见吗

3123

这就是下划线杠C

3124

杠C就是这个东西

3125

Create element看到吗

3126

就是下完杠C

3127

你们平时所谓的玩一杠C这东西

3128

然后在这一步

3129

在这一步继续往下

3130

就是我们的什么

3131

他各种什么事件

3132

生命周期

3133

初始化呀

3134

都在这里边

3135

都在这

3136

都在这一步

3137

都都都在这个这个English

3138

Instance这里边儿

3139

然后这一步完了之后

3140

这一步完了之后再来我们的observer observer就是我们的核心的双向数据绑定的阶段了

3141

知道吧

3142

就是我们核心的双向数据绑定的技能了

3143

知道双向数据绑定

3144

包括我们的调度这一层的东西

3145

全部在这个阶段

3146

然后再往下就是一些虚拟动

3147

就是我们的虚拟动

3148

心动就是微弱的

3149

我们的阶段

3150

我们就是微弱的阶段

3151

系统

3152

系统默

3153

这就十点了

3154

对啊

3155

这就十点了

3156

我们实力这块才开始呢

3157

明天还要讲

3158

差不多要讲一个小时

3159

一个多小时才能讲完

3160

我们把V2 VV2可能讲时间更多一点

3161

为什么说现在V三都出来了

3162

我们为什么V2还要多多一点呢

3163

因为V3和V2它是对比起来学习的

3164

V2的代码

3165

V3的V2你学明白了

3166

V3就简单的很

3167

真的是简单的很

3168

我就这么认为

3169

因为所有的东西全是基于A2座里做的处理是吧

3170

都要对比一下

3171

对我还会讲

3172

我一一都会对比都会比

3173

你不要着急

3174

V1V2V3

3175

我讲到那块儿来的时候

3176

自然自然

3177

你你们所有学的知识都会在我在无形当中就给你们灌输进来了

3178

所以很多同学说

3179

这块儿没跟你讲

3180

没讲优化

3181

没讲编译时优化

3182

知道吧

3183

你们学了很多知识

3184

在无形当中我就自然就给你们串输进来了

3185

继续啊

3186

所以说你看我在这一步

3187

这是我们虚拟动微露的是吧

3188

所以你看崴了完了之后

3189

这里面就是我们的所有

3190

你这个这个这是什么

3191

不不不

3192

我们再讲会儿

3193

再讲会再讲会儿

3194

在讲话

3195

我们今天都快快下课了吗

3196

在讲话讲话

3197

我们把这运行时的一个开端的东西给大家讲了

3198

这块东西讲了

3199

你们就觉得今天厉害

3200

所以我们在这一步

3201

首先是什么

3202

这几个阶段

3203

这几个阶段都是负责什么

3204

都是负责我们不同的东西是吧

3205

Component负责我们的模板是吧

3206

模板就是keep on live是吧

3207

狗狗API

3208

最上层API instance是吧

3209

Instance还有什么我们的observer是吧

3210

就是我们的数据收集和订阅这个东西

3211

还有就是我们的OUT是什么

3212

是我们的这个我们的那个那个双向数据绑定的过程

3213

这个YouTube工具类

3214

还有就是我们的运动是吧

3215

运动

3216

然后在这个阶段之上

3217

我们就要聊双向数据绑定了是吧

3218

双向数据绑定卡了吗

3219

其他同学卡了吗

3220

没有啊

3221

没有继续

3222

所以说在这个基础上

3223

这是我们所有核心的东西

3224

全是所有源码的核心

3225

运行时的编译时和运行时的核心源码

3226

现在这里边我们在这一步继续这块儿

3227

这里面呢

3228

这个几个概念

3229

第一个是object DeFine property

3230

第二个是observer

3231

还有water

3232

还有dip

3233

还有directive

3234

然后回到这个里面来

3235

到末我们回到这个里面

3236

我们首先来到这个里边儿

3237

把这个架构给大家啦

3238

明白

3239

加购了你们

3240

我们知道我们平时写的代码是在这儿

3241

是不是

3242

这是我们平时写的代码是吧

3243

同学们

3244

这是我们平时写代码

3245

这是我刚刚给大家看的那一套代码是吧

3246

是不是写的这个

3247

写的这些代码是不是我们平时写代码是吧

3248

平时写的代码它会编译成什么

3249

编译成render是吧

3250

编译成render是吧

3251

是不是在这块儿它会变异成render

3252

是不是你就把这种

3253

同学们

3254

你现在需要理解的就是这种把

3255

这种你在平时写代码的时候写的是不是这种代码写的

3256

比如说写这种代码写的

3257

我们像

3258

这种代码是不是写的这种代码

3259

是不是

3260

平时我们写代码

3261

写的这种代码是吧

3262

是写这种代码来写这种代码

3263

这个是不是一个指令这种就是就属于一个指令是不是不是

3264

这是不是属于一个指令是吧

3265

这种是不是也属于一个指令是吧

3266

这种东西它也是属于一个指令

3267

是不是

3268

这里边儿你可以把他说一说

3269

为什么指令V杠HTML的指令是不是是不是也是一个指令

3270

是不明白吗

3271

指令

3272

指令知道吗

3273

算

3274

这是一个指令

3275

那么不同的指令

3276

不同的指令

3277

这个每一个代码

3278

最后最后这些代码都会编译

3279

都会编译成什么

3280

都会编译成一个什么

3281

都会编译成我们的一个什么render函数是吧

3282

是不是是不是render函数

3283

是不是都会变成render函数

3284

这种render函数是

3285

同学们

3286

是不是那你现在就理解为一个指令就会变异成一个render函数好不好

3287

一个指令就会变成一个一个render函数

3288

什么意思呢

3289

比如说我这个指令的render函数就直接修改这个这个这个这个这个

3290

H2这个标签的展示或者修改这个东西

3291

这个render

3292

我这个render只修只负责修改H2的展示

3293

我这个论点只负责修改这一块的展示

3294

是不是所以说这块我们先引出来一个概念就是

3295

一个指令

3296

一个指令

3297

对应一个什么

3298

对应一个render

3299

是一个指令对应的render

3300

每个render有不同的功能

3301

是不是每个render有不同的功能

3302

是不是每个人都有不同的功能

3303

所以说这个维度

3304

所以说这个维度之上

3305

我们就是一个指令对应的render

3306

然后不同的render有不同的功能

3307

是吧

3308

然后在这个维度之上

3309

我们再来细分

3310

这是一个指令

3311

那我现在问你

3312

这是一个指令

3313

这是一个指令

3314

这是一个指令

3315

然后这儿又有一个指令知道吧

3316

这个指令这个指令是不一样的

3317

不同的指令知道吗

3318

因为它不它会修改的节点不一样

3319

知不知道

3320

不同的字典

3321

节点不一样

3322

懂吧

3323

所以说这一块儿就我们就对应起来了

3324

这个东西一个东西对应的指令是吧

3325

一个东西对一个指令

3326

这个指令会变成什么

3327

我们修改指令就是什么

3328

具体修改我们动节点的一个操作

3329

你可以这么理解

3330

好吧

3331

具体修改冻结点的操作

3332

具体修改冻结点的操作是吧

3333

这块同学们一定要举具体举起精神来听

3334

指令就是修改冻结的操作

3335

就是一个render

3336

就是一个你可以理解好吧

3337

然后在这一步

3338

那什么时候我来修改这么这么简单的操作

3339

什么时候同学们

3340

这个我们就先放到一边

3341

我们就回到这里边儿

3342

拉回到这里边儿

3343

回到这里面是做什么呢

3344

我这里边儿是不是一开始会有数据

3345

我会初始化数据times是吧

3346

我我我在登他的时候

3347

是不是会出

3348

我在溜溜溜溜溜溜溜溜a的时候

3349

是不是这里面是不是有是有这些动态数据

3350

是不是是不是有动态数据

3351

我在动态数据的时候

3352

我在初始化动态数据的时候

3353

同学们

3354

我会把这个数据变成一个什么可响应的

3355

什么叫做可响应可监听的呢

3356

就是说我能够监听得到这个数据什么时候

3357

被访问了

3358

被使用了

3359

能够坚定的到什么时候的时候被被修改了

3360

是不是所所以说我这块有一个什么

3361

有一个第一步会处理是什么

3362

数据

3363

处理成想意思小意思嘛

3364

就是可以可以可以监听可以

3365

可以监听被使用是吧

3366

然后被修改是不是是不是

3367

是不是被修改

3368

你不你现在不用管是什么来把它处理成响应式数据了是吧

3369

你现在不用管什么东西把它处理成响应式的

3370

但是它一定有一个东西把它处理成响应式数据了

3371

处理成什么可以被监听

3372

可以被响应被修改

3373

可以监听被修改被使用的时候和被修改的时候是吧

3374

那这个时候我这个数据

3375

现在在这一块儿是被处理成这个东西了

3376

那这个时候怎么办

3377

我什么时候

3378

我这个时候只是被处理了

3379

只是被处理了整整这个东西了

3380

但是我现在并没有做其他的处理

3381

那怎么办

3382

这块就会调用我这个render

3383

同学们是我就会调用render

3384

你看我这块儿是不是就会有这个过程

3385

我在这儿调用render的时候是吧

3386

我调用的时候是不是就会获取这个外语实力上面的

3387

随即获取的时候是不是就会使用

3388

是不是

3389

是不是

3390

获取的时候是不是就会使用是不是

3391

所以我这块儿就会执行我这个指令

3392

拿过来生成这个指指令的render是吧

3393

生成指令的执行

3394

我就会去执行第一遍我就会去执行

3395

执行的时候我就会去触发什么

3396

触发get获取数据是不是

3397

是啊

3398

是同学

3399

是啊

3400

是不是我冲

3401

出发的时候是不是就会

3402

是吧

3403

执行执行render执行任务的时候是不是就会触发

3404

获取数据是吧

3405

那么获取数据之后

3406

那我就把数据给他

3407

是吧

3408

我就把数据给他

3409

是吧

3410

触发之后我获取数据呢

3411

我把数据给他

3412

是吧

3413

把数据给他

3414

是吧

3415

把数据给他

3416

数据给他之后页面是不是就渲染出来了

3417

是吧

3418

数据给他之后

3419

页面是不是就渲染出来了

3420

咱们数据给他之后

3421

我这块儿

3422

这个render是不是就是具体去渲染页面啦

3423

是不是页面就渲染出来了

3424

这块明白吗

3425

是不是因为是不是渲染出来了

3426

这块有问题了

3427

我如果这儿这个数据又发生了改变了

3428

我如果没涉及的数据又发生了改变了怎么办

3429

那怎么办

3430

举个很近的例子

3431

我现在这个这个这个MS这个数据发生了改变怎么办

3432

对

3433

这块儿没有了这儿没有了这个没有了

3434

这个概念在线和离线变异这块的概念没有了

3435

编译那个概念是已经他衔接这个render

3436

他只是负责编译是吧

3437

这个render都已经这个代码都已经衔接到你的那个唯一实力上面了

3438

离线免一盒饭

3439

在线编译只是负责提供你这个render

3440

就说我这个render什么时候提供

3441

提供完了之后怎么用

3442

那是别人在

3443

那又是一个说法了是吧

3444

所以这一步这一步

3445

在这一步

3446

这一步在里边

3447

你看我们这一步

3448

这一步在里边儿

3449

我现在已经获取了数据了

3450

我这个render已经获取了数据

3451

已经渲染出来了

3452

但是我的数据发生修改怎么办

3453

那我就存起来

3454

存到里边儿

3455

是吧

3456

我就存到里边

3457

是吧

3458

我就先我就先把这个东西存到这里边儿是吧

3459

很简单

3460

比如我这一个报厅有个很简单是吧

3461

你看我这儿有一个卖报纸的报拼是吧

3462

有

3463

有个卖报纸的报厅是吧

3464

一个报厅

3465

这是个报厅一个厅

3466

我每一次有报纸来了之后

3467

我去找大爷

3468

我说大爷

3469

你这儿有报纸吗

3470

你这儿有今日什么读者

3471

什么北京日报

3472

这些东西有报纸吗

3473

我每一个人都去找大爷

3474

问

3475

有报纸吗

3476

每一个人都去找大爷

3477

有报纸吗

3478

每一天都去问大爷很烦是吧

3479

大也很烦

3480

大爷说

3481

哎呀

3482

你真烦

3483

你不要来了

3484

你以后把电话号码留在我这儿

3485

是不是把电话号码留到我这儿

3486

等有报纸了

3487

有这个报纸的时候我给你打电话就行了是吧

3488

是不是

3489

你先把电话留到我这儿

3490

然后有报纸了

3491

我打电话就行了

3492

你不需要每天都来问是不是

3493

所以说这块儿就出来一个什么过程

3494

出了一个订阅的过程

3495

是一个订阅的过程

3496

就是说我一开始

3497

我一开始我只需要把我这个render

3498

通过一个这个东西

3499

通过一个

3500

关联关系

3501

通过一个关联关系

3502

你不用管

3503

你现在不用管这个关联关系是什么

3504

把他订阅在这里边儿

3505

订阅起来

3506

记录到大爷的电话本上

3507

记录到电话本上

3508

就是把我们这个render的函数记录到电话本上

3509

记录了电话本儿记录的是什么关系呢

3510

记录的是这个render

3511

他到底使用了哪一个K

3512

是不是

3513

到底使用哪一个什么哪一个哪一个哪一个times是吧

3514

哪一个render使用

3515

到底使用了哪一个times

3516

我记录到这个电话本上是不是

3517

就是说我比如说我这个

3518

我这个message用了这个render是吧

3519

我这个message用了这个render

3520

我另一个message用了另一个render是吧

3521

我不同的S机可能用了不同的render是吧

3522

明白吗

3523

我这块儿就记录下来

3524

我这个关系是不是我到底是哪一个数据

3525

哪个数据

3526

用了我这个

3527

你哪个指令

3528

哪个render

3529

用了哪个指令

3530

我通过一个东西把它记录下来

3531

记录了大爷的电话本上

3532

明白吗

3533

这一会儿我就把这个映射关系记录下来了

3534

明白吗

3535

这块明白吗同学

3536

是吧

3537

所以说这块儿我们就回到这里边来

3538

这是我们的指令是吧

3539

这是我们的指令

3540

然后我们指令就会有什么

3541

也是我的指令是吧

3542

我们指令这块儿有一个编译成render是吧

3543

Render在线上执行的时候

3544

他就会去哭什么

3545

因为我这个数据已经被监听了是吧

3546

数据被监听了是不是数据被监听了之后

3547

我数render在执行的时候就会去获取数据是吧

3548

就会get数据

3549

获取数据的时候

3550

它监听到你这个数据在被获取了

3551

那怎么办

3552

他就拿到到底你是什么东西来获取我的数据是吧

3553

就是我这个render哪一个reader来获取我的数据和获取我什么数据

3554

是不是他这块儿是不是拿得到拿到之后构建成一个什么

3555

构建成一个关系

3556

把它记录到了电话本儿里边儿

3557

是不是是不是是不是

3558

是不明白吗

3559

记录倒电话本儿里边儿

3560

然后记录完了之后

3561

然后把数据给到这块儿渲染

3562

他页面执行渲染电话本是不就执行好了

3563

是不是就构建好了

3564

是不是是不是咱们店儿是不是就构建好了

3565

明白吗

3566

那电话本儿现在构建好了

3567

最后一个问题什么问题

3568

什么问题

3569

那我数据发生了变化之后怎么办

3570

我设置是不是能够建立的数据变化

3571

对

3572

我到电话本里边去

3573

拿到所有的电话本

3574

然后打电话就行了

3575

明白了吗

3576

明白了吗

3577

这个我听明白了吗

3578

通知

3579

对大爷

3580

是大爷通知你去拿报纸

3581

是大爷

3582

是这儿

3583

这个大爷说

3584

我这儿有报纸来给你们每一个人寄到我电话本上的人

3585

每一个人来打电话发报纸

3586

明白了吗

3587

同学们

3588

这个过程明白了吗

3589

所以说这里边就有几个概念

3590

第一个是observer的概念

3591

Observer的概念是做什么

3592

对呀

3593

给他不是每一个人打一次

3594

是哪些人订阅了不同的报纸

3595

比如说我订阅了今日周刊是吧

3596

我肯定给今日周刊

3597

今日今日都看到了之后

3598

我只给今日周刊打电话

3599

是不是你这个数据只有TIME4发生了变化

3600

我只给詹姆斯订阅times的人打电话

3601

没有

3602

对

3603

广播也不是广播

3604

你怎么知道怎么知道

3605

这是我现在跟你说了

3606

你不要关注什么数据变了

3607

我就跟你说了

3608

这个observer你现在不需要关注怎么变了

3609

是吧

3610

所以现在就几有几个

3611

首先要把数据处理成可以被监听的这个过程是吧

3612

就是observer这个方法是吧

3613

对

3614

你想

3615

你的一个指令可能有多个地方可以可以被使用

3616

你这个K是不是有多个地方可以被使用

3617

多正常

3618

是不是就跟你一个报纸有多个人订阅一样

3619

是不是

3620

然后这块儿有一个什么

3621

执行render

3622

执行render就是一个什么

3623

是吧

3624

这observer就是变处理成数据是吧

3625

这块还要引入一个概念

3626

就是什么water water的概念

3627

Water这个东西是什么概念

3628

Water这个概念是什么概念

3629

Water这个概念你可以把它理解为一个render

3630

就定义定义一个water

3631

一个render就定一个water

3632

什么意思呢

3633

我们的render是不是具体的执行

3634

但是我要把它添加到我的电话本上是吧

3635

同学们

3636

我是不是要发出一个动作

3637

我打电话是还有一个动作

3638

什么动作

3639

我至少要拿起手机

3640

我有一个手机来真正打这个过程是不是这个动作是谁来出谁来处理

3641

这个动作是谁来处理

3642

我这个地步只能拿到每一个人的电话号码

3643

是不是具体怎么打

3644

是谁来处理事务

3645

出来处理

3646

知道吧

3647

是我出来处理

3648

对walters负责

3649

怎么打电话

3650

对

3651

地铺存的是什么

3652

存的是龌龊

3653

关联关系懂不懂的

3654

库存的是water

3655

明白吗

3656

同学们

3657

明白了吗

3658

对

3659

Water就是去触发的过程

3660

但是第一步记录的就是怎么去触发的这个过程

3661

他就把它更形象化了

3662

他存的就不只是电话号码了

3663

他直接存的就是

3664

我直接拿到电话号码去打

3665

这个过程明白吗

3666

明白吗

3667

到末

3668

所以说这块儿一个RENDER1个人的

3669

这块儿我们就抽离出来

3670

一个论点哪块去啦

3671

一个render定义对应的water一个render

3672

一个render第一个water

3673

一个render第一个water

3674

然后这个water

3675

这个water

3676

当你被当这个water会被夹到什么地步里边是吧

3677

地里面龌龊维护了什么

3678

具体具体怎么执行render的过程

3679

是具体怎么执行render的过程

3680

就是怎么打电话的过程是吧

3681

打怎么打电话的过程

3682

怎么打

3683

怎么打电话的过程

3684

怎么通知的过程

3685

应该说什么

3686

因为通知的过程分为很多种是吧

3687

我们可以去发QQ

3688

发微信

3689

打语音

3690

打电话

3691

打视频

3692

是不是都是

3693

那这个过程就是water来控制知不知道

3694

地铺只是去存了一下他的这个这个这个这个这个go这个这个这个玩意儿地步

3695

相当于只是把这个扣扣号存起来了

3696

或者把这个电话号码存起来

3697

或者把微信号给存起来了

3698

懂不懂

3699

明白吗

3700

明白吗同学们

3701

明白这个过程了吗

3702

所以说这块儿最后拉一遍

3703

这个维度最后一遍

3704

拉一遍之后

3705

我们就可以拆深度递归

3706

广度递归

3707

第一这个这个维度就完了

3708

这是我们平时写的代码是吧

3709

每一个代码

3710

每一个指令会变异成不同的render是不是是吧

3711

每一个render都会变异成什么

3712

Water是吧

3713

都会变成不同的water是吧

3714

编编译成不同的water是吧

3715

处理成不同的water是吧

3716

因为不同的render他都需要去搭建关系是吧

3717

与这个的谱带方法搭建关系

3718

所以说都会变成不同的water

3719

然后在第一次执行的时候

3720

Walter第一次执行的时候

3721

第一次会默认water去打电话

3722

就是我来试播一下

3723

看一下这个东西通不通

3724

这个东西是不是真的能不能用是吧

3725

先试播一下

3726

然后

3727

他试了一下

3728

试验一下之后

3729

然后它就会汇聚什么render触发获取什么

3730

获取数据就执行什么

3731

执行给执行给他的时候

3732

他这块就拿得到到底是哪一个东西来获取他的数据是吧

3733

就是哪一个water来获取他的数据是吧

3734

他拿到了是这个water获取数据

3735

然后获取的是time是这个数据是吧

3736

然后就把water和这个time是存到那块儿

3737

存到我这个什么低谷里面去

3738

是吧

3739

存到我这个地步里边

3740

所以的谱只要你使用了一次

3741

他就会维护到哪边去

3742

维护到我这个地方里边的依赖维护成什么

3743

依赖维护成我我这个K

3744

我这个K和我这个water维护成一个映射的依赖

3745

明白吗

3746

然后

3747

当我数据发生了变化的时候

3748

然后我就去拿到监听的

3749

它可以监听吗

3750

监听的数据发生变化之后

3751

然后它会变成我所有的地铺

3752

我这个K里边

3753

这个K这个这个times所有的地方所有的电话号码监听我这个times

3754

的所有

3755

就是我这个time是哪些人订阅

3756

我这趟是所有water

3757

然后把所有的卡拿过去

3758

去咨询一下那个water

3759

全部去打个电话

3760

然后water打电话的动作就是就说叫什么

3761

怎么去执行render

3762

然后去执行render render执行完了之后渲染页面

3763

明白了吗

3764

明白了吗

3765

这块你不用管

3766

这个我们还没讲到这儿来

3767

讲道而来的时候你就明白了

3768

好吧

3769

明白吧

3770

好明白了之后

3771

今来今天下来给大家留一个东西

3772

然后你们下来之后自己去自必须要去把它看了

3773

这个API object DeFine property

3774

这个API刚刚那个同学说怎么去监听数据发生变化

3775

所以说这个东西你必须要去看比分

3776

不借给他去看一下这个API

3777

好吧

3778

你们下来之后去看一下这个API

3779

这个地方party

3780

这个API这个API它有一个get和set

3781

Get和set TE去看一下这个东西

3782

它的get和set

3783

Guitar center这个东西去看一下他这个东西好吧

3784

充足了

3785

好吧

3786

然后我们今天

3787

主要就讲了这些

3788

同学们今天的内容很多很多

3789

很多很多

3790

我们拿的很多

3791

编译时优化时对比

3792

包括运行时拉了很多

3793

然后我们把

3794

笔记发下好

3795

然后我们再然后我们在这个基础之上

3796

我们给大家讲了整整整体的价值和目录

3797

明天我们就讲V2的运行时

3798

然后在讲微三

3799

结合起来就讲一部分好吧

3800

所以说你们下来之后把这个APP好好看一下

3801

这个API4V1

3802

整个V2里面核心的东西全在这里边儿好吧

3803

同学

3804

今天就这样拜拜了

3805

拜拜拜拜拜拜拜拜拜拜

