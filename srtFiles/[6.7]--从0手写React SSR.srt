1
00:10:48,750 --> 00:10:49,980
打破了梦

2
00:10:49,980 --> 00:10:53,640
一场花开水平面家乡

3
00:10:54,060 --> 00:10:58,590
识破了我心里所有慌张

4
00:10:59,430 --> 00:11:00,870
慢慢成一片

5
00:11:01,740 --> 00:11:04,260
最后总潦草收场

6
00:11:04,710 --> 00:11:09,360
情深意种是不合时宜的谎

7
00:11:10,260 --> 00:11:13,110
细心的深邃距离

8
00:11:13,110 --> 00:11:14,490
不经意在

9
00:11:15,780 --> 00:11:17,310
遥远的贴近

10
00:11:17,340 --> 00:11:19,590
抓不住你的香气

11
00:11:21,150 --> 00:11:21,960
月光

12
00:11:21,960 --> 00:11:22,680
思念

13
00:11:22,680 --> 00:11:23,370
冷静

14
00:11:23,760 --> 00:11:24,420
浪漫

15
00:11:24,420 --> 00:11:26,100
归之私不语

16
00:11:26,550 --> 00:11:30,270
我比你想象之中要更加生气

17
00:11:30,960 --> 00:11:34,440
我不应该把折磨假装冷漠

18
00:11:34,440 --> 00:11:35,850
一笑而过

19
00:11:36,270 --> 00:11:37,080
这是我最想

20
00:11:40,320 --> 00:11:41,010
诉说

21
00:11:41,850 --> 00:11:43,740
不应该沉默

22
00:11:43,740 --> 00:11:46,200
假装生活

23
00:11:46,920 --> 00:11:47,790
只要你别把

24
00:11:49,770 --> 00:11:51,690
来说是种解脱

25
00:11:51,690 --> 00:11:52,620
破

26
00:11:52,830 --> 00:11:56,580
打破一场花开水平面

27
00:11:56,580 --> 00:11:57,690
家乡

28
00:11:58,080 --> 00:12:02,610
识破了我心里所有慌张

29
00:12:03,420 --> 00:12:04,890
慢慢成一片

30
00:12:05,760 --> 00:12:06,960
最后走了

31
00:12:06,960 --> 00:12:08,340
草草收场

32
00:12:08,730 --> 00:12:09,690
情深

33
00:12:09,690 --> 00:12:13,380
一种是不合时宜的晃

34
00:12:14,280 --> 00:12:21,270
星星的深邃距离不经历在你遥远又贴近

35
00:12:21,360 --> 00:12:23,610
抓不住你的香气

36
00:12:25,170 --> 00:12:26,040
月光

37
00:12:26,040 --> 00:12:26,910
思念

38
00:12:27,720 --> 00:12:28,410
浪漫

39
00:12:28,950 --> 00:12:30,120
丝语

40
00:12:30,510 --> 00:12:34,260
我比你想象之中更加生气

41
00:12:34,980 --> 00:12:35,850
我不应该买

42
00:12:38,100 --> 00:12:38,940
等我一下

43
00:12:40,230 --> 00:12:42,450
这是我曾经的冷漠

44
00:12:43,440 --> 00:12:45,000
我无法诉说

45
00:12:45,600 --> 00:12:46,230
我不应该

46
00:12:46,420 --> 00:12:47,740
折磨

47
00:12:47,740 --> 00:12:50,500
假装好好的生活

48
00:12:53,110 --> 00:12:56,260
对我来说是种解脱

49
00:12:56,920 --> 00:13:02,200
细心的深邃距离不经意在眼底

50
00:13:02,470 --> 00:13:06,460
遥远的地紧抓不住你的香气

51
00:13:07,870 --> 00:13:09,490
月光如思念

52
00:13:09,490 --> 00:13:11,050
安静浪漫

53
00:13:11,410 --> 00:13:12,820
沉思不语

54
00:13:13,180 --> 00:13:16,900
我比你想象之中要更加熟悉

55
00:13:17,650 --> 00:13:18,280
我不应该

56
00:13:19,780 --> 00:13:22,570
假装一笑带过

57
00:13:22,900 --> 00:13:27,640
这是我最想去的冷漠着诉说

58
00:13:28,270 --> 00:13:33,130
我不应该把沉默假装好好生活

59
00:13:33,580 --> 00:13:34,090
只要你

60
00:13:35,440 --> 00:13:38,710
对我来说是种解脱

61
00:14:00,510 --> 00:14:03,030
怎么怎么啦

62
00:14:03,930 --> 00:14:06,450
一分爱失去了光泽

63
00:14:07,140 --> 00:14:07,980
面对面

64
00:14:08,550 --> 00:14:09,300
背对背

65
00:14:10,230 --> 00:14:11,490
反复挣扎

66
00:14:11,490 --> 00:14:13,080
怎么都痛

67
00:14:13,830 --> 00:14:16,710
以为爱情像石头

68
00:14:16,980 --> 00:14:20,070
谁知一秒钟就碎落

69
00:14:20,280 --> 00:14:24,840
难道心痛都要不断打磨

70
00:14:26,040 --> 00:14:26,940
抱紧

71
00:14:28,560 --> 00:14:29,310
我

72
00:14:30,160 --> 00:14:37,030
比国王富有曾多么快乐

73
00:14:39,150 --> 00:14:40,320
先到了8.05

74
00:14:40,380 --> 00:14:42,300
我们继续开始今天课程

75
00:14:42,390 --> 00:14:46,770
今天的话我们其实还是S那一套流程

76
00:14:46,800 --> 00:14:50,310
只不过的话是我们用react重新来实现一遍

77
00:14:51,940 --> 00:14:53,560
首先的话我们

78
00:14:54,540 --> 00:14:55,290
回顾一下吧

79
00:14:55,320 --> 00:14:56,250
回顾一下就是

80
00:14:57,060 --> 00:14:57,690
是不重要的

81
00:14:57,690 --> 00:14:58,620
就是什么

82
00:14:58,620 --> 00:15:01,290
比如说客户端渲染它的一些优缺点

83
00:15:03,410 --> 00:15:05,090
这个的话上节课我们也都说过了

84
00:15:05,090 --> 00:15:07,280
大家再经过比如说三代码之后

85
00:15:07,280 --> 00:15:09,500
应该会感受更加明显一些

86
00:15:09,500 --> 00:15:10,760
比如说客户端渲染

87
00:15:10,760 --> 00:15:13,070
它缺点的话就是白屏时间长

88
00:15:13,070 --> 00:15:14,150
然后ICU不友好

89
00:15:14,150 --> 00:15:14,900
因为是空的嘛

90
00:15:15,230 --> 00:15:16,730
然后服务端渲染的话就是

91
00:15:18,170 --> 00:15:21,530
因为每次切换路由都需要去重新请求服务端

92
00:15:21,830 --> 00:15:22,460
然后的话

93
00:15:22,730 --> 00:15:24,620
比如说这种页面的体验不太友好

94
00:15:24,680 --> 00:15:25,370
另外的话

95
00:15:25,370 --> 00:15:27,680
因为是那种多页面的话

96
00:15:27,680 --> 00:15:28,880
每次都需要进行负担

97
00:15:28,880 --> 00:15:31,340
然后会造成一些比如说资源的重复请求

98
00:15:31,550 --> 00:15:33,440
每项每个页面的CSGS

99
00:15:33,650 --> 00:15:35,840
你每切换一个页面都需要重新去请求

100
00:15:36,140 --> 00:15:37,640
比如说服务器压力也是比较大的

101
00:15:37,700 --> 00:15:40,670
另外的话就是他可见也是不一定可操作的

102
00:15:40,670 --> 00:15:42,980
因为JS有可能没有加载完毕

103
00:15:42,980 --> 00:15:43,730
SSR呢

104
00:15:43,970 --> 00:15:47,480
就是结结合了他们两个的优点

105
00:15:47,510 --> 00:15:49,100
然后摒弃了他们的缺点

106
00:15:49,250 --> 00:15:51,080
最终还出现了这样一套

107
00:15:52,290 --> 00:15:53,760
SOD的这样的一种模式

108
00:15:55,780 --> 00:15:56,980
另外的话需要注意一点

109
00:15:56,980 --> 00:15:58,270
就是剩下

110
00:15:58,270 --> 00:15:58,900
没给大家算

111
00:15:58,900 --> 00:16:02,740
就是关于这个你要使用SSR还是不使用

112
00:16:02,740 --> 00:16:03,820
你要权衡下的

113
00:16:04,000 --> 00:16:06,010
如果你只是为了单纯的SEO

114
00:16:06,160 --> 00:16:07,690
其实你没必要用L的

115
00:16:07,870 --> 00:16:10,060
现在比如说你可以用一些预渲染

116
00:16:10,060 --> 00:16:11,530
比如说类似这种无毒浏览器

117
00:16:11,950 --> 00:16:13,510
现场市场化

118
00:16:13,510 --> 00:16:16,000
有一些比如说成熟的一些插件

119
00:16:16,000 --> 00:16:17,560
比如说一些present之类的

120
00:16:17,800 --> 00:16:20,380
这种预算的方式也可以解决Su的问题

121
00:16:20,650 --> 00:16:23,080
而如果你要是要解决一些性能的问题

122
00:16:23,080 --> 00:16:24,940
比如说你对性能要求非常极致

123
00:16:25,120 --> 00:16:26,440
那就需要采用FCA

124
00:16:26,470 --> 00:16:29,320
比如说我们像这些H5的活动

125
00:16:29,590 --> 00:16:30,250
比如说像

126
00:16:30,830 --> 00:16:31,280
要求

127
00:16:31,280 --> 00:16:32,510
比如说秒开之类的

128
00:16:32,810 --> 00:16:35,480
那你伤害她还是有必要的

129
00:16:38,450 --> 00:16:39,050
经过上节课

130
00:16:39,050 --> 00:16:40,100
大家对AR的话

131
00:16:40,310 --> 00:16:43,220
它的一个大体流程大家都能了解了吧

132
00:16:44,020 --> 00:16:44,980
都没有什么问题的

133
00:16:44,980 --> 00:16:45,850
可以回复下一

134
00:16:46,060 --> 00:16:47,980
然后我们就开始我们今天课程

135
00:16:51,490 --> 00:16:52,510
都可以去

136
00:16:52,510 --> 00:16:54,130
流程的话其实不难

137
00:16:55,300 --> 00:16:56,350
那既然大家都没的话

138
00:16:56,350 --> 00:16:57,760
那今天我们就来开始

139
00:16:57,760 --> 00:16:58,420
首先的话

140
00:16:59,470 --> 00:17:00,580
我们来看一下我们的技术战

141
00:17:00,700 --> 00:17:02,950
那就战的话肯定是react啦

142
00:17:03,010 --> 00:17:05,740
React就是一系列的他的一些全家桶

143
00:17:07,450 --> 00:17:08,350
然后服务端呢

144
00:17:08,470 --> 00:17:10,840
我们还是使用card有一系列的

145
00:17:12,790 --> 00:17:15,040
套的话雷子圈的吗

146
00:17:15,040 --> 00:17:16,960
就是还是成这两个阶段

147
00:17:16,960 --> 00:17:17,710
一个是客户端

148
00:17:17,860 --> 00:17:18,640
一个是服务站

149
00:17:20,400 --> 00:17:21,990
在我的文件夹中没有找到

150
00:17:23,190 --> 00:17:23,520
没有啊

151
00:17:23,520 --> 00:17:25,590
这个是我今天刚

152
00:17:27,260 --> 00:17:27,890
随便做一下

153
00:17:27,890 --> 00:17:28,700
这里头没啥东西

154
00:17:28,700 --> 00:17:31,520
上节课不是都给大家写的那个马克文档里了吗

155
00:17:31,910 --> 00:17:33,920
马克到文档里代代码就有了

156
00:17:34,280 --> 00:17:35,870
这个可以的话给大家发到群里

157
00:17:38,210 --> 00:17:39,560
这几个东西没什么东西

158
00:17:39,560 --> 00:17:40,970
就一个客户端渲染优缺点

159
00:17:40,970 --> 00:17:42,680
还有一个服务端渲染优缺点

160
00:17:43,070 --> 00:17:44,300
然后就没有什么其他的

161
00:17:47,170 --> 00:17:48,910
然后我们就直接来开发行了

162
00:17:48,940 --> 00:17:51,880
然后因为上节课我们已经做过微微的吗

163
00:17:51,970 --> 00:17:52,930
因为流程都一样

164
00:17:52,930 --> 00:17:54,010
只是语法加不一样

165
00:17:54,220 --> 00:17:54,850
所以说的话

166
00:17:54,940 --> 00:17:55,450
这块的话

167
00:17:55,450 --> 00:17:57,820
我们做起来的话就会更快一些

168
00:17:57,850 --> 00:18:00,580
但是她有些社会学区别的地方

169
00:18:00,970 --> 00:18:02,110
就是相

170
00:18:04,180 --> 00:18:04,870
区别的地方

171
00:18:05,170 --> 00:18:06,190
像五一的话

172
00:18:06,280 --> 00:18:08,530
是不是再给我们提供了像

173
00:18:09,110 --> 00:18:10,550
一些就是胡克的勾子

174
00:18:10,760 --> 00:18:12,110
可以让我们进行使用

175
00:18:12,560 --> 00:18:14,060
他可以就是子弹

176
00:18:16,740 --> 00:18:17,550
服务端运行

177
00:18:17,730 --> 00:18:19,560
然后客户端是不运行的

178
00:18:19,650 --> 00:18:22,590
就是我们在解决数据请求的时候

179
00:18:25,690 --> 00:18:26,800
而在right中呢

180
00:18:27,010 --> 00:18:30,310
可能这波的话就需要我们自己处理一下

181
00:18:30,310 --> 00:18:30,790
但是呢

182
00:18:30,850 --> 00:18:32,560
官方也给了一些相应的方案

183
00:18:32,770 --> 00:18:34,930
就是就是可能更多的

184
00:18:40,170 --> 00:18:42,000
需要自己动手

185
00:18:42,540 --> 00:18:43,320
就是比如说

186
00:18:45,360 --> 00:18:46,260
写一下

187
00:18:48,990 --> 00:18:51,330
其实这些看到原色就更加灵活一些

188
00:18:51,750 --> 00:18:53,310
比如说就像我们使用VC

189
00:18:53,310 --> 00:18:55,290
或者是HCR串巷的时候

190
00:18:55,290 --> 00:18:58,440
你会发现AV连目录都给你创建的非常的完整

191
00:18:58,440 --> 00:18:59,100
而且艾特呢

192
00:18:59,400 --> 00:19:01,140
他更多的是

193
00:19:02,290 --> 00:19:04,690
好的东西还需要你自己去动手去完成

194
00:19:06,110 --> 00:19:08,600
那么进来的话就来搭建吧

195
00:19:08,690 --> 00:19:10,100
还是那些流程

196
00:19:10,100 --> 00:19:12,050
就是需要做的事情还是那些

197
00:19:15,520 --> 00:19:16,900
一个是客户端

198
00:19:18,200 --> 00:19:20,750
搭建还有一个的话就是服务端搭建

199
00:19:20,750 --> 00:19:22,490
然后一些重复的代码的话

200
00:19:22,490 --> 00:19:24,830
我们可以就把你之前的代码复制过来

201
00:19:25,040 --> 00:19:26,150
然后做一下处理就行了

202
00:19:26,690 --> 00:19:27,770
最后一个就是S2

203
00:19:27,770 --> 00:19:28,880
它处理

204
00:19:30,290 --> 00:19:30,770
处理的话

205
00:19:30,770 --> 00:19:31,910
主要还是那两大部分

206
00:19:31,910 --> 00:19:33,140
一个是路由处理

207
00:19:33,200 --> 00:19:34,610
还有一个请求处理

208
00:19:35,300 --> 00:19:36,230
但上线之后的话

209
00:19:36,230 --> 00:19:37,670
其实除了这些的话

210
00:19:37,970 --> 00:19:40,520
比如说你弄得上线之后还需要做一些缓存之类的

211
00:19:40,760 --> 00:19:41,540
因为像这个

212
00:19:42,480 --> 00:19:43,080
这启用服务

213
00:19:43,080 --> 00:19:44,190
但他的压力还是有的

214
00:19:44,190 --> 00:19:44,550
所以说

215
00:19:46,460 --> 00:19:47,090
关于服务端

216
00:19:47,090 --> 00:19:49,040
你这个扩容或者其他之类的

217
00:19:49,160 --> 00:19:50,360
都需要做好这个处理的

218
00:19:51,820 --> 00:19:53,260
跨鱼池里的鱼

219
00:19:54,040 --> 00:19:55,390
浴池里弄得没有跨越

220
00:19:57,290 --> 00:20:01,160
你说前段前运动的时候跨越这个有多种方式都可以配置

221
00:20:02,150 --> 00:20:04,040
一会儿的话后边儿有后边儿跨越的话

222
00:20:04,040 --> 00:20:06,200
我们可以在note里面允许跨域就可以了

223
00:20:08,200 --> 00:20:10,270
那我们就来开始具体变形的代码啦

224
00:20:10,270 --> 00:20:12,220
这里创建好了这样一个文件夹

225
00:20:12,370 --> 00:20:13,300
然后首先第一步

226
00:20:13,840 --> 00:20:16,180
那初始化项目是不是第一步的

227
00:20:18,030 --> 00:20:18,540
抓项目

228
00:20:18,540 --> 00:20:19,920
然后就整理我们这个目录

229
00:20:19,920 --> 00:20:22,950
首先必要的目录里边可以写我们的一些配置文件

230
00:20:23,340 --> 00:20:24,990
或者是有同学写咖啡的也行

231
00:20:24,990 --> 00:20:25,710
这个都可以

232
00:20:26,600 --> 00:20:27,680
并不是强制要求的

233
00:20:27,710 --> 00:20:29,960
然后MC我们的缘

234
00:20:34,670 --> 00:20:35,960
相信经过这两节课之后

235
00:20:35,960 --> 00:20:38,420
你对流程就会特别熟悉了

236
00:20:40,610 --> 00:20:43,730
然后分为我们clint客户端

237
00:20:43,790 --> 00:20:45,110
还有我们的食物端

238
00:20:47,080 --> 00:20:50,170
这是我们大体的一个项目目录的一个结构

239
00:20:52,100 --> 00:20:54,170
那这里我们先把我们的客户端让它跑起来

240
00:20:54,170 --> 00:20:55,640
这里的话我们是使用react的

241
00:20:55,820 --> 00:20:56,780
他的户口的写法

242
00:20:57,440 --> 00:20:59,240
因为现在的话re TE

243
00:21:00,420 --> 00:21:01,170
都已经

244
00:21:01,380 --> 00:21:03,900
现在这些是不是主要的18发布了

245
00:21:04,320 --> 00:21:05,130
已经发布了吧

246
00:21:05,340 --> 00:21:05,760
应该是

247
00:21:06,640 --> 00:21:08,470
所以说现在比较推荐使用或者是吧

248
00:21:08,470 --> 00:21:09,610
因为它更加灵活了

249
00:21:11,690 --> 00:21:13,460
那首先我们要使用re开发的话

250
00:21:13,460 --> 00:21:17,060
首先我们把包安装上react react

251
00:21:17,930 --> 00:21:19,940
然后我们这边给我们提供了人的方法

252
00:21:19,940 --> 00:21:23,480
比如说我们组建我们的容器是进行绑定

253
00:21:25,240 --> 00:21:26,500
到我们的肯定的下边儿

254
00:21:26,830 --> 00:21:28,360
比如说我们的页面的话

255
00:21:28,360 --> 00:21:30,340
都放到我们的配置文件下边

256
00:21:30,430 --> 00:21:33,400
配置文件下边儿我们新建一个根组件

257
00:21:33,730 --> 00:21:34,840
点GSX

258
00:21:37,280 --> 00:21:39,740
这里就先写下最基础的一个组建了

259
00:21:40,310 --> 00:21:41,600
我们的right引入进来

260
00:21:41,840 --> 00:21:42,980
是不是刚刚我们安装上了

261
00:21:43,880 --> 00:21:45,350
然后函数组件写法

262
00:21:45,350 --> 00:21:47,060
可用户的写法等于

263
00:21:48,470 --> 00:21:49,400
像之前的话

264
00:21:49,940 --> 00:21:50,960
之所以用卡拉组件

265
00:21:50,960 --> 00:21:53,690
是因为函数组件它是是无状态的

266
00:21:54,800 --> 00:21:55,700
有了户口之后呢

267
00:21:55,820 --> 00:21:58,340
我们在函数组件里边也可以处理状态了

268
00:21:58,340 --> 00:22:00,590
所以说我们就不太推荐

269
00:22:00,710 --> 00:22:02,090
不太推荐就是用class了

270
00:22:02,120 --> 00:22:03,170
如果是旧项目的话

271
00:22:03,170 --> 00:22:03,800
你没有办法

272
00:22:04,310 --> 00:22:05,300
其实他们也可以兼容

273
00:22:05,300 --> 00:22:06,410
混合血是没有问题

274
00:22:06,530 --> 00:22:06,890
就是说

275
00:22:07,910 --> 00:22:10,340
有新的东西还是比较推荐去尝试一下

276
00:22:10,760 --> 00:22:12,620
因为有新的东西自然有他出现

277
00:22:12,620 --> 00:22:14,420
旅游他肯定是比之前更好的

278
00:22:14,420 --> 00:22:17,960
要不也不会进行这种技术的更新

279
00:22:17,960 --> 00:22:19,070
版本的迭代等

280
00:22:20,850 --> 00:22:22,080
就像我们的ES6一样

281
00:22:22,170 --> 00:22:27,240
是给我们提供了很多的语法糖是我们的开发效率是有很大的一个提升

282
00:22:28,230 --> 00:22:30,420
我们就简单的写个H1吧

283
00:22:30,420 --> 00:22:32,370
先让他能跑起来

284
00:22:32,370 --> 00:22:33,450
也是hello

285
00:22:34,650 --> 00:22:35,040
然后呢

286
00:22:35,550 --> 00:22:38,040
组建写完之后就是非常简单一个函数组件

287
00:22:38,340 --> 00:22:39,060
写完之后

288
00:22:39,120 --> 00:22:40,230
然后把它打出去

289
00:22:42,120 --> 00:22:42,900
这样就完了

290
00:22:43,080 --> 00:22:43,530
写完了

291
00:22:44,710 --> 00:22:45,730
然后我们要编译的话

292
00:22:45,730 --> 00:22:47,470
是不是我们还得写一个入口

293
00:22:47,470 --> 00:22:48,610
因为你像ipad的话

294
00:22:48,850 --> 00:22:49,510
它只能是

295
00:22:50,480 --> 00:22:52,880
像其他的一些文件是不能作为入口的

296
00:22:52,880 --> 00:22:53,630
所以说这里的话

297
00:22:53,630 --> 00:22:55,310
我们还是会一样

298
00:22:55,430 --> 00:22:56,870
我们写一个

299
00:22:57,530 --> 00:22:58,220
客户端入口

300
00:22:58,250 --> 00:22:59,450
还有一个服务端入口

301
00:22:59,450 --> 00:23:00,920
然后客单入口

302
00:23:00,920 --> 00:23:03,620
我们就给它命名为叫林启

303
00:23:04,610 --> 00:23:05,450
可怜他

304
00:23:06,880 --> 00:23:07,090
对

305
00:23:08,770 --> 00:23:09,880
这就是我们的

306
00:23:11,200 --> 00:23:11,920
蔻丹入口

307
00:23:13,690 --> 00:23:15,970
首先也是把我们的react引入进来

308
00:23:18,310 --> 00:23:20,260
这里为什么要引入这个react呢

309
00:23:20,410 --> 00:23:21,580
就这里可以看到

310
00:23:21,700 --> 00:23:23,560
你会发现这里并没有用到ride

311
00:23:23,710 --> 00:23:25,060
为什么还要把他引入进来呢

312
00:23:25,270 --> 00:23:28,600
因为其他底层它是调用到react.create element方法

313
00:23:28,930 --> 00:23:29,830
虽然说你没有使用

314
00:23:29,830 --> 00:23:32,230
其实它的底层是使用的使用到的

315
00:23:32,350 --> 00:23:34,030
所以说这个还需要把它引入进来

316
00:23:34,030 --> 00:23:35,830
你不引入的话还是会报错的

317
00:23:36,700 --> 00:23:37,510
曝出来很明显

318
00:23:37,510 --> 00:23:38,740
它会提示你找不到right

319
00:23:38,740 --> 00:23:40,360
你只要引入进来就可以了

320
00:23:42,460 --> 00:23:44,350
然后我们引入react

321
00:23:44,560 --> 00:23:44,800
当

322
00:23:46,120 --> 00:23:48,520
我们要形容它提供的人的方法

323
00:23:50,420 --> 00:23:52,460
然后把我们的APP组件引入进来

324
00:23:53,720 --> 00:23:56,270
是不是在我们的点斜杠配置下面的

325
00:24:00,250 --> 00:24:02,860
然后使用他的认字方法

326
00:24:03,310 --> 00:24:06,520
教我们的组件渲染到我们的盗墓容器里边

327
00:24:09,990 --> 00:24:10,620
APP

328
00:24:12,730 --> 00:24:13,750
Document

329
00:24:16,030 --> 00:24:19,450
绑定我们页面模板的容器里面白的

330
00:24:19,480 --> 00:24:21,370
比如说我们的就叫root了

331
00:24:21,820 --> 00:24:22,900
一会儿没什么感受

332
00:24:22,990 --> 00:24:25,510
就可以给他绑定上这样非常简单的

333
00:24:28,180 --> 00:24:30,040
入口我们就完成了

334
00:24:30,580 --> 00:24:31,000
这块的话

335
00:24:31,000 --> 00:24:32,230
我们可能写的更快一些

336
00:24:32,500 --> 00:24:34,810
因为像有上节课的基础在那

337
00:24:34,810 --> 00:24:35,770
所以说这里我们就可以

338
00:24:37,140 --> 00:24:39,870
可以快速的写一下他的一些配置等等一些其他东西

339
00:24:40,230 --> 00:24:42,540
然后我们也是为了测试我们的页面路由

340
00:24:42,720 --> 00:24:43,710
我们需要两个页面

341
00:24:44,070 --> 00:24:45,480
比如说一个叫home

342
00:24:46,790 --> 00:24:48,380
还有一个的话叫about

343
00:24:51,660 --> 00:24:55,110
我们新建文件一个是home JSP

344
00:24:55,410 --> 00:25:02,250
还有一个就是我们的cshome.cs的话在危中带软冲

345
00:25:02,250 --> 00:25:03,480
你直接把他引入进来就行

346
00:25:03,510 --> 00:25:04,350
他不像view

347
00:25:04,350 --> 00:25:06,990
一是给我们提供了styles script

348
00:25:07,140 --> 00:25:08,010
还有template

349
00:25:08,010 --> 00:25:09,570
这里的话用JS的话

350
00:25:10,110 --> 00:25:12,780
它相对来说可能对你的价值功底要求高一些吧

351
00:25:12,960 --> 00:25:18,330
因为这也是为什么好多大厂或者大型项目推荐使用APP的一个原因

352
00:25:19,690 --> 00:25:22,390
并不是说唯一不适合打印项目他也可以做

353
00:25:22,510 --> 00:25:25,180
但是对于后期的一个维护或者接待之类的

354
00:25:25,810 --> 00:25:28,150
就是整体的一个全知识的话

355
00:25:28,210 --> 00:25:29,230
还是推荐用react

356
00:25:30,760 --> 00:25:32,680
比如说大型或者复杂的项目之类的

357
00:25:37,620 --> 00:25:39,390
这点儿后

358
00:25:41,490 --> 00:25:41,880
实验

359
00:25:45,170 --> 00:25:48,320
同样也是需要把引入进来

360
00:25:52,330 --> 00:25:55,510
然后创建我们的home主键页面组件

361
00:25:57,310 --> 00:25:58,660
不就写上一个函数就行了

362
00:25:58,660 --> 00:25:59,110
然后

363
00:26:01,920 --> 00:26:04,110
一定要记得最终return

364
00:26:08,040 --> 00:26:08,760
class name

365
00:26:09,600 --> 00:26:12,150
然后我们这里给它命名叫红配紫吧

366
00:26:15,740 --> 00:26:16,010
碰

367
00:26:17,400 --> 00:26:18,390
最终写完之后

368
00:26:18,390 --> 00:26:20,790
同样也是将它倒出去给fault

369
00:26:22,580 --> 00:26:23,750
在我们的home组建

370
00:26:23,840 --> 00:26:24,800
组建就完成了

371
00:26:24,800 --> 00:26:27,380
然后简单写一下它的样式

372
00:26:27,380 --> 00:26:28,790
给它一个颜色

373
00:26:32,420 --> 00:26:33,890
我们的后面是不是就完成了

374
00:26:33,950 --> 00:26:35,390
同样来复制一下

375
00:26:36,120 --> 00:26:37,980
完成一下我们的about之间

376
00:26:39,390 --> 00:26:40,020
about

377
00:26:43,450 --> 00:26:46,150
相关于这个还有同学不熟悉的吗

378
00:26:46,360 --> 00:26:47,200
应该

379
00:26:47,800 --> 00:26:50,080
录播课应该有这个

380
00:26:50,260 --> 00:26:50,950
户口则可

381
00:26:50,950 --> 00:26:52,660
垃圾都给大家有讲过

382
00:26:54,600 --> 00:26:55,710
有不熟悉的同学吗

383
00:26:56,010 --> 00:26:57,540
不熟悉的同学可以回家领

384
00:26:58,110 --> 00:27:00,840
关于可能还有同学是无意技术站

385
00:27:00,840 --> 00:27:03,180
所以说可能对这个事不太熟悉

386
00:27:06,300 --> 00:27:06,870
放了假

387
00:27:08,820 --> 00:27:09,360
有同讲

388
00:27:10,290 --> 00:27:12,300
因为有的公司的话

389
00:27:12,600 --> 00:27:15,060
他技术战是不是有的就只是无忧

390
00:27:15,060 --> 00:27:16,050
亦或者是有的

391
00:27:16,840 --> 00:27:17,800
就只是react

392
00:27:18,520 --> 00:27:19,420
所以说有同学

393
00:27:20,110 --> 00:27:21,280
但是你学这些课之后

394
00:27:21,280 --> 00:27:24,220
你你会发现其实除了语法也不同

395
00:27:24,430 --> 00:27:28,420
这方面他的一些比如说思想之类的还是大同小异的

396
00:27:30,390 --> 00:27:32,010
熟悉之后都可以进行使用

397
00:27:32,070 --> 00:27:36,690
但是尽量也不要让这些技术站单衣单衣的话对于找工作来说

398
00:27:39,020 --> 00:27:41,480
还是不占优势的砖一样的吧

399
00:27:43,860 --> 00:27:45,090
这个通病

400
00:27:45,090 --> 00:27:46,200
都是大部分都是

401
00:27:47,180 --> 00:27:49,040
是不沉浸在业务之中

402
00:27:49,550 --> 00:27:51,470
或者是每天就是为了完成需求

403
00:27:51,470 --> 00:27:53,390
天天需求就写不完的需求

404
00:27:56,110 --> 00:27:56,800
这个bug

405
00:27:58,010 --> 00:28:00,170
然后这里要改一下比较多吧

406
00:28:02,830 --> 00:28:03,340
About

407
00:28:04,460 --> 00:28:05,780
然后改完了吧

408
00:28:05,990 --> 00:28:07,970
我把我的配置可以啦

409
00:28:08,900 --> 00:28:11,480
然后同样给他一点雅思

410
00:28:18,800 --> 00:28:20,990
这个给个卡了

411
00:28:22,370 --> 00:28:23,420
所以说在平时的话

412
00:28:23,570 --> 00:28:25,520
尽量还是多给自己充充电

413
00:28:25,520 --> 00:28:27,140
就是给自己留一些时间

414
00:28:27,140 --> 00:28:28,340
比如说每周

415
00:28:29,100 --> 00:28:30,360
拿以前学习之类的

416
00:28:30,390 --> 00:28:31,770
像我们现在在课上写

417
00:28:31,770 --> 00:28:34,650
每周还能强迫自己一块儿学一下习相

418
00:28:34,650 --> 00:28:35,880
如果你课程结束之后

419
00:28:37,350 --> 00:28:39,300
或者在以后您的比如说

420
00:28:41,500 --> 00:28:43,180
职场时间安装或者是其他时间

421
00:28:43,630 --> 00:28:45,580
一定要养成自己一个充电的习惯

422
00:28:45,580 --> 00:28:46,360
因为技术的话

423
00:28:46,360 --> 00:28:48,100
它是总是不断更新的

424
00:28:48,370 --> 00:28:50,110
如果说你后期转其他岗位

425
00:28:50,110 --> 00:28:51,880
比如说转管理岗之类的

426
00:28:51,880 --> 00:28:52,540
那还好一点

427
00:28:52,870 --> 00:28:54,610
如果你一直想从事技术这一搞的话

428
00:28:54,610 --> 00:28:56,830
其实还是不是那么轻松的

429
00:28:56,890 --> 00:28:57,610
就是经常的话

430
00:28:57,610 --> 00:28:59,650
因为技术更新特别快嘛

431
00:28:59,740 --> 00:29:00,340
所以说的话

432
00:29:00,550 --> 00:29:03,100
我们不能单单的只追求这个技术

433
00:29:03,100 --> 00:29:05,920
应该更多的去是否了解它的底层的东西

434
00:29:06,250 --> 00:29:07,180
因为你在怎么变

435
00:29:07,300 --> 00:29:09,850
它底层是不是还是用剪子去写这些的

436
00:29:11,290 --> 00:29:14,080
所以说关于这些非常基础的东西

437
00:29:14,080 --> 00:29:15,340
我们还是要打好基础的

438
00:29:15,640 --> 00:29:16,750
你打好基础之后

439
00:29:16,900 --> 00:29:17,890
后边儿

440
00:29:18,070 --> 00:29:20,020
你这些东西学起来就会非常的快的

441
00:29:20,470 --> 00:29:24,490
因为像技术行是不是也经常流行一句话叫做一通百通

442
00:29:24,730 --> 00:29:26,320
你一一门技术精通之后

443
00:29:26,320 --> 00:29:29,710
其你其他技术之后再学其他技术的话

444
00:29:29,740 --> 00:29:31,030
就非常还是挺快的

445
00:29:32,650 --> 00:29:32,980
这样话

446
00:29:32,980 --> 00:29:34,570
我们两个页面我们就写完了

447
00:29:34,570 --> 00:29:37,300
那我们就有了页面是我们就需要加路由

448
00:29:38,230 --> 00:29:40,240
这个页面那你没有路由器关联

449
00:29:40,300 --> 00:29:44,980
那怎么去当访问的时候选出指定路由来指定的页面来呢

450
00:29:45,100 --> 00:29:47,830
这是我们这里安装上react route down

451
00:29:50,970 --> 00:29:51,870
Read them的话

452
00:29:51,870 --> 00:29:54,090
主要是用在比如说就是

453
00:29:56,720 --> 00:29:57,830
我们提供的一个

454
00:29:59,830 --> 00:30:01,060
路由啊

455
00:30:01,360 --> 00:30:01,570
ITELA

456
00:30:02,620 --> 00:30:03,070
安装啥

457
00:30:05,250 --> 00:30:07,800
在的话其实可以看一下它的官网

458
00:30:14,760 --> 00:30:17,940
下线的话right已经是五点差了

459
00:30:18,000 --> 00:30:18,570
应该是

460
00:30:19,620 --> 00:30:20,550
我看一下安装的

461
00:30:20,550 --> 00:30:24,060
你知道现在已经是已经是五点X版本了

462
00:30:24,060 --> 00:30:25,830
像四点叉三点叉

463
00:30:25,830 --> 00:30:29,970
他们之间还是好像是三点叉到四点叉之后

464
00:30:29,970 --> 00:30:31,680
它的区别还是挺大的

465
00:30:34,330 --> 00:30:35,710
像之前我们可能写无忧

466
00:30:35,710 --> 00:30:36,850
亦或者是写re TE

467
00:30:37,640 --> 00:30:40,160
可能之前经常有那种集中式的配置路由

468
00:30:40,160 --> 00:30:42,050
是不是先把路由在配置完

469
00:30:42,050 --> 00:30:42,770
然后再去

470
00:30:43,790 --> 00:30:44,570
进行渲染

471
00:30:44,750 --> 00:30:45,470
而现在的话

472
00:30:45,740 --> 00:30:48,170
因为我们这是一种组件化科方式吗

473
00:30:48,260 --> 00:30:50,000
推唱就是组件化的这种思想

474
00:30:50,390 --> 00:30:51,050
所以说的话

475
00:30:51,170 --> 00:30:51,830
现在这种

476
00:30:52,630 --> 00:30:53,860
最新的这次就是

477
00:30:54,920 --> 00:30:57,050
一切皆组建我们的每一个路由

478
00:30:57,170 --> 00:30:58,700
也可以是单独的组件

479
00:30:58,850 --> 00:30:59,510
比如说

480
00:31:01,580 --> 00:31:02,180
这里还有

481
00:31:02,570 --> 00:31:06,380
它也兼容之前这种独特咖啡哥这种集中式的配置方式

482
00:31:06,680 --> 00:31:07,730
你可以采用这种方式

483
00:31:07,730 --> 00:31:10,340
也可以采用我们现在的其他写法

484
00:31:10,340 --> 00:31:11,480
都是可以的就是

485
00:31:13,040 --> 00:31:14,480
之前的写法

486
00:31:19,620 --> 00:31:21,120
这个如此

487
00:31:23,440 --> 00:31:24,580
这个不是集中式的

488
00:31:25,440 --> 00:31:27,450
自己写的一种便利方式去渲染

489
00:31:27,480 --> 00:31:27,900
可以看到

490
00:31:28,350 --> 00:31:31,140
所以每一个其实他都是一个小组件

491
00:31:31,140 --> 00:31:34,080
Root每一个路由其实也是一个组件

492
00:31:37,810 --> 00:31:38,650
等我们写完之后

493
00:31:38,650 --> 00:31:39,490
我们就来写一下吧

494
00:31:39,550 --> 00:31:42,010
通过写代码来感受一下会更明显一些

495
00:31:42,940 --> 00:31:43,450
这里的话

496
00:31:43,450 --> 00:31:46,090
我们还需要新建一个如此

497
00:31:47,070 --> 00:31:49,080
我项目由用了懒加载

498
00:31:54,640 --> 00:31:58,960
记得天天看文章好像是有支持有支持了吧

499
00:31:58,960 --> 00:32:02,710
好像之前用react的累加是奔驰SR是不支持的

500
00:32:03,370 --> 00:32:06,310
最新好像可以看下最新的版本

501
00:32:06,860 --> 00:32:10,910
我记得好像有关于这个NS和Li的一个支持的说法

502
00:32:13,380 --> 00:32:15,990
我们这里写一个如此可以看一下

503
00:32:17,390 --> 00:32:18,350
如果实在不行的话

504
00:32:18,350 --> 00:32:18,590
那

505
00:32:19,640 --> 00:32:20,840
只能换其他方案

506
00:32:22,830 --> 00:32:25,770
写代码还是很灵活的一个方案不同之后我们就可以

507
00:32:25,770 --> 00:32:27,570
需要尝试另一种写法

508
00:32:31,300 --> 00:32:33,400
然后同样引入react

509
00:32:39,890 --> 00:32:40,940
Import

510
00:32:43,160 --> 00:32:43,760
如此

511
00:32:43,820 --> 00:32:45,140
然后Switch

512
00:32:47,230 --> 00:32:48,040
使维持的话

513
00:32:48,040 --> 00:32:50,440
这个关于Switch的这些

514
00:32:50,440 --> 00:32:52,630
他的一些解释在录播课中都有

515
00:32:52,630 --> 00:32:55,060
职位策划机就相当于我们的一个抽屉

516
00:32:55,060 --> 00:32:56,680
每次只能抽出一个来之类的

517
00:32:56,710 --> 00:32:58,390
每次他只能选其中一个组件

518
00:32:58,540 --> 00:32:59,680
就前面匹配到之后

519
00:32:59,770 --> 00:33:01,150
后面是不是就不能匹配到了

520
00:33:02,230 --> 00:33:02,650
然后

521
00:33:04,910 --> 00:33:06,080
引入我们的页面

522
00:33:07,930 --> 00:33:10,300
这些个配置是下班儿的

523
00:33:16,060 --> 00:33:17,830
然后home

524
00:33:27,790 --> 00:33:29,530
这样是不是我们就页面就有了

525
00:33:29,920 --> 00:33:33,550
然后这里我们先把我们的路由统一写到一个数组里

526
00:33:33,580 --> 00:33:35,080
方便我们进行管理

527
00:33:35,110 --> 00:33:36,160
因为一会儿的话

528
00:33:36,160 --> 00:33:38,530
这个我们也是需要在服务端进行使用的

529
00:33:38,740 --> 00:33:39,850
因为服务端我们需要

530
00:33:40,960 --> 00:33:43,000
拿着这个路由做一些事

531
00:33:45,010 --> 00:33:47,380
然后是不是首先配置路由方案方式

532
00:33:47,410 --> 00:33:50,260
然后跟路由的话就让他反映到我们的

533
00:33:53,390 --> 00:33:53,780
Home

534
00:33:55,900 --> 00:33:57,730
一个APP的话就是严格匹配

535
00:33:57,730 --> 00:33:59,380
就是关于他的一个匹配模式

536
00:34:02,510 --> 00:34:03,740
这是我们的跟路由

537
00:34:03,740 --> 00:34:05,420
还有一个的话就是我们的吧

538
00:34:11,550 --> 00:34:11,880
这样的话

539
00:34:11,880 --> 00:34:13,350
一个路由数字我们就定义好了

540
00:34:13,710 --> 00:34:14,280
然后的话

541
00:34:14,340 --> 00:34:15,990
我们是不是要把它渲染出来才可以

542
00:34:16,050 --> 00:34:17,430
所以每个路由也是一个组件

543
00:34:17,520 --> 00:34:19,650
这个我们自己定义我们的路由组件

544
00:34:23,040 --> 00:34:23,760
Roots

545
00:34:29,610 --> 00:34:32,280
然后这里我们就用word写就行了

546
00:34:32,280 --> 00:34:39,750
然后遍历map s2的话就带有遍历到的每一个这里的对象路由

547
00:34:40,260 --> 00:34:41,610
然后如此时间慢

548
00:34:45,340 --> 00:34:46,000
写错了吗

549
00:34:49,870 --> 00:34:51,400
没有这报啥错

550
00:34:55,990 --> 00:34:56,710
先不管他

551
00:35:04,450 --> 00:35:06,280
首先将这个路由渲染到我这

552
00:35:11,160 --> 00:35:11,550
没有

553
00:35:11,550 --> 00:35:12,810
是不跟子健

554
00:35:12,810 --> 00:35:13,320
包括他

555
00:35:14,770 --> 00:35:15,190
哎呀

556
00:35:18,770 --> 00:35:19,010
这样

557
00:35:20,500 --> 00:35:21,010
然后

558
00:35:22,940 --> 00:35:23,300
等一下

559
00:35:24,030 --> 00:35:24,540
点map

560
00:35:24,540 --> 00:35:29,550
然后是首先通过结构的方式拿到我们的pass act

561
00:35:29,550 --> 00:35:30,960
还有我们的component

562
00:35:34,950 --> 00:35:36,420
我们的对象里把它解构出来

563
00:35:36,420 --> 00:35:37,980
然后推到我们数字上

564
00:35:37,980 --> 00:35:40,500
然后现在回来一个如此

565
00:35:45,160 --> 00:35:47,770
这个的话是不是在乳液中你写到哪他就会旋到哪

566
00:35:48,040 --> 00:35:49,150
而不像V一样

567
00:35:49,150 --> 00:35:50,320
我们是不是还得写战士服

568
00:35:50,320 --> 00:35:52,360
而这的话你就不需要写战士服了

569
00:35:52,360 --> 00:35:54,490
然后配上它的K的话

570
00:35:54,490 --> 00:35:55,720
我就用我就用X

571
00:35:57,970 --> 00:36:00,970
现在好多时候是不推荐用这个in index的

572
00:36:03,460 --> 00:36:04,750
然后都给它配置上

573
00:36:07,180 --> 00:36:07,780
总碰一下

574
00:36:07,870 --> 00:36:08,920
要选择组件

575
00:36:12,360 --> 00:36:15,270
这样我们的路由是不是就可以啦

576
00:36:16,290 --> 00:36:17,790
另外的话使位置是否一般

577
00:36:17,790 --> 00:36:19,710
我们做的话是不是还有一个兜底路由

578
00:36:19,710 --> 00:36:22,740
比如说这前面四个路由没有匹配到的时候呢

579
00:36:22,860 --> 00:36:24,180
我们可以加一个not found

580
00:36:25,430 --> 00:36:26,120
这就不加啦

581
00:36:26,120 --> 00:36:29,750
这里的话我们重点是在XX那个是在完整项目中

582
00:36:29,750 --> 00:36:31,790
一般会做一个兜底的路由404

583
00:36:31,880 --> 00:36:32,510
比如说意面

584
00:36:38,080 --> 00:36:39,160
然后在路由有了

585
00:36:39,190 --> 00:36:41,830
然后页面和路由也对应起来了

586
00:36:41,980 --> 00:36:44,080
那他最终要渲染到哪呢

587
00:36:46,020 --> 00:36:48,030
看到我们的配置是APP的价差

588
00:36:48,270 --> 00:36:49,800
我们让他就选到

589
00:36:50,600 --> 00:36:52,550
在我们这个页面里进行渲染

590
00:36:52,550 --> 00:36:55,130
那就是把我们的root引入管

591
00:37:00,110 --> 00:37:01,130
点点斜杠

592
00:37:01,640 --> 00:37:02,150
如此

593
00:37:03,410 --> 00:37:04,220
就引入过来了

594
00:37:04,220 --> 00:37:04,640
然后

595
00:37:06,020 --> 00:37:07,130
引入我们的root

596
00:37:07,460 --> 00:37:09,290
因为你要渲染的话需要包裹回来

597
00:37:09,320 --> 00:37:10,970
这里的话就不再看了

598
00:37:11,000 --> 00:37:15,200
这个录播课中应该是有讲话系的课

599
00:37:15,200 --> 00:37:17,720
客户端的话是用的这个埃博如此

600
00:37:22,070 --> 00:37:25,670
SE不如如此有点长

601
00:37:25,670 --> 00:37:27,830
我们可以给他一个简写的名称

602
00:37:28,220 --> 00:37:29,360
如此啊

603
00:37:29,360 --> 00:37:29,900
如题

604
00:37:32,970 --> 00:37:35,160
然后我们需要进行一个

605
00:37:36,490 --> 00:37:36,940
包裹

606
00:37:40,650 --> 00:37:41,250
如此

607
00:37:44,050 --> 00:37:46,600
然后base name给他默认就是跟路由

608
00:37:48,220 --> 00:37:51,340
然后我们就可以让我们的组件旋到这里了

609
00:37:51,520 --> 00:37:53,080
是不是最终就在APP进行渲染

610
00:37:53,080 --> 00:37:53,590
APP呢

611
00:37:53,830 --> 00:37:56,230
我们又绑定了到了我们的root中

612
00:37:56,410 --> 00:37:59,350
这样是不就一个完整的流程就串起来了

613
00:37:59,770 --> 00:38:00,760
所以这里是一个函数

614
00:38:00,760 --> 00:38:01,660
要给大家执行一下

615
00:38:05,000 --> 00:38:08,270
这样的话我们的客户端其实就写的差不多了

616
00:38:08,780 --> 00:38:10,850
可能是right

617
00:38:10,850 --> 00:38:13,910
就是让同学对这些的话应该是非常熟悉了

618
00:38:13,970 --> 00:38:17,090
可能唯一技术的同学可能就稍微显得陌生一点

619
00:38:18,620 --> 00:38:19,820
但是如果

620
00:38:19,820 --> 00:38:21,860
把录播课的那些知识都看了一遍之后

621
00:38:21,860 --> 00:38:23,570
其实也没有那么陌生

622
00:38:23,570 --> 00:38:24,770
简单做一个小项目

623
00:38:28,400 --> 00:38:30,290
像之前我们在中级班的时候

624
00:38:30,410 --> 00:38:32,030
是我们的VIP

625
00:38:32,420 --> 00:38:34,580
那个后台管理是不是就用red做的

626
00:38:37,980 --> 00:38:40,860
那这里页面其实我们就差不多了

627
00:38:40,920 --> 00:38:42,390
如此有了页面有了

628
00:38:42,720 --> 00:38:44,910
现在我们就看一下能不能跑起来的

629
00:38:45,810 --> 00:38:47,040
能不能跑起来的话

630
00:38:47,580 --> 00:38:50,010
我们就需要来配置一下我们的ipad啦

631
00:38:52,520 --> 00:38:53,900
接下来我们写外派

632
00:38:56,660 --> 00:38:59,840
然后外派XDV受这些都给它安装上

633
00:38:59,840 --> 00:39:02,810
安装到我们的开发环境依赖加一个杠的

634
00:39:05,500 --> 00:39:08,440
然后新建一个同样还是范围

635
00:39:08,440 --> 00:39:09,970
就是我们的基础的文件

636
00:39:10,180 --> 00:39:11,650
还有我们的公共呢

637
00:39:12,850 --> 00:39:13,420
基础文件

638
00:39:13,420 --> 00:39:14,920
还有各自环境下的配置文件

639
00:39:15,430 --> 00:39:18,910
比如说它分为也是可令词

640
00:39:20,050 --> 00:39:21,280
因为JS

641
00:39:23,070 --> 00:39:23,670
还有我们的

642
00:39:24,750 --> 00:39:28,470
我要做派克店clint点

643
00:39:28,470 --> 00:39:28,890
舍瓦

644
00:39:32,440 --> 00:39:32,950
瘦一点

645
00:39:33,040 --> 00:39:35,680
瘦一点说这是我们的配置文件

646
00:39:36,400 --> 00:39:37,270
然后这里的话

647
00:39:37,810 --> 00:39:38,470
无意的话

648
00:39:38,470 --> 00:39:41,890
他是否使用wheel来解析无意的衣服react呢

649
00:39:41,980 --> 00:39:44,230
我们肯定是需要使用react的

650
00:39:45,410 --> 00:39:48,140
一些插件来解析日艾特娜

651
00:39:48,140 --> 00:39:49,880
同样统一路径的话

652
00:39:49,880 --> 00:39:52,880
我们还是用到我们的note的派什么用的

653
00:39:52,880 --> 00:39:54,260
比如说它的方法

654
00:39:59,310 --> 00:39:59,640
对啊

655
00:40:00,060 --> 00:40:02,820
背包姐姐们的JXJSX语法吗

656
00:40:05,580 --> 00:40:06,900
你这个看背包官网的话

657
00:40:06,900 --> 00:40:08,490
他会推荐你用real的

658
00:40:08,490 --> 00:40:09,270
都有前十名

659
00:40:09,600 --> 00:40:10,980
有哪些包之类的首先

660
00:40:15,300 --> 00:40:16,680
我们的配置导出去

661
00:40:18,900 --> 00:40:20,850
我们打包这些文件打包到哪呢

662
00:40:22,960 --> 00:40:25,240
这里的话我们就打包到肉

663
00:40:30,380 --> 00:40:32,930
打不倒我们的根目录下面的斜杠

664
00:40:38,320 --> 00:40:40,090
然后下一个就是解析我们的模块

665
00:40:40,090 --> 00:40:40,750
这个模块的话

666
00:40:40,750 --> 00:40:44,230
我们要来检测我们的GSX的语法弱

667
00:40:46,090 --> 00:40:46,810
他是一个速度

668
00:40:46,810 --> 00:40:47,560
因为这里的话

669
00:40:47,860 --> 00:40:49,120
我们要解析好多的文件

670
00:40:49,120 --> 00:40:53,830
比如说GF的CF等等都需要它是一个竖点

671
00:40:54,250 --> 00:40:56,800
JSJS或者JSX结尾的

672
00:41:05,930 --> 00:41:06,860
哪个小对象

673
00:41:09,940 --> 00:41:11,890
然后这里我们用哪个load呢

674
00:41:12,010 --> 00:41:14,590
同样还是用到我们的背包load

675
00:41:21,680 --> 00:41:22,880
然后我们试一下扩展

676
00:41:22,880 --> 00:41:24,530
因为像这里我们是建设语法

677
00:41:24,770 --> 00:41:26,570
像ipad的门槛的话

678
00:41:26,570 --> 00:41:27,620
只是一些JS

679
00:41:27,620 --> 00:41:31,850
或者是简单一些CS这些JSX替他之类的

680
00:41:31,850 --> 00:41:32,570
如果你想

681
00:41:32,780 --> 00:41:35,090
比如说你引入文件的时候想把它省略掉

682
00:41:35,660 --> 00:41:37,040
比如说就像这里

683
00:41:37,250 --> 00:41:39,560
比如说你后边儿不想写这个GS差

684
00:41:39,560 --> 00:41:40,370
你需要单独配置

685
00:41:40,370 --> 00:41:41,180
像GS的话

686
00:41:41,180 --> 00:41:42,830
你可以不用写VIP和默认支持

687
00:41:43,130 --> 00:41:43,490
但是呢

688
00:41:43,490 --> 00:41:45,140
像其他一些TS之类的

689
00:41:45,350 --> 00:41:47,810
那你就需要单独的给他配置一下的话

690
00:41:47,810 --> 00:41:49,460
就是我们的肉

691
00:41:50,780 --> 00:41:51,650
下太大扩展名

692
00:41:56,210 --> 00:41:56,900
没写错吧

693
00:42:01,990 --> 00:42:02,770
点GS

694
00:42:03,220 --> 00:42:04,390
还有我们的点jas

695
00:42:04,570 --> 00:42:07,030
刚刚我们提到ipad它默认知识点GS

696
00:42:07,030 --> 00:42:08,680
那这里我们为什么要重新写一遍呢

697
00:42:08,830 --> 00:42:10,510
因为你只要自定义之后

698
00:42:10,600 --> 00:42:12,310
他就会覆盖掉原先默认的

699
00:42:12,430 --> 00:42:15,670
所以说你写之后一定要再重新写下点要不

700
00:42:16,980 --> 00:42:18,750
你省略GS就被抱错了

701
00:42:24,800 --> 00:42:25,310
那这里的话

702
00:42:25,310 --> 00:42:26,240
我们是不是

703
00:42:27,410 --> 00:42:30,620
公共的一个配置我们就完成了

704
00:42:31,960 --> 00:42:32,530
然后呢

705
00:42:32,530 --> 00:42:32,920
配一下

706
00:42:32,920 --> 00:42:34,480
接着他解析的话

707
00:42:34,480 --> 00:42:35,080
我们还是

708
00:42:37,320 --> 00:42:39,000
先把依赖安装上吧

709
00:42:39,240 --> 00:42:41,790
我们的那些背包load

710
00:42:42,820 --> 00:42:43,780
At背包客

711
00:42:44,560 --> 00:42:45,280
这里

712
00:42:45,280 --> 00:42:49,510
就是我们的APP的背包project react解析文件开始语法

713
00:42:49,570 --> 00:42:51,370
背包客先安装上

714
00:42:54,490 --> 00:42:57,880
然后是不是项目根目录下GM的姐背包

715
00:43:00,320 --> 00:43:02,810
虽然说你可以直接在这里写option语法

716
00:43:02,810 --> 00:43:03,740
但这个不太推荐

717
00:43:03,740 --> 00:43:04,730
写代码里是不是

718
00:43:06,280 --> 00:43:07,060
不太直观

719
00:43:07,120 --> 00:43:08,410
你单独新建一个文件的话

720
00:43:08,410 --> 00:43:10,810
你的目录代码也会更加整洁一些

721
00:43:12,440 --> 00:43:14,510
这里来配一下process

722
00:43:19,040 --> 00:43:19,790
的话就是

723
00:43:21,260 --> 00:43:26,930
所以我们就说刚安装的APP的背包present react这样来接差异化

724
00:43:26,930 --> 00:43:28,460
就能被解析了

725
00:43:30,450 --> 00:43:30,900
那这样的话

726
00:43:30,900 --> 00:43:32,670
我们要配置我们的C解析

727
00:43:32,670 --> 00:43:35,760
C的话其实就和我们之前一样这的话

728
00:43:37,420 --> 00:43:38,050
我复制一下吧

729
00:43:38,050 --> 00:43:39,310
其实内容都重复了

730
00:43:40,930 --> 00:43:42,760
这是之前我们做的VR

731
00:43:44,340 --> 00:43:45,330
我们可以把它拿过来

732
00:43:45,960 --> 00:43:47,310
必要的第一位

733
00:43:49,070 --> 00:43:49,880
基本上一样

734
00:43:49,880 --> 00:43:50,390
我看一下

735
00:43:50,780 --> 00:43:51,200
看一下

736
00:43:51,650 --> 00:43:53,480
不适合的地方我们就改一下

737
00:43:54,170 --> 00:43:56,690
肉墨子是不是合并我们的文件呢

738
00:43:56,720 --> 00:43:59,960
提取CS的email模板的飞思卡尔菲特

739
00:44:00,110 --> 00:44:01,040
杯赛Jess

740
00:44:02,880 --> 00:44:03,420
没问题

741
00:44:04,170 --> 00:44:05,640
Development

742
00:44:07,120 --> 00:44:11,650
因此我看一下这里一吹clint

743
00:44:11,650 --> 00:44:12,520
注意这里改一下

744
00:44:13,150 --> 00:44:14,110
然后打包出来的话

745
00:44:14,110 --> 00:44:15,700
是不是我们客户端的代码

746
00:44:17,770 --> 00:44:19,630
然后DV so static

747
00:44:20,590 --> 00:44:22,120
黑色模式的话配一下这个

748
00:44:22,120 --> 00:44:25,330
然后CS提取XEL的

749
00:44:25,330 --> 00:44:27,100
这样的话是不是就完成了index

750
00:44:30,020 --> 00:44:32,420
你带是模板的话是不是没有写

751
00:44:32,510 --> 00:44:38,240
那就给他一个clintindex.template

752
00:44:41,820 --> 00:44:43,290
然后骑马舞

753
00:44:44,720 --> 00:44:47,480
这个的话就是我们的react来下下

754
00:44:53,270 --> 00:44:55,250
这些都还是比较轻车熟路

755
00:44:55,250 --> 00:44:56,300
都非常熟悉

756
00:44:58,640 --> 00:44:59,030
这样的话

757
00:44:59,030 --> 00:45:02,960
我们的可怜的地位是不是就写完了

758
00:45:03,990 --> 00:45:04,500
洗完之后

759
00:45:04,500 --> 00:45:06,300
我们需要安装一下这里用到的包

760
00:45:08,490 --> 00:45:10,830
首先是web pack墨子

761
00:45:12,040 --> 00:45:12,910
还有我们的

762
00:45:13,880 --> 00:45:16,790
提取CS的插件

763
00:45:18,640 --> 00:45:20,230
还有我们处理页面模板的

764
00:45:20,320 --> 00:45:23,230
把处理好的CSGS资源注入到我们的页面里边

765
00:45:23,920 --> 00:45:25,240
这都是自动注入的

766
00:45:25,510 --> 00:45:26,410
有一个load

767
00:45:27,490 --> 00:45:28,720
load zs

768
00:45:29,920 --> 00:45:30,820
给他安装一下

769
00:45:31,690 --> 00:45:33,970
然后这都是开发环境下使用的

770
00:45:34,090 --> 00:45:35,440
安装的开发环境在下边

771
00:45:36,780 --> 00:45:37,650
这样是不是就完成了

772
00:45:37,650 --> 00:45:38,130
然后呢

773
00:45:38,370 --> 00:45:41,400
下一步就是来陪一下我们打包命令

774
00:45:46,650 --> 00:45:47,130
保命

775
00:45:49,650 --> 00:45:51,930
这个打包命令其实也是一样的

776
00:45:53,430 --> 00:45:54,330
不用重复写了

777
00:45:54,450 --> 00:45:56,610
分别分为客户端和服务端

778
00:45:59,680 --> 00:46:01,810
She咖啡咯

779
00:46:02,660 --> 00:46:04,850
I PAC cleaned division啊

780
00:46:04,850 --> 00:46:05,240
一样啊

781
00:46:06,020 --> 00:46:06,950
客户端热启动

782
00:46:06,950 --> 00:46:07,460
然后

783
00:46:08,910 --> 00:46:10,440
客户端打包服务端打包

784
00:46:10,440 --> 00:46:13,860
然后配置了一个客户端服务端一块一块打吧

785
00:46:13,860 --> 00:46:16,140
省得就是每次还需要单子执行两个命令

786
00:46:16,860 --> 00:46:20,430
然后这个的话是打打完之后我们启动的服务站

787
00:46:20,430 --> 00:46:20,790
这里还

788
00:46:22,430 --> 00:46:23,570
需要一个能得磨

789
00:46:23,750 --> 00:46:24,800
那你给他安装上

790
00:46:26,030 --> 00:46:26,450
搞定

791
00:46:29,500 --> 00:46:31,060
这样好像我们就完成了

792
00:46:31,720 --> 00:46:32,650
完成之后呢

793
00:46:32,650 --> 00:46:35,020
我们看一下能不能启动起来

794
00:46:36,250 --> 00:46:38,020
希望是一次能成功

795
00:46:38,080 --> 00:46:40,930
如果一次能成功的话是可以的

796
00:46:41,110 --> 00:46:43,240
但是这种情况比较少一些

797
00:46:43,720 --> 00:46:44,230
看一下

798
00:46:45,420 --> 00:46:46,410
果然报错啦

799
00:46:47,660 --> 00:46:48,560
看下有什么错误

800
00:46:52,510 --> 00:46:53,650
坦荡的real

801
00:46:55,910 --> 00:46:58,850
塞可令的阴气写错了吗

802
00:47:00,330 --> 00:47:01,590
这里是饮水点儿

803
00:47:01,590 --> 00:47:03,780
可怜他的戒指差入口处

804
00:47:05,720 --> 00:47:06,230
改一下

805
00:47:09,630 --> 00:47:11,760
重新带来自信

806
00:47:14,470 --> 00:47:15,490
好像成功了

807
00:47:16,030 --> 00:47:18,490
我们访问一下localhost

808
00:47:18,490 --> 00:47:20,740
发现a home是不是就出来了

809
00:47:21,360 --> 00:47:23,670
在的话我们添加个路由切换

810
00:47:24,060 --> 00:47:25,860
现在路由也没有什么切换

811
00:47:29,580 --> 00:47:31,200
我把我们家差路由切换的话

812
00:47:31,200 --> 00:47:34,890
我们就来把我们的切换路由的组件引入进来

813
00:47:34,890 --> 00:47:36,840
就是我们的a link

814
00:47:38,510 --> 00:47:40,940
From reactor root down

815
00:47:42,750 --> 00:47:45,060
然后比如说在我们的about页面的时候

816
00:47:45,060 --> 00:47:47,730
我们就需要切换到我们的首页

817
00:47:49,920 --> 00:47:51,030
a link

818
00:47:52,080 --> 00:47:52,350
to

819
00:47:55,620 --> 00:47:56,160
就是

820
00:47:58,620 --> 00:47:59,310
父母姐妹

821
00:48:02,070 --> 00:48:03,390
需要转到后面

822
00:48:04,720 --> 00:48:05,800
然后当在

823
00:48:07,940 --> 00:48:09,080
后面的时候呢

824
00:48:09,110 --> 00:48:10,640
就调整到我Bob一面

825
00:48:14,690 --> 00:48:16,490
今天估计我们会结束的挺早

826
00:48:17,240 --> 00:48:20,450
应该不至于拖很拖太久的汤

827
00:48:22,320 --> 00:48:23,760
跳转到霸气

828
00:48:30,930 --> 00:48:32,010
这样就可以了

829
00:48:32,460 --> 00:48:33,450
看一下没有报错

830
00:48:33,450 --> 00:48:34,500
我们再来缝一下

831
00:48:34,500 --> 00:48:35,340
现在可以看到了

832
00:48:35,700 --> 00:48:36,930
跳转到about

833
00:48:37,170 --> 00:48:38,010
跳转到home

834
00:48:45,330 --> 00:48:45,780
那这样的话

835
00:48:45,780 --> 00:48:46,500
我们的客户端

836
00:48:49,290 --> 00:48:49,950
状态工具的话

837
00:48:49,950 --> 00:48:51,270
我们就用reduction

838
00:48:51,660 --> 00:48:54,330
这个的话其实主要是给你看一下

839
00:48:54,330 --> 00:48:58,080
就是我们需要用一个中间状态管理去连接服务端

840
00:48:58,470 --> 00:48:59,850
就处理自己请求那一块

841
00:48:59,880 --> 00:49:00,930
连接我们的数据端

842
00:49:01,170 --> 00:49:05,550
服务端客户端请你用魔棒插入蕊扫都可以

843
00:49:05,670 --> 00:49:06,600
都没有什么问题

844
00:49:07,440 --> 00:49:09,030
其实主要一个思想的话

845
00:49:09,030 --> 00:49:11,520
就是在服务端你把请求的数据

846
00:49:11,640 --> 00:49:12,600
然后存到SQL里边

847
00:49:12,600 --> 00:49:13,650
然后在客户端的时候呢

848
00:49:13,830 --> 00:49:16,170
你拿到服务端已经请求好的这个数据

849
00:49:16,350 --> 00:49:19,440
然后把它来作为初始值放到这个渠道里边

850
00:49:19,470 --> 00:49:19,890
然后呢

851
00:49:19,980 --> 00:49:23,520
这样的客户端就不用再去重复的发起X的请求了

852
00:49:23,760 --> 00:49:25,230
就是主要是这样一个流程

853
00:49:25,260 --> 00:49:27,480
其实用哪个状态工具都是一样的

854
00:49:28,640 --> 00:49:29,930
但是但是不是有点老了

855
00:49:30,290 --> 00:49:31,190
现在的话是不是都

856
00:49:31,860 --> 00:49:33,210
官方也推荐用razor

857
00:49:34,730 --> 00:49:35,450
这个工具

858
00:49:38,580 --> 00:49:40,440
那客户端我们这里就完成了

859
00:49:40,500 --> 00:49:41,730
大家有没有什么问题

860
00:49:42,700 --> 00:49:44,140
莫有问题的可以回复一

861
00:49:44,140 --> 00:49:47,290
然后我们就来搭建我们的服务端了

862
00:49:48,520 --> 00:49:48,880
可以啊

863
00:49:50,000 --> 00:49:53,150
因为像一般前几作实战还都比较简单

864
00:49:53,210 --> 00:49:54,800
并并不太难行

865
00:49:54,800 --> 00:49:55,700
那我们就继续往下

866
00:49:56,150 --> 00:49:58,400
继续往下的话就来搭建我们的服务站

867
00:49:58,910 --> 00:50:01,100
那这里我们先把依赖安装上吧

868
00:50:02,870 --> 00:50:05,810
这不还是我们扣内衣那些东西

869
00:50:06,080 --> 00:50:06,710
Call

870
00:50:08,240 --> 00:50:08,780
root

871
00:50:09,080 --> 00:50:11,960
还有我们的静态资源服务器和static

872
00:50:12,900 --> 00:50:13,650
把它安装上

873
00:50:14,950 --> 00:50:18,310
然后来写我们的服务端拉舍我新建

874
00:50:21,240 --> 00:50:22,980
新建APP的JS

875
00:50:24,580 --> 00:50:25,360
然后还有我们的

876
00:50:25,360 --> 00:50:27,250
如此就放到我们这里

877
00:50:31,740 --> 00:50:32,910
其实除了语法不一样

878
00:50:32,910 --> 00:50:36,330
其实我们当时写的V1其实是完全一样的

879
00:50:38,400 --> 00:50:40,650
安装完了是不是快速的把它引入进来

880
00:50:43,190 --> 00:50:44,780
VIP一定要自己配吗

881
00:50:47,430 --> 00:50:48,330
可以不用自己配

882
00:50:48,330 --> 00:50:50,370
但是学习阶段的话不是为了大家

883
00:50:51,580 --> 00:50:54,640
更好地了解一下如何自己去搭建这样一个角色

884
00:50:54,640 --> 00:50:55,120
工具嘛

885
00:50:55,510 --> 00:50:58,990
其实你用CR完全就可以不执行一个命令就完成了

886
00:51:02,230 --> 00:51:02,440
对

887
00:51:02,440 --> 00:51:03,910
官方就是下完全可以用

888
00:51:03,910 --> 00:51:04,690
并不是不可以用

889
00:51:05,620 --> 00:51:06,430
只是为了

890
00:51:07,480 --> 00:51:09,370
让大家更好的学习

891
00:51:09,430 --> 00:51:10,210
学习阶段的话

892
00:51:10,210 --> 00:51:12,250
尽量能手写的就手写

893
00:51:12,430 --> 00:51:13,540
能动手的就动手

894
00:51:17,770 --> 00:51:20,170
这样的话更有利于你的就是记忆

895
00:51:20,290 --> 00:51:21,940
或者是你但是遇到一些问题

896
00:51:21,970 --> 00:51:23,770
增长一些经验给你解决问题的时候

897
00:51:24,040 --> 00:51:25,630
就是增长经验的一个过程

898
00:51:26,710 --> 00:51:28,240
如果你只是用官方

899
00:51:28,240 --> 00:51:28,600
就是家

900
00:51:28,600 --> 00:51:30,040
每次用都非常流畅

901
00:51:30,040 --> 00:51:30,880
也遇不到什么问题

902
00:51:30,880 --> 00:51:34,510
那这样的话对你经验的增长也会有好的

903
00:51:37,180 --> 00:51:38,530
怕什么快还是用到我们的

904
00:51:40,780 --> 00:51:41,350
然后

905
00:51:44,290 --> 00:51:45,940
扭下我们的实力

906
00:51:48,680 --> 00:51:49,490
然后还是路由的话

907
00:51:49,490 --> 00:51:50,690
我们统一把它单独提

908
00:51:50,690 --> 00:51:55,460
就放到我们音带这里边说它里边就是我们返回一个函数回来

909
00:51:56,030 --> 00:51:59,210
我们需要把我们的APP是不是给大家传进去

910
00:52:00,020 --> 00:52:02,420
因为你它是基于中间件机制的

911
00:52:02,450 --> 00:52:03,290
你要用的什么的话

912
00:52:03,290 --> 00:52:04,490
都还需要注册一下

913
00:52:06,890 --> 00:52:08,300
然后是点十个

914
00:52:08,480 --> 00:52:09,590
如此下边的

915
00:52:12,460 --> 00:52:15,190
比如说这个方法就是初始化的路由

916
00:52:17,440 --> 00:52:19,690
然后我们的静态资源服务器是到哪呢

917
00:52:20,560 --> 00:52:20,920
So

918
00:52:21,370 --> 00:52:26,830
然后就是在我们的该项目下面的地市的目录

919
00:52:28,240 --> 00:52:28,990
点name

920
00:52:29,080 --> 00:52:31,480
然后是点点点点膝盖

921
00:52:33,030 --> 00:52:33,480
List

922
00:52:35,390 --> 00:52:36,050
展示就可以啦

923
00:52:36,050 --> 00:52:37,670
然后听听一个端口

924
00:52:41,640 --> 00:52:41,970
这里的话

925
00:52:41,970 --> 00:52:45,690
关于这个price大家都可以继续使用的话

926
00:52:45,690 --> 00:52:46,680
就是比较经典一些

927
00:52:46,680 --> 00:52:48,690
一个price比较大而全一些

928
00:52:54,870 --> 00:52:55,860
其实技术的话

929
00:52:55,860 --> 00:53:00,870
选型其实中国考虑之后并不限制于某一个技术

930
00:53:01,110 --> 00:53:01,740
另外的话

931
00:53:01,800 --> 00:53:04,950
其实最主要一个目的就是为了让我们的项目能流畅的运行

932
00:53:04,980 --> 00:53:07,410
最终完成我们的一个项目开发

933
00:53:14,990 --> 00:53:17,780
Lu KO是

934
00:53:18,680 --> 00:53:19,220
比如我们

935
00:53:20,570 --> 00:53:22,610
这样的服务端是不就搞定了

936
00:53:22,610 --> 00:53:22,970
然后

937
00:53:23,520 --> 00:53:24,660
要写的内容的话

938
00:53:24,660 --> 00:53:26,100
需要继续写我们的root

939
00:53:28,930 --> 00:53:29,470
如此的话

940
00:53:29,470 --> 00:53:30,070
我复制一下

941
00:53:30,370 --> 00:53:32,320
这都是重复的代码

942
00:53:34,020 --> 00:53:34,290
这

943
00:53:37,630 --> 00:53:39,700
这简单复制下这个吧

944
00:53:46,140 --> 00:53:48,780
然后引入我们的如此

945
00:53:51,980 --> 00:53:54,590
这里是否也需要用到我们的Python模块

946
00:53:59,920 --> 00:54:01,060
A new一下

947
00:54:08,940 --> 00:54:11,460
这个先给大家去掉的话

948
00:54:11,460 --> 00:54:12,960
我们先简单地返回

949
00:54:13,200 --> 00:54:15,990
先测试一下我们的服务是不是成功了

950
00:54:23,260 --> 00:54:24,040
然后等于

951
00:54:25,420 --> 00:54:26,830
服务端启动

952
00:54:30,550 --> 00:54:31,120
这样可以了

953
00:54:31,120 --> 00:54:31,780
这样的话

954
00:54:32,410 --> 00:54:38,170
我们试一下试一下看一下负担应该没有什么问题的提案的威摄

955
00:54:40,440 --> 00:54:41,790
可以看到好像

956
00:54:43,050 --> 00:54:43,530
很正常

957
00:54:43,770 --> 00:54:44,640
没有任何问题

958
00:54:46,880 --> 00:54:47,960
没有任何问题的话

959
00:54:48,140 --> 00:54:49,310
那么就继续往下

960
00:54:49,310 --> 00:54:51,470
这就是我们这个架子就已经在这儿了

961
00:54:53,320 --> 00:54:53,680
这样的话

962
00:54:53,680 --> 00:54:56,530
我们刚刚我们是不是只写了我们的客户端入口

963
00:54:56,800 --> 00:55:00,190
那这样的话就需要我们来处理一下我们的服务端入口了

964
00:55:04,210 --> 00:55:06,430
其实主要服务端入口的话

965
00:55:06,430 --> 00:55:09,400
主要是把我们客户端的这个什么组件打包

966
00:55:09,520 --> 00:55:11,140
让可以在服务端调用

967
00:55:11,170 --> 00:55:12,130
然后渲染为字符串

968
00:55:12,160 --> 00:55:13,060
是不是直接退回来

969
00:55:14,500 --> 00:55:15,700
那个报错不用管吗

970
00:55:16,400 --> 00:55:17,180
哪个报错

971
00:55:23,120 --> 00:55:23,900
没有报错

972
00:55:25,490 --> 00:55:26,510
你说这个警告码

973
00:55:27,590 --> 00:55:28,580
这个井告示牌的

974
00:55:28,580 --> 00:55:30,230
之前没有写这个兰声明

975
00:55:30,230 --> 00:55:33,650
比如说什么允许什么使用之类的

976
00:55:33,650 --> 00:55:35,600
就是一些开源的一些协议

977
00:55:35,630 --> 00:55:36,260
Lessons

978
00:55:36,940 --> 00:55:37,990
No lessons Fed

979
00:55:39,330 --> 00:55:41,790
警告不是错误

980
00:55:43,780 --> 00:55:44,530
这个没啥事儿

981
00:55:47,130 --> 00:55:48,900
是不是第一个lesson是MIT

982
00:55:49,080 --> 00:55:49,620
它提示吧

983
00:55:49,620 --> 00:55:52,140
就是没有这个饭

984
00:55:57,660 --> 00:55:58,320
然后

985
00:55:59,250 --> 00:55:59,790
继续玩

986
00:55:59,790 --> 00:56:00,510
继续咯

987
00:56:02,870 --> 00:56:04,700
我们要确立我们的服务端入口了

988
00:56:05,120 --> 00:56:05,750
就是来

989
00:56:07,850 --> 00:56:10,850
让我们的服务端可以访问到我们的组件

990
00:56:10,850 --> 00:56:12,410
然后渲染为字符串偷回来

991
00:56:13,100 --> 00:56:15,470
这里的话就是在我们的clint这

992
00:56:16,930 --> 00:56:20,080
再放一个叫一汽的蛇

993
00:56:20,080 --> 00:56:20,290
我

994
00:56:21,460 --> 00:56:21,970
在场

995
00:56:24,790 --> 00:56:25,480
还是一样

996
00:56:26,140 --> 00:56:28,930
首先是引入我们的对act

997
00:56:35,030 --> 00:56:36,020
Act

998
00:56:38,700 --> 00:56:39,180
然后呢

999
00:56:39,480 --> 00:56:40,710
是不是要渲染的页面

1000
00:56:40,710 --> 00:56:44,610
是不是肯定是要拿到我们这里的他选的所有的页面组件

1001
00:56:44,610 --> 00:56:46,200
是不是就是这里的root我们要拿到

1002
00:56:47,790 --> 00:56:48,720
所以要把它拿过来

1003
00:56:51,400 --> 00:56:52,870
Roots from

1004
00:56:57,210 --> 00:56:57,600
如此

1005
00:57:00,450 --> 00:57:01,590
然后这里就需要

1006
00:57:02,920 --> 00:57:04,210
16门服务站路由了

1007
00:57:05,530 --> 00:57:08,560
其实像上节课在写文的时候给大家说到过

1008
00:57:08,770 --> 00:57:09,700
像危重的话

1009
00:57:09,700 --> 00:57:12,880
我们是不是用了一个memory那个root

1010
00:57:12,880 --> 00:57:16,960
这里的话它有对应服务端使用的一个root教

1011
00:57:19,070 --> 00:57:20,810
Static static route

1012
00:57:21,680 --> 00:57:24,110
这个就是在我们的服务端使用的一个

1013
00:57:26,940 --> 00:57:27,300
其

1014
00:57:27,940 --> 00:57:29,050
其实爱的文档的话

1015
00:57:29,050 --> 00:57:29,770
其实主要

1016
00:57:31,180 --> 00:57:32,650
是因为他好多都是英文的

1017
00:57:32,650 --> 00:57:33,820
可能感觉比较难

1018
00:57:33,820 --> 00:57:34,300
可以看到

1019
00:57:34,720 --> 00:57:35,410
这就说明

1020
00:57:35,860 --> 00:57:38,890
使用这个static route在食物啥的

1021
00:57:38,890 --> 00:57:39,520
人类的时候

1022
00:57:39,520 --> 00:57:41,230
就在S2的时候使用的

1023
00:57:41,230 --> 00:57:43,000
所以说这里我们可以把它拿过来

1024
00:57:45,090 --> 00:57:48,480
去官方文档其实都有关于他使用的一些详细说明

1025
00:57:50,130 --> 00:57:52,380
所以说在我们无论是接触什么技术

1026
00:57:52,560 --> 00:57:56,070
一定要是先把官方文档去看一遍

1027
00:57:56,310 --> 00:57:58,560
先大体有个有印象

1028
00:57:58,620 --> 00:57:59,370
都有哪些东西

1029
00:57:59,370 --> 00:58:00,540
比如说哪个功能去使用

1030
00:58:01,230 --> 00:58:02,400
尽量不要去写一点

1031
00:58:02,400 --> 00:58:02,940
就差一点

1032
00:58:02,940 --> 00:58:05,040
这样先大体的去来浏览一遍

1033
00:58:05,100 --> 00:58:06,120
做到心中有数

1034
00:58:06,770 --> 00:58:07,640
这不写待客入的

1035
00:58:07,640 --> 00:58:10,310
这是我们在服务端要使用的

1036
00:58:12,380 --> 00:58:12,830
然后呢

1037
00:58:12,860 --> 00:58:14,030
是我们需要导出一个函数

1038
00:58:14,030 --> 00:58:15,020
在服务端去调用

1039
00:58:15,140 --> 00:58:16,160
去拿到我们的

1040
00:58:17,530 --> 00:58:18,490
这些组件的话

1041
00:58:18,490 --> 00:58:18,880
我们

1042
00:58:19,540 --> 00:58:24,730
可以简单的导出一个破的default c ts的话

1043
00:58:24,730 --> 00:58:26,470
就是服务端在调用这个函数

1044
00:58:26,620 --> 00:58:27,940
它需要传过一个参数来

1045
00:58:28,150 --> 00:58:29,560
这个话是很有用处的

1046
00:58:29,830 --> 00:58:33,490
就是可以让我们客户端和服务端还有一个中间的载体

1047
00:58:33,490 --> 00:58:35,020
我们比如说传一些数据之类的

1048
00:58:35,170 --> 00:58:38,110
我们就可以通过CTS上下文进行传递

1049
00:58:39,310 --> 00:58:41,920
然后的话我们就返回一个表妹的封装

1050
00:58:41,920 --> 00:58:42,970
一个表妹

1051
00:58:46,220 --> 00:58:46,520
热

1052
00:58:54,120 --> 00:58:55,110
所以这种返还型呢

1053
00:58:55,290 --> 00:58:56,460
就是返回我们的

1054
00:58:58,360 --> 00:59:01,810
路由听我们路由是不是就代表是我们所有的页面了

1055
00:59:01,840 --> 00:59:02,350
如此

1056
00:59:06,600 --> 00:59:09,900
然后是选项的root

1057
00:59:10,380 --> 00:59:11,400
我们路由是不是有了

1058
00:59:11,430 --> 00:59:11,910
但是呢

1059
00:59:12,360 --> 00:59:14,850
刚刚这里他配一个东西需要

1060
00:59:16,640 --> 00:59:17,390
可以看

1061
00:59:27,320 --> 00:59:27,545
对

1062
00:59:27,545 --> 00:59:29,900
他一个location配置在服务端的话

1063
00:59:29,900 --> 00:59:32,270
所以说我们这里有这个CTS

1064
00:59:32,270 --> 00:59:35,930
正好我们就可以从上面拿到当前路由的地址

1065
00:59:35,930 --> 00:59:37,760
所以说就可以给他配上location

1066
00:59:37,880 --> 00:59:44,390
等于是否可以通过我们的上下文里边拿到CTS点应该是request

1067
00:59:45,170 --> 00:59:46,070
对啊

1068
00:59:46,880 --> 00:59:48,080
是不是这样就可以完成了

1069
00:59:48,170 --> 00:59:51,440
这就是我们的服务端的一个入口

1070
00:59:52,490 --> 00:59:53,180
在服务端的话

1071
00:59:53,180 --> 00:59:55,010
我们只要调用这个函数打包完成

1072
00:59:55,010 --> 00:59:55,940
是不是给服务端调用

1073
00:59:56,150 --> 00:59:57,380
是不是又拿到了所有的

1074
00:59:57,440 --> 01:00:00,320
如此就相当于我们所有页面我们拿到了

1075
01:00:01,260 --> 01:00:02,580
CTS是从哪传来的

1076
01:00:02,910 --> 01:00:05,220
一会儿这个是不是打完城市在服务端调用

1077
01:00:05,220 --> 01:00:06,990
服务端调用的时候就传进来了

1078
01:00:12,680 --> 01:00:14,690
服务端服务端调用传进来的

1079
01:00:17,020 --> 01:00:17,620
然后

1080
01:00:18,800 --> 01:00:24,500
就打包一下服务端入口还没有设置服务端入口的话

1081
01:00:27,120 --> 01:00:28,380
其实比较类似

1082
01:00:30,340 --> 01:00:31,390
这里复制一下吧

1083
01:00:32,810 --> 01:00:33,650
有可能今天

1084
01:00:34,430 --> 01:00:35,540
不到四点就讲完了

1085
01:00:35,540 --> 01:00:36,560
因为好多东西

1086
01:00:37,730 --> 01:00:38,840
都是类似的

1087
01:00:39,800 --> 01:00:43,160
看一下墨子mode

1088
01:00:43,880 --> 01:00:45,950
这个是我打包第三方依赖

1089
01:00:47,450 --> 01:00:47,840
入口

1090
01:00:47,840 --> 01:00:48,350
要改一下

1091
01:00:49,610 --> 01:00:52,730
这是因脆点儿瘦点儿检查

1092
01:00:54,430 --> 01:00:56,920
然后实务班的指定翻译规则

1093
01:00:56,920 --> 01:00:58,060
这个是一定要要的

1094
01:00:58,090 --> 01:00:59,410
因为是note的使用吗

1095
01:01:00,910 --> 01:01:01,780
打包或者规则

1096
01:01:01,780 --> 01:01:02,980
然后指定环境

1097
01:01:04,050 --> 01:01:05,070
下胎一样

1098
01:01:05,250 --> 01:01:07,110
也是在服务端就不需要进行处理了

1099
01:01:07,320 --> 01:01:09,930
这里你也可以使用有南二路的之类的

1100
01:01:10,020 --> 01:01:11,160
有好多种处理方式

1101
01:01:12,480 --> 01:01:13,380
那这里这个

1102
01:01:14,670 --> 01:01:16,200
我们就需要安装一下啦

1103
01:01:18,690 --> 01:01:21,750
在服务端忽略掉CS的解析

1104
01:01:22,920 --> 01:01:23,700
安装一下

1105
01:01:24,660 --> 01:01:27,360
这样服务端好像来配置就可以了

1106
01:01:34,670 --> 01:01:35,240
试一下

1107
01:01:35,270 --> 01:01:36,890
试一下服务端的打包

1108
01:01:36,950 --> 01:01:38,360
看一下有没有什么问题

1109
01:01:38,990 --> 01:01:40,340
只要失误

1110
01:01:40,610 --> 01:01:41,810
第一我们配一个

1111
01:01:44,800 --> 01:01:46,270
怎么又报错了

1112
01:01:46,270 --> 01:01:46,990
看下报啥错

1113
01:01:48,000 --> 01:01:48,330
嗯

1114
01:01:50,390 --> 01:01:50,840
还少

1115
01:01:55,870 --> 01:01:56,380
安装上

1116
01:01:57,830 --> 01:02:01,040
这网速也挺快

1117
01:02:01,040 --> 01:02:02,180
失误第一位

1118
01:02:04,020 --> 01:02:04,590
没有问题

1119
01:02:05,550 --> 01:02:07,110
是不是吃货版的就打包出来了

1120
01:02:07,350 --> 01:02:10,050
打包出来是不我们就可以在服务端调用

1121
01:02:10,530 --> 01:02:11,820
可以调用进行处理了

1122
01:02:12,240 --> 01:02:13,530
那就是我们继续来处理

1123
01:02:13,590 --> 01:02:15,450
在我们的这个服务的

1124
01:02:16,760 --> 01:02:19,130
来拿到我们客户端打包好的这个组件

1125
01:02:19,130 --> 01:02:22,010
然后我们就可以把它渲染为字符串

1126
01:02:22,430 --> 01:02:23,360
像这个的话

1127
01:02:28,510 --> 01:02:32,080
为X的话也是提供了人的图使用方法

1128
01:02:34,810 --> 01:02:35,440
这个

1129
01:02:42,030 --> 01:02:42,780
人的

1130
01:02:45,150 --> 01:02:46,590
To实训室

1131
01:02:46,590 --> 01:02:48,930
这里还提供了这样人的咨询方法

1132
01:02:49,290 --> 01:02:51,840
将渲染为字符串给我们进行使用

1133
01:02:54,310 --> 01:02:56,320
那么这个就继续往下写开始

1134
01:02:59,170 --> 01:02:59,740
首先的话

1135
01:02:59,740 --> 01:03:01,480
我们读取到我们的

1136
01:03:05,800 --> 01:03:07,210
至于打包出来的这个

1137
01:03:09,090 --> 01:03:10,950
15班的价格拿到我们的方法

1138
01:03:12,450 --> 01:03:12,870
She

1139
01:03:20,190 --> 01:03:23,130
does的目录下边儿的食物扳倒

1140
01:03:29,920 --> 01:03:34,150
然后我们还需要用到是是不是人的图使用方法

1141
01:03:39,310 --> 01:03:40,630
最快的话

1142
01:03:40,630 --> 01:03:41,080
我直接用的

1143
01:03:41,080 --> 01:03:41,890
com的语法

1144
01:03:41,890 --> 01:03:43,900
如果大家想用S的语法的话

1145
01:03:43,900 --> 01:03:46,330
就像前两周不是事

1146
01:03:47,550 --> 01:03:52,080
一开始前两周那个课的实战是不你配一下第二库来解析就可以了

1147
01:03:53,900 --> 01:03:54,440
Require

1148
01:03:54,440 --> 01:03:58,760
这里是react DOM下边的瘦

1149
01:04:00,460 --> 01:04:01,750
人的图使用方法

1150
01:04:03,390 --> 01:04:05,490
这是不是打出来这个APP

1151
01:04:07,110 --> 01:04:08,220
然后这里我们就可以拿到

1152
01:04:08,220 --> 01:04:08,580
我们

1153
01:04:11,370 --> 01:04:13,230
就是组建了这个位置

1154
01:04:13,320 --> 01:04:14,340
因为都是e部的嘛

1155
01:04:14,490 --> 01:04:14,850
就是

1156
01:04:15,770 --> 01:04:17,210
舍瓦蕃的事

1157
01:04:17,210 --> 01:04:21,440
我们返回来的一个promise的一个对象叫童威的

1158
01:04:21,620 --> 01:04:26,210
等一下CS这样话调用是不是现在这CF就传过来了

1159
01:04:26,210 --> 01:04:28,730
传过来是不是正好就喝这里进行关系了

1160
01:04:28,730 --> 01:04:33,380
CS这个就是从这里调用的时候传进来的一个上下文

1161
01:04:33,800 --> 01:04:35,480
就相当于这里就是一个中间载体了

1162
01:04:35,480 --> 01:04:39,650
我们可以实现在这里的一些数据和这里进行一个关联

1163
01:04:41,510 --> 01:04:42,950
然后这里我们可以打印来看一下

1164
01:04:44,270 --> 01:04:45,710
看一下有没有成功

1165
01:04:48,700 --> 01:04:50,320
这个也是没有什么问题

1166
01:04:50,500 --> 01:04:51,430
记忆还是差

1167
01:04:52,970 --> 01:04:54,470
来启动一下一按

1168
01:04:54,680 --> 01:04:55,970
然后是第一位

1169
01:05:00,570 --> 01:05:02,250
然后我们需要访问一下

1170
01:05:07,240 --> 01:05:07,780
可以看到

1171
01:05:09,080 --> 01:05:10,580
TFX是不是就拿到了

1172
01:05:10,580 --> 01:05:11,810
我们想一些内容

1173
01:05:14,000 --> 01:05:14,450
但是呢

1174
01:05:14,570 --> 01:05:16,310
就是拿到一些JS可以看到

1175
01:05:16,490 --> 01:05:18,110
这样你就是从负担偷回来的话

1176
01:05:18,110 --> 01:05:19,280
是不是肯定偷不回来

1177
01:05:19,610 --> 01:05:21,350
你需要把它渲染为字符串才可以

1178
01:05:21,350 --> 01:05:23,150
所以还需要进行一步操作

1179
01:05:23,270 --> 01:05:24,410
把它渲染为字符串

1180
01:05:25,730 --> 01:05:27,800
Wait and Tuesday

1181
01:05:28,990 --> 01:05:31,780
然后是JSX的话

1182
01:05:31,780 --> 01:05:33,790
是不是最终将我们昨天都选为字符串了

1183
01:05:33,790 --> 01:05:34,180
然后呢

1184
01:05:35,420 --> 01:05:38,120
你加他给到他就可以了

1185
01:05:40,470 --> 01:05:41,010
没有报错

1186
01:05:41,010 --> 01:05:44,580
我们再来访问有没有发现出来了

1187
01:05:44,610 --> 01:05:45,600
然后这里可以看到

1188
01:05:47,520 --> 01:05:48,270
抽血啊

1189
01:05:49,500 --> 01:05:50,280
我这里没有打印

1190
01:05:51,490 --> 01:05:52,270
把他删了吧

1191
01:05:58,000 --> 01:05:59,470
但是现在的话还存在问题

1192
01:05:59,470 --> 01:05:59,950
为什么呢

1193
01:06:00,070 --> 01:06:02,080
可以看到等我点的时候注意看

1194
01:06:02,620 --> 01:06:04,600
每次点击是不是都刷新页面了

1195
01:06:04,840 --> 01:06:08,080
就相当于和纯的服务端渲染似乎没有什么两样了

1196
01:06:08,080 --> 01:06:08,800
这是为什么呢

1197
01:06:09,100 --> 01:06:10,360
像我们前面提到过

1198
01:06:10,570 --> 01:06:11,920
我们的吕SSR的话

1199
01:06:11,920 --> 01:06:16,090
应该是结合了客户端渲染与服务端渲染的优点

1200
01:06:16,570 --> 01:06:21,520
只有首页的时候是从服务端是不当你请求首页刷新页面之后

1201
01:06:21,520 --> 01:06:22,870
是不是从服务端请求回来了

1202
01:06:23,080 --> 01:06:25,120
而后来之后应该是有本地的

1203
01:06:26,650 --> 01:06:27,730
比如说JS接管

1204
01:06:27,730 --> 01:06:29,800
就本地的路由去控制它的一个切换

1205
01:06:29,950 --> 01:06:30,970
那现在为什么

1206
01:06:31,210 --> 01:06:33,340
你点的时候为什么没有启动本地呢

1207
01:06:33,430 --> 01:06:37,630
这是因为是不是你的GSCS都没有进来

1208
01:06:38,020 --> 01:06:38,860
这只是一个

1209
01:06:41,540 --> 01:06:44,690
就是你打包好的客户端JS是不是我们的黑

1210
01:06:44,690 --> 01:06:46,550
都是一些东西是不是都没有进来

1211
01:06:46,550 --> 01:06:48,800
这只是简单的一个路由跳转

1212
01:06:50,720 --> 01:06:51,650
而且这个跳转的话

1213
01:06:51,980 --> 01:06:53,660
它解析完成之后就是个a标签

1214
01:06:53,930 --> 01:06:55,670
那你没有他就是超链接跳转

1215
01:06:55,670 --> 01:06:57,140
那肯定是去请求服务端了

1216
01:06:57,440 --> 01:07:01,310
所以说这里我们还需要把客户端的资源给他拿过来

1217
01:07:01,400 --> 01:07:03,620
这样的话才能后边的路由切换

1218
01:07:05,030 --> 01:07:06,650
才能变成客户端渲染的方式

1219
01:07:06,980 --> 01:07:08,330
切换更加自然一些

1220
01:07:13,250 --> 01:07:13,910
大家

1221
01:07:15,650 --> 01:07:16,370
休息一下吧

1222
01:07:16,370 --> 01:07:17,030
休息

1223
01:07:18,690 --> 01:07:19,140
你看

1224
01:07:20,970 --> 01:07:21,780
大家休息一下吧

1225
01:07:21,780 --> 01:07:22,500
休息十分钟

1226
01:07:22,920 --> 01:07:23,550
然后我们

1227
01:07:24,410 --> 01:07:29,600
九点十分钟的话是我们9.0789.07吗

1228
01:07:29,600 --> 01:07:31,610
继续接下来的话就

1229
01:07:32,640 --> 01:07:33,870
听的内容就比较少了

1230
01:07:33,990 --> 01:07:35,160
很快我们就能完成了

1231
01:07:37,750 --> 01:07:40,930
失去你的我

1232
01:07:42,190 --> 01:07:43,600
比乞丐落魄

1233
01:07:46,090 --> 01:07:48,790
多么深刻

1234
01:08:04,210 --> 01:08:05,500
谁哭着

1235
01:08:05,800 --> 01:08:07,090
谁笑着

1236
01:08:07,630 --> 01:08:10,450
你的分饰两个角色

1237
01:08:10,810 --> 01:08:13,600
越痴迷越折磨

1238
01:08:14,110 --> 01:08:17,020
回忆还在煽风点火

1239
01:08:17,560 --> 01:08:22,360
明知往前就会坠落到这一按

1240
01:08:22,360 --> 01:08:23,830
重返寂寞

1241
01:08:24,070 --> 01:08:25,330
爱到最后

1242
01:08:25,630 --> 01:08:27,520
究竟爱什么

1243
01:08:29,860 --> 01:08:35,980
抱紧你的我比国王富有

1244
01:08:37,030 --> 01:08:41,140
曾多么快乐

1245
01:08:42,670 --> 01:08:43,660
失去

1246
01:08:46,930 --> 01:08:47,290
自己

1247
01:09:00,280 --> 01:09:02,380
南京抹不去

1248
01:09:03,550 --> 01:09:05,890
为什么还永远

1249
01:09:06,790 --> 01:09:09,550
你温柔舍不得

1250
01:09:22,380 --> 01:09:24,210
谁有

1251
01:09:25,380 --> 01:09:26,340
感伤

1252
01:09:27,540 --> 01:09:28,830
的回忆

1253
01:09:30,720 --> 01:09:31,290
我

1254
01:09:32,370 --> 01:09:33,450
比过我

1255
01:09:54,640 --> 01:09:55,030
倒

1256
01:10:05,590 --> 01:10:06,130
过来是

1257
01:10:07,570 --> 01:10:08,980
最美的

1258
01:10:38,110 --> 01:10:38,770
爸爸

1259
01:10:39,760 --> 01:10:40,240
爸爸

1260
01:11:09,330 --> 01:11:09,540
The

1261
01:11:10,890 --> 01:11:12,810
smile is controlled

1262
01:11:17,850 --> 01:11:18,390
myself

1263
01:11:19,740 --> 01:11:24,300
she said that you wanna go how much you wanna just

1264
01:11:25,830 --> 01:11:27,570
so so

1265
01:11:29,370 --> 01:11:40,080
some superhero some fairytale blaze just something I can turn to somebody I can kiss I was so just

1266
01:11:57,180 --> 01:11:58,710
I want something just

1267
01:12:20,940 --> 01:12:22,560
Just told

1268
01:12:25,500 --> 01:12:25,920
us in

1269
01:12:32,040 --> 01:12:33,210
the summer

1270
01:12:34,380 --> 01:12:36,030
she said that you want

1271
01:12:40,410 --> 01:12:42,180
somebody some

1272
01:12:43,980 --> 01:12:49,440
superhero some fairytale bliss just something

1273
01:12:50,910 --> 01:12:51,270
so

1274
01:12:53,040 --> 01:12:53,580
I want

1275
01:13:30,970 --> 01:13:34,270
What you wanna know what you want

1276
01:13:36,160 --> 01:13:50,920
for somebody with some super human gifts some superhero some fairy the best some to somebody I can kiss I want something just like

1277
01:15:53,620 --> 01:15:56,560
有些说到过去

1278
01:16:01,600 --> 01:16:02,950
爱过的痕迹

1279
01:16:09,460 --> 01:16:11,170
冷风吹来

1280
01:16:11,170 --> 01:16:12,100
回忆

1281
01:16:13,420 --> 01:16:15,970
让人听得独自沉溺

1282
01:16:17,320 --> 01:16:20,080
爱你的心该如何

1283
01:16:20,080 --> 01:16:20,800
心思

1284
01:16:25,150 --> 01:16:27,160
会仔细聚齐

1285
01:16:27,160 --> 01:16:27,850
不停

1286
01:16:29,140 --> 01:16:29,620
哭泣

1287
01:16:29,620 --> 01:16:31,840
勇气却又放弃

1288
01:16:33,100 --> 01:16:34,660
慌乱了思绪

1289
01:16:35,230 --> 01:16:39,430
像我们继续

1290
01:16:40,450 --> 01:16:43,300
这些学校的话是不建议

1291
01:16:43,570 --> 01:16:44,200
取消的话

1292
01:16:44,470 --> 01:16:45,730
他也是一个状态管理

1293
01:16:45,730 --> 01:16:46,090
是

1294
01:16:47,420 --> 01:16:48,320
业务设计

1295
01:16:50,530 --> 01:16:51,970
比如说你想这些全状态呢

1296
01:16:52,480 --> 01:16:53,230
微笑

1297
01:16:54,340 --> 01:16:54,910
没啥区别

1298
01:16:54,910 --> 01:16:56,710
和re达斯VS

1299
01:16:58,960 --> 01:16:59,830
真羡慕重要

1300
01:17:00,340 --> 01:17:01,330
这个可以看到

1301
01:17:01,330 --> 01:17:02,260
从why he right

1302
01:17:02,260 --> 01:17:04,540
我们都是按照官方文档指导写的

1303
01:17:05,480 --> 01:17:08,480
就你真是如果自己去手搭着SM的话

1304
01:17:08,750 --> 01:17:09,980
其实就是这样一个过程

1305
01:17:10,160 --> 01:17:11,030
流程就是这样的

1306
01:17:11,030 --> 01:17:16,430
这都是官方文档中是给我们的一些提供一篇或者是一些指南之类的

1307
01:17:17,550 --> 01:17:18,330
是唯一的爱

1308
01:17:18,330 --> 01:17:20,310
他只能写的是更详细一些

1309
01:17:21,000 --> 01:17:22,260
他这个黑不会脱水

1310
01:17:22,260 --> 01:17:22,950
注水的话

1311
01:17:23,100 --> 01:17:24,900
TV的话是不是已经讲过了

1312
01:17:24,900 --> 01:17:25,830
黑break的话

1313
01:17:25,860 --> 01:17:26,820
其实主要就是

1314
01:17:27,780 --> 01:17:28,770
避免重复渲染

1315
01:17:28,770 --> 01:17:30,030
就是服务端渲染一次

1316
01:17:30,240 --> 01:17:31,800
然后你扣单又渲染一次

1317
01:17:32,160 --> 01:17:33,480
所以说你可以用个黑breathe

1318
01:17:33,510 --> 01:17:34,290
可以看他

1319
01:17:34,290 --> 01:17:36,570
其实女人是是相同的

1320
01:17:38,520 --> 01:17:40,440
其实避免进行重复操作

1321
01:17:40,440 --> 01:17:42,840
就是可以提高一些性能之类的

1322
01:17:43,140 --> 01:17:44,910
可以breathe然后注水

1323
01:17:44,910 --> 01:17:45,480
脱水的话

1324
01:17:45,480 --> 01:17:48,990
其实就是我们上节课在在这里进行的这个

1325
01:17:51,730 --> 01:17:52,600
我们在屋檐上

1326
01:17:53,700 --> 01:17:54,930
就是往Windows上挂

1327
01:17:54,930 --> 01:17:56,940
在变量这个这个操作这里

1328
01:17:57,660 --> 01:17:58,530
我这上面挂载

1329
01:17:58,530 --> 01:17:59,580
然后在客户端呢

1330
01:17:59,700 --> 01:18:01,110
是不是进行了读取

1331
01:18:01,170 --> 01:18:02,970
这里是不是服务端读取到数据之后

1332
01:18:03,060 --> 01:18:04,440
把它挂在了温度变量上

1333
01:18:04,440 --> 01:18:04,890
然后呢

1334
01:18:05,160 --> 01:18:06,390
你到了客户端之后呢

1335
01:18:06,660 --> 01:18:07,860
就把它读取到了

1336
01:18:09,390 --> 01:18:12,180
是不是在这里进行注水这一步就是脱水注水

1337
01:18:12,450 --> 01:18:15,690
这可能当时翻译的时候就出现这样一个名词

1338
01:18:15,720 --> 01:18:18,540
当时我也刚才听这个名字的时候也比较困难

1339
01:18:18,810 --> 01:18:19,770
为什么出现一个脱水

1340
01:18:19,770 --> 01:18:22,830
注水其实就是往温度上挂在变量和读取变量

1341
01:18:22,920 --> 01:18:23,760
就这么一个操作

1342
01:18:23,760 --> 01:18:24,750
这叫脱水注水

1343
01:18:25,050 --> 01:18:25,920
然后黑break的话

1344
01:18:25,920 --> 01:18:26,400
主要是

1345
01:18:27,780 --> 01:18:28,470
心态变了

1346
01:18:28,560 --> 01:18:29,910
好像这个

1347
01:18:34,420 --> 01:18:37,360
然后引入JS后就变成本地的切换页面了

1348
01:18:38,100 --> 01:18:40,170
因为你引入JS之后

1349
01:18:40,260 --> 01:18:42,240
我们的GS是不是对路由进行了

1350
01:18:42,240 --> 01:18:45,060
比如说你的地址切换收是不是进行了拦截的操作

1351
01:18:45,180 --> 01:18:47,400
他就不会去真实地向服务端发起请求了

1352
01:18:47,400 --> 01:18:48,000
而现在的话

1353
01:18:48,000 --> 01:18:49,620
因为我们第一次没有经验的时候

1354
01:18:49,620 --> 01:18:50,670
并没有任何的拦截

1355
01:18:50,880 --> 01:18:52,320
那当你点击的时候

1356
01:18:52,320 --> 01:18:54,090
他立马就就请求服务端了

1357
01:18:54,180 --> 01:18:55,200
当有GS之后

1358
01:18:55,200 --> 01:18:55,890
才会在这里

1359
01:18:55,890 --> 01:18:57,840
比如说一些地址进行检测

1360
01:18:57,840 --> 01:19:00,270
比如说黑色模式或者汉子模式拿之后

1361
01:19:00,390 --> 01:19:03,090
他就会通过你检测去操作

1362
01:19:03,210 --> 01:19:04,530
比如说操作你的道吗

1363
01:19:04,590 --> 01:19:06,630
然后进行内容进行一个切换

1364
01:19:06,750 --> 01:19:07,530
就这样一个操作

1365
01:19:07,530 --> 01:19:08,670
所以说有的JS之后

1366
01:19:09,640 --> 01:19:10,990
你再点击切换之后的话

1367
01:19:11,200 --> 01:19:13,030
他就不会去真的去请求服务端

1368
01:19:15,150 --> 01:19:15,750
那这一步的话

1369
01:19:15,750 --> 01:19:18,000
正好我们就来完成它把英文模板

1370
01:19:18,000 --> 01:19:20,700
还有我们的GSZS都把他引入进来

1371
01:19:22,900 --> 01:19:23,740
引入进来的话

1372
01:19:23,740 --> 01:19:24,910
首先需要我们的

1373
01:19:26,780 --> 01:19:30,860
Load的读取模块还是需要把我们的模板堵过来

1374
01:19:34,840 --> 01:19:35,380
FS

1375
01:19:36,510 --> 01:19:40,170
然后这里的话还需要咨询一下客户端的打直接咨询一下

1376
01:19:41,780 --> 01:19:42,140
播吧

1377
01:19:46,480 --> 01:19:48,070
可以看到是模板也出来了

1378
01:19:48,070 --> 01:19:49,690
CS是不是都有了

1379
01:19:50,460 --> 01:19:52,890
那我们就把这个模板给他整过来

1380
01:19:56,480 --> 01:19:56,960
FSRU

1381
01:20:03,260 --> 01:20:04,760
然后我们就可以进行操作了

1382
01:20:04,760 --> 01:20:08,030
首先的话读取文件我们可以单独封装一个

1383
01:20:10,030 --> 01:20:11,020
专门读取文件的

1384
01:20:13,060 --> 01:20:14,800
就简单的把函数进行一个拆分

1385
01:20:14,800 --> 01:20:16,030
尽量可以让函数

1386
01:20:16,030 --> 01:20:19,270
比如说保持它的一个单一职责的这样一个原则

1387
01:20:22,380 --> 01:20:23,640
这个就是读取模块

1388
01:20:25,110 --> 01:20:26,010
读取我们的文件

1389
01:20:31,320 --> 01:20:31,620
然后

1390
01:20:36,530 --> 01:20:37,490
还有其他问题吗

1391
01:20:44,800 --> 01:20:45,790
起好多的名词

1392
01:20:46,030 --> 01:20:47,260
现在注册使的话

1393
01:20:47,620 --> 01:20:49,450
应该是从英文翻译的时候

1394
01:20:49,690 --> 01:20:50,800
我往这翻译的时候

1395
01:20:50,800 --> 01:20:51,670
应该出现一个问题

1396
01:20:51,670 --> 01:20:54,580
就是就出现了这样一些名词

1397
01:20:54,580 --> 01:20:57,220
就是让人还挺疑惑的

1398
01:20:57,220 --> 01:20:57,820
就像

1399
01:20:58,690 --> 01:21:01,660
前段时间出的那个GS

1400
01:21:02,690 --> 01:21:04,040
既然是第几版

1401
01:21:04,610 --> 01:21:06,770
他说妹子翻译成企业一样

1402
01:21:06,770 --> 01:21:07,910
是不是有很大的反响

1403
01:21:10,180 --> 01:21:13,150
这里用还是同步读取模块把它读出来

1404
01:21:13,900 --> 01:21:14,380
肉

1405
01:21:16,690 --> 01:21:17,770
我们要对齐的问题呢

1406
01:21:17,770 --> 01:21:19,660
就是我们的音带点H7秒

1407
01:21:23,020 --> 01:21:23,590
把它读起来

1408
01:21:23,590 --> 01:21:26,380
然后读取格式的话是UTF

1409
01:21:29,610 --> 01:21:29,970
这样话

1410
01:21:29,970 --> 01:21:32,160
我们的模板是不是就得到了

1411
01:21:32,160 --> 01:21:33,570
这就是我们的页面模板

1412
01:21:36,970 --> 01:21:37,750
就都取到了

1413
01:21:40,470 --> 01:21:41,550
然后对到之后的话

1414
01:21:41,550 --> 01:21:44,880
这里满载单独提一个就是处理

1415
01:21:49,270 --> 01:21:49,900
注意什么呢

1416
01:21:50,080 --> 01:21:50,920
处理我们的

1417
01:21:53,810 --> 01:21:55,670
模板还有核实到的

1418
01:22:04,930 --> 01:22:06,190
就之前在文艺中

1419
01:22:08,290 --> 01:22:09,880
我们这里是不统一都写在这了

1420
01:22:10,180 --> 01:22:10,990
进行这些

1421
01:22:11,290 --> 01:22:13,270
比如说正则的替换

1422
01:22:13,450 --> 01:22:14,950
还有这个变量的替换等等

1423
01:22:14,950 --> 01:22:17,140
其实我们这里也可以简单把它分成一个函数

1424
01:22:17,260 --> 01:22:18,940
其实这个就是在我们开发中的话

1425
01:22:19,270 --> 01:22:21,460
就是尽量一些这些功能之后

1426
01:22:21,460 --> 01:22:22,870
你也可以把它单独提取一下

1427
01:22:22,870 --> 01:22:25,360
这样的话会出现代码会看到更加的

1428
01:22:26,650 --> 01:22:27,430
简洁一些

1429
01:22:27,520 --> 01:22:29,350
比如说这里处理模板的

1430
01:22:30,490 --> 01:22:33,910
我们单独封装一个函数叫template

1431
01:22:35,680 --> 01:22:38,620
首先第一个的话就是把我们这个模板一会儿调用函数

1432
01:22:38,710 --> 01:22:41,260
首先第一步传进我们这个HR模板

1433
01:22:41,290 --> 01:22:43,600
我们是不是首先需要拿到H码

1434
01:22:43,780 --> 01:22:45,760
我们才能进行后续的一些操作

1435
01:22:49,870 --> 01:22:50,710
拿之后进行操作

1436
01:22:50,710 --> 01:22:55,690
之后还需要传递一些propose propose的话就是你需要替换的组件的内容

1437
01:22:55,840 --> 01:22:59,260
还有你的一些stayed straight直都放在这

1438
01:23:01,910 --> 01:23:03,740
这个一会儿要用的话就

1439
01:23:04,360 --> 01:23:05,170
比较清楚啦

1440
01:23:08,600 --> 01:23:09,260
Props

1441
01:23:10,040 --> 01:23:11,240
Template

1442
01:23:14,610 --> 01:23:15,330
箭头函数

1443
01:23:18,780 --> 01:23:22,860
这不就执行我们的正则替换了我们这里的话是如此

1444
01:23:25,190 --> 01:23:27,620
还有一个就是真实项目中是这样写

1445
01:23:27,620 --> 01:23:29,660
但是细节处理还是非常多的

1446
01:23:29,660 --> 01:23:30,470
比如说你带满了

1447
01:23:30,470 --> 01:23:31,040
压缩了

1448
01:23:31,280 --> 01:23:33,380
你的缓存是一定要处理好的

1449
01:23:35,460 --> 01:23:36,480
所以说一般的话

1450
01:23:36,480 --> 01:23:37,860
如果不是特别熟练

1451
01:23:37,860 --> 01:23:39,000
如果用在这个项目的话

1452
01:23:39,000 --> 01:23:43,080
还是用next或者next的这样的成熟的框架去处理

1453
01:23:44,150 --> 01:23:45,920
因为它的配置还是非常复杂的

1454
01:23:46,160 --> 01:23:49,460
而这个的话只是我们根据官方的一个比较简单的流程

1455
01:23:49,640 --> 01:23:51,530
好多的细节还是需要处理的

1456
01:23:54,070 --> 01:23:55,720
这里我就把它替换掉

1457
01:24:00,620 --> 01:24:02,930
一会儿调用的时候再props里面

1458
01:24:02,930 --> 01:24:05,630
我们就可以把我们要替换的组件内容给他传递过来

1459
01:24:05,630 --> 01:24:06,650
就是我们的h ma

1460
01:24:12,070 --> 01:24:12,670
这样就可以了

1461
01:24:12,670 --> 01:24:14,020
然后我们就可以调用了再

1462
01:24:15,420 --> 01:24:19,380
人的初心这里是不是已经渲染成字符串了

1463
01:24:19,860 --> 01:24:20,400
那么就可以

1464
01:24:22,230 --> 01:24:23,220
把它替换一下

1465
01:24:31,810 --> 01:24:34,330
首先拿到我们的模板

1466
01:24:37,860 --> 01:24:39,000
就是我们这里的

1467
01:24:40,050 --> 01:24:40,770
template

1468
01:24:42,210 --> 01:24:44,730
是不是第一步把我们的页面模板传进来

1469
01:24:46,670 --> 01:24:48,350
然后第二步是就反映这个函数了

1470
01:24:48,980 --> 01:24:50,660
然后反应这个函数扔的时候

1471
01:24:51,080 --> 01:24:51,920
再把我们这个

1472
01:24:54,060 --> 01:24:55,980
我们服务单拿的组件内容拿过来

1473
01:24:55,980 --> 01:24:57,870
然后最终定这个函数就

1474
01:24:59,590 --> 01:25:02,110
把组件内容从服务端就直接返回回来了

1475
01:25:02,590 --> 01:25:05,890
并且插入到了我们的这个页面模板中的话

1476
01:25:05,890 --> 01:25:09,370
只不过是单独的提出了一个小函数就处理这些内容

1477
01:25:10,870 --> 01:25:11,740
最终给到他

1478
01:25:13,890 --> 01:25:15,300
这样就搞定了

1479
01:25:16,380 --> 01:25:19,020
现在再来访问就是我们的SSR

1480
01:25:22,920 --> 01:25:24,510
就不要打包一下

1481
01:25:28,430 --> 01:25:29,150
然后

1482
01:25:31,600 --> 01:25:32,230
Show

1483
01:25:35,240 --> 01:25:36,560
现在来访问刷新一下

1484
01:25:37,130 --> 01:25:39,050
然后你显示网页源代码

1485
01:25:39,260 --> 01:25:40,670
是不是看到就直接回来了

1486
01:25:41,150 --> 01:25:42,770
并且你现在再点击跳转

1487
01:25:42,980 --> 01:25:44,960
可以发现他已经不再停留界面了

1488
01:25:44,960 --> 01:25:46,700
就是你在计划你的健身

1489
01:25:46,700 --> 01:25:49,940
加载完毕就本地的检测去接管了他

1490
01:25:49,940 --> 01:25:52,100
不不再去请求真正的路由了

1491
01:25:52,550 --> 01:25:55,190
这样我们的爱杀就完成了

1492
01:25:55,220 --> 01:25:56,570
接下来我们就需要处理

1493
01:25:57,370 --> 01:25:58,810
剩下两部是不

1494
01:26:01,430 --> 01:26:02,750
这是陆游的处理完成了

1495
01:26:02,900 --> 01:26:05,000
是不是还剩一个请求的处理

1496
01:26:05,700 --> 01:26:06,750
看一下network

1497
01:26:09,570 --> 01:26:10,410
Network

1498
01:26:13,120 --> 01:26:13,780
看什么呢

1499
01:26:14,590 --> 01:26:17,170
那个work这里就请求了CS和GS

1500
01:26:17,880 --> 01:26:18,150
肯定的

1501
01:26:18,150 --> 01:26:19,680
班导和美女CS

1502
01:26:20,070 --> 01:26:21,390
你再点击的时候可以看到

1503
01:26:23,290 --> 01:26:25,780
你再点击的时候并没有发起请求了

1504
01:26:29,990 --> 01:26:32,300
然后我们剩一个埋剩一个请求处理

1505
01:26:32,750 --> 01:26:36,140
请求处理的话就是注水脱水这些操作了

1506
01:26:36,530 --> 01:26:39,380
那这里我们同样还是使用excuse来进行请求

1507
01:26:39,800 --> 01:26:41,180
那我们首先把它安装一下

1508
01:26:44,150 --> 01:26:45,560
然后这里为了方便的话

1509
01:26:45,560 --> 01:26:48,170
我们我在服务端添加一个接口

1510
01:26:49,520 --> 01:26:51,650
不要在这里随便听一节课

1511
01:26:51,710 --> 01:26:56,210
如果他点再次API

1512
01:26:56,420 --> 01:26:58,700
然后get user info

1513
01:27:04,150 --> 01:27:05,680
然后随便返回点内容

1514
01:27:11,390 --> 01:27:11,720
CODE0

1515
01:27:11,720 --> 01:27:13,340
然后message

1516
01:27:15,080 --> 01:27:17,750
一般是不是一些接口中的一个字段定义

1517
01:27:17,780 --> 01:27:18,680
是不是打一个模板

1518
01:27:18,680 --> 01:27:20,630
一般都是约定好厚的

1519
01:27:24,150 --> 01:27:25,830
这样的话每个接口就可以了

1520
01:27:26,560 --> 01:27:28,540
看一下能不能拿回来

1521
01:27:32,940 --> 01:27:33,600
多了一个

1522
01:27:35,530 --> 01:27:37,120
是不是可以看到没有问题

1523
01:27:37,480 --> 01:27:38,470
结果钱就回来了

1524
01:27:39,180 --> 01:27:39,900
那没有问题

1525
01:27:39,900 --> 01:27:42,300
我们就在about这里边儿来使用一下

1526
01:27:47,940 --> 01:27:48,630
首先呢

1527
01:27:48,630 --> 01:27:51,660
这里边我们是不是要在汉字间里边用户的写法来

1528
01:27:53,190 --> 01:27:53,670
比如说这里

1529
01:27:58,170 --> 01:27:58,530
等于

1530
01:28:01,260 --> 01:28:03,420
默认只我们给个name是空的

1531
01:28:05,770 --> 01:28:06,760
你用到有实力

1532
01:28:06,760 --> 01:28:08,380
他需要把他引入进来

1533
01:28:09,100 --> 01:28:10,570
都处理我们的状态管理的

1534
01:28:10,870 --> 01:28:12,790
不是处理我们的自己的状态的

1535
01:28:15,310 --> 01:28:18,370
然后请求都发统一发到我们的effect里边

1536
01:28:20,940 --> 01:28:22,740
然后之前就一次把它为空

1537
01:28:22,830 --> 01:28:24,360
这个都是录播课程都有讲

1538
01:28:26,600 --> 01:28:28,550
还需要引入我们的excuse

1539
01:28:35,020 --> 01:28:36,880
然后the get

1540
01:28:38,080 --> 01:28:38,770
请求谁呢

1541
01:28:38,770 --> 01:28:41,950
是不是请求我们这个落后的3000接口

1542
01:28:48,130 --> 01:28:49,060
停了之后

1543
01:28:49,060 --> 01:28:50,170
我就把他给到

1544
01:28:51,280 --> 01:28:52,840
我们set you re in for就可以了

1545
01:28:52,870 --> 01:28:54,940
然后我们就能把它渲染到页面上

1546
01:28:56,400 --> 01:28:58,380
这里再加一个H3

1547
01:29:00,330 --> 01:29:00,780
名字

1548
01:29:03,870 --> 01:29:07,680
User info里边是不是有个内蒙来

1549
01:29:07,680 --> 01:29:09,870
我们现在来看一下是不是

1550
01:29:11,620 --> 01:29:12,910
能请求成功呢

1551
01:29:25,960 --> 01:29:27,640
叫克林

1552
01:29:27,670 --> 01:29:28,210
享受

1553
01:29:32,480 --> 01:29:34,730
我们先把客户端调试通来看一下

1554
01:29:37,480 --> 01:29:38,950
好像是没有显示出来

1555
01:29:38,950 --> 01:29:39,610
我们看一下

1556
01:29:41,260 --> 01:29:42,220
出什么问题了

1557
01:29:43,240 --> 01:29:44,170
嗯

1558
01:29:45,410 --> 01:29:46,130
五折

1559
01:29:47,970 --> 01:29:48,570
报错啦

1560
01:29:48,570 --> 01:29:49,380
又是effect

1561
01:29:53,520 --> 01:29:54,630
王乐把它引入见

1562
01:29:57,260 --> 01:29:59,810
现在来刷新是没有问题

1563
01:29:59,810 --> 01:30:00,890
现在这个就跨越了

1564
01:30:00,890 --> 01:30:01,370
跨越的话

1565
01:30:01,370 --> 01:30:04,760
我们可以在服务端让他允许跨越就行了

1566
01:30:05,120 --> 01:30:06,020
这个简单

1567
01:30:09,160 --> 01:30:09,970
这允许跨越

1568
01:30:11,340 --> 01:30:11,550
这

1569
01:30:12,690 --> 01:30:14,670
就在在服务端配置一下呢

1570
01:30:14,670 --> 01:30:15,660
我直接拿一张代码吧

1571
01:30:32,620 --> 01:30:34,450
就这样代码拿过来就可以了

1572
01:30:42,890 --> 01:30:43,460
这样我们

1573
01:30:45,320 --> 01:30:46,130
报错啦

1574
01:30:48,590 --> 01:30:49,310
A wait

1575
01:30:54,740 --> 01:30:55,130
位置

1576
01:30:57,150 --> 01:30:57,600
放在这儿

1577
01:31:07,670 --> 01:31:09,620
添加一个中间件的信息

1578
01:31:15,550 --> 01:31:17,140
这样应该可以了

1579
01:31:17,650 --> 01:31:21,910
我们再来请求应该是没有什么问题了吧

1580
01:31:21,910 --> 01:31:23,230
SV登请求回来了

1581
01:31:23,230 --> 01:31:24,430
看到network里边

1582
01:31:25,100 --> 01:31:28,280
我们的盖特有人放不正常就回来了

1583
01:31:29,930 --> 01:31:30,740
这样话是没问题

1584
01:31:30,740 --> 01:31:31,430
接口没问题了

1585
01:31:31,490 --> 01:31:32,660
这里就是存在的问题

1586
01:31:32,900 --> 01:31:35,780
如果你这个八个页面是直接从服务端返回回来的

1587
01:31:35,990 --> 01:31:38,960
那就没必要服务端把页面内容请求回来

1588
01:31:38,960 --> 01:31:40,760
然后等待介词加载完毕

1589
01:31:41,000 --> 01:31:41,540
然后呢

1590
01:31:41,720 --> 01:31:44,480
你再去在客户端发掘阿克请求

1591
01:31:44,630 --> 01:31:47,720
这样说这路程都比较多一些

1592
01:31:48,050 --> 01:31:50,000
而现在我们既然有了服务端渲染

1593
01:31:50,600 --> 01:31:54,260
我们就直接从服务端把这个请求的这个数据

1594
01:31:54,440 --> 01:31:58,010
然后和我们的HTML这个一起返回回来就可以了

1595
01:31:58,040 --> 01:32:00,170
然后就不用再次发起请求了

1596
01:32:01,690 --> 01:32:04,570
这里就涉及到注水活水的操作了

1597
01:32:04,930 --> 01:32:05,500
而这里的话

1598
01:32:05,500 --> 01:32:06,850
因为他和微有点区别

1599
01:32:06,850 --> 01:32:09,310
唯一的话是不是直接给我们提供了一个户口的写法

1600
01:32:09,550 --> 01:32:10,480
而在溶液中呢

1601
01:32:10,630 --> 01:32:12,460
它并没有给我们提供相应的写法

1602
01:32:12,460 --> 01:32:12,940
但是呢

1603
01:32:13,390 --> 01:32:16,210
在root中给我们提供了一种写法在

1604
01:32:18,560 --> 01:32:19,130
叫什么

1605
01:32:21,480 --> 01:32:22,530
She wore

1606
01:32:22,740 --> 01:32:28,440
他应该有个APP可以看到she was reading也类似于就是是APP的一个直男癌的事

1607
01:32:30,010 --> 01:32:31,360
可以看到数据获取部分

1608
01:32:32,100 --> 01:32:36,060
数据获取部分data loading可以看这篇写法

1609
01:32:36,060 --> 01:32:38,280
可以在这里加一个楼的data

1610
01:32:38,370 --> 01:32:39,330
然后在服务端呢

1611
01:32:39,510 --> 01:32:41,190
我们就可以读到这个楼是对的

1612
01:32:41,190 --> 01:32:43,020
然后从上边是读到

1613
01:32:43,020 --> 01:32:44,640
然后可以看到这出现写法

1614
01:32:45,200 --> 01:32:48,320
是不是我们这里定义了一个数组就有用武之处了

1615
01:32:53,230 --> 01:32:55,030
我们的可令

1616
01:32:56,800 --> 01:32:57,610
是不是进行数组

1617
01:32:57,610 --> 01:33:00,280
然后在服务单位匹配到当前这个

1618
01:33:02,070 --> 01:33:03,480
组建的这个对象

1619
01:33:04,520 --> 01:33:05,390
就路由的对象

1620
01:33:05,390 --> 01:33:07,580
然后匹配他身上是不是有这个楼的

1621
01:33:07,580 --> 01:33:08,600
对他如果有是不

1622
01:33:09,390 --> 01:33:10,620
给他加到装备里边儿

1623
01:33:10,620 --> 01:33:11,640
然后统一进行请求

1624
01:33:11,640 --> 01:33:12,690
请求完回来之后

1625
01:33:13,020 --> 01:33:14,010
他就可以和我们的

1626
01:33:15,320 --> 01:33:16,460
H码一起回来了

1627
01:33:16,550 --> 01:33:19,100
这里就是到注水脱水地方了

1628
01:33:19,130 --> 01:33:23,360
那这里我们就按官方的这个指导写法来写一下什么load data

1629
01:33:25,640 --> 01:33:28,970
因为这个route对象我们是可以在服务端独到的

1630
01:33:29,030 --> 01:33:30,320
我们这里给它加上楼的

1631
01:33:30,320 --> 01:33:30,530
对吧

1632
01:33:30,680 --> 01:33:31,670
这个都可以自定义

1633
01:33:31,670 --> 01:33:34,070
这个名称并不是说固定的写法

1634
01:33:34,070 --> 01:33:37,070
比如说这里是不是我们就是盖特游人一放

1635
01:33:37,310 --> 01:33:38,990
那这就是需要我们自己进行处理

1636
01:33:39,820 --> 01:33:41,470
那给他邮衣服从哪里来呢

1637
01:33:43,690 --> 01:33:46,420
那是不是需要和我们的这个bug应该是在一起的

1638
01:33:46,990 --> 01:33:49,270
那这里其实我们就可以再给他倒出一个就行了

1639
01:33:49,980 --> 01:33:50,940
Export

1640
01:33:53,130 --> 01:33:54,960
然后cast get

1641
01:33:57,180 --> 01:33:58,050
user info

1642
01:34:03,420 --> 01:34:05,130
说我把他整回来

1643
01:34:07,560 --> 01:34:11,760
这样话在服务端我们是不是也可以进行直接拿到这个数据了

1644
01:34:14,220 --> 01:34:15,060
然后这里这些的话

1645
01:34:15,060 --> 01:34:17,880
我们就可以统一先把它去掉不要

1646
01:34:23,760 --> 01:34:26,220
现在的话我们就可以在这里访问到了

1647
01:34:26,280 --> 01:34:28,350
然后把他这个还需要研究一下

1648
01:34:30,370 --> 01:34:30,700
在这

1649
01:34:36,620 --> 01:34:38,150
这样我们就挂到组件上了

1650
01:34:38,570 --> 01:34:39,530
挂到组件之后

1651
01:34:39,590 --> 01:34:42,200
我们就需要在服务端来拿到这个数据

1652
01:34:42,470 --> 01:34:43,850
但是因为这里入口的话

1653
01:34:44,060 --> 01:34:45,050
我们是在这个

1654
01:34:46,530 --> 01:34:49,050
您去稍微的结在这里进行了处理

1655
01:34:49,050 --> 01:34:52,920
所以说我们这个的话就和之前唯一可能稍微有些区别的地方

1656
01:34:53,220 --> 01:34:54,900
那么这里就在这里进行处理了

1657
01:34:57,410 --> 01:35:00,560
首先拿到我们的root是因为这个打包完成之后

1658
01:35:00,560 --> 01:35:02,660
是不是也是在服务端调用我们的root

1659
01:35:02,660 --> 01:35:03,950
然后进行遍历

1660
01:35:08,050 --> 01:35:08,770
然后点

1661
01:35:14,820 --> 01:35:15,120
键的话

1662
01:35:15,120 --> 01:35:15,960
我们就需要判断

1663
01:35:22,360 --> 01:35:22,660
嗯

1664
01:35:28,220 --> 01:35:33,920
判断这个他的pass是如此的如此方面

1665
01:35:34,730 --> 01:35:35,240
理解一下

1666
01:35:35,300 --> 01:35:39,800
如此pass是否等于和我们现在这个请求路由是否匹配

1667
01:35:39,920 --> 01:35:44,810
是不是正好我们调用这个函数传入的上下文是用到了最快速的URL

1668
01:35:44,990 --> 01:35:45,560
是不是

1669
01:35:46,910 --> 01:35:47,540
他叫

1670
01:35:54,360 --> 01:35:54,690
这个啊

1671
01:36:03,340 --> 01:36:04,870
Sheet s request

1672
01:36:07,980 --> 01:36:08,730
这个写错了

1673
01:36:08,730 --> 01:36:10,710
这应该是路径是pass

1674
01:36:15,250 --> 01:36:16,720
这里比如说我们不确定的话

1675
01:36:16,720 --> 01:36:18,130
我们可以打印一下

1676
01:36:25,590 --> 01:36:27,330
然后是CT s

1677
01:36:29,130 --> 01:36:29,820
request

1678
01:36:30,570 --> 01:36:32,580
看一下是不是他

1679
01:36:35,080 --> 01:36:36,160
然后访问

1680
01:36:38,970 --> 01:36:39,420
真气

1681
01:36:46,560 --> 01:36:47,460
嗯

1682
01:36:48,750 --> 01:36:50,100
需要重新打包扣子

1683
01:36:58,080 --> 01:36:59,220
现在来访问一下

1684
01:37:01,180 --> 01:37:02,650
可以看到是不是就是这个pass

1685
01:37:02,920 --> 01:37:04,180
刚刚这个URL写错了

1686
01:37:05,080 --> 01:37:06,160
Pad pad可以看到

1687
01:37:06,340 --> 01:37:07,330
拿这个跟陆静了

1688
01:37:07,330 --> 01:37:08,350
如果是个巴特

1689
01:37:10,170 --> 01:37:10,680
刷新一下

1690
01:37:12,350 --> 01:37:12,980
这里报错了

1691
01:37:12,980 --> 01:37:14,690
可以看到是不是有bug的事

1692
01:37:14,690 --> 01:37:15,170
Pass啊

1693
01:37:15,320 --> 01:37:15,890
没有写错

1694
01:37:16,580 --> 01:37:17,540
有L是错的

1695
01:37:18,390 --> 01:37:20,490
所以首先判断是不是路由

1696
01:37:20,490 --> 01:37:21,630
是否能匹配上

1697
01:37:21,960 --> 01:37:25,830
如果匹配上是不是正好是证明是当前访问的哪个路由

1698
01:37:27,060 --> 01:37:29,220
每个每个路由的话都可能有自己的数据

1699
01:37:29,490 --> 01:37:32,730
然后现在每个组件上面是不是挂在了一个搂着data

1700
01:37:34,970 --> 01:37:36,860
如果哪个数据要进行接口请求

1701
01:37:36,860 --> 01:37:38,150
是不是就挂在到这里了

1702
01:37:38,210 --> 01:37:39,680
然后我们在服务端拿到它

1703
01:37:40,940 --> 01:37:43,190
在的话我们定一个速度

1704
01:37:43,670 --> 01:37:44,180
不知道妹子

1705
01:37:46,580 --> 01:37:47,840
来采访我们的请求

1706
01:37:47,990 --> 01:37:49,520
因为你请求可能不止一个

1707
01:37:50,390 --> 01:37:51,950
这里就需要再加一个判断了

1708
01:37:53,990 --> 01:37:55,160
判断是当前路由

1709
01:37:55,250 --> 01:37:58,160
并且当你的root上边儿

1710
01:37:58,990 --> 01:38:00,700
有load date的时候

1711
01:38:01,180 --> 01:38:02,950
我们才进行给你普及进行

1712
01:38:06,550 --> 01:38:10,060
是不是在他身上有一个root的楼的对等

1713
01:38:11,410 --> 01:38:14,290
这个是不是就是我们的X发起的Su请求

1714
01:38:18,160 --> 01:38:22,210
因为S也是基于access也是基于说妹子封装的嘛

1715
01:38:22,270 --> 01:38:25,240
所以说它也是一个说妹子一个对象

1716
01:38:26,260 --> 01:38:27,610
然后这些都处理完成之后

1717
01:38:27,610 --> 01:38:29,710
我们这里要写一个Pro妹子

1718
01:38:31,550 --> 01:38:33,080
这个是官网推荐的写法

1719
01:38:33,080 --> 01:38:33,950
这里都有

1720
01:38:35,950 --> 01:38:38,260
React route

1721
01:38:38,780 --> 01:38:40,760
在这里先将它铺进去

1722
01:38:40,760 --> 01:38:43,310
便利之后说匹配到之后将它复制进去

1723
01:38:43,310 --> 01:38:45,620
然后promise哦把所有数据请求回来

1724
01:38:47,100 --> 01:38:48,630
给官方写的还是还可以

1725
01:38:49,260 --> 01:38:49,560
都有

1726
01:38:51,420 --> 01:38:53,400
请求我们这个妹子

1727
01:38:53,880 --> 01:38:58,230
然后这样这样是不是就能拿到我们的date了

1728
01:39:02,380 --> 01:39:05,320
然后这个你得需要数据请求完成之后

1729
01:39:05,470 --> 01:39:07,450
你再把你的页面返回过去

1730
01:39:07,450 --> 01:39:10,090
这样他们才能一块儿返回返回回去

1731
01:39:10,510 --> 01:39:13,630
那接下来就是进行注水脱水的操作了

1732
01:39:13,660 --> 01:39:16,120
水的话我们需要借助一个中间变量

1733
01:39:16,120 --> 01:39:16,540
就是旅客

1734
01:39:17,770 --> 01:39:18,340
就是负担

1735
01:39:18,340 --> 01:39:19,450
全完成之后拿出去

1736
01:39:19,630 --> 01:39:21,070
你可以直接存到redux里边

1737
01:39:21,280 --> 01:39:22,690
就不需要再进行请求了

1738
01:39:22,930 --> 01:39:24,250
这里我们就用个read

1739
01:39:30,220 --> 01:39:34,570
那这数据这里数据我是在这个因素失误的JS这里请做的

1740
01:39:34,570 --> 01:39:36,910
那我怎么在服务端拿到它呢

1741
01:39:37,150 --> 01:39:39,520
在这里拿到之后给它注入到

1742
01:39:40,280 --> 01:39:42,410
比如说Windows变量在这进行注入呢

1743
01:39:42,590 --> 01:39:44,990
这里还是正好巧妙的

1744
01:39:46,010 --> 01:39:46,910
阿瑞莎也可以

1745
01:39:46,910 --> 01:39:47,960
完全没有问题

1746
01:39:49,880 --> 01:39:55,700
这里CS我们是不是就可以通过这个中间的一个载体把这个数据来进行传递了

1747
01:39:55,700 --> 01:39:57,560
所以说这里我们是不是拿这个数据呢

1748
01:39:57,560 --> 01:40:00,140
我们就可以通过这个载体来进行传递

1749
01:40:00,140 --> 01:40:03,560
比如我们在CS上写了一个Windows对象

1750
01:40:07,790 --> 01:40:08,750
定义了一个变量

1751
01:40:08,750 --> 01:40:09,170
相当于

1752
01:40:15,480 --> 01:40:18,540
就等于比如说首先判断他存不存在

1753
01:40:19,740 --> 01:40:20,730
如果什么没有的话

1754
01:40:21,000 --> 01:40:22,230
他这个是空的

1755
01:40:26,130 --> 01:40:26,580
挣钱

1756
01:40:29,830 --> 01:40:31,570
应该是的话

1757
01:40:31,570 --> 01:40:32,320
反馈这个速度

1758
01:40:32,320 --> 01:40:33,610
我们拿到DATA0点

1759
01:40:36,970 --> 01:40:39,250
应该这个就能拿出去给我们试一下就知道了

1760
01:40:40,560 --> 01:40:42,510
这样话我们是不是就处理完成了

1761
01:40:42,510 --> 01:40:45,450
然后在服务端是不是就可以拿到了

1762
01:40:47,420 --> 01:40:52,280
通过CF是不是就能拿到我们传递过来这个请求的接口的数据了

1763
01:40:53,060 --> 01:40:55,640
那接下来我们就出一下redux先

1764
01:40:56,000 --> 01:40:56,810
因为还没有处理

1765
01:40:58,550 --> 01:40:58,970
Starch

1766
01:41:00,860 --> 01:41:02,960
然后index的

1767
01:41:07,840 --> 01:41:11,770
他其实现在也提供了hooks的写法

1768
01:41:17,470 --> 01:41:19,720
然后我们定一个初始的值

1769
01:41:22,230 --> 01:41:23,430
加name

1770
01:41:34,930 --> 01:41:37,420
这个我记得好像是录播课中也有讲

1771
01:41:40,110 --> 01:41:42,960
录播课程行就讲了这个reduction

1772
01:41:42,960 --> 01:41:46,830
不是这个redux定义它的初始值

1773
01:41:47,160 --> 01:41:49,350
然后action触发他的一些动作的

1774
01:41:49,470 --> 01:41:50,160
这里我们用

1775
01:41:51,270 --> 01:41:51,930
Switch

1776
01:41:53,970 --> 01:41:54,420
action

1777
01:41:54,450 --> 01:41:57,240
通过action type判断是触发了哪些

1778
01:41:58,190 --> 01:42:00,740
操作比如说第一个是改变我们的直

1779
01:42:03,100 --> 01:42:04,870
我们就要change it

1780
01:42:09,370 --> 01:42:11,770
趁着这个时候是否返回新的state值

1781
01:42:11,920 --> 01:42:12,580
然后我们就

1782
01:42:13,630 --> 01:42:14,590
进行一下合并

1783
01:42:14,590 --> 01:42:15,220
斯特直的

1784
01:42:19,370 --> 01:42:22,010
传的时候通过黑绿的传递进来

1785
01:42:23,210 --> 01:42:24,290
这个你可以自己定义

1786
01:42:24,290 --> 01:42:25,520
并不一定是写披露的

1787
01:42:25,520 --> 01:42:27,050
拟写其他就传递过来的参数

1788
01:42:30,420 --> 01:42:31,680
然后默认的时候呢

1789
01:42:35,400 --> 01:42:39,840
没人的时候就简单的反馈他的一个实际的拷贝一下

1790
01:42:39,840 --> 01:42:41,670
在我们的reduction就完成了

1791
01:42:41,670 --> 01:42:44,340
然后最终把它倒出去的一个part

1792
01:42:45,100 --> 01:42:45,640
Function

1793
01:42:45,970 --> 01:42:47,860
然后是可炼成

1794
01:42:48,990 --> 01:42:50,880
叫可怜这些的话

1795
01:42:50,880 --> 01:42:53,130
我们分为了服务端和客户端

1796
01:42:54,230 --> 01:42:54,800
为什么呢

1797
01:42:55,160 --> 01:42:58,760
因为你客户端的话需要是否进行这个治水脱水操作

1798
01:42:58,970 --> 01:43:00,860
服务端和客户端需要进行这个操作

1799
01:43:01,040 --> 01:43:02,510
而服务端是不是就不需要

1800
01:43:04,880 --> 01:43:05,450
return

1801
01:43:05,450 --> 01:43:08,240
然后是我们的这个ke re test

1802
01:43:10,430 --> 01:43:13,250
就把这个reduce上给他传下来的read的用法

1803
01:43:15,110 --> 01:43:17,240
其实单纯的平时我们开发业务的话

1804
01:43:17,510 --> 01:43:19,880
就是根据文档的写法去一步写

1805
01:43:20,120 --> 01:43:21,740
其实并没有什么太多男的

1806
01:43:23,820 --> 01:43:24,390
男的是

1807
01:43:24,390 --> 01:43:27,060
只是因为对这语法的就是不熟悉

1808
01:43:28,420 --> 01:43:30,220
这样是不是我们的一个是客户端

1809
01:43:30,220 --> 01:43:30,790
一个服务端

1810
01:43:30,970 --> 01:43:31,750
我们就完成了

1811
01:43:31,930 --> 01:43:34,630
我们就是之后就需要改一下我们的组建了

1812
01:43:34,660 --> 01:43:35,470
一个是在

1813
01:43:36,310 --> 01:43:38,230
Create a link just

1814
01:43:39,970 --> 01:43:40,930
客户端改一下

1815
01:43:41,500 --> 01:43:41,980
这样

1816
01:43:49,780 --> 01:43:51,790
是不是得需要包裹起来才可以把它

1817
01:43:53,750 --> 01:43:54,380
Provide

1818
01:43:56,510 --> 01:43:57,140
APP

1819
01:44:01,550 --> 01:44:03,290
然后是到等于C呢

1820
01:44:03,350 --> 01:44:05,780
就等于还得引入进来

1821
01:44:10,420 --> 01:44:12,520
可瑞可林

1822
01:44:18,620 --> 01:44:19,610
师傅把他引入进来

1823
01:44:21,800 --> 01:44:22,040
来

1824
01:44:22,040 --> 01:44:22,610
给到他

1825
01:44:25,340 --> 01:44:28,940
Qu na服务端也是要改一下的

1826
01:44:33,840 --> 01:44:35,550
这个是科瑞特

1827
01:44:37,180 --> 01:44:37,720
食物

1828
01:44:38,410 --> 01:44:39,040
然后呢

1829
01:44:39,490 --> 01:44:43,000
同样这里也是需要进行一层包裹的

1830
01:44:46,370 --> 01:44:47,030
Provide

1831
01:44:48,820 --> 01:44:50,860
然后把我们的root给他放进去

1832
01:44:56,850 --> 01:44:59,040
然后这里

1833
01:45:09,040 --> 01:45:09,580
等于谁呢

1834
01:45:09,580 --> 01:45:11,620
就等于我们的soso

1835
01:45:15,020 --> 01:45:15,560
是不这样

1836
01:45:15,560 --> 01:45:16,760
服务端也有

1837
01:45:16,880 --> 01:45:17,750
客户端也有了

1838
01:45:23,710 --> 01:45:26,470
那现在我们改成了这个read之后

1839
01:45:29,240 --> 01:45:30,260
Steam的文

1840
01:45:31,150 --> 01:45:31,780
写错了吗

1841
01:45:37,090 --> 01:45:38,140
到底被写错了吗

1842
01:45:49,620 --> 01:45:51,090
瑞瑞

1843
01:45:54,570 --> 01:45:57,300
收拾到现在我们改成read之后

1844
01:45:57,300 --> 01:45:58,290
这里我们就要改一下

1845
01:45:58,470 --> 01:46:01,020
用雷达的方法来拿我们这个值

1846
01:46:03,140 --> 01:46:05,150
大师给我们提供了什么写法呢

1847
01:46:07,530 --> 01:46:08,880
You select

1848
01:46:11,590 --> 01:46:12,130
还有一个的话

1849
01:46:12,130 --> 01:46:13,000
我们要改变的话

1850
01:46:13,000 --> 01:46:13,900
它提供了一个

1851
01:46:16,230 --> 01:46:16,530
这是

1852
01:46:17,550 --> 01:46:19,920
我们提供的hooks写法呢

1853
01:46:19,920 --> 01:46:21,030
我们就可以进行用了

1854
01:46:22,560 --> 01:46:25,890
首先我们拿到的这就是有舍lecture

1855
01:46:30,820 --> 01:46:31,810
然后就可以拿到了real

1856
01:46:34,150 --> 01:46:34,480
name

1857
01:46:36,650 --> 01:46:37,280
这里我们改一下

1858
01:46:37,280 --> 01:46:39,860
这样我们就从这里可以直接读取到他那个

1859
01:46:42,580 --> 01:46:43,120
然后呢

1860
01:46:43,570 --> 01:46:44,230
因为这里的话

1861
01:46:44,230 --> 01:46:46,390
如果你是在about页面刷新

1862
01:46:46,390 --> 01:46:48,790
那肯定是从服务端请求回来的

1863
01:46:48,790 --> 01:46:49,840
是没有问题

1864
01:46:50,560 --> 01:46:52,930
但如果你是在home页面刷新

1865
01:46:52,930 --> 01:46:55,060
然后你切到了bug的页面呢

1866
01:46:55,510 --> 01:46:58,630
那是不是就需要客户端还是需要发起阿贾克斯的请求的

1867
01:46:58,630 --> 01:47:01,990
所以说这个还需要还是需要进行判断一下的

1868
01:47:05,120 --> 01:47:10,070
Cast does pets等于u Dis pat

1869
01:47:14,860 --> 01:47:16,240
然后每次不要发起请求

1870
01:47:16,240 --> 01:47:19,990
有effect

1871
01:47:24,450 --> 01:47:25,410
我们判断啥呢

1872
01:47:25,530 --> 01:47:26,460
来判断

1873
01:47:26,490 --> 01:47:27,510
内幕是不是存在

1874
01:47:27,810 --> 01:47:28,830
如果不存在

1875
01:47:29,010 --> 01:47:30,840
我们就需要重新的发起使用

1876
01:47:30,840 --> 01:47:33,090
是不是就调用这个get user info

1877
01:47:36,900 --> 01:47:37,980
然后拿到数据之后

1878
01:47:38,220 --> 01:47:39,660
我们就重新更新

1879
01:47:39,690 --> 01:47:42,720
我们在就是reduce里边的纸

1880
01:47:45,210 --> 01:47:47,040
这里我们定义了一个什么

1881
01:47:47,250 --> 01:47:50,040
一个操作是change date

1882
01:47:52,650 --> 01:47:53,640
Tap k的

1883
01:47:54,090 --> 01:47:55,710
然后polo的车型呢

1884
01:47:55,710 --> 01:47:58,650
就是我们这里的请求回来的数据

1885
01:48:01,050 --> 01:48:02,970
这样就比较完整了

1886
01:48:07,380 --> 01:48:08,580
那这里还剩最后一步

1887
01:48:08,580 --> 01:48:11,610
就是我们的interest Xu的JS里边的处理

1888
01:48:14,580 --> 01:48:15,300
这里的吃的

1889
01:48:16,080 --> 01:48:17,040
那就剩这里了

1890
01:48:17,460 --> 01:48:18,600
这里我们拿到之后

1891
01:48:19,920 --> 01:48:22,050
我们要将它剪

1892
01:48:22,230 --> 01:48:24,450
将它注入到我们的Windows对象

1893
01:48:34,490 --> 01:48:35,180
看一下

1894
01:48:37,360 --> 01:48:39,010
如果API返回较慢

1895
01:48:40,000 --> 01:48:40,390
对呀

1896
01:48:40,540 --> 01:48:42,880
API较慢也会拖慢他

1897
01:48:42,880 --> 01:48:43,510
这肯定的

1898
01:48:43,540 --> 01:48:46,180
因为你可以看到这里它是等待的

1899
01:48:46,570 --> 01:48:47,560
你要一起返回

1900
01:48:47,560 --> 01:48:49,990
那肯定是一个不返回来就一直等着

1901
01:48:49,990 --> 01:48:50,830
所以说会拖慢

1902
01:48:51,310 --> 01:48:53,020
所以说这个也是要酌情考虑

1903
01:48:53,500 --> 01:48:54,580
就是你一些A片

1904
01:48:54,940 --> 01:48:57,220
你并不是所谓的A片都堆到这里去

1905
01:48:57,400 --> 01:48:58,600
直接让他请求回来

1906
01:48:58,600 --> 01:49:00,760
这个就是需要综合考虑的

1907
01:49:01,360 --> 01:49:02,650
就哪些是必须的

1908
01:49:02,890 --> 01:49:04,420
必须就是必须

1909
01:49:04,420 --> 01:49:05,920
需要和HR一起反映回来的

1910
01:49:05,950 --> 01:49:07,990
就是需要首评支出的一些内容

1911
01:49:07,990 --> 01:49:10,720
就是用户需要快速看到内容就可以放在这儿

1912
01:49:10,900 --> 01:49:12,130
然后一些不需要的地方呢

1913
01:49:12,310 --> 01:49:14,950
就完全就还是通过阿哲和他请就可以了

1914
01:49:17,670 --> 01:49:19,170
这个肯定是需要取舍的

1915
01:49:21,560 --> 01:49:23,960
还有像我们这里的CS是不是我们也近

1916
01:49:24,170 --> 01:49:25,580
其实这个也是需要进行取舍

1917
01:49:25,580 --> 01:49:27,560
就是关于这个点

1918
01:49:27,560 --> 01:49:32,750
CS我们这里是不是单独把它提取成了文件进行渲染

1919
01:49:32,930 --> 01:49:33,590
其实爱他的话

1920
01:49:33,590 --> 01:49:35,810
还有一个就是我们还有一种是带绿的

1921
01:49:35,810 --> 01:49:38,330
是不是直接把它打成内敛的样子放到这

1922
01:49:38,930 --> 01:49:44,810
这个也是会拖慢你的爱他就是速度的就是如果你的样样式非常多

1923
01:49:44,810 --> 01:49:46,190
你通过内联样式打到这里

1924
01:49:46,460 --> 01:49:49,040
你服务端是不是还要把它通过一模反应回来

1925
01:49:49,190 --> 01:49:49,850
那这样的话

1926
01:49:50,180 --> 01:49:52,070
那你这个文件是不是会有非常的大

1927
01:49:53,110 --> 01:49:55,540
所以说这时候就推荐把它单独提取出去了

1928
01:49:55,870 --> 01:49:58,450
但是单独提取出去的话又有新的问题

1929
01:49:58,480 --> 01:49:59,290
什么问题呢

1930
01:49:59,830 --> 01:50:01,750
因为你这个虽然是单独提取出去的

1931
01:50:02,440 --> 01:50:04,330
特别有可能界面会闪下的情况

1932
01:50:04,330 --> 01:50:06,520
就是因为你CS后家才回来的

1933
01:50:06,520 --> 01:50:07,720
而你的H码呢

1934
01:50:07,840 --> 01:50:10,270
是不是界面是指数直接重复单独又回来了

1935
01:50:10,450 --> 01:50:13,330
这个再去请求CS请求加载完成之后

1936
01:50:13,510 --> 01:50:13,900
郁闷

1937
01:50:13,900 --> 01:50:15,550
内容才能正常是不显示出来

1938
01:50:16,000 --> 01:50:17,170
所以这个进行曲

1939
01:50:17,170 --> 01:50:18,700
就是如果你的CS特别的

1940
01:50:19,060 --> 01:50:20,020
比如说小之类的

1941
01:50:20,020 --> 01:50:21,190
或者一些CS

1942
01:50:21,460 --> 01:50:24,340
你需要打成那样是直接放到这儿

1943
01:50:24,400 --> 01:50:26,200
如果你CS文件特别大的话

1944
01:50:26,320 --> 01:50:27,640
就建议单独踢出去

1945
01:50:28,090 --> 01:50:29,530
他说细节还是非常多的

1946
01:50:29,890 --> 01:50:31,870
尤其像SR配置是非常复杂的

1947
01:50:33,230 --> 01:50:33,620
这里的话

1948
01:50:33,620 --> 01:50:36,020
我们只是简单进行了这样一个流程

1949
01:50:36,140 --> 01:50:37,250
我们是把它走通了

1950
01:50:37,250 --> 01:50:38,390
但是好多的细节

1951
01:50:38,600 --> 01:50:40,700
如果是真正的线上实战项目的话

1952
01:50:41,150 --> 01:50:42,170
还是挺多的

1953
01:50:42,860 --> 01:50:44,120
并不是那么简单其实

1954
01:50:46,670 --> 01:50:47,630
这里我们剩一步

1955
01:50:47,630 --> 01:50:49,190
剩一步就在这里处理一下

1956
01:50:49,190 --> 01:50:50,180
我们拿到我们的

1957
01:50:52,890 --> 01:50:54,570
迟到的急

1958
01:50:57,740 --> 01:51:00,140
这里我们再给他传一个一个私盗过去

1959
01:51:02,850 --> 01:51:04,320
你看一下是不是拼

1960
01:51:04,500 --> 01:51:06,690
这就是注水特许就是这个操作

1961
01:51:11,510 --> 01:51:13,370
是挂在我们的Windows对象上

1962
01:51:14,870 --> 01:51:16,190
这里温度

1963
01:51:20,710 --> 01:51:21,760
谁给你起什么名字呢

1964
01:51:21,760 --> 01:51:22,540
就叫

1965
01:51:22,600 --> 01:51:22,990
比如说

1966
01:51:29,310 --> 01:51:30,210
它等于谁呢

1967
01:51:30,630 --> 01:51:31,680
等于我们的

1968
01:51:34,020 --> 01:51:34,860
把它切成

1969
01:51:37,050 --> 01:51:37,290
块

1970
01:51:38,370 --> 01:51:40,530
是不是刚刚我们把它挂在我们CTS上面了

1971
01:51:40,860 --> 01:51:42,570
通过他的CTS

1972
01:51:48,640 --> 01:51:49,660
这个给他换个名

1973
01:51:49,690 --> 01:51:51,850
都写温度的话容易混淆

1974
01:51:51,850 --> 01:51:52,630
比如说改个名

1975
01:51:54,100 --> 01:51:55,210
云气受

1976
01:51:58,640 --> 01:51:59,960
叫API data

1977
01:52:08,590 --> 01:52:10,360
那时候框架也是80照放

1978
01:52:11,960 --> 01:52:12,920
差不多好像

1979
01:52:15,660 --> 01:52:16,980
好像都是统一这样处理的

1980
01:52:17,160 --> 01:52:20,610
因为你必须要实现数据统一处理的话

1981
01:52:20,700 --> 01:52:23,370
你就需要找到一个中间载体去处理

1982
01:52:24,680 --> 01:52:26,210
要不注水脱水也不是

1983
01:52:26,420 --> 01:52:27,680
也不会出现这两个名词

1984
01:52:27,980 --> 01:52:29,390
这是一个类似

1985
01:52:30,860 --> 01:52:32,120
通用哪个解决方案了

1986
01:52:34,730 --> 01:52:35,450
应该是

1987
01:52:39,560 --> 01:52:40,910
那更改温度就完蛋了

1988
01:52:41,330 --> 01:52:41,720
没有啊

1989
01:52:41,720 --> 01:52:44,660
你温度是单独写了个属性温度有好多水

1990
01:52:44,660 --> 01:52:46,130
你只要保证不冲突就行

1991
01:52:50,190 --> 01:52:52,710
你不可能把Windows直接重写了吧

1992
01:52:55,460 --> 01:52:57,170
肯定是存在这样的风险

1993
01:52:57,500 --> 01:52:59,000
一般不会存在问题

1994
01:52:59,030 --> 01:52:59,990
我们先催着这个

1995
01:53:00,260 --> 01:53:00,980
先把它挂在上

1996
01:53:02,150 --> 01:53:04,910
到这里是不是又多了一个props

1997
01:53:04,910 --> 01:53:07,160
上边来给他放到这最后吧

1998
01:53:13,900 --> 01:53:18,100
这样是不是它就随着我们的服务端一块把它返回来了

1999
01:53:18,100 --> 01:53:19,300
然后我们Windows就有了

2000
01:53:19,420 --> 01:53:19,840
然后呢

2001
01:53:20,620 --> 01:53:21,580
还需要一步

2002
01:53:21,580 --> 01:53:23,950
就是我们这里为什么把他分到客户端服务端

2003
01:53:24,070 --> 01:53:25,210
是因为这里

2004
01:53:26,470 --> 01:53:27,790
我在一本假的时候

2005
01:53:27,790 --> 01:53:29,380
我就在这读取了辞职

2006
01:53:30,890 --> 01:53:32,330
我每次写的叫

2007
01:53:34,190 --> 01:53:35,090
谁写的啥

2008
01:53:37,700 --> 01:53:40,280
恶X到这个

2009
01:53:41,450 --> 01:53:44,240
是不在这里就直接读取到把数值复制给他啦

2010
01:53:45,990 --> 01:53:47,970
然后这样处置预案之后

2011
01:53:48,030 --> 01:53:49,410
我们的内幕是就有值了

2012
01:53:49,590 --> 01:53:50,370
有之之后

2013
01:53:50,700 --> 01:53:53,310
所以说这个就不需要再去发起请求了

2014
01:53:53,980 --> 01:53:54,790
因为他有值吗

2015
01:53:54,850 --> 01:53:58,780
如果没记的时候才去再去发现S请求这样的话

2016
01:53:59,080 --> 01:54:00,340
我们的完整的一个时代

2017
01:54:01,740 --> 01:54:03,120
应该就能走通啦

2018
01:54:04,960 --> 01:54:08,140
接下来就剩最后我们来验证一下

2019
01:54:10,180 --> 01:54:10,660
一按

2020
01:54:10,870 --> 01:54:13,630
然后是第一位需要的

2021
01:54:13,630 --> 01:54:14,500
请打包一下

2022
01:54:17,660 --> 01:54:18,920
好像没什么问题

2023
01:54:19,600 --> 01:54:20,350
来看一下

2024
01:54:21,100 --> 01:54:25,210
就差这一步了3000

2025
01:54:28,490 --> 01:54:29,090
没有问题

2026
01:54:29,570 --> 01:54:32,480
然后跳转到ABOUT1登是不是出来了

2027
01:54:32,690 --> 01:54:34,910
现在是我们首先是刷新的home

2028
01:54:35,120 --> 01:54:36,920
然后是不是再去请求这个bug的

2029
01:54:37,190 --> 01:54:37,850
那这时候呢

2030
01:54:38,060 --> 01:54:40,490
应该是需要应该是发起请求了才对

2031
01:54:41,400 --> 01:54:41,790
嗯

2032
01:54:47,360 --> 01:54:48,650
来看一下有bug

2033
01:54:51,030 --> 01:54:51,780
有报错吗

2034
01:54:53,000 --> 01:54:53,480
看一下

2035
01:54:56,760 --> 01:54:59,100
A data of UN de find

2036
01:55:00,260 --> 01:55:00,800
什么鬼

2037
01:55:03,990 --> 01:55:05,970
因吹收点接着差

2038
01:55:07,570 --> 01:55:08,800
那这个第一题有问题

2039
01:55:11,950 --> 01:55:12,280
看一下

2040
01:55:12,280 --> 01:55:13,690
那这里我们获取这个

2041
01:55:21,030 --> 01:55:24,030
Chromeh.puts root load data

2042
01:55:24,360 --> 01:55:26,070
这个好像也没有啥问题

2043
01:55:27,150 --> 01:55:27,720
知道妹子

2044
01:55:27,810 --> 01:55:29,220
然后读取到数据

2045
01:55:29,670 --> 01:55:30,630
拿到data

2046
01:55:35,860 --> 01:55:36,280
嗯

2047
01:55:40,990 --> 01:55:41,650
打印一下

2048
01:55:44,940 --> 01:55:46,080
正好我看一下下面

2049
01:55:48,290 --> 01:55:49,190
Reject

2050
01:56:00,180 --> 01:56:01,800
这里看一下他的报复

2051
01:56:10,270 --> 01:56:12,040
然后再重新打包一下

2052
01:56:13,850 --> 01:56:14,720
还剩最后一个了

2053
01:56:14,720 --> 01:56:16,070
只要这个接口走通

2054
01:56:16,100 --> 01:56:16,490
我们就

2055
01:56:24,740 --> 01:56:25,160
嗯

2056
01:56:29,660 --> 01:56:32,270
那证明这个击球接口没有请求成功

2057
01:56:32,270 --> 01:56:35,540
Error cannot read products

2058
01:56:41,010 --> 01:56:42,120
对此没有读取到

2059
01:56:43,260 --> 01:56:44,820
那就请求没有成功

2060
01:56:44,820 --> 01:56:45,300
那就是

2061
01:56:47,190 --> 01:56:47,910
我一看一下

2062
01:56:55,160 --> 01:56:55,760
Bye

2063
01:56:58,570 --> 01:57:00,430
Would not hand with cats

2064
01:57:04,580 --> 01:57:05,450
看下我的借口

2065
01:57:08,110 --> 01:57:08,590
不是啊

2066
01:57:08,590 --> 01:57:09,640
是接口解决问题

2067
01:57:11,200 --> 01:57:11,950
在服务端

2068
01:57:14,850 --> 01:57:18,570
在服务站是不是不能请求的local host改价

2069
01:57:20,780 --> 01:57:21,860
给他换成一片

2070
01:57:22,580 --> 01:57:26,270
应该是这个接口的问题请求失败了

2071
01:57:26,510 --> 01:57:27,080
这样改一下

2072
01:57:29,580 --> 01:57:30,510
重新打吧

2073
01:57:36,230 --> 01:57:38,180
这次好像可以了

2074
01:57:38,450 --> 01:57:38,900
刷新

2075
01:57:45,970 --> 01:57:47,080
还是报错啦

2076
01:57:49,600 --> 01:57:50,770
咸淡清香

2077
01:58:06,860 --> 01:58:07,910
不是这里现在

2078
01:58:08,750 --> 01:58:09,110
嗯

2079
01:58:10,840 --> 01:58:11,740
这里还少一个

2080
01:58:11,800 --> 01:58:12,790
这里还有个小偷

2081
01:58:14,320 --> 01:58:15,550
但现在波涛不是这儿

2082
01:58:15,550 --> 01:58:16,390
还没到这儿呢

2083
01:58:16,690 --> 01:58:18,040
现在是在吟诗

2084
01:58:18,040 --> 01:58:19,450
我这儿就卡住了

2085
01:58:20,830 --> 01:58:24,040
等一下看一下这个data是什么问题

2086
01:58:28,820 --> 01:58:30,110
就差这最后一步了

2087
01:58:30,110 --> 01:58:30,530
竟然

2088
01:58:31,390 --> 01:58:32,110
卡住了

2089
01:58:35,990 --> 01:58:36,770
看到没有问题

2090
01:58:36,770 --> 01:58:37,190
对

2091
01:58:39,530 --> 01:58:41,090
Data function

2092
01:58:47,560 --> 01:58:49,720
对全球访问的话应该也是可以的

2093
01:58:56,890 --> 01:58:59,410
Root load data

2094
01:58:59,560 --> 01:59:00,220
看牙

2095
01:59:03,510 --> 01:59:05,550
Load date等于get

2096
01:59:08,400 --> 01:59:10,860
然后我爸无车导出来的

2097
01:59:16,780 --> 01:59:17,860
没有问题

2098
01:59:19,840 --> 01:59:22,480
这里为什么把这这里有点问题

2099
01:59:22,480 --> 01:59:25,060
这里应该是请求之后的接受

2100
01:59:26,920 --> 01:59:28,510
这里我咨询了楼的data

2101
01:59:31,170 --> 01:59:32,880
对感觉有点放没执行

2102
01:59:46,940 --> 01:59:47,360
嗯

2103
01:59:50,350 --> 01:59:52,120
这就是把它这个函数倒过来了

2104
01:59:52,120 --> 01:59:52,930
给他一个人放

2105
01:59:57,660 --> 01:59:58,470
我再试一下

2106
01:59:59,400 --> 02:00:00,060
这就是

2107
02:00:00,810 --> 02:00:02,460
原版把这个函数返回来嘛

2108
02:00:02,460 --> 02:00:03,750
然后在这里执行呢

2109
02:00:03,750 --> 02:00:05,850
在这里我不加了这个执行吗

2110
02:00:05,910 --> 02:00:08,430
Load date是不是就相当于执行了get your in for

2111
02:00:11,320 --> 02:00:12,010
嗯

2112
02:00:17,090 --> 02:00:17,540
等一下

2113
02:00:18,050 --> 02:00:21,320
我看一下这里应该返回的是一个promise

2114
02:00:35,790 --> 02:00:36,330
我试一下

2115
02:00:36,390 --> 02:00:39,570
我先我先看一下这打印是什么东西

2116
02:00:47,140 --> 02:00:47,740
然后

2117
02:00:49,690 --> 02:00:50,380
可以啦

2118
02:00:59,510 --> 02:01:00,890
这怎么就可以了

2119
02:01:00,890 --> 02:01:01,460
OK呀

2120
02:01:03,890 --> 02:01:04,220
拿

2121
02:01:05,230 --> 02:01:06,820
这里是发起了本机请求

2122
02:01:06,820 --> 02:01:08,050
可以看到没有

2123
02:01:08,050 --> 02:01:09,520
之后他自己去请求了

2124
02:01:17,520 --> 02:01:19,170
Show route呢

2125
02:01:27,550 --> 02:01:28,150
西甲

2126
02:01:35,620 --> 02:01:36,280
抱错了

2127
02:01:44,230 --> 02:01:45,040
这个对了

2128
02:01:45,130 --> 02:01:46,810
不知道妹子看一下

2129
02:01:49,450 --> 02:01:52,540
Interest这个是promise是没有问题

2130
02:01:52,540 --> 02:01:54,490
然后data这次回来了

2131
02:01:55,200 --> 02:01:56,640
拿回来之后我们就可以

2132
02:02:08,610 --> 02:02:09,510
如果存在

2133
02:02:09,540 --> 02:02:11,880
我们再去取是不她是一个数字

2134
02:02:12,030 --> 02:02:13,200
然后对此

2135
02:02:14,360 --> 02:02:14,960
第一次

2136
02:02:23,370 --> 02:02:23,850
试一下

2137
02:02:30,960 --> 02:02:31,950
然后我们看一下

2138
02:02:32,430 --> 02:02:33,690
现在应该打上了吧

2139
02:02:33,840 --> 02:02:34,200
可以啦

2140
02:02:34,200 --> 02:02:35,340
刚刚就是没执行

2141
02:02:35,340 --> 02:02:35,880
没执行

2142
02:02:36,510 --> 02:02:38,070
现在是不是直接就返回来了

2143
02:02:38,070 --> 02:02:43,080
然后可以看到我们network里边也没有发起是不是其他请求

2144
02:02:43,470 --> 02:02:45,480
然后其他的后面再切回来也没有问题

2145
02:02:45,480 --> 02:02:45,900
但是呢

2146
02:02:46,170 --> 02:02:47,520
我们在后面页面刷新

2147
02:02:47,850 --> 02:02:49,830
你再切换为a的页面之后呢

2148
02:02:50,010 --> 02:02:51,660
是不是现在就是他没有

2149
02:02:51,840 --> 02:02:53,460
因为a的页面是本地切换的

2150
02:02:53,460 --> 02:02:54,450
所以说内幕为空

2151
02:02:55,060 --> 02:02:56,650
他没有从数据反应回来

2152
02:02:56,650 --> 02:02:59,080
他说他就进行接口的一个请求了

2153
02:03:02,610 --> 02:03:04,440
没咨询为啥会有一登高山

2154
02:03:05,140 --> 02:03:07,540
没执行的时候是服务端没有执行

2155
02:03:07,540 --> 02:03:08,530
服务端没有执行的时候

2156
02:03:08,530 --> 02:03:09,550
我们本地不是

2157
02:03:10,250 --> 02:03:11,180
还有一个请求嘛

2158
02:03:11,660 --> 02:03:12,890
这不是对

2159
02:03:13,400 --> 02:03:13,850
这不有

2160
02:03:15,590 --> 02:03:16,610
有双重防护吗

2161
02:03:18,940 --> 02:03:19,540
那到这里的话

2162
02:03:19,540 --> 02:03:21,010
大家对这个

2163
02:03:21,660 --> 02:03:21,960
S

2164
02:03:21,960 --> 02:03:23,100
流程应该比较熟悉了吧

2165
02:03:23,100 --> 02:03:24,960
我们通过微写了一遍

2166
02:03:24,960 --> 02:03:26,550
然后通过APP又写了一遍

2167
02:03:26,730 --> 02:03:29,850
可以看到VIP的话可能稍微吃点东西

2168
02:03:29,850 --> 02:03:30,930
稍微多那么一点

2169
02:03:31,320 --> 02:03:36,000
其实好多东西官方文档里都给我们写好了这个指南

2170
02:03:36,210 --> 02:03:38,490
所以说使用起来并不是太难

2171
02:03:38,580 --> 02:03:40,440
平常这是爱给我们提供一些方法

2172
02:03:40,440 --> 02:03:41,130
人家自适应

2173
02:03:41,340 --> 02:03:42,690
还有其他的一些方法

2174
02:03:44,030 --> 02:03:45,680
前面应该给大家讲过

2175
02:03:45,680 --> 02:03:46,340
他原理吧

2176
02:03:46,820 --> 02:03:47,870
像这种人呢

2177
02:03:47,870 --> 02:03:48,530
他死因的话

2178
02:03:48,530 --> 02:03:49,700
它的性能的话差一点

2179
02:03:49,940 --> 02:03:51,410
你可以改成旅游的方式

2180
02:03:51,410 --> 02:03:53,750
人的臭no的是dream

2181
02:03:54,200 --> 02:03:56,210
这种方式是否会更快一些

2182
02:03:56,300 --> 02:03:57,230
通过流的方式

2183
02:04:00,890 --> 02:04:02,420
他说文档还是一定要看的

2184
02:04:02,750 --> 02:04:04,970
还有像root这个也是有更新

2185
02:04:04,970 --> 02:04:06,440
这里大家这个盖的

2186
02:04:06,440 --> 02:04:07,850
这里是不是有一个熟人的

2187
02:04:09,260 --> 02:04:12,260
从一开始是不是有各种各样的一些写法

2188
02:04:15,860 --> 02:04:16,670
这是401的

2189
02:04:18,240 --> 02:04:20,190
其实主要是这个d Lu Ding啊

2190
02:04:21,240 --> 02:04:22,350
就数据获取这一块

2191
02:04:22,650 --> 02:04:25,260
这个就相当于我们自己去处理这个

2192
02:04:25,260 --> 02:04:27,660
不像V它直接给我们提供了一个hooks

2193
02:04:27,810 --> 02:04:28,560
是不是更方便了

2194
02:04:28,560 --> 02:04:32,250
其实都一你不想他的hooks你也可以自定义的

2195
02:04:32,310 --> 02:04:34,260
你也可以在服务端读取到

2196
02:04:34,260 --> 02:04:35,220
那个组件实例之后

2197
02:04:35,220 --> 02:04:37,350
你也可以通过上边拿到新的方法

2198
02:04:37,470 --> 02:04:38,310
然后进行处理的

2199
02:04:38,340 --> 02:04:39,000
也是可以的

2200
02:04:43,300 --> 02:04:44,830
你要改HR的话

2201
02:04:44,830 --> 02:04:46,090
那肯定是有工程量的

2202
02:04:46,930 --> 02:04:48,220
毕竟你会遇到好多问题

2203
02:04:48,220 --> 02:04:50,140
比如说像刚有同学提到的

2204
02:04:50,140 --> 02:04:52,090
是不是关于这个懒加载的问题

2205
02:04:53,650 --> 02:04:55,300
我记得是圆的18

2206
02:04:56,190 --> 02:04:59,400
点叉之后解决了这个热点类问题

2207
02:04:59,400 --> 02:05:01,680
像之前这个在服务端是不支持的

2208
02:05:05,120 --> 02:05:05,690
Lady

2209
02:05:07,890 --> 02:05:08,760
就好多地方

2210
02:05:13,560 --> 02:05:14,700
这个没有最新的

2211
02:05:19,280 --> 02:05:21,440
我记得之前看过一个文章是

2212
02:05:22,590 --> 02:05:23,280
There is a four

2213
02:05:26,630 --> 02:05:27,860
这里有个70

2214
02:05:29,400 --> 02:05:30,390
牛姐的菜

2215
02:05:36,180 --> 02:05:38,130
原来18期改变我记得

2216
02:05:39,640 --> 02:05:40,960
有个地方写了

2217
02:05:42,390 --> 02:05:42,960
王了

2218
02:05:51,120 --> 02:05:51,480
这里有

2219
02:05:54,410 --> 02:05:54,920
可以看到

2220
02:05:55,400 --> 02:06:02,990
刚才问的就是这里看了new streaming server running with build in support for re acted a lady

2221
02:06:03,260 --> 02:06:04,820
这就是REACT18代的

2222
02:06:04,820 --> 02:06:06,380
他现在在SSR中

2223
02:06:06,500 --> 02:06:07,430
你也可以使用这个

2224
02:06:07,430 --> 02:06:07,970
累啦

2225
02:06:09,360 --> 02:06:10,770
这种版本是有更新的

2226
02:06:10,860 --> 02:06:12,660
我记得我是看到过这有

2227
02:06:13,350 --> 02:06:15,360
但18的话已经是要支持了

2228
02:06:18,610 --> 02:06:18,850
嗯

2229
02:06:24,200 --> 02:06:25,700
给breathe用的了

2230
02:06:25,700 --> 02:06:26,780
这个你就可以改善一下

2231
02:06:26,780 --> 02:06:28,610
这里就是把人的换乘

2232
02:06:35,020 --> 02:06:35,800
Bree的骂

2233
02:06:42,080 --> 02:06:42,560
去哪啦

2234
02:06:47,270 --> 02:06:49,040
他有人的方法是完全相同的

2235
02:06:49,040 --> 02:06:49,910
你放在这

2236
02:06:52,300 --> 02:06:53,470
然后打包一下

2237
02:06:59,090 --> 02:07:01,490
后来看到我们的host

2238
02:07:02,800 --> 02:07:05,170
是不这样就搞定啦

2239
02:07:10,400 --> 02:07:12,740
然后这就是可以看到Su的话也非常有好了

2240
02:07:12,740 --> 02:07:16,790
虽然现在像谷歌还有病之类的浏览器已经支持

2241
02:07:16,790 --> 02:07:18,470
这些都是些JS的东西

2242
02:07:19,130 --> 02:07:21,650
但是还是没有那么友好

2243
02:07:21,650 --> 02:07:23,240
所以说为了CEO的话

2244
02:07:23,480 --> 02:07:26,720
就是说做这些预渲染或者还是有必要的

2245
02:07:35,900 --> 02:07:37,610
为什么要返回拷贝

2246
02:07:41,070 --> 02:07:41,760
这个

2247
02:07:48,770 --> 02:07:50,720
Actions date

2248
02:07:55,770 --> 02:07:57,540
直接返回时的他也没有什么问题

2249
02:08:02,580 --> 02:08:03,330
去默认吗

2250
02:08:03,330 --> 02:08:05,160
默认就返回最原始的status

2251
02:08:07,730 --> 02:08:08,510
没有啥区别

2252
02:08:08,510 --> 02:08:10,160
你直接默认

2253
02:08:10,160 --> 02:08:11,360
你可以直接把它返回来

2254
02:08:13,900 --> 02:08:14,230
可以啊

2255
02:08:14,230 --> 02:08:15,040
就这个state吗

2256
02:08:15,610 --> 02:08:17,140
就是一个兜底吗

2257
02:08:19,000 --> 02:08:20,110
但是要其他的时候

2258
02:08:20,320 --> 02:08:22,390
你要进行合并你不

2259
02:08:24,620 --> 02:08:29,420
引用不一样对前拷贝的话肯定和引用是有些区别

2260
02:08:40,030 --> 02:08:41,860
与act没有用到工程还是吗

2261
02:08:42,910 --> 02:08:43,990
你问你问到了

2262
02:08:46,100 --> 02:08:48,890
这不是到返回来一个函数吗

2263
02:08:50,260 --> 02:08:51,130
然后我们的

2264
02:08:52,740 --> 02:08:54,600
科瑞的style还有可怜style

2265
02:08:54,600 --> 02:08:55,920
这不都是工程函数吗

2266
02:08:56,700 --> 02:08:59,340
每次调用不都是函数也是一样的

2267
02:09:05,340 --> 02:09:06,660
还有什么其他问题没有

2268
02:09:10,730 --> 02:09:11,300
其实啊

2269
02:09:11,300 --> 02:09:13,130
他的话大体流程就是这样的

2270
02:09:20,010 --> 02:09:21,360
如果没有什么其他问题的话

2271
02:09:21,360 --> 02:09:23,640
那么今天我们就到这里了

2272
02:09:27,860 --> 02:09:28,190
拜拜

2273
02:09:28,640 --> 02:09:29,660
今天还好

2274
02:09:30,290 --> 02:09:32,270
幸亏没有遇到太多的其他问题

