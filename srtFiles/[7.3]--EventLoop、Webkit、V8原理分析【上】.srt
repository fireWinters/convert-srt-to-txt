1
00:02:52,400 --> 00:02:53,870
It is said to answer my

2
00:02:56,120 --> 00:03:00,170
ways steps more time with the nineteen ninety

3
00:03:04,160 --> 00:03:04,700
one the

4
00:03:06,740 --> 00:03:09,650
way it used tobe what you want to

5
00:03:13,220 --> 00:03:15,890
talk to cool an t

6
00:03:17,120 --> 00:03:19,100
snow if there is something

7
00:03:21,320 --> 00:03:21,530
and

8
00:03:23,120 --> 00:03:24,470
gone so long ago

9
00:03:26,840 --> 00:03:27,980
that the first

10
00:03:42,080 --> 00:03:43,130
The

11
00:03:49,160 --> 00:03:49,760
face that you

12
00:03:53,480 --> 00:03:56,810
can live without the stay

13
00:03:59,570 --> 00:04:02,660
at home home kit mi

14
00:04:03,830 --> 00:04:05,450
get money

15
00:04:06,710 --> 00:04:07,130
pay

16
00:04:08,570 --> 00:04:09,590
into my day

17
00:04:10,880 --> 00:04:11,270
changed

18
00:04:17,120 --> 00:04:17,600
his

19
00:04:57,060 --> 00:04:57,240
The

20
00:05:00,600 --> 00:05:07,920
the the the now that would keep on making

21
00:05:09,150 --> 00:05:09,630
kitchen

22
00:06:42,480 --> 00:07:04,140
卡林卡林卡林卡妈撒都咖喱咖喱咖喱咖喱咖喱咖喱嘎咖喱咖喱咖喱咖喱咖喱咖喱咖喱咖喱咖喱

23
00:08:07,200 --> 00:08:21,420
卡林卡林卡林卡林卡林卡林卡林卡林卡林卡林卡妈

24
00:08:21,720 --> 00:08:26,670
咔喱咖喱咖喱咖喱

25
00:09:05,000 --> 00:09:05,270
好

26
00:09:05,270 --> 00:09:06,530
咱们准备开始啦

27
00:09:14,980 --> 00:09:16,120
咳

28
00:09:27,660 --> 00:09:28,170
上节课呢

29
00:09:28,170 --> 00:09:32,040
给大家讲的是那个计算机的底层原理

30
00:09:32,040 --> 00:09:33,480
还有C语言

31
00:09:33,480 --> 00:09:39,960
C语言重点就是那个指针和内存那一块儿

32
00:09:39,960 --> 00:09:41,370
那咱们今天呢

33
00:09:41,370 --> 00:09:45,600
就接着接着来上上一节课呢

34
00:09:45,600 --> 00:09:48,360
给大家推荐的是这个网站

35
00:09:48,360 --> 00:09:50,790
不知道大家那个C语言的这个东西

36
00:09:50,790 --> 00:09:53,190
看了没有

37
00:09:53,190 --> 00:09:54,060
像那个C加加

38
00:09:54,060 --> 00:09:55,410
还有还有C语言

39
00:09:55,410 --> 00:09:56,460
先看C语言

40
00:09:56,490 --> 00:10:01,530
然后再看C加加比这个顺序别乱了

41
00:10:01,530 --> 00:10:04,230
那这个基本语法先把它掌握住

42
00:10:04,410 --> 00:10:05,250
那之后呢

43
00:10:05,250 --> 00:10:06,990
咱们那个回头

44
00:10:06,990 --> 00:10:11,820
我会给你们往群里边发传一本那个电子书

45
00:10:11,820 --> 00:10:12,690
那个电子书呢

46
00:10:12,690 --> 00:10:16,350
就是那个学C语言比较合适

47
00:10:16,350 --> 00:10:17,070
有空了呢

48
00:10:17,070 --> 00:10:17,970
就去看看

49
00:10:17,970 --> 00:10:21,390
想深入的去学的就就看那个电子书就行

50
00:10:22,270 --> 00:10:24,670
实际上这个C语言呢

51
00:10:24,670 --> 00:10:26,080
把把这个东西学会了

52
00:10:26,080 --> 00:10:27,760
你去掌握其他的语言

53
00:10:27,760 --> 00:10:31,000
那个是相当相当容易的

54
00:10:31,000 --> 00:10:34,000
那掌握了C加加看其他语言

55
00:10:34,000 --> 00:10:36,250
那几乎就是没有什么障碍了

56
00:10:36,250 --> 00:10:39,970
不过那个掌握C加加还是需要一些时间

57
00:10:39,970 --> 00:10:41,590
当初我刚入行的时候呢

58
00:10:41,590 --> 00:10:43,150
就是就是做C加加

59
00:10:44,350 --> 00:10:47,080
当时用的是那个visio studio啊

60
00:10:47,080 --> 00:10:51,100
那当时还用的是那个VC6

61
00:10:51,130 --> 00:10:53,980
那个那个版本是相当老了

62
00:10:53,980 --> 00:10:55,870
VC6是那个上学的时候就用VC6

63
00:10:55,870 --> 00:10:59,500
后来工作了好多公司当时还在用VC6

64
00:10:59,710 --> 00:11:00,580
然后呢

65
00:11:00,580 --> 00:11:07,030
那个后来才改成那个这个visual studio202005

66
00:11:07,090 --> 00:11:08,320
才改成那个版本

67
00:11:08,680 --> 00:11:14,110
那那个像像那个恶CC加加这这一块儿

68
00:11:14,110 --> 00:11:18,430
原来是有很多公司都在用这个东西在在Java

69
00:11:18,430 --> 00:11:20,890
在Java还没有普及的时候

70
00:11:21,740 --> 00:11:23,720
好多公司都在用这个C加加

71
00:11:23,720 --> 00:11:24,290
当然呢

72
00:11:24,290 --> 00:11:24,920
当时呢

73
00:11:24,920 --> 00:11:26,870
还是以这个桌面儿为主

74
00:11:26,870 --> 00:11:28,160
不像像当时呢

75
00:11:28,160 --> 00:11:30,050
互联网也不像现在这么发达

76
00:11:30,410 --> 00:11:31,370
当时的互联网呢

77
00:11:31,370 --> 00:11:33,530
就是P值P还有ASP啊

78
00:11:33,530 --> 00:11:36,350
就就这两个屁另外呢

79
00:11:36,350 --> 00:11:39,440
还有还有一部分是JSP

80
00:11:39,440 --> 00:11:43,160
但是但是大大部分的那个软件呢

81
00:11:43,160 --> 00:11:45,950
仍然是那个C端的

82
00:11:45,950 --> 00:11:47,840
就是CS结构

83
00:11:47,840 --> 00:11:48,410
现在呢

84
00:11:48,410 --> 00:11:51,080
当然当然现在好多系统都是BS结构了

85
00:11:51,080 --> 00:11:52,220
甚至更早的时候呢

86
00:11:52,220 --> 00:11:54,770
还有还有一种更加奇怪的结构

87
00:11:54,770 --> 00:11:56,780
那种奇怪的结构我也不知道叫什么名字

88
00:11:56,990 --> 00:11:58,550
就是在unix上

89
00:11:58,700 --> 00:12:01,970
在unix上那个终端上面就写好多的那个脚本

90
00:12:02,000 --> 00:12:04,070
然后你登陆上去以后

91
00:12:04,070 --> 00:12:06,980
那个那个终端它自动就给你调起那个脚本

92
00:12:06,980 --> 00:12:09,770
然后就给你这就是用脚本写的那个界面

93
00:12:10,160 --> 00:12:11,840
内那种程序我是没写过

94
00:12:11,840 --> 00:12:13,910
但是我用过

95
00:12:13,910 --> 00:12:16,160
那个那个那个就相当老了

96
00:12:16,400 --> 00:12:17,420
实际上那个时候

97
00:12:17,420 --> 00:12:20,690
这个信息这个信息管理系统之类的

98
00:12:20,690 --> 00:12:21,620
他差不多都是这

99
00:12:21,820 --> 00:12:22,420
模式啊

100
00:12:22,420 --> 00:12:24,880
要么就直接在unix上玩儿

101
00:12:25,180 --> 00:12:28,480
在终端下边儿文本文本的界面儿

102
00:12:28,480 --> 00:12:28,960
要么呢

103
00:12:28,960 --> 00:12:30,400
就是写一个C端

104
00:12:30,400 --> 00:12:32,950
然后那边弄一个服务端

105
00:12:32,950 --> 00:12:34,600
所以那时候用C加加写呢

106
00:12:34,600 --> 00:12:36,430
那个那个人挺多的

107
00:12:36,670 --> 00:12:40,330
那么用C加加去用C加加去这个

108
00:12:41,660 --> 00:12:44,780
去去去写这个程序的话呢

109
00:12:44,780 --> 00:12:47,510
是相当不容易的呢

110
00:12:47,660 --> 00:12:49,610
尽管说他是面向对象的

111
00:12:49,610 --> 00:12:50,210
但是呢

112
00:12:50,210 --> 00:12:52,430
你要完全的把它给掌握住

113
00:12:52,460 --> 00:12:56,090
起码起码三年对这是C加加

114
00:12:56,330 --> 00:13:02,420
你真正了解他这真正理解这个面C加加的这个面向对象至少三年

115
00:13:02,450 --> 00:13:04,190
就是得得干三年活儿

116
00:13:04,190 --> 00:13:05,150
你就可见

117
00:13:05,450 --> 00:13:06,950
这个C加加是多么的复杂

118
00:13:06,950 --> 00:13:10,640
但当然你去掌握它的语法还是还是很简单的

119
00:13:11,570 --> 00:13:14,750
实际上C加加他有了这个面向对象以后

120
00:13:14,900 --> 00:13:17,360
最早那个设计模式

121
00:13:17,360 --> 00:13:23,300
设计模式就是用C加加去描述你像像那个有一个有一本书叫设计模式

122
00:13:23,300 --> 00:13:25,100
那本书也不太也不是特别厚

123
00:13:25,250 --> 00:13:26,300
大概两三百页

124
00:13:26,300 --> 00:13:29,570
就是就是提出设计模式的内内四个人写的

125
00:13:29,570 --> 00:13:33,020
那四个人就简称四人帮

126
00:13:33,110 --> 00:13:34,100
他不是那个四人帮

127
00:13:34,100 --> 00:13:34,850
哈哈

128
00:13:34,850 --> 00:13:38,210
是写写设计模式内四人帮内四个人写的

129
00:13:38,270 --> 00:13:40,760
只要那本儿书里边儿都是C加加去描述的

130
00:13:41,330 --> 00:13:43,220
那C加加他不好学

131
00:13:43,220 --> 00:13:44,150
不好学在哪儿呢

132
00:13:44,150 --> 00:13:47,000
就在那个设计模式这儿是吧

133
00:13:47,030 --> 00:13:48,500
他他里边弄弄的

134
00:13:49,400 --> 00:13:53,510
它它里边弄了好多这个这这这个这个模式

135
00:13:53,510 --> 00:13:58,430
尤其是去写那个复杂的那种那种引擎

136
00:13:58,730 --> 00:13:59,180
还有呢

137
00:13:59,180 --> 00:14:02,600
就是一些比较为了代码复用

138
00:14:02,600 --> 00:14:06,380
为了代码复用恶有很多公司自己就封装了好多库

139
00:14:06,410 --> 00:14:07,520
然后呢

140
00:14:08,000 --> 00:14:09,950
就用了好多这个设计模式方面的

141
00:14:10,190 --> 00:14:13,910
当时那个去内那个开发软件开发公司

142
00:14:13,910 --> 00:14:15,170
不是互联网公司

143
00:14:15,320 --> 00:14:16,700
当时的软件开发公司

144
00:14:17,420 --> 00:14:19,280
如果说你自己有一套酷

145
00:14:19,280 --> 00:14:21,590
那就是你的核心竞争力

146
00:14:21,590 --> 00:14:23,840
当然那个库是绝对不可能开源的

147
00:14:23,840 --> 00:14:26,900
当当当时那个开源也不像现在那么发达

148
00:14:27,110 --> 00:14:29,120
那是零几年的时候

149
00:14:29,120 --> 00:14:31,430
所以说这个CC加加

150
00:14:31,490 --> 00:14:32,540
C语言也好

151
00:14:32,540 --> 00:14:33,380
C加加也好

152
00:14:33,380 --> 00:14:34,730
把它的语法掌握住

153
00:14:34,760 --> 00:14:37,220
咱们能够看懂他的那个代码

154
00:14:37,220 --> 00:14:38,690
知道这是怎么回事儿就行了

155
00:14:39,690 --> 00:14:41,550
你要真的想用它去写

156
00:14:41,550 --> 00:14:42,870
那就先从C开始

157
00:14:43,020 --> 00:14:43,530
是啊

158
00:14:43,680 --> 00:14:49,290
所以就用先别陷陷入到那个面向对象的那些复杂特性里边儿去呢

159
00:14:49,470 --> 00:14:51,900
那个估计你头发就不剩几根儿了

160
00:14:53,600 --> 00:14:54,350
好的

161
00:14:54,350 --> 00:14:55,220
那那咱们呢

162
00:14:55,220 --> 00:14:57,020
就接接着讲今天的东西

163
00:14:57,200 --> 00:14:59,210
金奖今天的东西呢

164
00:14:59,210 --> 00:15:01,280
那个如这个后边儿呢

165
00:15:01,280 --> 00:15:07,070
会涉及到一个这个引擎的这个代码是那个代码就是C语言写的讲到最后的时候

166
00:15:07,070 --> 00:15:15,050
咱们看一下那个这个这个这个就是lab Le这个库的lab Le这个库

167
00:15:15,050 --> 00:15:17,780
是C语言里边非常著名的一个库

168
00:15:17,960 --> 00:15:22,100
他把底层的网络进程管理什么事件

169
00:15:22,100 --> 00:15:24,260
事件循环全都给封装了

170
00:15:24,530 --> 00:15:28,520
实际上大家在大大家觉得那个V8对吧

171
00:15:28,520 --> 00:15:35,000
大家觉得那个V8很牛不是是不是还有那个note JS也很牛对吧

172
00:15:35,180 --> 00:15:37,010
那no de JS

173
00:15:37,100 --> 00:15:39,650
Linus不是前端的东西

174
00:15:39,650 --> 00:15:40,460
你要注意

175
00:15:40,780 --> 00:15:42,460
Linus不是前端的

176
00:15:42,670 --> 00:15:45,100
它是C语言库

177
00:15:45,310 --> 00:15:46,300
大家都觉得

178
00:15:46,300 --> 00:15:47,770
弄的JS很牛

179
00:15:47,830 --> 00:15:50,440
一开始是就是就是内一个人写的

180
00:15:50,740 --> 00:15:51,250
对吧

181
00:15:52,120 --> 00:15:53,290
就就觉得这个人很牛

182
00:15:53,290 --> 00:15:56,710
实际上他真正写出来的代码

183
00:15:56,800 --> 00:15:57,550
没有多少

184
00:15:57,940 --> 00:16:00,010
那他的代码它它的代码量

185
00:16:00,010 --> 00:16:03,070
那么大家一看这弄的这么厉害

186
00:16:03,310 --> 00:16:04,030
对吧

187
00:16:04,030 --> 00:16:05,020
代码量肯定很多

188
00:16:05,020 --> 00:16:09,340
实际上它真正的那个用C写的代码不是特别的多

189
00:16:09,610 --> 00:16:13,720
他那个底层的这个异步IO

190
00:16:13,750 --> 00:16:15,640
还有事件循环

191
00:16:15,640 --> 00:16:18,130
还有那个V8的这个

192
00:16:18,160 --> 00:16:20,380
还有这个node JS的这个进程

193
00:16:20,380 --> 00:16:23,260
它内部的一些那个工作线程等等

194
00:16:23,260 --> 00:16:25,630
都是基于lives实现的

195
00:16:25,750 --> 00:16:27,760
那可以说它就是一个底层互

196
00:16:27,910 --> 00:16:30,160
这个底层护士非常非常优秀的

197
00:16:30,550 --> 00:16:33,010
原来写C语言的时候我还用过这个东西

198
00:16:33,670 --> 00:16:34,630
相当好用

199
00:16:35,620 --> 00:16:36,220
而且呢

200
00:16:36,220 --> 00:16:36,910
这个东西

201
00:16:36,940 --> 00:16:37,600
累不

202
00:16:37,600 --> 00:16:39,250
还还腐恶

203
00:16:39,280 --> 00:16:40,240
还是跨平台的

204
00:16:40,360 --> 00:16:41,020
你看他怎么

205
00:16:41,080 --> 00:16:42,220
跨平台呢

206
00:16:42,250 --> 00:16:46,300
他把Linux和Windows底层API给封装了

207
00:16:46,420 --> 00:16:48,370
封装成了一个统一的接口儿

208
00:16:48,400 --> 00:16:49,600
然后你就掉就行了

209
00:16:50,290 --> 00:16:51,490
你也不用再编

210
00:16:51,490 --> 00:16:54,400
再在那个跨平台编译的时候呢

211
00:16:54,400 --> 00:16:56,290
也不用去写那么多开关

212
00:16:56,290 --> 00:16:59,620
是是非常的那个是非常的那个容易的

213
00:17:00,040 --> 00:17:00,850
那么咱们

214
00:17:03,360 --> 00:17:08,490
那么咱们那个接着就正式开始了

215
00:17:08,490 --> 00:17:09,000
首先呢

216
00:17:09,000 --> 00:17:13,290
咱们先看一看那个绿的JS和V8的这个引擎结构这个引擎结构呢

217
00:17:13,290 --> 00:17:15,120
原来老袁也给大家讲过

218
00:17:15,360 --> 00:17:16,650
那么我给大家讲的时候呢

219
00:17:16,650 --> 00:17:17,790
更加深入底层

220
00:17:17,790 --> 00:17:19,710
告诉大家底层它究竟是怎么回事

221
00:17:19,710 --> 00:17:21,330
从从那个县城

222
00:17:21,330 --> 00:17:28,470
从这个线程和操作系统的这个角度上来来分析这个弄得JS他是怎么回事儿

223
00:17:28,500 --> 00:17:29,310
然后呢

224
00:17:29,310 --> 00:17:32,910
咱们a最后一次讲Linux相关的东西

225
00:17:33,240 --> 00:17:33,660
你看

226
00:17:33,660 --> 00:17:36,510
这节课是最后一次涉及到Linux相关的

227
00:17:36,870 --> 00:17:37,890
那么涉及到什么呢

228
00:17:37,890 --> 00:17:39,300
就是Linux的IO模型

229
00:17:39,570 --> 00:17:41,790
林克斯到迄今为止

230
00:17:41,820 --> 00:17:43,740
总共有五种IO模型

231
00:17:44,650 --> 00:17:46,870
Link现在总共有五种IO模型

232
00:17:47,140 --> 00:17:49,270
那么这五种其中有四种

233
00:17:49,270 --> 00:17:50,950
是基本模型

234
00:17:50,950 --> 00:17:52,120
其实是基本模型

235
00:17:52,120 --> 00:18:00,130
还有一种是是IOIO模型的一种比较复杂的这么一种解决方案这是最后最后一次涉及到利克斯了

236
00:18:00,130 --> 00:18:00,610
然后呢

237
00:18:00,610 --> 00:18:02,260
就是那个这个echo

238
00:18:02,260 --> 00:18:04,330
就是其中的那个解决方案

239
00:18:04,480 --> 00:18:11,260
那就是第五种然后再给大家稍这个简单的介绍一下这个IOCP啊

240
00:18:11,260 --> 00:18:14,440
就是Windows里边儿的那个一不那个异步机制

241
00:18:14,470 --> 00:18:15,670
实际上这些东西

242
00:18:15,670 --> 00:18:18,430
咱们这节课讲的东西是非常非常底层的

243
00:18:18,430 --> 00:18:20,170
不仅仅是C语言

244
00:18:20,380 --> 00:18:21,790
我不仅仅是讲C语言

245
00:18:21,880 --> 00:18:23,140
因为你去面试的时候

246
00:18:23,140 --> 00:18:25,900
人家不人家不问你C语言怎么写

247
00:18:26,260 --> 00:18:26,650
对吧

248
00:18:26,650 --> 00:18:30,910
人家会问你那个源代码看过没有

249
00:18:30,910 --> 00:18:32,770
弄的JS源代码看过没

250
00:18:32,770 --> 00:18:34,330
V8的源代码看过没有

251
00:18:34,330 --> 00:18:36,730
他那个世界循环机制是怎么回事儿

252
00:18:36,730 --> 00:18:39,190
你得能说出来对吧

253
00:18:39,340 --> 00:18:44,560
咱们dei dei能去看懂那个东西实际上note JS的核心功能

254
00:18:44,800 --> 00:18:46,930
Note JS的核心功能就俩

255
00:18:48,100 --> 00:18:48,670
就俩

256
00:18:48,700 --> 00:18:49,570
而且这俩

257
00:18:49,570 --> 00:18:52,270
都不是那个弄的JS作者是实现出来的

258
00:18:52,300 --> 00:18:53,170
哪两个呢

259
00:18:53,170 --> 00:18:55,150
一个是V8引擎对吧

260
00:18:55,300 --> 00:18:57,580
是Google的另外一个呢

261
00:18:57,580 --> 00:19:05,020
就是那个那个世界循环加一不机智那个那俩东西异步循环和这个世界循环和异步机制

262
00:19:05,020 --> 00:19:06,850
就是内部这边东西

263
00:19:06,850 --> 00:19:07,930
没有一个是他写的

264
00:19:07,960 --> 00:19:08,830
就是他呢

265
00:19:08,830 --> 00:19:13,240
就是他他搭了个框架出来当然这个框架也是很牛逼的

266
00:19:13,300 --> 00:19:16,480
我也不是很我也不是否定人家的那个工作

267
00:19:17,080 --> 00:19:19,750
能把这个东西设计出来的人那是非常牛逼的

268
00:19:19,750 --> 00:19:24,370
他他不一定非要从底层去实现这个玩意儿

269
00:19:24,370 --> 00:19:29,980
那咱们看一下这个note JS的这个系统体系

270
00:19:30,100 --> 00:19:31,630
实际上在这个图里边儿

271
00:19:31,690 --> 00:19:33,640
相当大一块儿就在这儿

272
00:19:34,380 --> 00:19:34,890
对吧

273
00:19:34,920 --> 00:19:36,600
相当大一块儿就在这儿

274
00:19:36,630 --> 00:19:38,220
就是那个世界循环

275
00:19:38,760 --> 00:19:42,450
那么这个世界循环就是基于lab UV的

276
00:19:42,450 --> 00:19:44,760
咱们目光一下就被吸引到这儿来了

277
00:19:44,850 --> 00:19:45,360
对吧

278
00:19:45,360 --> 00:19:46,440
因为它地方大哈

279
00:19:46,800 --> 00:19:48,930
那么这个玩意儿底下是个什么东西

280
00:19:48,930 --> 00:19:50,730
这底下写的是什么

281
00:19:50,760 --> 00:19:53,250
它是异步IO

282
00:19:53,310 --> 00:19:54,570
什么叫一部

283
00:19:54,570 --> 00:19:56,430
和异步相对的又是什么

284
00:19:56,490 --> 00:19:58,260
那一步相对的是同步

285
00:19:58,260 --> 00:20:02,670
等一下详细给大家解释这个同步和异步究竟是怎么回事儿

286
00:20:02,700 --> 00:20:03,630
然后呢

287
00:20:03,660 --> 00:20:05,970
另外一块儿就是V8AV吧

288
00:20:05,970 --> 00:20:07,470
就是JS引擎

289
00:20:07,560 --> 00:20:09,360
然后其他的东西呢

290
00:20:09,360 --> 00:20:10,710
我们看

291
00:20:10,710 --> 00:20:12,720
我们看那么其他的东西

292
00:20:12,720 --> 00:20:16,170
真正这个node JS作者写出来的东西是什么

293
00:20:16,230 --> 00:20:17,100
是这个框架

294
00:20:17,950 --> 00:20:19,930
是这个note JS ban Ding SI框架

295
00:20:20,350 --> 00:20:21,550
实际上它是一个什么

296
00:20:21,550 --> 00:20:25,330
它就它就相当于一个插件儿系统

297
00:20:26,010 --> 00:20:27,360
相当于一个插件系统

298
00:20:27,390 --> 00:20:29,370
或者说一个那个扩展系统

299
00:20:29,550 --> 00:20:31,770
那你写了什么新的东西

300
00:20:31,770 --> 00:20:35,730
什么新的功能往这个上面去接接到这个上边儿

301
00:20:35,730 --> 00:20:41,940
他这个模块化设计的这个这个思想是是是相当高明的

302
00:20:42,060 --> 00:20:45,060
等一下咱们挨个的去挨个的去分析好

303
00:20:45,060 --> 00:20:48,540
然后咱们先整体先按照流程看一下

304
00:20:49,250 --> 00:20:51,170
按照流程看一下这个图

305
00:20:51,440 --> 00:20:53,690
那么这个怎么按流程呢

306
00:20:53,690 --> 00:20:55,790
就按照咱们JS

307
00:20:56,210 --> 00:21:00,650
就按咱们JS在执行时候的那个流程

308
00:21:01,930 --> 00:21:03,760
JS他是怎么执行的呢

309
00:21:03,880 --> 00:21:08,740
我们写出来了那个JS的文件之后干什么呢

310
00:21:08,890 --> 00:21:11,260
之后把它扔给这个引擎

311
00:21:12,100 --> 00:21:13,060
霸对对吧

312
00:21:13,300 --> 00:21:15,490
那咱们扔给这个引擎以后

313
00:21:15,580 --> 00:21:20,140
咱们的这个JSJS这个代码就被实例化啦

314
00:21:21,320 --> 00:21:23,600
咱们JS代码被实例化了

315
00:21:23,600 --> 00:21:25,010
它就变成啥了

316
00:21:25,010 --> 00:21:26,480
变成application

317
00:21:26,480 --> 00:21:27,260
就是这个应用

318
00:21:27,650 --> 00:21:32,630
那么这个应用他是要依赖V8的

319
00:21:32,630 --> 00:21:34,130
依赖这个V8

320
00:21:34,130 --> 00:21:37,070
所有的东西你得经过微吧去解释

321
00:21:37,070 --> 00:21:39,410
包括他你你要有什么东西

322
00:21:39,410 --> 00:21:41,000
你要转成什么字节码

323
00:21:41,000 --> 00:21:43,310
这这些乱七八糟的

324
00:21:43,310 --> 00:21:44,660
也都归他管

325
00:21:44,930 --> 00:21:46,190
这么这个微吧

326
00:21:46,190 --> 00:21:47,090
他干什么呢

327
00:21:47,300 --> 00:21:48,860
他只管

328
00:21:50,080 --> 00:21:52,060
他只管JS

329
00:21:52,180 --> 00:21:55,600
只管JS的解释和运行

330
00:21:55,600 --> 00:21:57,340
别的什么也不干

331
00:21:57,700 --> 00:22:03,490
那么我们要想我我们要想用一些这个网络的功能

332
00:22:03,670 --> 00:22:04,030
对吧

333
00:22:04,030 --> 00:22:06,070
我们发一个请求

334
00:22:06,070 --> 00:22:09,430
发一个像后端服务器发一个请求过去

335
00:22:09,520 --> 00:22:11,140
或者是说像文件

336
00:22:11,140 --> 00:22:12,190
去写点东西

337
00:22:12,190 --> 00:22:13,180
写点数据进去

338
00:22:13,450 --> 00:22:14,710
那V8管不管

339
00:22:14,740 --> 00:22:15,700
他不管

340
00:22:15,700 --> 00:22:16,750
那谁管

341
00:22:16,960 --> 00:22:18,370
依靠操作系统

342
00:22:19,300 --> 00:22:22,330
要依靠要要靠一操作系统管

343
00:22:22,540 --> 00:22:24,160
那么在这个操作系统这儿

344
00:22:24,160 --> 00:22:26,800
我们看操作系统

345
00:22:26,980 --> 00:22:30,070
操作系统它是个虚线框

346
00:22:30,070 --> 00:22:31,570
把操作系统放在这儿

347
00:22:32,170 --> 00:22:36,580
那实际上这个操作系统它不属于漏的JS

348
00:22:36,910 --> 00:22:41,380
那只是用到了操作系统的API

349
00:22:41,530 --> 00:22:42,550
那么这以后

350
00:22:42,550 --> 00:22:44,830
我就不说操作系统的API了

351
00:22:45,070 --> 00:22:48,790
是说操作系统的API他不专业

352
00:22:49,780 --> 00:22:50,740
他不专业

353
00:22:51,330 --> 00:22:53,010
那为什么不专业呢

354
00:22:53,010 --> 00:22:55,380
它有专门的名词叫系统调用

355
00:22:55,380 --> 00:22:57,270
上节课咱们讲汇编的时候

356
00:22:57,300 --> 00:22:57,750
对吧

357
00:22:57,810 --> 00:23:00,210
A说说的就是系统调用

358
00:23:00,210 --> 00:23:01,500
那个是专业词汇

359
00:23:01,680 --> 00:23:02,490
然后

360
00:23:03,540 --> 00:23:03,990
咳

361
00:23:05,840 --> 00:23:07,550
然后呢

362
00:23:08,150 --> 00:23:11,630
那么怎么用到的这个操作系统的东西

363
00:23:12,460 --> 00:23:15,280
那操作系统它是以接口给你提供的

364
00:23:15,310 --> 00:23:16,600
那你怎么去用呢

365
00:23:16,600 --> 00:23:24,010
你得去用操作系统提供的那个那个那个接口去那怎么去用

366
00:23:24,010 --> 00:23:26,230
我们得把这个操作系统接口封装起来

367
00:23:26,530 --> 00:23:29,830
那封装起来封装成插件儿

368
00:23:29,830 --> 00:23:31,630
这是其中一个用法

369
00:23:31,630 --> 00:23:32,950
这是其中一个用法

370
00:23:32,950 --> 00:23:33,610
要注意

371
00:23:33,880 --> 00:23:37,180
把操作系统的一些功能加上自己的一些功能

372
00:23:37,180 --> 00:23:43,780
把它封装成一个一个扩展或者是插件儿来先接到这个弄得JS单顶上

373
00:23:44,320 --> 00:23:44,860
接到这儿

374
00:23:45,250 --> 00:23:47,140
那么我们要自己

375
00:23:47,140 --> 00:23:50,980
我有的时候我们需要用node JS去写一些自己的扩展

376
00:23:51,100 --> 00:23:56,470
那那也是接到no de JS丹顶瓷这儿都是接到这儿

377
00:23:56,590 --> 00:23:58,120
那什么时候需要写扩展

378
00:23:58,120 --> 00:23:59,950
比如说你觉得哪哪一个库

379
00:24:00,100 --> 00:24:01,210
那么JS哪一个库

380
00:24:01,210 --> 00:24:02,110
JS时间的库

381
00:24:02,110 --> 00:24:03,850
它效效率太低

382
00:24:03,850 --> 00:24:05,350
你想让它更快一些

383
00:24:05,380 --> 00:24:06,490
要高性能的东西

384
00:24:06,580 --> 00:24:08,740
或者说某些支持

385
00:24:08,830 --> 00:24:09,640
它它不支持

386
00:24:09,640 --> 00:24:10,960
某些东西它不支持

387
00:24:11,140 --> 00:24:12,970
比如说你要操作串口

388
00:24:13,500 --> 00:24:14,070
呵呵

389
00:24:14,070 --> 00:24:14,550
对吧

390
00:24:14,730 --> 00:24:15,780
你要操作串口儿

391
00:24:15,780 --> 00:24:18,870
你想你想用note JS去写一个小服务

392
00:24:18,870 --> 00:24:19,680
然后呢

393
00:24:19,680 --> 00:24:21,720
给给嵌入式什么板子

394
00:24:21,720 --> 00:24:26,490
或或者说服务器上去操作那个串口打印机

395
00:24:26,490 --> 00:24:27,990
你要你要操作串口

396
00:24:28,530 --> 00:24:32,970
它不支持不支持你就自己写和串口通信的一个东西

397
00:24:32,970 --> 00:24:34,950
就就就就就就接在这儿

398
00:24:35,720 --> 00:24:38,480
那些功能都都都在这里呢

399
00:24:38,570 --> 00:24:39,740
如果说

400
00:24:39,980 --> 00:24:41,270
那么问题就来了

401
00:24:41,330 --> 00:24:42,800
那么你串口也好

402
00:24:42,800 --> 00:24:44,600
还有调用这个操作系统

403
00:24:44,600 --> 00:24:46,580
调用操作系统的那个

404
00:24:46,580 --> 00:24:47,630
功能也好你

405
00:24:48,540 --> 00:24:49,980
它有很多操作

406
00:24:49,980 --> 00:24:50,850
他是独占的

407
00:24:51,520 --> 00:24:52,750
那什么叫独占

408
00:24:52,900 --> 00:24:55,210
就是你一个进程去操作一个文件

409
00:24:55,210 --> 00:24:58,360
那个进程就不能被那个文件就不能被其他进程打开

410
00:24:59,420 --> 00:24:59,960
对吧

411
00:25:00,140 --> 00:25:02,030
那么在你的自己的进程里边

412
00:25:02,030 --> 00:25:04,340
你还要去考虑这个同步问题

413
00:25:04,610 --> 00:25:06,350
那什么叫同步问题

414
00:25:06,440 --> 00:25:09,380
再给大家讲Linux进程的时候

415
00:25:09,380 --> 00:25:11,990
还记不记得给大家讲的那个笑话

416
00:25:11,990 --> 00:25:12,830
哪个笑话

417
00:25:13,160 --> 00:25:15,920
就是几个人聚餐对吧

418
00:25:15,920 --> 00:25:19,310
几个人聚餐去吃熊掌那个

419
00:25:19,310 --> 00:25:20,900
开着灯大家不敢拿

420
00:25:20,900 --> 00:25:21,440
关着灯

421
00:25:21,440 --> 00:25:21,860
然后呢

422
00:25:21,860 --> 00:25:24,770
大家去抢这这这会造成争抢

423
00:25:24,920 --> 00:25:26,600
因为这种资源它是独占的

424
00:25:26,750 --> 00:25:27,860
你一去争抢

425
00:25:27,860 --> 00:25:29,360
他必定被锁住

426
00:25:29,360 --> 00:25:29,960
你锁住了

427
00:25:29,960 --> 00:25:30,860
那谁也动不了

428
00:25:31,420 --> 00:25:34,120
这这这就麻烦了这

429
00:25:34,210 --> 00:25:34,870
所以说呢

430
00:25:34,870 --> 00:25:36,220
得有一种机制

431
00:25:36,220 --> 00:25:39,040
得有几得有一种机制去解决这个问题

432
00:25:39,040 --> 00:25:41,080
那么弄的JS他是怎么解决的呢

433
00:25:41,170 --> 00:25:43,630
依靠事件循环

434
00:25:43,810 --> 00:25:52,510
专门有人去做那个去操作那些IO那些操作那些IO由谁去做呢

435
00:25:52,810 --> 00:25:54,880
由工作线程

436
00:25:55,570 --> 00:25:58,270
比如说你要读写文件

437
00:25:58,570 --> 00:25:59,230
还有呢

438
00:25:59,260 --> 00:26:01,480
请求网络这些操作

439
00:26:01,570 --> 00:26:03,460
并不是你通过这个

440
00:26:03,490 --> 00:26:09,190
并不是你在在并不是你通过接接到这个benz上的

441
00:26:09,190 --> 00:26:10,780
这这这个

442
00:26:11,350 --> 00:26:13,540
拓展直接去操作的

443
00:26:13,630 --> 00:26:16,360
你JS不是直接去操作这个扩展

444
00:26:16,360 --> 00:26:17,230
你要注意

445
00:26:17,320 --> 00:26:18,580
就是IO操作

446
00:26:18,610 --> 00:26:21,640
涉及到IO的不是直接去操作

447
00:26:21,730 --> 00:26:22,540
那怎么办

448
00:26:22,630 --> 00:26:25,420
要专门有一个工作线程

449
00:26:25,600 --> 00:26:29,950
他来管他来管这个他来管理这个IO操作

450
00:26:30,190 --> 00:26:34,390
那么这个工作线程就是相当于专专人专职

451
00:26:35,250 --> 00:26:37,080
他是专门操作文件

452
00:26:37,080 --> 00:26:38,760
或者他专门操作网络

453
00:26:38,760 --> 00:26:39,900
这这样呢

454
00:26:40,590 --> 00:26:40,830
你

455
00:26:41,870 --> 00:26:43,940
就不会就就不会

456
00:26:46,430 --> 00:26:48,350
大家都去操作同一个IO

457
00:26:48,380 --> 00:26:50,060
然后呢

458
00:26:50,060 --> 00:26:51,410
造成这个拥堵

459
00:26:51,590 --> 00:26:54,170
那么这个工作线程

460
00:26:54,320 --> 00:26:56,600
比如说去操作文件的

461
00:26:57,440 --> 00:26:59,900
比如说你要把数据写到文件上

462
00:26:59,990 --> 00:27:03,440
或者是说你把这个数据发到这个网络上

463
00:27:04,390 --> 00:27:06,640
那么在做这些事儿的时候呢

464
00:27:06,730 --> 00:27:09,250
有专门的一个县城

465
00:27:09,250 --> 00:27:10,840
一个工作线程

466
00:27:10,840 --> 00:27:13,330
或者如果说你开了多个端口儿呢

467
00:27:13,330 --> 00:27:13,630
对吧

468
00:27:13,630 --> 00:27:16,600
那就是多个那那就是多个这个工作现场呢

469
00:27:16,900 --> 00:27:21,250
那么你要想把这个你的你的这个JS代码

470
00:27:21,250 --> 00:27:26,500
要把这个IO操作要要要发送到工作线程这儿来

471
00:27:26,530 --> 00:27:29,290
工作线程它它帮助你去发

472
00:27:29,290 --> 00:27:30,250
他给你发出去

473
00:27:30,550 --> 00:27:33,190
那么响应回来以后呢

474
00:27:33,220 --> 00:27:38,380
来再由这个工作线程再传回给你的这个你的这个程序上来

475
00:27:39,320 --> 00:27:41,570
那么这就相当于什么

476
00:27:41,570 --> 00:27:44,930
就相当于这一个人去干这件事儿

477
00:27:44,960 --> 00:27:47,810
如果说你的这个程序里边儿

478
00:27:47,810 --> 00:27:49,280
你的这个程序里边儿

479
00:27:49,280 --> 00:27:52,340
你要想实现异步的一个功能

480
00:27:52,340 --> 00:27:54,140
比如说你把这个请求发出去

481
00:27:54,320 --> 00:27:56,510
这个响应不会马上回来

482
00:27:57,120 --> 00:27:57,660
对吧

483
00:27:57,780 --> 00:27:58,950
不会马上回来

484
00:27:59,070 --> 00:28:00,900
那你是等还是不等呢

485
00:28:01,110 --> 00:28:02,010
你要等

486
00:28:02,160 --> 00:28:03,540
那你干不了别的

487
00:28:03,540 --> 00:28:04,800
你要不等

488
00:28:05,340 --> 00:28:09,330
你要不等那那个响应你你你怎么接得到

489
00:28:09,330 --> 00:28:11,070
这是一个矛盾

490
00:28:11,070 --> 00:28:11,910
对吧

491
00:28:12,390 --> 00:28:14,160
因为这个V8

492
00:28:14,160 --> 00:28:17,640
V8引擎它这个咱们弄的JS

493
00:28:18,470 --> 00:28:19,610
把它扔到这个微

494
00:28:19,640 --> 00:28:20,420
扔给这个微吧

495
00:28:20,420 --> 00:28:22,970
他就是个单任务

496
00:28:22,970 --> 00:28:24,500
他就是个单任务程序

497
00:28:24,560 --> 00:28:26,690
人家所有的那个操作

498
00:28:26,720 --> 00:28:28,310
他就在一个县城里边

499
00:28:28,340 --> 00:28:30,260
而且而且是在这个主线程里边儿

500
00:28:30,980 --> 00:28:31,250
是吧

501
00:28:31,400 --> 00:28:32,210
所以呢

502
00:28:32,480 --> 00:28:33,380
所以怎么办

503
00:28:33,440 --> 00:28:36,860
得有一种机制来解决

504
00:28:36,890 --> 00:28:39,530
把这个任务传给工作线程

505
00:28:39,530 --> 00:28:42,560
然后工作线程做完了以后要返回来通知

506
00:28:42,620 --> 00:28:43,910
要有这么一种机制

507
00:28:44,150 --> 00:28:46,280
那么这种机制依靠什么解决呢

508
00:28:46,400 --> 00:28:49,160
就依靠这个事件循环

509
00:28:49,160 --> 00:28:50,270
就就是这个东西

510
00:28:50,660 --> 00:28:53,420
所以说这个lab屋里边儿的

511
00:28:53,570 --> 00:28:55,010
这个世界循环

512
00:28:55,040 --> 00:28:57,110
它是no de JS的核心

513
00:28:57,480 --> 00:28:59,190
那他是一个核心功能

514
00:28:59,760 --> 00:29:02,220
那么这个世界循环它是怎么

515
00:29:03,470 --> 00:29:04,880
它是怎么工作的呢

516
00:29:04,940 --> 00:29:06,920
你看咱们咱们接着看

517
00:29:07,460 --> 00:29:10,370
看这个这个大框里边儿

518
00:29:10,610 --> 00:29:15,110
那如果说我们的程序需要去发一个请求

519
00:29:15,140 --> 00:29:16,670
发一个请求之后

520
00:29:16,670 --> 00:29:17,240
好

521
00:29:17,480 --> 00:29:21,920
那么这个请求就入到事件队列里

522
00:29:22,510 --> 00:29:25,150
那咱们去依靠这个事件对吧

523
00:29:25,270 --> 00:29:27,430
实际上这个事件事件的

524
00:29:28,000 --> 00:29:29,440
本质是个什么东西

525
00:29:29,500 --> 00:29:30,880
在咱们代码层面上

526
00:29:31,240 --> 00:29:33,250
事件的本质是个什么东西

527
00:29:34,650 --> 00:29:37,770
事件的本质它是一个

528
00:29:38,360 --> 00:29:40,970
有条件的回调函数

529
00:29:43,030 --> 00:29:44,830
他是一个有条

530
00:29:44,950 --> 00:29:46,510
那刚才那个矛盾问题

531
00:29:46,510 --> 00:29:48,430
咱们现在不就解决这个问题吗

532
00:29:48,520 --> 00:29:55,780
那解决这个矛盾就依靠这个世界循环你你你走神儿了是吧

533
00:29:57,580 --> 00:29:59,260
那么那个我刚才讲到哪儿了

534
00:29:59,260 --> 00:30:00,190
我一分神儿

535
00:30:00,190 --> 00:30:05,800
一分儿不知道讲到哪了那个狐那个事件

536
00:30:06,070 --> 00:30:07,450
JS里面那个事件

537
00:30:07,450 --> 00:30:09,040
它的本质是个什么东西

538
00:30:09,460 --> 00:30:14,260
但他是一个有条件的回调函数

539
00:30:14,870 --> 00:30:16,940
什么叫有条件的回调函数呢

540
00:30:17,090 --> 00:30:20,060
就是满足某种条件的时候

541
00:30:20,060 --> 00:30:22,100
你才去回掉那个函数

542
00:30:23,400 --> 00:30:25,260
这叫有条件的回调

543
00:30:25,840 --> 00:30:28,270
那你咱们在写那个

544
00:30:28,510 --> 00:30:31,150
咱们在写那个事件的时候

545
00:30:31,150 --> 00:30:34,540
用用那个JS去去去去去写一个事件

546
00:30:34,660 --> 00:30:36,070
咱们要先去干什么

547
00:30:36,070 --> 00:30:37,240
要先有一个事件

548
00:30:38,050 --> 00:30:38,530
对吧

549
00:30:38,620 --> 00:30:39,280
然后呢

550
00:30:39,280 --> 00:30:41,170
再有一个函数之后呢

551
00:30:41,170 --> 00:30:44,890
把这个事件和那个函数把它给关联起来

552
00:30:44,920 --> 00:30:46,780
然后再处理它的时候

553
00:30:46,780 --> 00:30:48,370
还要再处理它的时候

554
00:30:48,370 --> 00:30:51,160
有了结果要reject对对吧

555
00:30:51,160 --> 00:30:52,660
那那个事情就要返回来

556
00:30:52,660 --> 00:30:57,910
就就是告诉你要回调所以说那个事件的本质

557
00:30:57,910 --> 00:31:01,090
事件的本质就是一个有条件的

558
00:31:02,140 --> 00:31:03,760
就是一个有条件的回调

559
00:31:04,840 --> 00:31:07,780
那那好那些事件

560
00:31:07,870 --> 00:31:09,760
咱们JS的那些事件

561
00:31:10,000 --> 00:31:12,940
那都放到这个事件

562
00:31:13,700 --> 00:31:14,600
队列里边儿去

563
00:31:15,390 --> 00:31:16,710
都放到这个事件队列

564
00:31:16,830 --> 00:31:20,610
那么这个队列那它是一种数据结构

565
00:31:20,760 --> 00:31:22,440
那么这种数据结构

566
00:31:23,330 --> 00:31:24,380
它有什么特点

567
00:31:25,170 --> 00:31:27,900
队列的结构是什么特点

568
00:31:29,320 --> 00:31:31,150
先入先出

569
00:31:32,790 --> 00:31:33,420
对吧

570
00:31:33,780 --> 00:31:35,430
先入先出

571
00:31:37,140 --> 00:31:37,590
嗯

572
00:31:39,850 --> 00:31:43,840
那么先进去的那个事件就要先被拿出来

573
00:31:44,890 --> 00:31:47,290
这是那个这个数据结构

574
00:31:47,440 --> 00:31:48,340
具体的东西

575
00:31:48,340 --> 00:31:50,680
咱们讲到那个数据结构的时候再详细

576
00:31:50,680 --> 00:31:52,630
再再再那个详细给大家说

577
00:31:52,930 --> 00:31:53,680
然后

578
00:31:57,250 --> 00:31:58,270
咳咳

579
00:32:02,240 --> 00:32:05,720
然后这个事件入了队列以后怎么办

580
00:32:05,870 --> 00:32:08,390
来这里有一个循环

581
00:32:08,390 --> 00:32:09,530
这里有一个循环

582
00:32:09,800 --> 00:32:11,930
那个循环是啥呀

583
00:32:11,930 --> 00:32:12,770
For循环

584
00:32:12,770 --> 00:32:16,700
或者是那个while循环不管是什么什么东西

585
00:32:16,790 --> 00:32:18,020
他是个死循环

586
00:32:19,040 --> 00:32:21,470
这个世界循环它是个死循环

587
00:32:21,470 --> 00:32:23,390
他一直要在那儿转

588
00:32:23,390 --> 00:32:24,800
一直要在那儿转呢

589
00:32:25,040 --> 00:32:30,380
他不能他他不能那个这个循环N次就退出

590
00:32:30,380 --> 00:32:31,970
你必须得是告诉他

591
00:32:31,970 --> 00:32:33,470
媳妇儿你别转了

592
00:32:33,470 --> 00:32:36,140
他在他在那个退出来

593
00:32:36,260 --> 00:32:37,730
你你不告诉他

594
00:32:37,730 --> 00:32:39,410
你你不让他停他就不停

595
00:32:39,410 --> 00:32:40,190
他一直在那转

596
00:32:40,490 --> 00:32:42,110
那么他一直在那儿转

597
00:32:42,110 --> 00:32:43,220
他在干什么呢

598
00:32:43,430 --> 00:32:44,570
做两件事儿

599
00:32:44,920 --> 00:32:45,820
那做两件事儿

600
00:32:45,820 --> 00:32:46,480
第一个呢

601
00:32:46,480 --> 00:32:47,680
处理咱们这个队列

602
00:32:48,100 --> 00:32:50,530
他不断的去便利这个队列

603
00:32:50,950 --> 00:32:54,250
队列里边有了任务了

604
00:32:54,250 --> 00:32:56,890
有了任务了就是咱把那个事件给加进去了

605
00:32:56,920 --> 00:32:57,280
对吧

606
00:32:57,430 --> 00:32:59,680
有了事件加进去就是有了任务了

607
00:32:59,890 --> 00:33:02,650
那么那个任务接下来干什么

608
00:33:02,650 --> 00:33:07,870
这个任务他就是IO操作的任务如果是看到有这个任务

609
00:33:08,020 --> 00:33:10,390
那就拿出来交给谁呢

610
00:33:10,510 --> 00:33:12,580
交给工作现场

611
00:33:13,180 --> 00:33:14,980
Na交给工作线程

612
00:33:15,130 --> 00:33:17,410
那么交给工作线程以后

613
00:33:18,060 --> 00:33:20,070
那工作线程就去干活了

614
00:33:20,430 --> 00:33:20,640
对

615
00:33:20,880 --> 00:33:22,800
那么工作线程干完了活呢

616
00:33:22,830 --> 00:33:25,110
比如说你发一个请求

617
00:33:25,110 --> 00:33:26,400
发一个网络请求过去

618
00:33:26,460 --> 00:33:27,270
然后呢

619
00:33:27,270 --> 00:33:29,400
网络请求也回来了

620
00:33:29,400 --> 00:33:31,050
回来了以后

621
00:33:31,540 --> 00:33:32,200
干什么呀

622
00:33:32,350 --> 00:33:33,160
通知你

623
00:33:34,030 --> 00:33:34,930
要通知你

624
00:33:35,140 --> 00:33:38,470
那么通知你的话不是通知你的这个程序了

625
00:33:38,530 --> 00:33:41,560
不是让你的程序去做回调儿

626
00:33:41,560 --> 00:33:42,670
是谁回掉

627
00:33:43,030 --> 00:33:46,510
而是事件循环帮你回掉

628
00:33:47,510 --> 00:33:50,090
那事件循环帮你回掉

629
00:33:51,600 --> 00:33:52,110
那

630
00:33:52,900 --> 00:33:55,120
是这个回调干什么

631
00:33:55,120 --> 00:33:57,040
就是你数据回来了

632
00:33:57,370 --> 00:33:57,760
对吧

633
00:33:57,760 --> 00:33:58,570
数据回来了

634
00:33:58,570 --> 00:34:00,010
我该怎么去处理这个

635
00:34:00,250 --> 00:34:01,330
我该怎么去处理这个

636
00:34:01,330 --> 00:34:03,010
这个数据咱们再咸度的

637
00:34:03,190 --> 00:34:05,050
咱们再行动的程序的时候

638
00:34:05,170 --> 00:34:08,050
那这个模式可是司空见惯的

639
00:34:09,170 --> 00:34:10,040
对吧

640
00:34:10,040 --> 00:34:14,810
咱们就是直接用那个就就就直接用那个箭头函数

641
00:34:14,870 --> 00:34:17,450
咱们总是写那个喜喜欢写箭头函数

642
00:34:17,450 --> 00:34:21,590
然后在箭头函数里边儿一再再去实现函数

643
00:34:21,590 --> 00:34:24,500
那样写起来非常方便为什么要那么写呢

644
00:34:24,680 --> 00:34:26,330
就是方便回掉

645
00:34:26,420 --> 00:34:28,040
你把一个函数

646
00:34:28,160 --> 00:34:30,590
那你把一个函数的参数

647
00:34:30,650 --> 00:34:33,890
你把一个函数当成一个参数交给另外一个函数

648
00:34:33,890 --> 00:34:34,970
那就是在做回调

649
00:34:36,260 --> 00:34:37,520
那么那个函数呢

650
00:34:37,520 --> 00:34:41,750
那那个被当成参数传进去的那个那个回调函数

651
00:34:41,810 --> 00:34:42,590
谁去帮你

652
00:34:42,710 --> 00:34:48,110
谁去帮你回掉世界循环帮你回掉掉回掉完了以后接着干啥呀

653
00:34:48,200 --> 00:34:48,920
接着呢

654
00:34:48,920 --> 00:34:50,120
找对应的那个事件

655
00:34:51,110 --> 00:34:58,910
找对应的这个事件调完了以后再恶就就就把这个世界给给拿出来拿回来

656
00:35:00,290 --> 00:35:02,810
把他从队列里面拿出来就不要他了

657
00:35:02,810 --> 00:35:04,010
因为你是干完了

658
00:35:04,010 --> 00:35:09,650
然后把结果再回交回到咱们的这个程序这

659
00:35:11,290 --> 00:35:13,000
你是事儿做完了

660
00:35:13,000 --> 00:35:14,170
你结果也有了

661
00:35:14,170 --> 00:35:16,570
你结果有了你不得返回给你的程序吗

662
00:35:16,780 --> 00:35:19,090
那然后你的程序再进行后续处理

663
00:35:19,690 --> 00:35:21,040
他是这么一个流程

664
00:35:21,220 --> 00:35:23,470
那么这个图实际上讲的是什么

665
00:35:23,710 --> 00:35:27,730
就是讲咱们再进行IO操作的时候

666
00:35:29,340 --> 00:35:31,470
再进行这个IO操作的时候

667
00:35:31,620 --> 00:35:32,340
咱们

668
00:35:36,230 --> 00:35:37,700
再进行IO操作的时候

669
00:35:37,700 --> 00:35:41,240
这个操作顺序他是怎么走的

670
00:35:41,600 --> 00:35:43,340
那并不是说直接

671
00:35:43,370 --> 00:35:44,390
因为你看

672
00:35:44,720 --> 00:35:51,410
因为这些IO操作它都是谁提供的功能IO操作都是操作系统内核的功能

673
00:35:52,060 --> 00:35:52,660
是吧

674
00:35:52,690 --> 00:35:54,550
你要想操作一个硬件

675
00:35:54,550 --> 00:35:55,870
比如说网卡

676
00:35:55,870 --> 00:35:58,000
你IO ni ni ni ni发射网络

677
00:35:58,000 --> 00:35:58,900
发送网络请求

678
00:35:58,900 --> 00:36:00,100
你必须走网卡

679
00:36:00,250 --> 00:36:01,600
你要想操作网卡

680
00:36:01,660 --> 00:36:03,850
你必须让内核帮你去操作

681
00:36:03,880 --> 00:36:09,790
你别人你你的note JS是不行的你你你他你没有权限做这件事儿

682
00:36:09,790 --> 00:36:10,960
操作系统就不让你干

683
00:36:11,350 --> 00:36:12,520
那所以说呢

684
00:36:12,610 --> 00:36:16,120
咱们并不是说直接通过班订四对吧

685
00:36:16,420 --> 00:36:21,130
并不是说直接通过binding思去去掉穿透这个benz

686
00:36:21,130 --> 00:36:24,790
去掉这个操作系统内核的这个这个东西呢

687
00:36:24,880 --> 00:36:26,170
而是干啥呀

688
00:36:26,230 --> 00:36:27,700
而是让

689
00:36:27,790 --> 00:36:30,430
而是交给这个事件循环

690
00:36:30,580 --> 00:36:31,180
然后呢

691
00:36:31,180 --> 00:36:33,970
事件循环交给工作线程

692
00:36:34,600 --> 00:36:35,560
交给工作线程

693
00:36:35,560 --> 00:36:37,750
让工作线程去去掉

694
00:36:37,750 --> 00:36:39,040
去掉完了以后

695
00:36:39,040 --> 00:36:40,270
再通过事件循环

696
00:36:40,270 --> 00:36:44,350
再把结果给你这么一个这么一个流程

697
00:36:45,750 --> 00:36:48,870
咱们背后背背后那个内内套机制

698
00:36:49,900 --> 00:36:51,700
就是这么个玩意儿

699
00:37:07,900 --> 00:37:08,890
那么平时

700
00:37:08,890 --> 00:37:10,510
咱们对这个JS

701
00:37:10,540 --> 00:37:12,610
是有一个误解的

702
00:37:12,610 --> 00:37:14,410
咱们总是说这个JS

703
00:37:14,410 --> 00:37:16,960
他是单任务语言对吧

704
00:37:17,230 --> 00:37:19,570
JS是单任务语言

705
00:37:19,630 --> 00:37:22,270
它是个它不支持这个多任务

706
00:37:22,390 --> 00:37:23,350
实际上呢

707
00:37:23,590 --> 00:37:23,890
不

708
00:37:24,710 --> 00:37:26,480
不全对不全对

709
00:37:27,140 --> 00:37:29,270
实际上其他的语言

710
00:37:29,330 --> 00:37:30,410
比如说C语言

711
00:37:30,470 --> 00:37:33,320
他也是个单任务语言

712
00:37:33,320 --> 00:37:34,100
你要注意

713
00:37:34,100 --> 00:37:35,810
C语言也是个单任务语言

714
00:37:36,080 --> 00:37:38,510
那么那个C加加他也是个单任务语言

715
00:37:38,870 --> 00:37:41,090
他为什么他们能写这个多任务

716
00:37:41,270 --> 00:37:44,060
实际上多任务是实现在什么地方的

717
00:37:44,790 --> 00:37:46,290
多任务实现在哪儿

718
00:37:46,470 --> 00:37:48,360
实现在操作系统里

719
00:37:49,730 --> 00:37:53,750
多任务是在操作系统里不是模拟出来的不是模拟出来的

720
00:37:53,990 --> 00:37:55,100
他是在操作系

721
00:37:55,100 --> 00:37:57,350
你要自己要模拟那个那个多任务

722
00:37:57,350 --> 00:37:59,690
那那就累死了你只能做什么

723
00:37:59,690 --> 00:38:02,300
你你只能做那个

724
00:38:02,360 --> 00:38:03,620
你你只能做携程

725
00:38:04,340 --> 00:38:05,330
你只能用携程

726
00:38:05,360 --> 00:38:08,240
携程是在是在语言层面上

727
00:38:08,240 --> 00:38:09,650
是在语言层面上实现的

728
00:38:09,980 --> 00:38:13,490
那么线程和进程这个东西

729
00:38:13,520 --> 00:38:18,230
你要想你要想用它必须得通过操作系统去操作呢

730
00:38:18,500 --> 00:38:26,450
那么为什么JS不让你去不让你去那个实现这个多多任务呢

731
00:38:27,250 --> 00:38:28,780
不让你实现这个多任务呢

732
00:38:29,200 --> 00:38:32,950
不让你实现多任务是怕引发混乱

733
00:38:33,280 --> 00:38:36,790
实际上这个多任务分两个层面

734
00:38:36,790 --> 00:38:37,990
你这个是错了

735
00:38:37,990 --> 00:38:47,470
你你那个你这个你这个这个理解是错的单线程它不是单任务这个单线程和单任务你是不能挂

736
00:38:47,560 --> 00:38:49,930
你你是不能那个挂挂起钩来的

737
00:38:50,590 --> 00:38:51,640
这个多任务

738
00:38:51,640 --> 00:38:53,890
咱们先把这个多任务搞清楚

739
00:38:54,040 --> 00:38:56,260
多任务是分两个层面的

740
00:38:56,560 --> 00:38:57,940
第一个层面在哪儿呢

741
00:38:57,940 --> 00:38:59,230
在晋城层面上

742
00:39:00,380 --> 00:39:01,970
你只有一个进程

743
00:39:01,970 --> 00:39:03,530
这一个进程就做一件事儿

744
00:39:04,370 --> 00:39:06,290
这这是丹丹进城

745
00:39:06,290 --> 00:39:07,220
也是单任务

746
00:39:07,340 --> 00:39:09,200
如果说你有多个

747
00:39:09,200 --> 00:39:10,130
你有多个进程

748
00:39:10,130 --> 00:39:12,350
对多个进程做同样的事儿

749
00:39:12,440 --> 00:39:14,660
这这就是多任务

750
00:39:15,080 --> 00:39:15,680
对吧

751
00:39:15,890 --> 00:39:19,160
那弄的JS支持支不支持多任务支持

752
00:39:19,810 --> 00:39:21,250
弄的JS支持多任务

753
00:39:21,400 --> 00:39:23,140
比如说咱们再启动一个

754
00:39:24,030 --> 00:39:27,810
咱们咱们再启动一个那个弄的服务的时候

755
00:39:27,900 --> 00:39:30,150
通过PM to的帮助

756
00:39:30,150 --> 00:39:32,580
咱们用用用那个cluster模式

757
00:39:32,580 --> 00:39:33,870
也就是那个集群模式

758
00:39:34,080 --> 00:39:35,220
那就是多任务

759
00:39:36,230 --> 00:39:36,740
对吧

760
00:39:36,770 --> 00:39:38,240
那就是个多任务

761
00:39:38,570 --> 00:39:40,130
那么第二个层面

762
00:39:40,130 --> 00:39:41,270
就是县城层面

763
00:39:41,540 --> 00:39:43,430
实际上这个no de JS呀

764
00:39:43,670 --> 00:39:46,490
他是一个单线程的

765
00:39:47,690 --> 00:39:50,570
他是一个单线程的语言呢

766
00:39:50,780 --> 00:39:52,610
那么在弄的JS里边儿

767
00:39:52,730 --> 00:39:54,230
你是不能去

768
00:39:54,650 --> 00:39:56,810
你是不能去创建线程的

769
00:39:57,580 --> 00:39:58,120
对吧

770
00:39:58,390 --> 00:40:01,300
No de JS是创建不了现成的

771
00:40:01,480 --> 00:40:03,370
也不允许你去调

772
00:40:03,430 --> 00:40:07,090
也不允许你去调那个创建线程的那个系统调用

773
00:40:07,920 --> 00:40:09,690
C语言就能对吧

774
00:40:09,690 --> 00:40:11,880
C语言可以可以创建线程

775
00:40:12,090 --> 00:40:24,270
它它它它像这个操作系统去去要一个现成资源就有了实实际上它是不允许你JS去掉的为什么为什么不允许引发混乱

776
00:40:24,510 --> 00:40:29,640
但实际上哈no de JS它是支持多线程的

777
00:40:30,480 --> 00:40:34,980
Nah no de JS它是支持JS多线程的

778
00:40:35,100 --> 00:40:37,140
他是怎么支持JS多线程

779
00:40:37,350 --> 00:40:38,940
有一个主线程

780
00:40:39,060 --> 00:40:40,440
这个主线程就是你的

781
00:40:40,620 --> 00:40:41,520
就是你的程序

782
00:40:42,280 --> 00:40:43,480
就是你的JS程序

783
00:40:43,990 --> 00:40:45,790
那么其他线程呢

784
00:40:45,850 --> 00:40:47,050
你自己

785
00:40:47,910 --> 00:40:51,150
去写no de JS的工作线程

786
00:40:51,510 --> 00:40:54,960
那这个工作线程no de JS有内置的

787
00:40:54,960 --> 00:40:58,770
也给咱们开发人员留了个口子是吧

788
00:40:58,770 --> 00:41:00,510
你可以写这个worker

789
00:41:01,140 --> 00:41:01,620
哈哈

790
00:41:01,620 --> 00:41:02,730
你可以写这个沃克

791
00:41:03,150 --> 00:41:05,640
那么在在那个浏览器里边儿

792
00:41:05,760 --> 00:41:07,590
浏览器里边儿也一样

793
00:41:07,590 --> 00:41:10,050
浏览器里边儿咱们不是可以写

794
00:41:10,640 --> 00:41:12,200
这个思维思沃克马

795
00:41:13,170 --> 00:41:13,680
是吧

796
00:41:13,830 --> 00:41:16,950
那就在浏览器的那个背后呢

797
00:41:16,950 --> 00:41:21,480
你去去执行你的那个JS代码和页面的那个JS代码

798
00:41:21,870 --> 00:41:23,070
他他互不冲突

799
00:41:23,580 --> 00:41:24,000
对吧

800
00:41:24,180 --> 00:41:27,120
实际上它是同一个道理JS

801
00:41:27,770 --> 00:41:32,060
语言本身你是写不出这个多线程的这个程序来的

802
00:41:32,210 --> 00:41:32,810
但是呢

803
00:41:32,810 --> 00:41:36,800
你依靠跑JS的这个环境是可以写出来的

804
00:41:37,360 --> 00:41:40,030
把这个环境一个就是node JS

805
00:41:40,150 --> 00:41:41,320
另外一个呢

806
00:41:41,620 --> 00:41:43,330
那就是浏览器

807
00:41:43,330 --> 00:41:44,650
他不是V8

808
00:41:44,650 --> 00:41:46,630
V8本身它它恶

809
00:41:46,630 --> 00:41:48,610
V8本身它就是受这个

810
00:41:49,570 --> 00:41:50,800
线程限制了

811
00:41:50,800 --> 00:41:55,120
你一个县城里边儿只能跑一个V8

812
00:41:55,120 --> 00:41:57,400
V8是要依赖到县城上的

813
00:41:57,520 --> 00:42:00,880
而不是现成由VBA创建

814
00:42:00,880 --> 00:42:05,230
千万不要把这个因果关系给搞反哈之

815
00:42:05,230 --> 00:42:07,360
VBA要依赖到县城上

816
00:42:07,960 --> 00:42:10,030
V8要依赖到县城上

817
00:42:10,090 --> 00:42:12,670
实际上咱们写一个工作线程

818
00:42:12,820 --> 00:42:14,560
那么这个工作线程里边儿

819
00:42:14,650 --> 00:42:16,780
它就有一个V8的实力

820
00:42:16,780 --> 00:42:22,660
他和你主线程的这个程序主主线程这个程序里边这个V8他是两份儿

821
00:42:23,170 --> 00:42:24,340
那他可是两份儿

822
00:42:24,730 --> 00:42:25,810
那两个实例

823
00:42:26,880 --> 00:42:27,090
是吧

824
00:42:27,240 --> 00:42:33,360
并不是说你在JS里边儿去甩一个去create一个a thread对吧

825
00:42:33,420 --> 00:42:39,750
Create thread这就是那个系统调用的名字创建创建线程的那个系统调用名字

826
00:42:39,990 --> 00:42:42,720
你JS你是create不了

827
00:42:42,720 --> 00:42:46,170
你是create不出thread的线程

828
00:42:46,170 --> 00:42:46,830
不能游

829
00:42:46,950 --> 00:42:48,810
不能在V8这个层面上去创建

830
00:42:49,360 --> 00:42:51,640
那这所以说呢

831
00:42:51,640 --> 00:42:57,790
这个JS哈JS他在依赖外部环境的前提之下

832
00:42:58,060 --> 00:43:00,250
他是可以

833
00:43:00,250 --> 00:43:02,200
它是可以有多线程的

834
00:43:02,860 --> 00:43:03,250
是吧

835
00:43:03,340 --> 00:43:06,490
多线程就是worker threads啊

836
00:43:06,490 --> 00:43:07,570
就是工作线程

837
00:43:08,770 --> 00:43:11,350
那web worker service worker啊

838
00:43:11,350 --> 00:43:12,520
都是这么回事儿

839
00:43:12,520 --> 00:43:13,180
都是这个

840
00:43:13,390 --> 00:43:14,920
都是用的同样的原理

841
00:43:16,100 --> 00:43:17,750
Web web worker

842
00:43:18,140 --> 00:43:19,430
就是浏览器那边的

843
00:43:19,430 --> 00:43:21,680
浏览器那边就是web worker he service worker

844
00:43:21,680 --> 00:43:23,780
就就这俩沃克是吧

845
00:43:31,930 --> 00:43:32,230
好

846
00:43:32,230 --> 00:43:33,580
然后咱们把这个图

847
00:43:34,210 --> 00:43:37,330
这个图和那个操作系统这个层面上的这个联系

848
00:43:37,330 --> 00:43:38,770
咱们把它搞清楚了

849
00:43:38,770 --> 00:43:39,670
搞清楚之后

850
00:43:39,790 --> 00:43:43,630
然后咱们再深入到这个node JS里边儿去呢

851
00:43:43,780 --> 00:43:44,680
那么这个图

852
00:43:44,680 --> 00:43:46,330
就是一个简图落

853
00:43:46,360 --> 00:43:47,920
后边这个图就是一个简图

854
00:43:48,160 --> 00:43:49,900
那么这个简图是什么呢

855
00:43:49,900 --> 00:43:50,770
就是啊

856
00:43:50,770 --> 00:43:55,480
就是no de JS非阻塞事件驱动IO

857
00:43:56,340 --> 00:43:58,410
非阻塞事件驱动

858
00:43:58,770 --> 00:44:00,450
实际上关键词是什么

859
00:44:00,510 --> 00:44:02,850
非阻塞非阻塞

860
00:44:02,880 --> 00:44:04,980
等一会儿给大家讲这个非阻塞

861
00:44:04,980 --> 00:44:09,120
咱们还没说这个非阻塞阻塞和非阻塞和非阻塞是怎么回事儿呢

862
00:44:09,480 --> 00:44:12,600
等一会儿再再再什么地方讲在

863
00:44:13,600 --> 00:44:15,280
在这儿讲

864
00:44:15,280 --> 00:44:17,350
在这儿讲四种

865
00:44:17,350 --> 00:44:18,760
四种基本模型

866
00:44:18,880 --> 00:44:22,630
就是两两组合出来的阻塞非阻塞

867
00:44:22,630 --> 00:44:26,410
同步异步阻塞非阻塞在在那儿讲然后呢

868
00:44:26,410 --> 00:44:27,850
这个接下来呢

869
00:44:27,850 --> 00:44:34,300
咱们再看一下这个no de JS这个结构no de JS它是一个引擎

870
00:44:34,760 --> 00:44:35,750
对吧

871
00:44:35,810 --> 00:44:38,330
那么咱们再上节课给大家说过

872
00:44:38,330 --> 00:44:40,250
C语言他适合去做啥

873
00:44:40,250 --> 00:44:41,480
去做底层库

874
00:44:41,480 --> 00:44:43,040
去做那个网络

875
00:44:43,040 --> 00:44:44,030
做嵌入式

876
00:44:44,030 --> 00:44:44,720
做这方面的

877
00:44:44,720 --> 00:44:45,500
C加加呢

878
00:44:45,590 --> 00:44:47,540
适合做应用软件

879
00:44:47,540 --> 00:44:48,950
复杂的应用软件

880
00:44:49,010 --> 00:44:50,600
还有就是引擎

881
00:44:50,750 --> 00:44:53,270
所以这个node JS它是用C加加写的

882
00:44:53,540 --> 00:44:55,730
那当然他对C加加调的库

883
00:44:55,790 --> 00:44:58,100
C加加是可以调用C语言库的

884
00:44:58,960 --> 00:44:59,890
C语言

885
00:45:00,460 --> 00:45:02,410
能调C加加库吗

886
00:45:02,410 --> 00:45:04,840
再恶也可以

887
00:45:04,840 --> 00:45:08,620
在某些在某些前提之下是可以的

888
00:45:08,770 --> 00:45:11,200
还得看你那个怎么做导出

889
00:45:11,200 --> 00:45:13,930
怎么把那个库的那个接口做导出

890
00:45:15,190 --> 00:45:17,710
那样去做做导出就就比较麻烦了

891
00:45:18,100 --> 00:45:19,390
先看左边这个图

892
00:45:19,420 --> 00:45:22,540
左边这个图我们的程序跑在哪

893
00:45:22,540 --> 00:45:26,350
我们的我们的JS代码跑在这儿主线程

894
00:45:26,910 --> 00:45:28,080
JS代码跑在这儿

895
00:45:28,230 --> 00:45:33,420
然后我们的我们的JS代码需要用到一些

896
00:45:33,630 --> 00:45:36,240
那需要用到一些这个操作系统功能的时候

897
00:45:36,390 --> 00:45:40,260
那怎么去怎么去用API对吧

898
00:45:40,260 --> 00:45:41,640
通过这个API

899
00:45:41,640 --> 00:45:45,900
再给大家讲那个再给大家讲那个Linux进程的时候

900
00:45:46,640 --> 00:45:48,860
这这个Linux进程的时候

901
00:45:48,860 --> 00:45:50,420
还记不记得给大家讲了

902
00:45:50,510 --> 00:45:53,210
讲了一下那个PM to对吧

903
00:45:53,300 --> 00:45:55,100
咱们是讲PM to的时候呢

904
00:45:55,100 --> 00:46:03,080
咱们还写了还还还还还实现了一个那个PM to的那个多多任务管理的那么一个

905
00:46:03,740 --> 00:46:04,970
那么一小段代码

906
00:46:04,970 --> 00:46:06,920
一个极简版的PM图

907
00:46:07,610 --> 00:46:08,000
对吧

908
00:46:08,150 --> 00:46:10,250
就是那个那个克拉斯特模式

909
00:46:10,250 --> 00:46:12,080
PM to的那个克拉斯特模式

910
00:46:12,200 --> 00:46:14,840
极简版的PM To Class的模式

911
00:46:14,840 --> 00:46:15,770
就那么几行

912
00:46:15,950 --> 00:46:17,210
咱们在那里边儿

913
00:46:17,330 --> 00:46:20,540
去掉的那些API你还记得吗

914
00:46:20,540 --> 00:46:24,620
就是OS那个那个那个包里的

915
00:46:24,620 --> 00:46:28,460
OS里面那个去去去看那个CPU个数

916
00:46:28,460 --> 00:46:29,960
去掉CPU个数

917
00:46:29,960 --> 00:46:30,350
然后呢

918
00:46:30,350 --> 00:46:32,660
去创建进程那些东西

919
00:46:33,520 --> 00:46:35,260
那些东西谁提供

920
00:46:35,380 --> 00:46:36,580
API提供

921
00:46:36,580 --> 00:46:37,420
在这儿去提供

922
00:46:37,690 --> 00:46:41,860
那么在这儿也不是由也不是由由这个玩意儿去提供的

923
00:46:41,860 --> 00:46:44,470
实际上那个API它就是一薄薄的一层封装

924
00:46:44,770 --> 00:46:46,210
它封装的是什么呢

925
00:46:46,300 --> 00:46:48,970
它封装两种

926
00:46:49,030 --> 00:46:50,290
它封装两种

927
00:46:50,380 --> 00:46:51,490
第一种是什么呢

928
00:46:51,490 --> 00:46:52,330
第一种是

929
00:46:52,780 --> 00:46:54,370
在这个no de JS里边儿

930
00:46:54,370 --> 00:46:56,980
它内部实现的另外一种呢

931
00:46:57,070 --> 00:46:58,330
就是通过

932
00:46:58,900 --> 00:47:03,310
通过这个班顶note ban Ding SI接入进来的一些东西

933
00:47:04,690 --> 00:47:07,330
他他就就封装的是这这两种呢

934
00:47:11,320 --> 00:47:16,270
那就是就是通过封装的那个操作系统的那个系统调用

935
00:47:16,270 --> 00:47:20,080
咱们才能在JS那个层面上去去用

936
00:47:20,110 --> 00:47:20,530
对吧

937
00:47:20,710 --> 00:47:22,390
那你你要用JS

938
00:47:22,450 --> 00:47:24,490
你要用JS去打开一个串口呢

939
00:47:25,150 --> 00:47:26,710
你要用JS打开串口

940
00:47:26,830 --> 00:47:30,550
那也得去通过操作系统的那个文件操作

941
00:47:31,760 --> 00:47:32,990
通过那个文件操作

942
00:47:33,020 --> 00:47:33,380
但是呢

943
00:47:33,380 --> 00:47:35,510
文件操作他是受限制啦

944
00:47:35,510 --> 00:47:37,730
你不能直接去打开串口

945
00:47:37,730 --> 00:47:38,540
不能直接打开

946
00:47:38,630 --> 00:47:40,130
你没有办法枚举硬件

947
00:47:40,800 --> 00:47:41,370
对吧

948
00:47:41,430 --> 00:47:44,670
你JS你JS代码没没举不了硬件

949
00:47:45,210 --> 00:47:46,770
他他他没有开这个口子

950
00:47:46,830 --> 00:47:48,210
所以你得去干啥呀

951
00:47:48,330 --> 00:47:49,950
自己去写扩展

952
00:47:49,950 --> 00:47:50,790
自己去写扩展

953
00:47:50,790 --> 00:47:54,540
然后帮你把那个串口儿那个硬件把它枚举出来

954
00:47:54,570 --> 00:47:58,860
然后你从里面拿出来拿出来什么叫枚举硬件

955
00:47:58,950 --> 00:48:01,380
就是所有的这个硬件全都列出来

956
00:48:02,160 --> 00:48:04,020
我要枚举这个串口

957
00:48:04,020 --> 00:48:08,820
枚举串口就是看你这个这个机器上有几个串口

958
00:48:08,850 --> 00:48:10,830
然后你去从里边挑一个

959
00:48:10,950 --> 00:48:12,300
这叫枚举硬件

960
00:48:14,070 --> 00:48:16,230
那么咱咱咱再接着看

961
00:48:16,230 --> 00:48:18,330
再接着看下边儿是什么呢

962
00:48:18,390 --> 00:48:19,320
A note ban Ding

963
00:48:19,680 --> 00:48:21,120
那note ban Ding z啊

964
00:48:21,780 --> 00:48:24,690
然后又恶正是另外一块儿呢

965
00:48:24,690 --> 00:48:26,160
就是这个插件

966
00:48:27,540 --> 00:48:28,530
另外一块儿差价

967
00:48:28,680 --> 00:48:32,460
那么这个note ban Ding和插件儿这俩东西

968
00:48:32,490 --> 00:48:34,230
各司其职吧

969
00:48:34,350 --> 00:48:36,720
Note ban Ding撕它干什么

970
00:48:37,280 --> 00:48:40,580
往里边儿接一些复杂的机制

971
00:48:42,250 --> 00:48:43,930
Note ban Ding SI往里边儿

972
00:48:43,930 --> 00:48:46,090
适合往里边接复杂机制

973
00:48:46,840 --> 00:48:49,000
那么这个插件儿呢

974
00:48:49,450 --> 00:48:52,870
插件儿他就是直接往里边儿去接这些库

975
00:48:54,030 --> 00:48:56,040
对这些库做一个简单封装

976
00:48:56,070 --> 00:48:58,770
然后恶封装成API

977
00:48:59,250 --> 00:49:00,510
你你就掉就行了

978
00:49:01,500 --> 00:49:02,880
咱们先看一下这个插件儿

979
00:49:03,000 --> 00:49:05,550
插件儿这儿提供的是什么功能

980
00:49:06,430 --> 00:49:08,500
加密功能对吧

981
00:49:08,560 --> 00:49:09,760
还有呢

982
00:49:09,760 --> 00:49:12,430
HDP的这个协议

983
00:49:15,190 --> 00:49:17,410
HDP的这个协议封装

984
00:49:17,590 --> 00:49:19,390
当然这个HDP协议封装

985
00:49:19,510 --> 00:49:21,160
他更底层是socket

986
00:49:21,490 --> 00:49:22,510
那socket呢

987
00:49:22,570 --> 00:49:25,270
就就就要去去钓操操作系统了

988
00:49:26,360 --> 00:49:29,660
那那个ADP协议本身那个协议头

989
00:49:29,660 --> 00:49:32,000
这还有那个什么body等等

990
00:49:32,000 --> 00:49:34,580
这这个应用层的这这个东西呢

991
00:49:34,940 --> 00:49:35,930
就在这儿

992
00:49:35,930 --> 00:49:37,010
你要往外发

993
00:49:37,070 --> 00:49:38,480
那那对不起

994
00:49:38,630 --> 00:49:41,060
你得去找saki的另外还有呢

995
00:49:41,060 --> 00:49:41,930
就是解压缩

996
00:49:42,020 --> 00:49:42,470
对吧

997
00:49:42,470 --> 00:49:45,410
C lab解压缩这些都是功能性的东西

998
00:49:45,500 --> 00:49:47,090
没有什么处理机制

999
00:49:47,150 --> 00:49:48,080
然后还

1000
00:49:48,470 --> 00:49:49,820
那么这个note ban Ding

1001
00:49:50,390 --> 00:49:51,860
他接进来的是啥呀

1002
00:49:52,040 --> 00:49:54,860
就是引擎加处理机制

1003
00:49:54,920 --> 00:49:56,000
一个就是V8

1004
00:49:56,120 --> 00:50:00,770
还有就是lab屋里边儿的这个异步IO机制

1005
00:50:01,500 --> 00:50:02,760
他是异步IO机制

1006
00:50:02,760 --> 00:50:03,570
还有一个呢

1007
00:50:03,570 --> 00:50:05,310
就是事件循环机制

1008
00:50:05,520 --> 00:50:09,000
还有就是DNS的这个解析机制

1009
00:50:09,830 --> 00:50:11,960
这是几个主要的机制

1010
00:50:12,050 --> 00:50:16,700
因为这些东西它是要有有自己的这个流程的

1011
00:50:16,700 --> 00:50:18,710
你用一行代码是钓不完的

1012
00:50:19,680 --> 00:50:21,390
你得通过几次

1013
00:50:21,420 --> 00:50:24,300
同时还要经过什么等待哈他

1014
00:50:25,990 --> 00:50:28,720
你才能把这个功能去去做完

1015
00:50:28,720 --> 00:50:30,910
这种就是涉及到复杂基质了

1016
00:50:31,090 --> 00:50:33,130
这种东西就接到这个诺搬凳子

1017
00:50:33,280 --> 00:50:34,240
你要简单的东西

1018
00:50:34,240 --> 00:50:36,220
我就调一个加密救救我

1019
00:50:36,220 --> 00:50:37,660
我就把这个数据给加密啦

1020
00:50:37,840 --> 00:50:40,030
对吧

1021
00:50:40,030 --> 00:50:42,700
这这个我就把这个数据加密了呢

1022
00:50:42,700 --> 00:50:44,920
我就调一个就调一个函数就行

1023
00:50:45,100 --> 00:50:46,510
那么那个函数

1024
00:50:46,510 --> 00:50:47,920
就封装到这个插件儿

1025
00:50:48,320 --> 00:50:49,910
那么刚才有同学问

1026
00:50:49,970 --> 00:50:52,580
Note就是note findings啊

1027
00:50:52,580 --> 00:50:56,900
这个owns是是那个是是是啥

1028
00:50:56,900 --> 00:50:58,040
不是advance

1029
00:50:58,040 --> 00:50:58,160
你

1030
00:50:58,160 --> 00:50:58,520
你

1031
00:50:58,520 --> 00:50:59,210
你敲错了

1032
00:50:59,210 --> 00:51:01,070
是ADD on hard on

1033
00:51:01,070 --> 00:51:02,990
这还而且是个负数

1034
00:51:03,080 --> 00:51:06,200
你这个句话就没说明你没理解

1035
00:51:06,500 --> 00:51:08,840
No的不是note般的

1036
00:51:09,110 --> 00:51:10,850
No的不是伴奏的颁奖词

1037
00:51:11,030 --> 00:51:14,090
No的颁奖词是no的当中的一部分

1038
00:51:15,760 --> 00:51:16,780
No的是啥呀

1039
00:51:16,780 --> 00:51:19,990
No的是把这些东西打个包

1040
00:51:21,430 --> 00:51:22,300
这是no的

1041
00:51:24,370 --> 00:51:27,190
把这些所有的东西打个包是no的

1042
00:51:27,430 --> 00:51:31,750
而这个note ban Ding子他是其中的一个框架

1043
00:51:32,880 --> 00:51:35,850
他是里边的一个接入框架儿

1044
00:51:35,850 --> 00:51:37,200
这个插件儿

1045
00:51:37,850 --> 00:51:40,760
他是另外一个接入框架

1046
00:51:40,760 --> 00:51:44,210
这两种框架的机制是不一样的

1047
00:51:44,390 --> 00:51:46,160
那么这个note ban Ding SI

1048
00:51:46,160 --> 00:51:50,570
它是有涉及到复杂机制的这种接入

1049
00:51:50,720 --> 00:51:52,040
而这个插件呢

1050
00:51:52,040 --> 00:51:53,540
是简单

1051
00:51:53,540 --> 00:51:55,190
是简单功能的接入

1052
00:51:56,260 --> 00:51:56,980
明白了吗

1053
00:51:57,400 --> 00:52:00,280
这就是一个函数调完了就完的事儿

1054
00:52:01,290 --> 00:52:05,670
一个函数调完了就完了这这些东西比较简单

1055
00:52:05,880 --> 00:52:07,170
那么这一块儿呢

1056
00:52:07,320 --> 00:52:09,720
这一块儿你你要发

1057
00:52:09,720 --> 00:52:12,660
你你要去走一个网络

1058
00:52:12,660 --> 00:52:14,100
或者写一个文件

1059
00:52:14,910 --> 00:52:15,870
这个时候

1060
00:52:15,900 --> 00:52:18,420
你就要涉及到操作系统这个层面

1061
00:52:18,600 --> 00:52:20,670
你和操作系统进行通信

1062
00:52:21,150 --> 00:52:23,520
那就要等操作系统

1063
00:52:24,090 --> 00:52:24,660
对吧

1064
00:52:24,780 --> 00:52:26,520
你把任务交给操作系统

1065
00:52:26,520 --> 00:52:27,690
操作系统去做了

1066
00:52:27,870 --> 00:52:29,370
等他做完了以后

1067
00:52:29,370 --> 00:52:30,930
他还要回来通知你

1068
00:52:31,640 --> 00:52:33,830
你一次是做不完的

1069
00:52:33,830 --> 00:52:35,510
所以说这个机制就复杂

1070
00:52:35,600 --> 00:52:36,950
复杂的东西放在这儿

1071
00:52:38,420 --> 00:52:40,040
然后咱们接着看

1072
00:52:40,680 --> 00:52:42,300
然后咱们接着看看右半边儿

1073
00:52:42,480 --> 00:52:44,100
右半边儿

1074
00:52:44,100 --> 00:52:45,240
右半边儿是什么呢

1075
00:52:45,240 --> 00:52:49,950
就是就是那个一个框架图

1076
00:52:49,950 --> 00:52:53,310
就是note JS这个框架图最上边这一行

1077
00:52:53,310 --> 00:52:55,680
我们看一下最上边儿这个是啥呢

1078
00:52:55,680 --> 00:52:56,820
是GS的

1079
00:52:58,040 --> 00:52:59,450
纯粹用JS写的

1080
00:52:59,570 --> 00:53:02,360
包括no的标准库

1081
00:53:02,970 --> 00:53:03,480
多少啊

1082
00:53:04,120 --> 00:53:07,210
咱们要是看一下note JS的那个源代码的话

1083
00:53:07,570 --> 00:53:09,580
Note JS的源代码里

1084
00:53:09,610 --> 00:53:12,520
不完全都是C加加代码

1085
00:53:12,640 --> 00:53:14,020
那那个代码在哪儿呢

1086
00:53:14,020 --> 00:53:15,040
我找一下

1087
00:53:18,270 --> 00:53:19,590
代码呢

1088
00:53:19,590 --> 00:53:20,790
在这儿呢

1089
00:53:20,790 --> 00:53:21,150
不是

1090
00:53:21,780 --> 00:53:22,380
错了

1091
00:53:22,890 --> 00:53:23,430
不是这个

1092
00:53:24,360 --> 00:53:25,020
在这儿呢

1093
00:53:26,940 --> 00:53:29,550
咱们先简单的看一下node JS代码

1094
00:53:29,730 --> 00:53:31,560
No的JS代码在这儿

1095
00:53:32,100 --> 00:53:32,580
对吧

1096
00:53:32,610 --> 00:53:36,540
它里边儿都是点儿hr.c等等

1097
00:53:36,570 --> 00:53:40,140
点cc.cc就是那个C加加的那个后缀

1098
00:53:40,140 --> 00:53:41,790
C加加源文件后缀

1099
00:53:41,790 --> 00:53:43,320
也有点CP

1100
00:53:43,320 --> 00:53:46,950
也有点CXCXCCXX啊

1101
00:53:47,010 --> 00:53:54,780
这些都是那个C加加的那个程序的那个代码的代码文件的后缀

1102
00:53:54,870 --> 00:53:55,980
点h.c.CC啊

1103
00:53:55,980 --> 00:53:57,690
点那个CP

1104
00:53:57,690 --> 00:53:59,430
点CXX都是C

1105
00:53:59,610 --> 00:54:01,650
都是C加加的这个文件

1106
00:54:01,650 --> 00:54:02,730
那么C的文件呢

1107
00:54:02,730 --> 00:54:04,590
一个是点C一个试点

1108
00:54:04,590 --> 00:54:05,760
一个是H

1109
00:54:07,320 --> 00:54:09,300
那咱们看这个代码里边

1110
00:54:09,300 --> 00:54:11,310
好多都是CC加加的

1111
00:54:11,520 --> 00:54:12,120
但是呢

1112
00:54:12,120 --> 00:54:12,900
我们啊

1113
00:54:12,900 --> 00:54:13,350
但是呢

1114
00:54:13,350 --> 00:54:15,000
我们在里边儿翻

1115
00:54:15,000 --> 00:54:16,260
我们在里边乱翻

1116
00:54:16,410 --> 00:54:18,630
这些在在这儿都是那个

1117
00:54:19,530 --> 00:54:21,870
都是那个大家写的

1118
00:54:21,870 --> 00:54:24,480
但是咱们在这儿再再去翻的时候

1119
00:54:24,690 --> 00:54:26,550
看咱们再看这个目录

1120
00:54:26,640 --> 00:54:28,620
这个目录里边儿再翻的时候

1121
00:54:28,710 --> 00:54:30,450
这些全都是JS代码

1122
00:54:31,930 --> 00:54:34,870
那么好多好多的那个

1123
00:54:34,900 --> 00:54:37,000
弄的JS的那个标准库

1124
00:54:37,000 --> 00:54:41,740
都是在都是在这个带这些代码里边封装出来的

1125
00:54:43,120 --> 00:54:44,050
所以说呢

1126
00:54:44,110 --> 00:54:48,700
咱们这个no de JS里边儿除了C加加代码

1127
00:54:48,730 --> 00:54:50,110
还有JS代码

1128
00:54:50,110 --> 00:54:54,130
他他是那个相当多的东西都是JS实现的之后

1129
00:54:54,130 --> 00:54:55,600
中间儿这一块儿

1130
00:54:55,660 --> 00:54:58,810
中间这一块儿主要就是note ban Ding the

1131
00:55:00,150 --> 00:55:01,440
主要是note ban Ding SI

1132
00:55:01,440 --> 00:55:03,120
然后这个node findings

1133
00:55:03,120 --> 00:55:06,750
它里边儿三大三大模块儿

1134
00:55:07,110 --> 00:55:10,680
一个就是V81个是异步IO

1135
00:55:11,010 --> 00:55:12,960
一个是事件循环

1136
00:55:13,650 --> 00:55:20,670
那这是这是那个note JS的这个系统框架图系统框图一层一层往下走

1137
00:55:20,730 --> 00:55:24,870
实际上咱们编码的时候涉及到的就是这一层

1138
00:55:25,750 --> 00:55:26,680
涉及到这一层

1139
00:55:26,860 --> 00:55:28,330
你要想写扩展

1140
00:55:28,600 --> 00:55:30,130
那就涉及到哪儿了

1141
00:55:30,250 --> 00:55:32,740
就涉及到这个涉及到这个地方了

1142
00:55:32,920 --> 00:55:35,650
然后把他往note顶上街就行了

1143
00:55:36,500 --> 00:55:37,070
哈哈

1144
00:55:39,250 --> 00:55:48,310
那么这个这节课的那个一个重要部分弄重要部分就是异步IO加事件循环

1145
00:55:49,410 --> 00:55:50,760
实际上这两个东西

1146
00:55:50,790 --> 00:55:53,250
都是lab屋里边儿给咱们提供的

1147
00:55:53,610 --> 00:56:00,690
那接下来咱们就要给大家讲一讲这个一不这个异步异步机制

1148
00:56:00,690 --> 00:56:02,460
同步机制究竟是怎么回事儿

1149
00:56:02,790 --> 00:56:04,980
那么在讲之前

1150
00:56:04,980 --> 00:56:08,670
要先讲一些需要先讲一些那个

1151
00:56:09,770 --> 00:56:12,290
这个这个基础知识

1152
00:56:12,290 --> 00:56:14,540
基本的知识咱们先先了解一下

1153
00:56:14,780 --> 00:56:18,980
那么Linux操作系统它本身是个多任务的

1154
00:56:19,340 --> 00:56:21,140
那么这个多任务

1155
00:56:21,320 --> 00:56:25,640
他是怎么进行协调和调度的呢

1156
00:56:26,590 --> 00:56:27,100
对吧

1157
00:56:27,130 --> 00:56:29,920
因为你的程序要和内核进行通信的

1158
00:56:30,280 --> 00:56:34,960
内核他做完了事儿怎么通知你的程序

1159
00:56:35,290 --> 00:56:37,510
然后让你去回去拿呢

1160
00:56:37,510 --> 00:56:39,250
这个时候咱们就要涉及到

1161
00:56:41,470 --> 00:56:48,550
就要涉及到Linux当中一个重要的机制叫信号信号机制

1162
00:56:49,440 --> 00:56:50,820
Linux信号机制

1163
00:56:51,270 --> 00:56:56,100
那么这个Linux信号它是个什么东西首先呢

1164
00:56:56,130 --> 00:56:57,210
什么是信号

1165
00:56:57,760 --> 00:57:01,480
列那个寺里边定义了64种信号

1166
00:57:02,380 --> 00:57:05,620
那么这个信号和消息有什么区别呢

1167
00:57:06,070 --> 00:57:09,550
咱们要注意信号它不是消息

1168
00:57:09,760 --> 00:57:12,250
前面咱们实际上这个东西

1169
00:57:12,310 --> 00:57:17,440
这个世界循环用的是用的是一种消息传递机制

1170
00:57:18,230 --> 00:57:21,140
事件循环内部用的是一种消息传递机制

1171
00:57:21,230 --> 00:57:23,090
如果说你写过那个

1172
00:57:23,210 --> 00:57:26,150
你用你写过那个VC的那个程序

1173
00:57:26,150 --> 00:57:27,980
比如说那个VC

1174
00:57:27,980 --> 00:57:29,180
你你上大学的时候

1175
00:57:29,180 --> 00:57:30,950
你要学过这个C语言

1176
00:57:30,950 --> 00:57:34,430
那肯定肯定肯定会涉及到那个MFC

1177
00:57:34,760 --> 00:57:37,070
那个MFC是什么东西

1178
00:57:37,070 --> 00:57:40,700
就是VC里边封装的那么一套裤一套内裤

1179
00:57:41,250 --> 00:57:46,590
那内套内裤里边最重要的一个就就是那个消息循环机制

1180
00:57:46,740 --> 00:57:50,370
实际上消息循环机制是Windows操作系统的

1181
00:57:51,310 --> 00:57:53,230
是Windows操作系统的一套机制

1182
00:57:53,530 --> 00:57:58,150
那咱们要那咱们咱们比如说咱们打开一个窗口儿

1183
00:57:58,150 --> 00:58:01,810
比如说像这个XAMPP这个窗口这个窗口儿

1184
00:58:02,530 --> 00:58:05,620
他是在这个程序的主线程里边儿

1185
00:58:07,710 --> 00:58:10,230
窗口在程序的主线程里边儿

1186
00:58:10,850 --> 00:58:14,810
那么这个窗口他为什么能在这儿一直显示的呢

1187
00:58:15,600 --> 00:58:16,500
一直显示呢

1188
00:58:16,530 --> 00:58:18,570
实际上是在主线程

1189
00:58:18,690 --> 00:58:20,670
它有一个循环

1190
00:58:21,180 --> 00:58:23,910
这个循环它一直在那儿转转转

1191
00:58:24,270 --> 00:58:29,460
然后保持住这个窗口不消失他反复的在渲染这个窗口

1192
00:58:29,970 --> 00:58:33,060
那如果说咱们在这个窗口上去点击一下按钮儿

1193
00:58:33,060 --> 00:58:34,500
R点点一下按钮

1194
00:58:34,830 --> 00:58:37,320
那么就要触发到背后的

1195
00:58:37,800 --> 00:58:40,140
触发到背后的一些函数

1196
00:58:41,100 --> 00:58:43,350
你比如说我们点那个start

1197
00:58:43,350 --> 00:58:44,220
点那个stop

1198
00:58:44,520 --> 00:58:47,280
在按钮后边儿他都挂着一个事件

1199
00:58:47,880 --> 00:58:48,900
哪哪个事件

1200
00:58:48,960 --> 00:58:51,360
On click事件

1201
00:58:51,450 --> 00:58:53,370
你点击它之后

1202
00:58:53,820 --> 00:58:55,500
背后的事件就被触发

1203
00:58:55,920 --> 00:58:57,390
那么问题就来了

1204
00:58:57,570 --> 00:58:59,100
问题就来了那

1205
00:59:00,240 --> 00:59:03,300
这个事件你触发了以后

1206
00:59:03,750 --> 00:59:05,040
然后干什么

1207
00:59:05,100 --> 00:59:09,960
然后去掉事件和事件绑定在一起的那个回调函数

1208
00:59:10,600 --> 00:59:13,300
那回调函数去干干活

1209
00:59:13,300 --> 00:59:15,520
你点击starch点击start

1210
00:59:15,520 --> 00:59:21,160
就要就要像像那个某一个服务去去去发一个命令过去

1211
00:59:21,310 --> 00:59:22,480
服务启动了

1212
00:59:22,510 --> 00:59:24,730
结果要给你要回来

1213
00:59:25,090 --> 00:59:25,690
对吧

1214
00:59:25,810 --> 00:59:27,370
结果要回来那

1215
00:59:27,930 --> 00:59:28,710
这一套

1216
00:59:29,070 --> 00:59:31,860
这一套机制Windows它是怎么实现的

1217
00:59:31,950 --> 00:59:33,780
就是消息传递机制

1218
00:59:34,680 --> 00:59:36,120
他用的是消息传递机制

1219
00:59:36,330 --> 00:59:40,860
消息传递机制它上边儿带数据

1220
00:59:40,860 --> 00:59:42,210
它上边儿挂着数据

1221
00:59:42,390 --> 00:59:44,160
比如说你点了starch

1222
00:59:44,520 --> 00:59:47,430
那点starch他背后的那个函数干什么

1223
00:59:47,790 --> 00:59:48,270
要

1224
00:59:48,890 --> 00:59:52,070
把这个数据传传过去

1225
00:59:52,070 --> 00:59:53,420
传给那个消息循环

1226
00:59:54,480 --> 00:59:55,830
那传过去

1227
00:59:56,950 --> 01:00:01,870
上边儿带数据还有这个消息是这个消息是发给谁的

1228
01:00:03,010 --> 01:00:05,860
目的地是谁要要带这两个东西

1229
01:00:06,310 --> 01:00:07,630
那么信号呢

1230
01:00:07,780 --> 01:00:10,960
信号儿他是没有数据的

1231
01:00:10,990 --> 01:00:12,250
他是不带数据的

1232
01:00:13,740 --> 01:00:15,480
信号是不带数据的

1233
01:00:15,990 --> 01:00:17,730
那我给大家打个比方

1234
01:00:17,850 --> 01:00:19,200
消息是什么呢

1235
01:00:19,380 --> 01:00:22,350
消息就是那个你帮我传个话

1236
01:00:23,680 --> 01:00:24,520
传过去

1237
01:00:24,520 --> 01:00:26,020
这个话传过去

1238
01:00:26,620 --> 01:00:27,430
这叫消息

1239
01:00:28,110 --> 01:00:31,380
消息你帮我传话传给谁

1240
01:00:32,170 --> 01:00:33,100
这是你的目的地

1241
01:00:33,710 --> 01:00:36,380
那这个传这个话是内容是什么

1242
01:00:36,380 --> 01:00:37,460
你欠我2万块钱

1243
01:00:37,460 --> 01:00:38,750
你该还了

1244
01:00:38,750 --> 01:00:40,820
这是那个内容对吧

1245
01:00:40,910 --> 01:00:42,470
你替我传个话过去

1246
01:00:42,470 --> 01:00:45,770
你的船告诉告诉那个谁

1247
01:00:45,770 --> 01:00:47,360
他欠我2万块钱

1248
01:00:47,360 --> 01:00:48,020
欠了好久了

1249
01:00:48,020 --> 01:00:48,860
你该还给我了

1250
01:00:49,070 --> 01:00:50,300
这是一个消息

1251
01:00:51,270 --> 01:00:52,590
有目的地有内容

1252
01:00:52,620 --> 01:00:54,300
这个内容就是数据呢

1253
01:00:54,450 --> 01:00:56,040
那么信号是什么呢

1254
01:00:56,250 --> 01:00:57,180
信号

1255
01:00:57,920 --> 01:01:02,780
他就是一个非常简单的这么一个

1256
01:01:03,830 --> 01:01:06,530
状态描述一种状态

1257
01:01:07,550 --> 01:01:09,380
信号是描述一种状态

1258
01:01:09,710 --> 01:01:11,240
什么样的信号

1259
01:01:11,510 --> 01:01:16,220
比如说咱们去看一些那个抗日剧

1260
01:01:17,300 --> 01:01:19,880
看抗日剧当然不是现在的抗日神剧了

1261
01:01:19,880 --> 01:01:22,070
是是过去的那个抗日电影

1262
01:01:22,250 --> 01:01:28,280
实际上是过去上个世纪的五六十年代拍的那些那些那个那些电影

1263
01:01:28,460 --> 01:01:33,260
那些电影那个比如说那个鬼子要进村儿

1264
01:01:33,260 --> 01:01:34,880
鬼子进村扫荡

1265
01:01:35,580 --> 01:01:36,120
对吧

1266
01:01:36,180 --> 01:01:37,320
鬼子进村扫荡

1267
01:01:37,470 --> 01:01:40,860
那为了防止这个鬼子扫荡怎么办

1268
01:01:40,860 --> 01:01:42,750
在高处那儿有一棵树

1269
01:01:43,080 --> 01:01:44,940
然后有那个小孩儿在那儿放哨

1270
01:01:45,120 --> 01:01:46,650
那小孩儿看到鬼子来了

1271
01:01:46,650 --> 01:01:47,700
把这个数推导

1272
01:01:47,730 --> 01:01:48,420
这叫什么

1273
01:01:48,570 --> 01:01:49,500
消息树

1274
01:01:50,400 --> 01:01:53,190
他只是表明一种状态

1275
01:01:54,200 --> 01:01:56,270
那只是表示一种状态

1276
01:01:56,330 --> 01:02:00,260
鬼子来了就就就就传就传的这种状态

1277
01:02:00,620 --> 01:02:02,630
那么鬼子有多少个人呢

1278
01:02:02,630 --> 01:02:06,800
她有没有大炮带着一袋大炮开没开汽车

1279
01:02:06,830 --> 01:02:07,160
对吧

1280
01:02:07,160 --> 01:02:09,560
有没有汉奸领路这些不知道

1281
01:02:10,450 --> 01:02:12,160
只是告诉你鬼子来了

1282
01:02:12,190 --> 01:02:14,230
这J这件事儿发生了

1283
01:02:14,230 --> 01:02:15,220
这叫信号

1284
01:02:15,520 --> 01:02:16,810
哼对吧

1285
01:02:16,960 --> 01:02:20,860
就好像刚才有同学也说吹喇叭对吧

1286
01:02:20,860 --> 01:02:22,000
就是冲锋号

1287
01:02:23,100 --> 01:02:25,440
你在冲锋的时候就吹冲锋号

1288
01:02:25,560 --> 01:02:26,040
还有呢

1289
01:02:26,040 --> 01:02:27,090
就是信号弹

1290
01:02:27,090 --> 01:02:28,740
发那个信号弹

1291
01:02:28,770 --> 01:02:29,640
在几点几

1292
01:02:29,730 --> 01:02:32,700
在午夜12点就要发起总攻是吧

1293
01:02:32,700 --> 01:02:34,560
你的信号弹打出去一看

1294
01:02:34,560 --> 01:02:36,090
这个红色信号弹

1295
01:02:36,090 --> 01:02:37,140
咱们就打

1296
01:02:37,290 --> 01:02:40,860
那个绿色信号弹咱就撤就是信号

1297
01:02:40,860 --> 01:02:42,510
就是一种状态指示性的

1298
01:02:42,630 --> 01:02:44,670
另外还有这种信号还有什么呢

1299
01:02:44,670 --> 01:02:46,320
就就是那个红绿灯

1300
01:02:46,990 --> 01:02:47,680
就是红绿灯

1301
01:02:47,770 --> 01:02:48,760
红灯亮

1302
01:02:48,760 --> 01:02:51,640
他就是你你你你不能走

1303
01:02:51,640 --> 01:02:52,330
对吧

1304
01:02:52,420 --> 01:02:53,440
这这就是信号

1305
01:02:53,530 --> 01:02:56,560
它承载不了更多的附加信息

1306
01:02:56,560 --> 01:03:00,340
只是告诉你这件事儿发生了或者说

1307
01:03:00,490 --> 01:03:01,870
他处于这种状态

1308
01:03:02,140 --> 01:03:02,980
这叫信号

1309
01:03:03,310 --> 01:03:06,400
那么Linux丝他里边儿这种东西

1310
01:03:06,430 --> 01:03:08,110
它里边这个信号呢

1311
01:03:08,470 --> 01:03:09,370
他就是

1312
01:03:09,980 --> 01:03:14,900
操作系统内核用来通知你的这个程序

1313
01:03:15,570 --> 01:03:16,830
这个处理状态的

1314
01:03:17,420 --> 01:03:20,780
Linux里边儿有64种信号

1315
01:03:20,900 --> 01:03:23,540
麦克上麦克是unix

1316
01:03:23,540 --> 01:03:25,790
麦克上面有32种信号是吧

1317
01:03:25,910 --> 01:03:32,360
那么这个信号怎么看有有有多少信号儿过原来咱们给大家讲过Q是吧

1318
01:03:32,390 --> 01:03:34,880
咱们说咱也也给大家说过

1319
01:03:34,970 --> 01:03:37,760
Linux里边儿这个Q命令

1320
01:03:38,030 --> 01:03:39,290
这个K有命令

1321
01:03:43,800 --> 01:03:47,370
Linux这个Q命令他不是杀

1322
01:03:47,670 --> 01:03:49,890
而是在发信号过去

1323
01:03:49,980 --> 01:03:51,060
就是告诉

1324
01:03:51,620 --> 01:03:55,040
告诉你要停止的那个程序说你给我停了

1325
01:03:55,910 --> 01:03:57,950
实际上是发了一个停止信号

1326
01:03:58,370 --> 01:04:02,720
实际上这个Q命令它就是用来发信号的

1327
01:04:02,720 --> 01:04:07,400
如果说咱们要强制让一个程序退出怎么办

1328
01:04:07,400 --> 01:04:08,180
K5杠九

1329
01:04:08,740 --> 01:04:09,160
对吧

1330
01:04:09,370 --> 01:04:11,140
K杠九杠九是什么意思

1331
01:04:11,260 --> 01:04:12,580
发九号信号

1332
01:04:12,970 --> 01:04:16,390
九号信号就是强制退出

1333
01:04:16,390 --> 01:04:17,470
不管你在干什么

1334
01:04:17,470 --> 01:04:18,370
你就给我退

1335
01:04:19,410 --> 01:04:21,060
不管你活干完没干完

1336
01:04:21,240 --> 01:04:22,830
你给我退

1337
01:04:22,830 --> 01:04:25,560
就是你非常强势的

1338
01:04:25,830 --> 01:04:27,450
那么这个咱们怎么看

1339
01:04:27,450 --> 01:04:28,800
Linux里边多少信号呢

1340
01:04:28,800 --> 01:04:30,480
杠L哈a

1341
01:04:31,020 --> 01:04:33,510
列出来我现在这个终端

1342
01:04:33,510 --> 01:04:36,480
我现在的终端打开的就是那个Mac的终端

1343
01:04:36,690 --> 01:04:39,960
现在就显示出来的是麦克的信号呢

1344
01:04:39,960 --> 01:04:41,370
那个unix信号

1345
01:04:41,550 --> 01:04:43,170
那么Linux信号呢

1346
01:04:43,290 --> 01:04:45,510
Linux信号咱们

1347
01:04:46,000 --> 01:04:47,740
那个嗨

1348
01:04:47,830 --> 01:04:48,850
这字儿太小

1349
01:04:49,980 --> 01:04:52,470
咱们登录到那个Linux上

1350
01:04:52,470 --> 01:04:53,460
咱们看一眼

1351
01:05:03,210 --> 01:05:03,570
对

1352
01:05:04,230 --> 01:05:05,580
Linux下的信号

1353
01:05:07,340 --> 01:05:08,660
总共是64种

1354
01:05:09,430 --> 01:05:09,970
哈哈

1355
01:05:10,030 --> 01:05:10,900
这是64种

1356
01:05:11,230 --> 01:05:13,990
那么咱们发的那个杠九

1357
01:05:13,990 --> 01:05:16,810
实际上是发的这个东西CQ啊

1358
01:05:17,690 --> 01:05:18,770
Sig是什么意思

1359
01:05:18,800 --> 01:05:19,580
就是signal

1360
01:05:20,580 --> 01:05:22,650
信号的意思塞个Q

1361
01:05:22,770 --> 01:05:23,460
你给我

1362
01:05:23,790 --> 01:05:24,630
你给我在这儿吧

1363
01:05:24,630 --> 01:05:26,790
你你给我杀杀了

1364
01:05:27,480 --> 01:05:29,160
那么平时发的那个

1365
01:05:29,310 --> 01:05:33,150
一般咱们让这个程序退出

1366
01:05:33,150 --> 01:05:35,310
让这个程序退出让他去

1367
01:05:37,420 --> 01:05:39,400
咱们给他发的是哪个信号

1368
01:05:39,490 --> 01:05:40,840
发的是这个

1369
01:05:40,840 --> 01:05:42,190
这个QQ

1370
01:05:42,190 --> 01:05:43,570
你给我正常退出

1371
01:05:44,290 --> 01:05:45,100
正常退出

1372
01:05:45,820 --> 01:05:46,720
实际上那个

1373
01:05:47,800 --> 01:05:49,720
为什么要有这种机制呢

1374
01:05:49,720 --> 01:05:50,980
防止程序

1375
01:05:51,010 --> 01:05:53,020
它在处理一些数据的时候没处理完

1376
01:05:53,440 --> 01:05:53,890
然后呢

1377
01:05:53,890 --> 01:05:56,230
导致这个工作工作流程被打断

1378
01:05:56,260 --> 01:05:57,760
比如说正正正写文件呢

1379
01:05:57,940 --> 01:06:00,340
你啪叽一下给他强制停止了

1380
01:06:00,370 --> 01:06:01,330
那个文件费了

1381
01:06:02,200 --> 01:06:02,620
对吧

1382
01:06:02,680 --> 01:06:04,450
你正在写数据库呢

1383
01:06:04,450 --> 01:06:05,710
写到写到一半儿

1384
01:06:05,710 --> 01:06:06,730
这个数据表写到一半儿

1385
01:06:06,730 --> 01:06:07,930
你啪叽一下给他停了

1386
01:06:08,020 --> 01:06:09,610
数据库飞了呢

1387
01:06:09,730 --> 01:06:12,190
为了防止出现那种事儿所以呢

1388
01:06:12,280 --> 01:06:13,630
就要发

1389
01:06:13,900 --> 01:06:16,150
一般情况下发这个quit

1390
01:06:16,710 --> 01:06:19,830
那么Linux的程序收到这个quit的

1391
01:06:20,070 --> 01:06:21,030
收到这个quit的

1392
01:06:21,710 --> 01:06:22,430
以后啊

1393
01:06:22,490 --> 01:06:23,900
收到这个quit以后

1394
01:06:24,050 --> 01:06:25,190
他要干什么呢

1395
01:06:25,520 --> 01:06:29,390
他要先把手头的工作做完

1396
01:06:29,390 --> 01:06:32,510
如果说正在处理事务对吧

1397
01:06:32,600 --> 01:06:33,770
正在处理事务

1398
01:06:34,190 --> 01:06:36,680
他要把这个事务进行回滚

1399
01:06:37,540 --> 01:06:38,740
事务处理了一半儿

1400
01:06:38,740 --> 01:06:40,870
他要把这个事物回滚

1401
01:06:40,900 --> 01:06:42,640
所有事物全都回滚

1402
01:06:42,790 --> 01:06:44,740
该回血的回血

1403
01:06:44,740 --> 01:06:48,790
该把这个缓存里边的数据把它回写到硬盘上

1404
01:06:48,790 --> 01:06:51,550
把这些活儿全都干完了之后他才停止

1405
01:06:52,120 --> 01:06:53,950
这是这是正常的流程

1406
01:06:54,190 --> 01:06:56,140
你要直接杠九

1407
01:06:56,140 --> 01:06:57,550
杠九杠九的话

1408
01:06:57,550 --> 01:06:59,350
那就直接

1409
01:06:59,440 --> 01:07:01,000
那就直接完蛋啦

1410
01:07:01,710 --> 01:07:02,550
直接完蛋了

1411
01:07:02,550 --> 01:07:03,420
这是强制退出

1412
01:07:03,420 --> 01:07:04,560
不管你在干什么

1413
01:07:04,590 --> 01:07:05,880
你就直接给我退出来

1414
01:07:07,180 --> 01:07:08,590
那么在列罗斯里边儿

1415
01:07:12,320 --> 01:07:15,020
在Linux里边儿这个信号儿

1416
01:07:17,520 --> 01:07:18,750
在这个Linux里面

1417
01:07:18,750 --> 01:07:21,210
这个信号怎么去处理呢

1418
01:07:21,450 --> 01:07:23,700
有专门的信号处理函数

1419
01:07:24,150 --> 01:07:26,520
那么那个信号处理函数他就是个回调

1420
01:07:27,210 --> 01:07:28,230
他就是个回调函数

1421
01:07:28,470 --> 01:07:32,520
那个回调函数给谁回掉给操作系统内核回调

1422
01:07:33,400 --> 01:07:37,060
那在你的程序里边儿去写一个回调函数

1423
01:07:37,300 --> 01:07:37,960
然后呢

1424
01:07:37,990 --> 01:07:43,570
设当你收到哪一个这个收到哪一个信号的时候

1425
01:07:43,570 --> 01:07:48,550
你你就要回调对应这个这个这个信号对应的那个回调函数

1426
01:07:49,420 --> 01:07:52,360
然后回调函数里边儿恶在在干什么

1427
01:07:52,360 --> 01:07:54,940
在收场回调函数里边收场

1428
01:07:55,270 --> 01:07:59,470
那么这个Linux信号主要分两种

1429
01:08:00,690 --> 01:08:01,800
主要分两种

1430
01:08:01,980 --> 01:08:04,380
一种是可屏蔽信号

1431
01:08:04,380 --> 01:08:06,060
一种是不可屏蔽信号

1432
01:08:06,920 --> 01:08:09,170
那可屏蔽信号是什么

1433
01:08:09,290 --> 01:08:11,390
就是你收到了这个信号

1434
01:08:11,420 --> 01:08:12,470
你可以忽略它

1435
01:08:14,410 --> 01:08:15,790
收到了信号可以忽略

1436
01:08:15,790 --> 01:08:19,690
你可以不去不去给他做相应的这个信号处理函数

1437
01:08:19,720 --> 01:08:20,890
也就是那个回调函数

1438
01:08:21,010 --> 01:08:21,790
比如说这个quit

1439
01:08:22,510 --> 01:08:22,990
对吧

1440
01:08:23,050 --> 01:08:26,110
恶意程序在收到这个secret以后

1441
01:08:26,260 --> 01:08:28,060
他不去退出

1442
01:08:28,240 --> 01:08:30,310
而是把自己切到后台上去了

1443
01:08:30,520 --> 01:08:31,870
让你也看不到窗口儿

1444
01:08:32,080 --> 01:08:32,560
是吧

1445
01:08:32,620 --> 01:08:33,490
恶意程序

1446
01:08:34,490 --> 01:08:35,360
对吧

1447
01:08:35,570 --> 01:08:38,870
那么不这事可屏蔽信号

1448
01:08:39,050 --> 01:08:41,000
不可屏蔽信号呢

1449
01:08:41,090 --> 01:08:43,340
那就是Q

1450
01:08:43,460 --> 01:08:44,510
那就是think you

1451
01:08:44,600 --> 01:08:45,500
还有一个呢

1452
01:08:45,500 --> 01:08:46,880
就是think stop啊

1453
01:08:46,880 --> 01:08:47,810
这个stop在哪儿呢

1454
01:08:47,810 --> 01:08:48,440
我找找

1455
01:08:48,560 --> 01:08:49,580
乱七八糟的

1456
01:08:50,060 --> 01:08:52,520
还有一个是single stop啊

1457
01:08:52,520 --> 01:08:53,810
你们自己找吧

1458
01:08:53,810 --> 01:08:55,940
我我这儿也花了

1459
01:08:55,940 --> 01:08:56,540
找不着了

1460
01:08:56,570 --> 01:08:57,140
找不见了

1461
01:08:58,210 --> 01:08:58,900
在这儿呢

1462
01:08:59,530 --> 01:09:02,500
这两个九号和19号信号

1463
01:09:02,620 --> 01:09:04,330
九号和19号信号

1464
01:09:04,450 --> 01:09:06,100
它是不可屏蔽信号

1465
01:09:06,100 --> 01:09:07,030
也就是说啊

1466
01:09:07,270 --> 01:09:09,160
你遇到恶意程序了

1467
01:09:09,160 --> 01:09:12,460
或者是你的程序忙死了忙死了

1468
01:09:12,460 --> 01:09:14,530
来不及去处理这个think you to

1469
01:09:15,360 --> 01:09:18,030
你的程序在那儿在那儿给忙死了

1470
01:09:18,030 --> 01:09:21,150
她她也就没有办法去掉这个信号处理函数了

1471
01:09:21,330 --> 01:09:23,550
内那就失效了

1472
01:09:23,730 --> 01:09:24,150
对吧

1473
01:09:24,180 --> 01:09:25,560
那那这个信号就失效了

1474
01:09:25,560 --> 01:09:26,640
相当于被屏蔽了

1475
01:09:27,000 --> 01:09:27,840
那怎么办

1476
01:09:27,960 --> 01:09:32,880
那你就要发这个不可不可屏蔽信号think q和这个think stop

1477
01:09:33,210 --> 01:09:36,000
不管你有没有实现

1478
01:09:36,000 --> 01:09:37,440
不管你有没有实现

1479
01:09:37,440 --> 01:09:40,230
相相对应的这个这个回到

1480
01:09:40,600 --> 01:09:41,380
这个处理回调

1481
01:09:42,640 --> 01:09:45,280
操作系统要先去掉这个处理回调

1482
01:09:45,460 --> 01:09:46,090
然后呢

1483
01:09:46,090 --> 01:09:47,440
你要实现的话

1484
01:09:47,440 --> 01:09:49,810
你要实现的话先调用处理掉

1485
01:09:49,840 --> 01:09:50,920
然后呢

1486
01:09:50,980 --> 01:09:52,480
直接把你程序给你干掉

1487
01:09:53,270 --> 01:09:54,230
那就这样

1488
01:09:54,230 --> 01:09:55,640
你就这这样

1489
01:09:55,640 --> 01:09:57,620
你就做了坏事了

1490
01:09:57,710 --> 01:09:59,000
这是林格斯那个信号

1491
01:09:59,210 --> 01:10:04,430
Linux信号是林尼克斯吏部机制里边儿的这个基础

1492
01:10:06,580 --> 01:10:09,100
你咱们一定要要要注意

1493
01:10:09,660 --> 01:10:10,890
一定要记住一点

1494
01:10:11,010 --> 01:10:12,810
信号儿是从哪儿产生的

1495
01:10:13,940 --> 01:10:15,530
信号儿是从哪儿产生的

1496
01:10:15,710 --> 01:10:17,690
信号儿是从内核产生的

1497
01:10:18,230 --> 01:10:20,450
咱们在用这个Q的时候

1498
01:10:20,540 --> 01:10:24,230
比如说QQ杠九

1499
01:10:24,290 --> 01:10:26,090
然后一个PID

1500
01:10:26,780 --> 01:10:27,260
对吧

1501
01:10:27,380 --> 01:10:29,660
实际上这个命令是什么意思

1502
01:10:30,050 --> 01:10:32,060
就是告诉内核

1503
01:10:32,300 --> 01:10:38,330
你像PID某某某号进城去发一个杠九信号

1504
01:10:38,900 --> 01:10:41,660
那么这个杠九信号不是你Q产生的

1505
01:10:42,500 --> 01:10:44,030
那而是这个K

1506
01:10:44,030 --> 01:10:45,320
我告诉内核

1507
01:10:45,590 --> 01:10:49,940
让内核像这个进程发一个九九号信号

1508
01:10:50,360 --> 01:10:53,990
所有的信号都是内核发出的

1509
01:10:55,170 --> 01:10:57,030
内核去通知程序

1510
01:10:57,540 --> 01:11:01,920
那么这个信号除了刚才所说的这些东西有什么用

1511
01:11:01,950 --> 01:11:02,430
对吧

1512
01:11:02,490 --> 01:11:04,110
实际上在这这些里边

1513
01:11:04,200 --> 01:11:06,150
还有好多自定义信号

1514
01:11:06,180 --> 01:11:10,920
我们可以看到这些东西这些东西这都是差不多的

1515
01:11:10,920 --> 01:11:11,790
看着差不多的

1516
01:11:12,400 --> 01:11:12,790
对吧

1517
01:11:12,880 --> 01:11:16,930
这些是育有一部分是预留的

1518
01:11:16,930 --> 01:11:18,520
预留给用户自定义的

1519
01:11:20,480 --> 01:11:23,420
用给给自定义的自定义信号

1520
01:11:23,660 --> 01:11:25,760
那么这些信号干什么

1521
01:11:25,760 --> 01:11:29,030
比如说你让操作系统去做做什么活儿

1522
01:11:29,090 --> 01:11:29,540
然后呢

1523
01:11:29,540 --> 01:11:31,490
操作系统把这个活儿做完了

1524
01:11:31,580 --> 01:11:32,660
做完了以后

1525
01:11:32,810 --> 01:11:35,300
他要把结果放到一块儿内存里

1526
01:11:36,050 --> 01:11:37,550
那放到一块内存里

1527
01:11:37,580 --> 01:11:42,830
然后操作系统把恶在过来通知你的程序

1528
01:11:42,830 --> 01:11:46,280
说你在某某某内存那儿去拿数据

1529
01:11:48,260 --> 01:11:52,250
你在某某某内存那儿拿数据这这这这样去通知你

1530
01:11:53,100 --> 01:11:54,720
通过共享内存的方式

1531
01:11:55,360 --> 01:11:57,670
那那个共享内存是个特殊的

1532
01:11:57,670 --> 01:12:01,990
是个是一块特殊数据操作系统内核也能操作你的程序

1533
01:12:01,990 --> 01:12:10,000
也能操作这是通过内共享内存的共享内存模式去去河内内这个内核交换数据

1534
01:12:10,270 --> 01:12:12,070
这个时候就要就要干什么

1535
01:12:12,130 --> 01:12:13,720
有了数据的通知你去拿

1536
01:12:13,750 --> 01:12:15,250
没有数据你不要乱拿

1537
01:12:17,260 --> 01:12:18,520
这是直接

1538
01:12:18,520 --> 01:12:20,380
这是非常贴近那个

1539
01:12:20,380 --> 01:12:25,300
非常非常贴近那个操作系统层面上的这个处理机制了哈好

1540
01:12:25,300 --> 01:12:25,810
然后呢

1541
01:12:25,810 --> 01:12:28,780
咱们再看那个当我们

1542
01:12:28,870 --> 01:12:30,520
当我们的这个程序

1543
01:12:31,560 --> 01:12:33,810
当我们的这个程序

1544
01:12:34,810 --> 01:12:38,770
在这儿那个内核空间和用户空间原来给大家讲过对吧

1545
01:12:38,800 --> 01:12:45,670
这这个咱就咱就在这儿就不就就不多说了在在一开始奖励那个词的时候就给大家讲过了

1546
01:12:46,000 --> 01:12:48,010
就是跑你自己的代码的时候

1547
01:12:48,130 --> 01:12:49,990
内教用用户空间

1548
01:12:49,990 --> 01:12:55,900
然后你去调调Linux内核的那个AJ那个系统调用的时候

1549
01:12:56,020 --> 01:12:57,190
这个时候呢

1550
01:12:57,310 --> 01:12:58,540
他就是那个内核空间

1551
01:12:59,360 --> 01:13:02,420
那用户空间和内核空间再反复反复切换

1552
01:13:02,420 --> 01:13:05,450
比如说你要发一个发一个网络请求

1553
01:13:05,510 --> 01:13:08,750
发网络请求这个这个操作在哪儿坐

1554
01:13:08,840 --> 01:13:11,090
当然是在内核空间去做

1555
01:13:11,090 --> 01:13:12,170
你要写一个文件

1556
01:13:12,200 --> 01:13:15,260
写文件这种操作也在内核内核去做

1557
01:13:15,740 --> 01:13:17,930
如果你算一个一加一等于二

1558
01:13:18,340 --> 01:13:18,700
是吧

1559
01:13:18,820 --> 01:13:19,990
这个操作在哪儿

1560
01:13:20,200 --> 01:13:22,330
这个操作就在你用户空间做

1561
01:13:23,770 --> 01:13:27,550
你要是你要是那个写一行代码

1562
01:13:27,550 --> 01:13:30,550
写一个console log hello word

1563
01:13:30,880 --> 01:13:32,350
那么恶

1564
01:13:32,350 --> 01:13:33,340
这个在哪做

1565
01:13:33,370 --> 01:13:34,390
在内核空间做

1566
01:13:34,540 --> 01:13:36,370
因为它涉及到IOLA

1567
01:13:37,280 --> 01:13:39,890
你要把那个hello word输出到显示器上

1568
01:13:39,920 --> 01:13:41,780
显示器是输出设备

1569
01:13:41,780 --> 01:13:42,650
涉及到IO了

1570
01:13:42,710 --> 01:13:44,330
所以就是内核空间的事儿

1571
01:13:45,690 --> 01:13:48,330
然后咱们街这

1572
01:13:50,080 --> 01:13:51,010
然后啊

1573
01:13:51,580 --> 01:13:53,500
然后就是那个信号

1574
01:13:53,500 --> 01:13:55,690
刚才给大家讲的这个

1575
01:13:56,140 --> 01:13:59,740
讲的就是这里边的这个内容啦

1576
01:13:59,860 --> 01:14:02,140
对于对于这个信号的处理

1577
01:14:02,140 --> 01:14:03,160
信号的处理

1578
01:14:03,190 --> 01:14:06,130
咱们进程可以指定这个处理函数

1579
01:14:06,130 --> 01:14:10,180
就他这个处理函数就是我刚才所说的那个回调函数是吧

1580
01:14:10,270 --> 01:14:13,810
一个信号儿就带对应一个处理函数是吧

1581
01:14:13,840 --> 01:14:14,560
信号呢

1582
01:14:14,560 --> 01:14:17,890
可以忽略也可以也可以不忽略

1583
01:14:17,920 --> 01:14:20,890
也有的信号可以被忽略有

1584
01:14:20,890 --> 01:14:21,370
但是呢

1585
01:14:21,370 --> 01:14:24,520
那个q he stopped是不能被忽略的

1586
01:14:24,700 --> 01:14:26,680
那要不然操作系统玩不转了

1587
01:14:26,800 --> 01:14:29,020
他这个控制权就拿不回来了

1588
01:14:29,020 --> 01:14:30,640
也就是说你听话对吧

1589
01:14:30,670 --> 01:14:31,870
你服从我的调度

1590
01:14:32,020 --> 01:14:33,190
那你就好好运行

1591
01:14:33,370 --> 01:14:35,020
如果说你不服从我的调度

1592
01:14:35,110 --> 01:14:39,370
那你就给我去死就就就就就是这么一套规则

1593
01:14:43,620 --> 01:14:44,040
好

1594
01:14:44,070 --> 01:14:45,300
咱们前面呢

1595
01:14:45,330 --> 01:14:49,380
就是那个no的no的结构

1596
01:14:49,380 --> 01:14:50,850
还有这个Linux这个信号

1597
01:14:51,000 --> 01:14:51,720
然后呢

1598
01:14:51,720 --> 01:14:54,450
就是Linux的四种IO模型

1599
01:14:54,450 --> 01:14:58,470
这四种IO模型哪四种同步

1600
01:14:58,920 --> 01:14:59,550
阻塞

1601
01:15:00,160 --> 01:15:01,540
异步阻塞

1602
01:15:01,870 --> 01:15:05,920
同步非阻塞和异步非阻塞这个时候呢

1603
01:15:05,920 --> 01:15:10,600
咱们就要给大家去解答阻塞和非阻塞是什么意思

1604
01:15:11,520 --> 01:15:11,820
好

1605
01:15:12,000 --> 01:15:14,760
那咱们再讲这个四种模型之前

1606
01:15:14,760 --> 01:15:17,550
咱们先休息五分钟先休息五分钟

1607
01:15:17,550 --> 01:15:18,060
然后呢

1608
01:15:18,330 --> 01:15:19,710
五分钟之后咱们继续

1609
01:16:39,450 --> 01:16:40,050
Sorry

1610
01:16:50,260 --> 01:16:52,630
Those just need a place

1611
01:16:58,810 --> 01:16:59,230
What

1612
01:17:14,280 --> 01:17:16,980
It is always green around the other side

1613
01:17:23,460 --> 01:17:24,000
Gentle

1614
01:17:33,750 --> 01:17:34,260
Three

1615
01:20:23,000 --> 01:20:24,440
Every birthday

1616
01:20:34,130 --> 01:20:34,730
Never

1617
01:20:35,780 --> 01:20:36,200
seen

1618
01:21:56,810 --> 01:21:57,110
好

1619
01:21:57,110 --> 01:21:59,030
咱们都继续

1620
01:21:59,030 --> 01:22:02,030
继续是那个IO模型

1621
01:22:02,030 --> 01:22:03,410
Linux的IO模型

1622
01:22:03,680 --> 01:22:06,410
那么在这个IO模型开始之前呢

1623
01:22:06,410 --> 01:22:09,200
要给大家解释四个概念

1624
01:22:09,350 --> 01:22:11,750
四个概念一个是同步和异步

1625
01:22:11,750 --> 01:22:14,000
一个是阻塞和非阻塞

1626
01:22:14,480 --> 01:22:17,810
那么那个同步和异步是是

1627
01:22:18,580 --> 01:22:20,140
是怎么回事儿呢

1628
01:22:20,260 --> 01:22:21,430
同步

1629
01:22:21,430 --> 01:22:23,380
当你在同步异步

1630
01:22:23,410 --> 01:22:26,680
这是在在实现

1631
01:22:26,680 --> 01:22:29,620
在实现一些那个机智的时候

1632
01:22:29,620 --> 01:22:31,960
这个是基质层面上的

1633
01:22:31,960 --> 01:22:33,670
在实现一些机制的时候

1634
01:22:33,910 --> 01:22:36,250
你是同时做

1635
01:22:36,250 --> 01:22:40,060
还是还是那个分别做

1636
01:22:40,930 --> 01:22:42,580
这是同步和异步

1637
01:22:43,030 --> 01:22:45,100
那么阻塞和非阻塞呢

1638
01:22:45,160 --> 01:22:50,770
那这是这是一个实现层面上的东西实现层面上是啥呀

1639
01:22:50,860 --> 01:22:51,730
阻塞

1640
01:22:52,090 --> 01:22:55,030
当你要做什么事儿的时候

1641
01:22:55,570 --> 01:22:58,480
当你把一个工作

1642
01:22:58,510 --> 01:23:00,880
把一项工作交给别人去做的时候

1643
01:23:01,300 --> 01:23:04,030
那别人在做那件事的时候

1644
01:23:04,030 --> 01:23:06,190
比如说a这是a

1645
01:23:06,190 --> 01:23:08,080
一个人两个人两个人

1646
01:23:08,080 --> 01:23:13,030
一个a一个要求必去打印一篇文档出来

1647
01:23:14,050 --> 01:23:14,920
他a要用

1648
01:23:15,280 --> 01:23:17,530
那么a让B打印文档的时候

1649
01:23:17,650 --> 01:23:18,760
B就去打印了

1650
01:23:19,340 --> 01:23:21,560
B在打印文档的过程当中

1651
01:23:21,590 --> 01:23:22,610
A在干什么

1652
01:23:22,700 --> 01:23:23,420
等着

1653
01:23:24,790 --> 01:23:26,950
A在这儿等

1654
01:23:27,640 --> 01:23:29,950
而且B在这儿

1655
01:23:29,950 --> 01:23:31,540
B在这儿打印文档的时候

1656
01:23:31,540 --> 01:23:34,750
打印的时过程怎么样

1657
01:23:34,840 --> 01:23:36,820
打印到什么地步了

1658
01:23:36,910 --> 01:23:39,820
你比如说你给我打打100页

1659
01:23:39,820 --> 01:23:40,660
打印100页

1660
01:23:40,780 --> 01:23:42,100
你是打了50页了

1661
01:23:42,100 --> 01:23:44,020
还是打了80页了

1662
01:23:44,080 --> 01:23:44,590
不知道

1663
01:23:45,450 --> 01:23:46,230
而且呢

1664
01:23:46,290 --> 01:23:49,350
那必须的等臂把这所有的文档都打完

1665
01:23:49,440 --> 01:23:50,340
挨一块儿

1666
01:23:50,580 --> 01:23:55,620
一块儿交给谁一块儿交给一块儿交给AA这叫阻塞

1667
01:23:55,620 --> 01:23:56,580
这叫阻塞式

1668
01:23:57,810 --> 01:23:59,250
那么非阻塞式呢

1669
01:23:59,310 --> 01:24:00,900
非阻塞是是这样

1670
01:24:01,110 --> 01:24:03,480
A把工作交给B

1671
01:24:03,510 --> 01:24:04,830
同样打100页文章

1672
01:24:04,980 --> 01:24:07,560
然后呢B这哈正在打折呢

1673
01:24:07,590 --> 01:24:08,610
然后a去问

1674
01:24:08,610 --> 01:24:09,720
打多少页了

1675
01:24:09,720 --> 01:24:11,190
打了50页啦

1676
01:24:11,220 --> 01:24:13,080
然后打了一会儿打多少页了

1677
01:24:13,080 --> 01:24:14,130
打80页了

1678
01:24:14,130 --> 01:24:14,970
他有反馈

1679
01:24:14,970 --> 01:24:16,440
你去问他做完了没有

1680
01:24:16,440 --> 01:24:19,170
然后这个B就告诉你我做到什么地步了

1681
01:24:19,560 --> 01:24:21,540
这种机制叫什么

1682
01:24:21,540 --> 01:24:23,280
他叫非阻塞呢

1683
01:24:23,430 --> 01:24:25,290
阻塞非阻塞

1684
01:24:25,290 --> 01:24:27,360
她是那个API那个层面上的

1685
01:24:27,630 --> 01:24:30,150
而同步和异步呢

1686
01:24:30,240 --> 01:24:32,370
她是整个大机制上的

1687
01:24:35,680 --> 01:24:42,310
那么这个咱们把这个一同步异步和阻塞非阻塞这四个东西组合起来

1688
01:24:42,340 --> 01:24:46,630
两两组合同步异步这是一个维度

1689
01:24:46,720 --> 01:24:49,360
那么阻塞非阻塞这是第二个维度

1690
01:24:49,720 --> 01:24:51,820
把这几个维度

1691
01:24:51,910 --> 01:24:53,590
每个维度上两个东西

1692
01:24:53,710 --> 01:24:54,250
对吧

1693
01:24:54,340 --> 01:24:55,750
把他两两组合

1694
01:24:55,780 --> 01:24:57,550
组合出四种模式来

1695
01:24:58,130 --> 01:25:00,080
那那四种模式

1696
01:25:02,360 --> 01:25:08,960
四种模式同步阻塞是同步非阻塞式

1697
01:25:09,990 --> 01:25:11,520
两种异步呢

1698
01:25:11,550 --> 01:25:12,750
异步阻塞式

1699
01:25:12,750 --> 01:25:13,950
异步非阻塞式

1700
01:25:14,370 --> 01:25:19,080
那么这个阻塞是取出阻塞和非阻塞取决于谁

1701
01:25:19,170 --> 01:25:22,320
取决于底层的API

1702
01:25:22,470 --> 01:25:23,640
他的工作方式

1703
01:25:25,260 --> 01:25:27,120
同步和这个阻塞

1704
01:25:27,120 --> 01:25:31,680
非阻塞取决于底层API的工作方式呢

1705
01:25:31,740 --> 01:25:35,670
比如说咱们那个原来都用过那个这个东西

1706
01:25:35,850 --> 01:25:36,330
对吧

1707
01:25:36,600 --> 01:25:38,160
都用过这个Sam

1708
01:25:38,160 --> 01:25:39,990
我给大家去敲一些简单代码

1709
01:25:39,990 --> 01:25:40,710
用sublime

1710
01:25:41,160 --> 01:25:44,370
那么你用sublime去打开一个文本文件

1711
01:25:44,490 --> 01:25:47,250
打开一个小文本文件很快

1712
01:25:47,460 --> 01:25:50,610
你要打开一个100兆的文本文件

1713
01:25:50,640 --> 01:25:51,540
你就要等一会儿

1714
01:25:52,620 --> 01:25:53,520
对吧

1715
01:25:53,550 --> 01:25:54,960
你要打开一个一

1716
01:25:54,960 --> 01:25:56,940
你要打开一个G的文件呢

1717
01:25:56,970 --> 01:25:58,440
等等半天

1718
01:25:58,560 --> 01:25:59,940
那么这个模式是什么

1719
01:25:59,940 --> 01:26:02,850
他必须得把所有文件全都全都读完了

1720
01:26:02,880 --> 01:26:04,620
然后才能给你显示出来

1721
01:26:04,620 --> 01:26:07,500
这种IO操作他就是阻塞式的

1722
01:26:08,080 --> 01:26:10,330
而那个一步呢

1723
01:26:10,330 --> 01:26:12,250
尔那个非非阻塞式呢

1724
01:26:12,400 --> 01:26:14,980
非阻塞式你会你会看得到

1725
01:26:15,190 --> 01:26:16,480
他在读文件的时候

1726
01:26:16,480 --> 01:26:22,030
你会看到这些文件一一行一行的给你显示出来读一点给你展示一点

1727
01:26:22,030 --> 01:26:22,900
读一点窄一点

1728
01:26:22,900 --> 01:26:24,550
这这这是那个非阻塞的

1729
01:26:25,370 --> 01:26:27,860
他不是一一下子给你读完

1730
01:26:27,860 --> 01:26:30,650
而是那个读读一点给点反馈

1731
01:26:30,650 --> 01:26:32,960
这这这是那个非阻塞

1732
01:26:33,540 --> 01:26:35,250
那在API层面上的

1733
01:26:35,520 --> 01:26:38,220
那么咱们底层的这个IO

1734
01:26:38,220 --> 01:26:39,690
IO操作

1735
01:26:39,720 --> 01:26:41,070
有这么两种

1736
01:26:41,070 --> 01:26:42,240
就是这么两种模式

1737
01:26:42,750 --> 01:26:44,520
那在Linux系统上

1738
01:26:45,120 --> 01:26:46,410
Linux的操作系统上

1739
01:26:46,500 --> 01:26:49,380
再过去还只有阻塞式操作

1740
01:26:50,390 --> 01:26:51,920
像这个socket

1741
01:26:52,040 --> 01:26:55,880
过去这个socket Linux socket只有阻塞式操作

1742
01:26:55,880 --> 01:26:58,730
后来加上了非阻塞式操作

1743
01:26:58,730 --> 01:26:59,750
那个是什么时候

1744
01:26:59,750 --> 01:27:01,850
那是将近20年前了

1745
01:27:01,850 --> 01:27:05,510
那个原来我在上上大学的时候

1746
01:27:05,750 --> 01:27:08,780
去学这个Linux的源码

1747
01:27:08,780 --> 01:27:10,430
那个时候我去查资料

1748
01:27:10,700 --> 01:27:12,470
查资料查来查去

1749
01:27:12,470 --> 01:27:17,120
就就就看那个就就学这个socket的这方面的东西

1750
01:27:17,120 --> 01:27:18,410
资料上怎么说的

1751
01:27:18,470 --> 01:27:24,920
资料上就是说LISTESIA只提供了阻塞式的这个套接字

1752
01:27:24,920 --> 01:27:25,910
而Windows呢

1753
01:27:26,060 --> 01:27:28,130
提供了阻塞和非阻塞

1754
01:27:28,130 --> 01:27:30,530
特别是套结字

1755
01:27:30,530 --> 01:27:31,310
这么两种模式

1756
01:27:31,310 --> 01:27:31,820
然后呢

1757
01:27:31,820 --> 01:27:33,800
给给就给了几个例子

1758
01:27:34,370 --> 01:27:35,840
那是很久很久以前了

1759
01:27:36,080 --> 01:27:36,980
后来啊

1760
01:27:36,980 --> 01:27:39,350
后来尼克斯就加上了这个非阻塞式

1761
01:27:39,650 --> 01:27:43,670
那么这个阻塞是主色是它适合什么呢

1762
01:27:43,670 --> 01:27:47,930
它是它它那个实现起来比较简单

1763
01:27:47,930 --> 01:27:49,460
调用起来也简单

1764
01:27:49,550 --> 01:27:50,540
他的问题呢

1765
01:27:50,690 --> 01:27:53,360
就是你必须得等他一下子做完

1766
01:27:53,360 --> 01:27:54,380
等他全部做完

1767
01:27:54,530 --> 01:27:56,900
然后你才能去去去把数据拿出来

1768
01:27:57,110 --> 01:27:58,310
而非阻塞呢

1769
01:27:58,340 --> 01:28:00,050
非阻塞你可以分批的拿

1770
01:28:00,080 --> 01:28:03,380
而且知道他的这个这个这个状态

1771
01:28:03,380 --> 01:28:04,550
知道他的这个操作状态

1772
01:28:05,440 --> 01:28:08,050
那非阻塞的问题在哪儿呢

1773
01:28:08,080 --> 01:28:09,850
操作起来比较复杂

1774
01:28:10,700 --> 01:28:13,910
他他这个操作流程就比较复杂呢

1775
01:28:14,030 --> 01:28:16,220
这这是他们的那个特点

1776
01:28:17,360 --> 01:28:20,360
那么那个接接着呢

1777
01:28:20,360 --> 01:28:21,740
咱们分别的

1778
01:28:21,740 --> 01:28:23,780
分别的给大家讲这四种

1779
01:28:23,780 --> 01:28:24,860
讲这四种模式

1780
01:28:25,430 --> 01:28:26,600
那么第一种呢

1781
01:28:26,600 --> 01:28:29,990
就是最简单最基础的IO模型

1782
01:28:29,990 --> 01:28:33,290
这个就是同步阻塞式的IO模型

1783
01:28:33,590 --> 01:28:35,000
那么这个模型

1784
01:28:35,000 --> 01:28:36,500
咱们就看这个图

1785
01:28:36,500 --> 01:28:37,490
看右边这个图

1786
01:28:37,670 --> 01:28:40,010
这个图叫什么图呢

1787
01:28:40,280 --> 01:28:42,590
这个图它叫活动图

1788
01:28:43,120 --> 01:28:44,710
活动图

1789
01:28:44,800 --> 01:28:49,090
实际上就是两个两个角色

1790
01:28:49,390 --> 01:28:50,290
这是一个角色

1791
01:28:50,290 --> 01:28:51,310
这是一个角色

1792
01:28:51,310 --> 01:28:53,350
这两个角色它们在

1793
01:28:54,070 --> 01:28:55,330
他们在那个

1794
01:28:58,410 --> 01:29:00,120
配合工作的时候

1795
01:29:00,120 --> 01:29:01,830
这个流程是个什么样的

1796
01:29:02,600 --> 01:29:04,280
平时咱们画的流程图

1797
01:29:04,400 --> 01:29:06,050
那就是一个角色的流程图

1798
01:29:06,500 --> 01:29:06,950
对吧

1799
01:29:06,950 --> 01:29:08,180
又是三脚儿

1800
01:29:08,180 --> 01:29:09,770
又是那个菱形

1801
01:29:09,770 --> 01:29:11,990
又是那个方块儿的那种流程

1802
01:29:12,020 --> 01:29:19,460
那种流程图只能去描述一个角色它内部的他是个他他是个那个

1803
01:29:20,320 --> 01:29:21,280
单任务的

1804
01:29:21,340 --> 01:29:25,090
而这个活动图它能够描述多任务的

1805
01:29:25,090 --> 01:29:28,360
多任务的这个恶这种人

1806
01:29:28,390 --> 01:29:29,740
这种活动

1807
01:29:29,740 --> 01:29:32,410
而且这个多任务它是涉及到多个角色的

1808
01:29:32,440 --> 01:29:34,810
他们之间是怎么交互的

1809
01:29:34,930 --> 01:29:36,070
这这叫活动图

1810
01:29:36,280 --> 01:29:38,500
那么这个活动图

1811
01:29:39,520 --> 01:29:40,630
这个活动图

1812
01:29:41,240 --> 01:29:43,280
它属于哪个范畴呢

1813
01:29:43,460 --> 01:29:44,750
它属于

1814
01:29:45,500 --> 01:29:45,920
这个

1815
01:29:47,090 --> 01:29:47,810
UML

1816
01:29:49,110 --> 01:29:50,820
大家抽空

1817
01:29:50,970 --> 01:29:57,390
大家抽空去去去简单的去学一学这个UMLUML是什么

1818
01:29:57,450 --> 01:30:00,210
统一建模语言

1819
01:30:01,240 --> 01:30:03,970
他是统一建模语言UML

1820
01:30:03,970 --> 01:30:05,710
它是一种设计工具

1821
01:30:06,920 --> 01:30:08,150
他是个设计工具

1822
01:30:08,330 --> 01:30:10,460
那么暗用这种设计工具呢

1823
01:30:10,460 --> 01:30:12,140
它可以去做

1824
01:30:12,140 --> 01:30:14,450
他可以给各行各业去

1825
01:30:15,130 --> 01:30:18,010
去设计这个业务还有流程

1826
01:30:18,070 --> 01:30:20,500
那比如说咱们百度一下

1827
01:30:20,500 --> 01:30:21,730
UML呢

1828
01:30:21,850 --> 01:30:26,620
统一建模工具统一建模语言是设计工具

1829
01:30:26,890 --> 01:30:30,070
那么这个UML里边是有很多种图的

1830
01:30:30,670 --> 01:30:35,110
比如说这个那个用力用力图

1831
01:30:35,530 --> 01:30:38,500
用力涂什么样一个角色对吧

1832
01:30:38,560 --> 01:30:42,400
一个业务角色而刚才那个那个活动图

1833
01:30:42,400 --> 01:30:44,470
它是个恶

1834
01:30:44,470 --> 01:30:47,020
那个活动图它是多个业务角色

1835
01:30:47,020 --> 01:30:48,400
一个业务角色

1836
01:30:48,460 --> 01:30:52,750
这个业务角色他能做他能做哪些事儿

1837
01:30:52,750 --> 01:30:53,590
这这叫啥

1838
01:30:53,620 --> 01:30:54,430
这叫用力

1839
01:30:55,410 --> 01:30:56,160
这叫用力

1840
01:30:56,740 --> 01:30:57,580
另外还有呢

1841
01:30:57,610 --> 01:30:58,930
就是类图

1842
01:30:58,930 --> 01:31:00,790
类图它描述什么

1843
01:31:00,850 --> 01:31:02,620
描述这个类的

1844
01:31:02,620 --> 01:31:03,490
继承关系

1845
01:31:04,170 --> 01:31:04,680
类图

1846
01:31:05,130 --> 01:31:06,840
咱们去看那个设计模式

1847
01:31:06,870 --> 01:31:08,730
实际上看到的就是这个类图

1848
01:31:09,890 --> 01:31:11,720
继承关系还有什么

1849
01:31:11,870 --> 01:31:14,030
还有这个依赖关系

1850
01:31:14,210 --> 01:31:16,250
这种箭头儿是依赖关系

1851
01:31:16,430 --> 01:31:18,050
而这种三角箭头呢

1852
01:31:18,140 --> 01:31:21,170
他是个继承关系另外还有什么

1853
01:31:21,230 --> 01:31:24,620
聚合关系聚合关系有箭头儿

1854
01:31:24,740 --> 01:31:29,060
还有建委这个建委这个这是个菱形实心菱形

1855
01:31:29,760 --> 01:31:32,610
而另外一个就是这个这种箭头

1856
01:31:32,640 --> 01:31:33,870
单薄的这个箭头

1857
01:31:33,870 --> 01:31:35,340
这这叫聚合

1858
01:31:35,340 --> 01:31:37,980
这叫聚合什么叫巨恶巨核什么意思

1859
01:31:38,100 --> 01:31:40,200
比如说这这这个类是a是吧

1860
01:31:40,320 --> 01:31:43,980
这个累是避而这个a类里边儿

1861
01:31:45,500 --> 01:31:46,640
它包含着B

1862
01:31:47,950 --> 01:31:49,690
B在这个类a里边儿

1863
01:31:49,690 --> 01:31:50,470
这叫聚合

1864
01:31:50,890 --> 01:31:51,700
依赖呢

1865
01:31:51,820 --> 01:31:57,850
这个是依赖a要调用C这个类里边的东西

1866
01:31:57,850 --> 01:31:58,510
这叫依赖

1867
01:31:59,020 --> 01:32:05,980
那么继承地ID继承自a这叫继承咱们去看那个设计模式

1868
01:32:06,040 --> 01:32:08,620
你看四人帮内四人帮那本儿

1869
01:32:08,620 --> 01:32:11,080
四人帮那本儿那个设计模式里面就是这东西

1870
01:32:11,810 --> 01:32:15,260
所以说这个UML它是很有很大用处的

1871
01:32:16,190 --> 01:32:18,680
那么另外里边儿还有什么甬道图

1872
01:32:18,680 --> 01:32:20,030
什么乱七八糟的

1873
01:32:20,090 --> 01:32:22,340
各种各样的图的咱就不提了

1874
01:32:22,490 --> 01:32:26,390
回回回头那个回头自己去研究

1875
01:32:26,420 --> 01:32:28,190
还还可以用来什么话

1876
01:32:28,190 --> 01:32:29,900
那个架构

1877
01:32:29,990 --> 01:32:34,910
去设计时序等等四人帮前面不是给大家说了吗

1878
01:32:34,910 --> 01:32:37,400
四个人写的你是不是刚来

1879
01:32:38,100 --> 01:32:39,000
刚开始上课的时候

1880
01:32:39,000 --> 01:32:42,060
你你你你来晚了

1881
01:32:42,090 --> 01:32:43,050
四个人

1882
01:32:43,110 --> 01:32:45,180
你不要说那个敏感词

1883
01:32:45,360 --> 01:32:47,070
你说什么敏感词

1884
01:32:47,550 --> 01:32:49,140
内内捣乱

1885
01:32:52,060 --> 01:32:52,780
那个

1886
01:32:54,040 --> 01:32:55,870
四个人写的那本书

1887
01:32:55,870 --> 01:32:57,100
设计模式经典

1888
01:32:57,160 --> 01:32:58,480
你你这

1889
01:33:00,320 --> 01:33:01,400
干扰我思路

1890
01:33:16,120 --> 01:33:18,220
现在现在不这么叫了

1891
01:33:23,310 --> 01:33:25,290
作者是四个人喝

1892
01:33:25,900 --> 01:33:26,470
嗨

1893
01:33:27,100 --> 01:33:29,200
我说咋找不到呢

1894
01:33:29,200 --> 01:33:31,630
是这个是这个这个这个

1895
01:33:32,310 --> 01:33:34,770
这个这个F

1896
01:33:34,770 --> 01:33:36,060
简称四人帮

1897
01:33:36,060 --> 01:33:38,550
简称DF4个人

1898
01:33:39,570 --> 01:33:40,350
这本书

1899
01:33:41,920 --> 01:33:44,530
面向纯粹的面向对象的

1900
01:33:45,920 --> 01:33:46,820
对对对这个

1901
01:33:49,410 --> 01:33:50,010
这啥呀

1902
01:33:50,010 --> 01:33:52,560
这都是这这百度根本没法用

1903
01:33:52,890 --> 01:33:54,900
还有下载呢

1904
01:33:55,200 --> 01:33:56,010
还有下载呢

1905
01:33:57,300 --> 01:34:00,450
这这这么有名的书不知道

1906
01:34:01,590 --> 01:34:02,970
那么这个图是啥呀

1907
01:34:02,970 --> 01:34:04,740
这个图就是那个时序图

1908
01:34:06,070 --> 01:34:08,230
这个图是时序图

1909
01:34:09,970 --> 01:34:10,960
两个角色

1910
01:34:11,020 --> 01:34:12,670
这个是程序

1911
01:34:12,670 --> 01:34:14,740
这个是操作系统内核

1912
01:34:14,980 --> 01:34:18,130
那么程序需要进行IO操作的时候

1913
01:34:18,280 --> 01:34:21,460
你必须得让内核去做而这个呢

1914
01:34:21,460 --> 01:34:22,690
就是同步的

1915
01:34:22,690 --> 01:34:28,090
又是同步是同步阻塞式的同步阻塞是同步阻塞是什么意思呢

1916
01:34:28,210 --> 01:34:32,860
那他他是这他是这么回事儿最简单最常见的

1917
01:34:33,940 --> 01:34:34,600
IO模型

1918
01:34:35,410 --> 01:34:37,660
同步阻塞是各行各业都能用

1919
01:34:37,780 --> 01:34:38,380
你去射

1920
01:34:38,380 --> 01:34:40,180
你去给其他的行业设计一个流程

1921
01:34:40,180 --> 01:34:43,030
比如说工业流程a也能用那个UML

1922
01:34:44,590 --> 01:34:45,610
你自己去百度吧

1923
01:34:45,610 --> 01:34:47,740
我我在这儿不多说了

1924
01:34:47,980 --> 01:34:50,950
当然国内现在用用用这个的很少啦

1925
01:34:50,950 --> 01:34:54,790
现在现在用用这个M去做做设计的很少

1926
01:34:56,450 --> 01:34:57,320
水平太低

1927
01:34:58,370 --> 01:35:01,700
你你碰到你碰到那个真正的那个高手

1928
01:35:01,820 --> 01:35:03,140
真正的那个大佬

1929
01:35:03,140 --> 01:35:06,350
人家就是人家就得用这个MUML

1930
01:35:06,590 --> 01:35:08,750
那那个东西设计出来以后

1931
01:35:08,750 --> 01:35:10,820
那个思路是非常清晰的

1932
01:35:12,140 --> 01:35:13,790
不光是it用

1933
01:35:13,910 --> 01:35:15,140
自自己去百度

1934
01:35:15,470 --> 01:35:16,850
就看百度百科就行

1935
01:35:17,030 --> 01:35:18,680
你看那个维基百科也行

1936
01:35:18,680 --> 01:35:21,200
维基百科说的那个更加详细

1937
01:35:21,620 --> 01:35:26,330
然后咱们实际上这个这个图描述的是什么呢

1938
01:35:26,330 --> 01:35:28,490
用户空间和内核空间

1939
01:35:28,490 --> 01:35:29,900
他们之间是怎么配合的

1940
01:35:30,020 --> 01:35:30,980
怎么配合的呢

1941
01:35:31,940 --> 01:35:32,810
先看

1942
01:35:32,810 --> 01:35:35,060
他这是个二维的对吧

1943
01:35:35,090 --> 01:35:36,020
他有两个维度

1944
01:35:36,050 --> 01:35:38,750
横着这个维度就是角色维度

1945
01:35:38,960 --> 01:35:43,220
纵着的这个维度是时间维度是T时间维度

1946
01:35:43,250 --> 01:35:44,150
然后呢

1947
01:35:44,570 --> 01:35:47,330
这个从上往下这是

1948
01:35:47,940 --> 01:35:48,480
流程

1949
01:35:49,170 --> 01:35:50,580
这是流程横着

1950
01:35:50,640 --> 01:35:52,890
这是两个角色之间的这个交互

1951
01:35:53,460 --> 01:35:57,090
那么我们比如说我们要要要去读一个文件

1952
01:35:57,780 --> 01:35:59,370
那我们要读一个文件

1953
01:35:59,400 --> 01:36:00,360
那怎么去读

1954
01:36:00,420 --> 01:36:02,040
我们要调用什么

1955
01:36:02,070 --> 01:36:03,660
Fell open对吧

1956
01:36:04,220 --> 01:36:06,080
那个弄的JS的那个file open

1957
01:36:07,450 --> 01:36:08,980
那要调这个a

1958
01:36:09,010 --> 01:36:09,760
要调这个函数

1959
01:36:09,880 --> 01:36:12,430
这个函数它就是阻塞式的

1960
01:36:12,430 --> 01:36:13,270
他是阻塞式的

1961
01:36:13,390 --> 01:36:15,280
那在调的时候怎么去掉

1962
01:36:15,400 --> 01:36:17,710
我们在这儿在这儿呢

1963
01:36:18,480 --> 01:36:21,000
从这儿开始掉这个fell l

1964
01:36:21,000 --> 01:36:22,230
这个PHY open

1965
01:36:22,530 --> 01:36:25,410
然后掉以后这个时候呢

1966
01:36:25,470 --> 01:36:27,540
就要把这个工作

1967
01:36:27,540 --> 01:36:28,920
交给内核

1968
01:36:29,340 --> 01:36:31,620
内核收到这个任务以后

1969
01:36:31,800 --> 01:36:34,560
他帮着你去读硬盘去

1970
01:36:35,280 --> 01:36:36,390
他给你读硬盘

1971
01:36:36,720 --> 01:36:38,970
那么他读硬盘是需要时间的

1972
01:36:39,820 --> 01:36:41,680
尤其是这个数据量比较大的时候

1973
01:36:41,680 --> 01:36:42,520
时间更长

1974
01:36:42,880 --> 01:36:46,570
那么他一直读一直读a这一这一段时间

1975
01:36:47,780 --> 01:36:48,860
这段时间对吧

1976
01:36:48,860 --> 01:36:50,630
纵轴是纵轴是时间嘛

1977
01:36:50,810 --> 01:36:54,380
这段时间是他读文件的那个时间

1978
01:36:54,770 --> 01:36:56,600
那么内核在读文件的时候

1979
01:36:56,600 --> 01:36:58,250
你的程序在干什么

1980
01:36:58,460 --> 01:36:59,390
你的程序

1981
01:36:59,970 --> 01:37:02,190
就在那儿等着

1982
01:37:02,190 --> 01:37:03,360
就在那儿等着

1983
01:37:03,940 --> 01:37:05,020
什么时候

1984
01:37:05,610 --> 01:37:07,050
继续往下走呢

1985
01:37:08,130 --> 01:37:10,110
当文件读完了

1986
01:37:10,230 --> 01:37:12,060
返回值回来了

1987
01:37:12,240 --> 01:37:14,340
Fell open他返回了

1988
01:37:15,170 --> 01:37:16,700
来继续往下走

1989
01:37:17,090 --> 01:37:19,100
那如果说一直在这儿读

1990
01:37:20,150 --> 01:37:22,820
你这儿就一直等着这个for open读完

1991
01:37:24,000 --> 01:37:26,610
这种机制是同步阻塞

1992
01:37:27,790 --> 01:37:31,030
同步阻塞简单的写一下代码写一下伪代码

1993
01:37:31,300 --> 01:37:34,450
那伪代码就是这样的伪代码是这样

1994
01:37:34,660 --> 01:37:37,780
比如说我们这儿有一个八法

1995
01:37:38,420 --> 01:37:38,930
对吧

1996
01:37:39,050 --> 01:37:40,580
我们这儿有一个buffer

1997
01:37:40,670 --> 01:37:42,590
这个bug我就用C语言写了

1998
01:37:45,690 --> 01:37:46,650
这有一个八分儿

1999
01:37:48,060 --> 01:37:48,510
呢

2000
01:37:48,570 --> 01:37:50,340
就是这个缓冲区

2001
01:37:50,520 --> 01:37:54,960
缓冲区那个就这样

2002
01:37:55,140 --> 01:37:56,040
比如说那个

2003
01:37:57,300 --> 01:38:01,320
1K的1K的这么一个缓冲区然后呢

2004
01:38:01,350 --> 01:38:02,610
我们要干什么

2005
01:38:02,700 --> 01:38:04,110
要要open

2006
01:38:04,110 --> 01:38:06,300
我我就掉那个C语言的

2007
01:38:06,480 --> 01:38:09,810
调那个C那个C语言的那个API

2008
01:38:09,810 --> 01:38:11,460
相当于咱们那个file open啊

2009
01:38:12,540 --> 01:38:13,920
那我们接着呢

2010
01:38:13,950 --> 01:38:16,770
就是就是那个一个指针

2011
01:38:16,860 --> 01:38:17,400
对吧

2012
01:38:17,400 --> 01:38:19,140
我们得有一个指针

2013
01:38:19,140 --> 01:38:21,030
差被他

2014
01:38:21,620 --> 01:38:23,750
IE这个一个指针

2015
01:38:27,030 --> 01:38:29,400
这个指针干什么呢

2016
01:38:29,400 --> 01:38:31,650
Openopen open那个

2017
01:38:32,770 --> 01:38:33,100
是

2018
01:38:34,250 --> 01:38:37,820
File name来接着干什么

2019
01:38:37,880 --> 01:38:43,610
接着我们要把那个数据复制到这个八分里

2020
01:38:44,900 --> 01:38:47,870
把这个读出来的数据复制到这个八分里边

2021
01:38:48,050 --> 01:38:48,950
那怎么复制呢

2022
01:38:49,040 --> 01:38:50,270
用妈妈copy

2023
01:38:50,300 --> 01:38:50,900
妈妈copy

2024
01:38:56,350 --> 01:38:57,190
这是复制

2025
01:38:57,490 --> 01:39:04,660
再在内存之间进行复制圆圆圆地址目的地址

2026
01:39:04,660 --> 01:39:05,920
就是这个八分

2027
01:39:06,130 --> 01:39:07,660
那么复制多大呢

2028
01:39:07,750 --> 01:39:10,630
100这个1024A1K的

2029
01:39:11,640 --> 01:39:14,010
1K的这个1K的字节呢

2030
01:39:14,220 --> 01:39:14,880
之后呢

2031
01:39:14,940 --> 01:39:17,370
在那个在那个把它

2032
01:39:18,570 --> 01:39:21,870
显示到这个显示器上去对吧

2033
01:39:21,900 --> 01:39:25,110
把这个buff的内容把它输出到显示器上去

2034
01:39:25,230 --> 01:39:26,310
这个代码

2035
01:39:26,520 --> 01:39:27,990
这种代码就是啥呀

2036
01:39:28,050 --> 01:39:28,530
就是

2037
01:39:29,500 --> 01:39:32,260
就是这个同步阻塞是

2038
01:39:32,260 --> 01:39:33,670
那么他在做的时候

2039
01:39:33,760 --> 01:39:35,050
他在干活的时候

2040
01:39:35,110 --> 01:39:36,370
他再怎么干

2041
01:39:36,520 --> 01:39:39,100
你在open的时候

2042
01:39:39,100 --> 01:39:40,120
Open错了

2043
01:39:41,450 --> 01:39:42,350
不不是这样

2044
01:39:42,560 --> 01:39:43,400
应该是open

2045
01:39:43,400 --> 01:39:45,740
然后那个

2046
01:39:46,610 --> 01:39:48,650
返回一个那个巨屏

2047
01:39:55,010 --> 01:39:56,510
返回一个文件句柄

2048
01:39:56,570 --> 01:39:57,410
然后呢

2049
01:39:57,410 --> 01:39:59,630
在red在在那个read

2050
01:39:59,630 --> 01:40:00,710
这才是读

2051
01:40:00,710 --> 01:40:02,690
刚才只是打开文件

2052
01:40:03,350 --> 01:40:04,370
那是那个

2053
01:40:11,030 --> 01:40:11,840
简单的

2054
01:40:11,870 --> 01:40:13,340
简单简单的伪代码了

2055
01:40:13,580 --> 01:40:15,860
这这是那个这是那个完整的流程

2056
01:40:16,070 --> 01:40:17,660
那么这个流程

2057
01:40:18,610 --> 01:40:21,370
首先先执行这一行

2058
01:40:21,400 --> 01:40:22,750
然后执行这一行

2059
01:40:22,750 --> 01:40:27,580
这两行执行在在哪执行在这儿在这儿

2060
01:40:28,080 --> 01:40:28,920
对吧

2061
01:40:28,920 --> 01:40:30,840
前面的代码在流程在那儿

2062
01:40:30,930 --> 01:40:33,480
然后然后接着干啥呀

2063
01:40:33,570 --> 01:40:36,450
接着我们就该瑞的了

2064
01:40:37,200 --> 01:40:38,130
就要读了

2065
01:40:38,220 --> 01:40:39,330
就要读这个文件

2066
01:40:39,510 --> 01:40:41,010
那读文件的时候

2067
01:40:41,960 --> 01:40:44,360
这个函数瑞的函数

2068
01:40:44,480 --> 01:40:46,220
他干活的时间

2069
01:40:46,880 --> 01:40:47,720
是这个时间

2070
01:40:49,000 --> 01:40:52,240
那是内核在干活的一个时间

2071
01:40:52,810 --> 01:40:54,220
那么你的程序

2072
01:40:54,760 --> 01:40:55,630
在干什么

2073
01:40:56,390 --> 01:40:57,770
他在等着

2074
01:40:58,190 --> 01:40:59,030
他在等着

2075
01:40:59,060 --> 01:41:01,280
这段时间你什么也干不了

2076
01:41:01,640 --> 01:41:02,300
他在

2077
01:41:02,950 --> 01:41:06,520
等着你这个返回值返回来

2078
01:41:07,000 --> 01:41:13,030
等他做完了返回值才有这一段时间都是在等这个

2079
01:41:13,580 --> 01:41:15,200
等他执行完

2080
01:41:15,260 --> 01:41:16,250
这是阻塞

2081
01:41:16,670 --> 01:41:19,310
等这题的函数执行完了

2082
01:41:19,520 --> 01:41:21,110
等这个函数执行完了

2083
01:41:21,230 --> 01:41:24,410
接下来我们进行数据复制

2084
01:41:24,410 --> 01:41:25,880
然后把数据呢

2085
01:41:25,880 --> 01:41:26,480
把它给

2086
01:41:28,150 --> 01:41:30,610
然后把它给那个

2087
01:41:31,660 --> 01:41:33,370
输出到显示器上

2088
01:41:33,490 --> 01:41:38,560
这个这两个代码他在哪儿执行在在后边执行

2089
01:41:38,950 --> 01:41:39,640
在这儿执行

2090
01:41:40,860 --> 01:41:42,750
只要是那个函数

2091
01:41:42,930 --> 01:41:47,280
只要是这个函数瑞的函数你执行不完

2092
01:41:47,400 --> 01:41:48,510
换句话说

2093
01:41:48,750 --> 01:41:52,350
只要内核儿他的活儿没干完

2094
01:41:52,530 --> 01:41:55,350
你的程序就得在那儿停着

2095
01:41:56,370 --> 01:41:57,600
等着

2096
01:41:57,600 --> 01:41:59,520
这叫同步阻塞模型

2097
01:42:00,440 --> 01:42:03,440
这种是咱们最简单的

2098
01:42:03,470 --> 01:42:05,090
直接就顺下来了

2099
01:42:05,360 --> 01:42:10,580
直接直接就是一个就是一个那个这个顺序流程

2100
01:42:11,440 --> 01:42:11,980
对吧

2101
01:42:12,250 --> 01:42:17,080
咱们程序的三种基本三种基本结构大家还记得吗

2102
01:42:17,700 --> 01:42:18,660
制基础

2103
01:42:19,240 --> 01:42:20,770
程序的三种基本结构

2104
01:42:21,340 --> 01:42:22,660
顺序流程

2105
01:42:23,280 --> 01:42:23,910
还有呢

2106
01:42:23,940 --> 01:42:27,510
条件分支条件判断刘条件分支流程

2107
01:42:27,720 --> 01:42:31,830
还有一个是循环三种基本三种基本结构

2108
01:42:32,440 --> 01:42:32,920
对吧

2109
01:42:33,010 --> 01:42:33,550
哈哈

2110
01:42:33,730 --> 01:42:35,410
这就就顺序来

2111
01:42:35,440 --> 01:42:37,030
就顺就顺下来

2112
01:42:37,180 --> 01:42:38,200
最简单的一种

2113
01:42:38,800 --> 01:42:42,100
那咱们弄的JS里边儿提供的API

2114
01:42:43,230 --> 01:42:44,430
Fell open啊

2115
01:42:44,460 --> 01:42:46,680
还有那个之后read

2116
01:42:46,680 --> 01:42:48,780
Fairy fair open呢

2117
01:42:48,780 --> 01:42:52,380
直接把那个read兜兜兜兜风庄去了

2118
01:42:52,500 --> 01:42:53,370
都封装进去了

2119
01:42:53,700 --> 01:42:54,930
包括打开文件

2120
01:42:54,930 --> 01:42:55,620
读文件

2121
01:42:55,620 --> 01:42:58,050
然后然后在那个关闭文件

2122
01:42:58,080 --> 01:43:00,900
这三个步骤它全都封装到哪一个函数里边了

2123
01:43:02,060 --> 01:43:02,960
那个函数就是

2124
01:43:03,870 --> 01:43:04,770
同步阻塞式的

2125
01:43:06,010 --> 01:43:06,820
这是最简单

2126
01:43:07,060 --> 01:43:08,830
那么这种模式

2127
01:43:09,040 --> 01:43:12,040
这种模式它的好处

2128
01:43:12,890 --> 01:43:13,640
是什么呢

2129
01:43:13,760 --> 01:43:16,610
好处就是省CPU

2130
01:43:16,760 --> 01:43:19,730
当我们的程序在这儿等着的时候

2131
01:43:19,760 --> 01:43:22,070
CPU根本不执行他的代码

2132
01:43:22,650 --> 01:43:23,190
对吧

2133
01:43:23,250 --> 01:43:27,360
CPU它它只需要去维护这个内核的代码

2134
01:43:27,360 --> 01:43:29,100
只需要跑内核代码就行了

2135
01:43:29,520 --> 01:43:33,240
当我们的CP当当这个程序代码在执行的时候

2136
01:43:33,420 --> 01:43:37,140
CPU除了要跑这个程序代码

2137
01:43:37,140 --> 01:43:38,970
还要跑内核代码的

2138
01:43:38,970 --> 01:43:40,530
要在这两个代码儿

2139
01:43:40,530 --> 01:43:44,550
这这这这两种代码之间来回切换的做任务吗

2140
01:43:44,980 --> 01:43:47,770
那你要是同步阻塞式了

2141
01:43:47,800 --> 01:43:49,690
只需要跑内核代码就行

2142
01:43:49,840 --> 01:43:52,630
不用管不用管那个程序

2143
01:43:52,660 --> 01:43:53,350
程序呢

2144
01:43:53,350 --> 01:43:55,240
程序代码暂时挂起了

2145
01:43:55,840 --> 01:43:57,940
在CPU角度上来说

2146
01:43:58,210 --> 01:44:00,340
它是高效的

2147
01:44:00,340 --> 01:44:01,540
它的效率比较高

2148
01:44:01,750 --> 01:44:02,500
那但是呢

2149
01:44:02,500 --> 01:44:04,540
对于程序来说那就惨了

2150
01:44:05,020 --> 01:44:05,590
对吧

2151
01:44:05,920 --> 01:44:08,440
他你读大文件读大文件

2152
01:44:08,680 --> 01:44:10,780
读大文件你就等着

2153
01:44:10,780 --> 01:44:12,130
一直读完了

2154
01:44:12,130 --> 01:44:13,990
或或者说那个内存耗尽

2155
01:44:13,990 --> 01:44:16,180
然后你才有一个反应

2156
01:44:16,300 --> 01:44:19,780
对于这个用户体验是不好的

2157
01:44:19,840 --> 01:44:20,500
然后

2158
01:44:21,640 --> 01:44:22,150
然后呢

2159
01:44:22,150 --> 01:44:23,950
咱们是第二种

2160
01:44:24,040 --> 01:44:27,370
第二种是同步非阻塞

2161
01:44:27,370 --> 01:44:28,750
同步非阻塞

2162
01:44:28,960 --> 01:44:31,990
那么同步非阻塞怎么回事儿呢

2163
01:44:32,110 --> 01:44:33,640
先看这个非阻塞

2164
01:44:33,760 --> 01:44:37,210
非阻塞咱们前面给大家解释的

2165
01:44:37,360 --> 01:44:38,560
给大家怎么解释的

2166
01:44:39,120 --> 01:44:42,660
你a让B去去打印资料

2167
01:44:42,930 --> 01:44:44,640
然后B在打印的时候

2168
01:44:44,730 --> 01:44:45,810
A就问这个B

2169
01:44:45,810 --> 01:44:46,800
你打印多少啦

2170
01:44:47,880 --> 01:44:49,170
然后B就告诉我a

2171
01:44:49,350 --> 01:44:51,900
然后一直到最后打印完了

2172
01:44:51,900 --> 01:44:53,100
把结果给

2173
01:44:53,100 --> 01:44:54,180
这就是非阻塞

2174
01:44:54,510 --> 01:44:56,700
那这个模式

2175
01:44:56,730 --> 01:44:59,220
同步非阻塞

2176
01:44:59,220 --> 01:45:03,090
同意和刚才的和刚才的这个流程是一样的

2177
01:45:03,420 --> 01:45:05,880
那么这个a让B去打印的时候

2178
01:45:06,090 --> 01:45:08,760
A他干不干别的事情不干

2179
01:45:09,220 --> 01:45:10,840
他仍然是在这儿等着

2180
01:45:10,900 --> 01:45:12,820
但是等的时候他也没闲着

2181
01:45:13,820 --> 01:45:14,480
他没闲着

2182
01:45:14,480 --> 01:45:15,110
他在干什么

2183
01:45:15,110 --> 01:45:17,300
他在问问这个状态

2184
01:45:17,360 --> 01:45:18,920
这是同步非阻塞

2185
01:45:19,520 --> 01:45:21,500
那同步阻塞呢

2186
01:45:21,650 --> 01:45:23,210
A让B去打印

2187
01:45:23,480 --> 01:45:24,860
然后B打印的时候

2188
01:45:24,860 --> 01:45:25,790
A什么也不干

2189
01:45:26,000 --> 01:45:27,320
就在那儿死等

2190
01:45:27,320 --> 01:45:28,430
他也不干别的活儿

2191
01:45:28,700 --> 01:45:31,880
一直到B把这个打印好的文稿拿回来

2192
01:45:31,910 --> 01:45:33,530
A才继续处理

2193
01:45:33,560 --> 01:45:34,280
处理这个文字

2194
01:45:34,640 --> 01:45:35,750
处理这个文档

2195
01:45:35,750 --> 01:45:37,640
这这是这是同步阻塞

2196
01:45:38,690 --> 01:45:41,630
可可见那个这种效率

2197
01:45:41,630 --> 01:45:43,370
对于程序的效率来说

2198
01:45:43,550 --> 01:45:45,680
对于程序来说效率是低的

2199
01:45:46,280 --> 01:45:48,410
那么这个同步非阻塞呢

2200
01:45:48,650 --> 01:45:51,260
我们接着看她也试一下顺下来的

2201
01:45:51,440 --> 01:45:52,730
他也是一下顺序来的

2202
01:45:53,260 --> 01:45:54,850
他也是只干这件事儿

2203
01:45:55,950 --> 01:45:57,570
那他他只干这件事儿

2204
01:45:57,720 --> 01:45:59,610
那他干这个事儿怎么

2205
01:46:00,680 --> 01:46:01,520
他怎么干呢

2206
01:46:01,970 --> 01:46:03,080
先看

2207
01:46:03,880 --> 01:46:06,970
先把这个工作交给了内核

2208
01:46:07,180 --> 01:46:09,490
内核去去读了

2209
01:46:09,490 --> 01:46:11,230
内核去读读数据了

2210
01:46:11,470 --> 01:46:12,580
内核读数据

2211
01:46:12,580 --> 01:46:13,420
然后呢

2212
01:46:13,990 --> 01:46:15,700
他这儿马上返回

2213
01:46:16,510 --> 01:46:18,850
这个函数马上返回

2214
01:46:19,950 --> 01:46:21,990
那这是异步函数

2215
01:46:22,140 --> 01:46:24,960
一这个这个非阻塞函数

2216
01:46:24,960 --> 01:46:26,790
非主非阻塞实现的这个函数

2217
01:46:27,030 --> 01:46:28,230
你让他干活

2218
01:46:28,560 --> 01:46:29,790
他说好累

2219
01:46:30,550 --> 01:46:31,060
对吧

2220
01:46:31,180 --> 01:46:33,130
他马上马上就干了

2221
01:46:33,310 --> 01:46:35,170
干的时候好累

2222
01:46:35,200 --> 01:46:36,460
这告诉你我在干了

2223
01:46:37,280 --> 01:46:39,920
然后收到这个

2224
01:46:40,100 --> 01:46:41,150
知道你在干了

2225
01:46:41,180 --> 01:46:41,630
对吧

2226
01:46:41,870 --> 01:46:44,240
知道你在干接下来

2227
01:46:45,300 --> 01:46:46,410
接下来呢

2228
01:46:46,620 --> 01:46:49,260
接下来这个程序

2229
01:46:49,880 --> 01:46:51,980
想知道这个做完没有

2230
01:46:54,220 --> 01:46:55,540
想知道做完没有

2231
01:46:55,540 --> 01:46:58,240
然后他去问状态

2232
01:46:58,570 --> 01:47:00,070
问状态没有做完

2233
01:47:00,160 --> 01:47:01,720
返回没做完的状态

2234
01:47:02,200 --> 01:47:03,700
如果说他做完了呢

2235
01:47:03,940 --> 01:47:06,670
做完了把结果给你返回来

2236
01:47:07,850 --> 01:47:08,900
把结果返回来

2237
01:47:09,290 --> 01:47:10,760
那么这样

2238
01:47:10,880 --> 01:47:11,450
这样

2239
01:47:13,730 --> 01:47:16,310
这种模式有一个好处

2240
01:47:16,580 --> 01:47:17,600
好处是什么

2241
01:47:17,930 --> 01:47:20,780
好处就是你让他干活

2242
01:47:21,020 --> 01:47:22,820
他这个函数马上返回来了

2243
01:47:23,000 --> 01:47:24,410
返回来以后

2244
01:47:25,410 --> 01:47:27,330
你这个时间可以干别的

2245
01:47:27,390 --> 01:47:28,980
你可以在这儿见缝插针

2246
01:47:29,790 --> 01:47:31,410
那可以在这儿见缝插针

2247
01:47:33,080 --> 01:47:34,100
你问一下

2248
01:47:34,370 --> 01:47:36,080
你问一下发现没做完

2249
01:47:36,260 --> 01:47:37,700
你可以干干会儿别的

2250
01:47:38,180 --> 01:47:40,250
干会儿别的你突然想起来了

2251
01:47:40,250 --> 01:47:41,780
那那个文件你给我打完了吗

2252
01:47:41,780 --> 01:47:42,560
还没呢

2253
01:47:42,560 --> 01:47:44,180
你在干会别的

2254
01:47:44,240 --> 01:47:45,710
你那个喝口水

2255
01:47:45,740 --> 01:47:46,850
抽根烟

2256
01:47:46,940 --> 01:47:48,260
聊会儿天儿

2257
01:47:48,260 --> 01:47:48,560
对吧

2258
01:47:48,560 --> 01:47:50,270
摸会儿鱼对吧

2259
01:47:50,930 --> 01:47:55,340
你什么时候这个回来了你问的时候做完了

2260
01:47:55,340 --> 01:47:55,940
做完了

2261
01:47:55,940 --> 01:47:57,080
那你就不要摸鱼了

2262
01:47:57,800 --> 01:47:59,870
你就在处理这个返回来的数据

2263
01:48:01,600 --> 01:48:03,070
你反你你去处理

2264
01:48:03,340 --> 01:48:04,510
那不做别的

2265
01:48:04,510 --> 01:48:12,280
你可以做别的也这个同步非阻塞同步同步非阻塞你是可以做别的

2266
01:48:12,640 --> 01:48:15,250
同步阻塞你是做不了别的

2267
01:48:15,820 --> 01:48:19,300
同步阻塞你得在那儿等着刚才咱们写的这个代码

2268
01:48:19,860 --> 01:48:20,370
对吧

2269
01:48:20,610 --> 01:48:21,840
刚才写的这个代码

2270
01:48:22,260 --> 01:48:23,850
这个函数

2271
01:48:23,970 --> 01:48:25,590
这个读函数

2272
01:48:25,890 --> 01:48:27,270
读取这个函数

2273
01:48:27,300 --> 01:48:28,920
它再返回来之前

2274
01:48:29,160 --> 01:48:31,350
你是执行不了后边的代码的

2275
01:48:32,470 --> 01:48:33,040
对吧

2276
01:48:34,230 --> 01:48:38,310
这是同步阻塞是那同步非阻塞式呢

2277
01:48:38,550 --> 01:48:40,170
同步非阻塞式

2278
01:48:40,320 --> 01:48:42,390
仍然是这个前面这个模式

2279
01:48:44,250 --> 01:48:49,800
咱们在这儿那个再写一个同步同步非阻塞式

2280
01:48:49,980 --> 01:48:53,190
同步非阻塞是这样读的时候

2281
01:48:53,750 --> 01:48:57,290
实际上它它表示的他他是一个什么

2282
01:48:57,530 --> 01:48:58,580
它是一个状态

2283
01:49:00,250 --> 01:49:01,480
他是一个状态

2284
01:49:04,480 --> 01:49:05,260
他是个状态

2285
01:49:05,470 --> 01:49:06,940
然后干啥呀

2286
01:49:07,240 --> 01:49:09,910
然后判断

2287
01:49:10,120 --> 01:49:12,970
然后判断判断啥呀

2288
01:49:13,090 --> 01:49:15,610
判断这个studiOS

2289
01:49:17,180 --> 01:49:18,680
判断这个死第六次

2290
01:49:19,130 --> 01:49:20,600
判断死第六次

2291
01:49:21,020 --> 01:49:21,830
然后

2292
01:49:23,370 --> 01:49:27,300
做完了他就去调那个做完的事儿

2293
01:49:27,390 --> 01:49:29,790
如果说没做完

2294
01:49:29,790 --> 01:49:30,360
那好

2295
01:49:30,450 --> 01:49:32,280
我这儿干点儿别的

2296
01:49:32,280 --> 01:49:33,990
我这儿写点儿恶

2297
01:49:35,000 --> 01:49:36,620
写点儿别的吧

2298
01:49:47,880 --> 01:49:50,790
可以可以写个进度条对吧

2299
01:49:50,820 --> 01:49:51,930
这可以写个进度条

2300
01:49:51,960 --> 01:49:53,400
然后在干什么

2301
01:49:53,550 --> 01:49:54,540
然后

2302
01:49:54,570 --> 01:49:57,510
然后再接着问死第六次

2303
01:49:57,540 --> 01:49:58,620
然后再接着问

2304
01:50:05,860 --> 01:50:06,550
问啥呀

2305
01:50:06,580 --> 01:50:10,180
问状态问问问问这个状态

2306
01:50:10,570 --> 01:50:12,490
然后再去判断

2307
01:50:12,640 --> 01:50:15,100
然后再去再去这样

2308
01:50:15,660 --> 01:50:15,870
A

2309
01:50:15,960 --> 01:50:16,590
记录调

2310
01:50:16,920 --> 01:50:18,600
然后不断的重复这个过程

2311
01:50:19,440 --> 01:50:19,920
对吧

2312
01:50:20,130 --> 01:50:21,570
不断的重复这个过程

2313
01:50:22,050 --> 01:50:24,510
那什么时候什么时候

2314
01:50:25,350 --> 01:50:26,070
读完了

2315
01:50:26,220 --> 01:50:28,290
接着再再去考品

2316
01:50:28,710 --> 01:50:29,730
那你不断的重复

2317
01:50:29,730 --> 01:50:31,560
你这儿不能写一串

2318
01:50:31,560 --> 01:50:34,470
你不能写一串这个这东西是吧

2319
01:50:34,500 --> 01:50:37,020
你不能写一串这个同同样的代码

2320
01:50:37,080 --> 01:50:37,920
那怎么办

2321
01:50:38,040 --> 01:50:40,170
循环背循环背

2322
01:50:41,320 --> 01:50:42,070
循环呗

2323
01:50:51,820 --> 01:50:54,220
如果这个是这个状态

2324
01:50:54,250 --> 01:50:55,960
它是没有读完的状态

2325
01:50:56,560 --> 01:50:57,070
对吧

2326
01:50:57,310 --> 01:50:59,860
没有读完的状态干什么

2327
01:51:00,010 --> 01:51:00,940
在这儿

2328
01:51:13,850 --> 01:51:14,900
在这儿写进度条

2329
01:51:14,900 --> 01:51:15,260
玩儿

2330
01:51:16,640 --> 01:51:17,810
没有读完

2331
01:51:18,140 --> 01:51:19,610
那就在这儿写进度条

2332
01:51:19,910 --> 01:51:20,840
读完了

2333
01:51:21,810 --> 01:51:22,530
写后边儿

2334
01:51:23,950 --> 01:51:26,440
进度条就就就就就不做了吧

2335
01:51:26,620 --> 01:51:32,530
然后然后把它输出出来这个模式这个模式来

2336
01:51:33,100 --> 01:51:34,840
同步非阻塞

2337
01:51:34,840 --> 01:51:36,550
你在等他的时候

2338
01:51:36,670 --> 01:51:40,030
你可以干点儿别的这这这这这

2339
01:51:40,830 --> 01:51:42,690
这么个这么个流程

2340
01:51:43,300 --> 01:51:43,810
哈哈

2341
01:51:43,810 --> 01:51:44,440
对吧

2342
01:51:44,650 --> 01:51:46,900
这么个流程

2343
01:51:53,960 --> 01:51:56,840
那么这个流程对于

2344
01:51:59,180 --> 01:51:59,540
咳

2345
01:52:00,180 --> 01:52:01,290
这个流程

2346
01:52:01,830 --> 01:52:03,720
对于CPU来说

2347
01:52:03,750 --> 01:52:05,640
对于CPU来说他是低效的

2348
01:52:06,640 --> 01:52:07,090
对吧

2349
01:52:07,240 --> 01:52:10,450
他要反复的在内核空间

2350
01:52:11,530 --> 01:52:13,930
和用户空间之间

2351
01:52:14,690 --> 01:52:15,830
来切换

2352
01:52:18,000 --> 01:52:20,190
那这种低效

2353
01:52:24,950 --> 01:52:26,810
但是对于程序来说呢

2354
01:52:26,960 --> 01:52:28,520
程序它可以干点别的

2355
01:52:30,140 --> 01:52:31,160
他可以干别的了

2356
01:52:31,220 --> 01:52:35,960
然后接下来接下来就是异步阻塞

2357
01:52:36,350 --> 01:52:38,570
那接下来是异步阻塞

2358
01:52:38,840 --> 01:52:43,820
异步阻塞就是调用这个阻塞式的IOIO接口

2359
01:52:44,700 --> 01:52:48,750
那一部阻塞调用阻塞式IO接口

2360
01:52:49,050 --> 01:52:51,360
那么怎么去调呢

2361
01:52:51,420 --> 01:52:54,480
一不这个时候操作模式是一不了

2362
01:52:54,720 --> 01:52:56,220
接口是阻塞的

2363
01:52:56,490 --> 01:52:57,930
那怎么弄呢

2364
01:52:58,140 --> 01:53:01,230
这个时候你必须干啥呀来

2365
01:53:02,400 --> 01:53:04,290
一不就代表着

2366
01:53:04,410 --> 01:53:05,280
代表折

2367
01:53:05,340 --> 01:53:07,380
你把这个工作交给他

2368
01:53:07,680 --> 01:53:11,310
交给他以后你可以放心的去干别的

2369
01:53:11,860 --> 01:53:13,120
放心的干别的

2370
01:53:14,010 --> 01:53:17,850
什么时候人这边儿事儿干完了

2371
01:53:18,000 --> 01:53:19,230
过来告诉你

2372
01:53:20,230 --> 01:53:22,240
过来告诉你干完了

2373
01:53:22,330 --> 01:53:24,910
然后你把这个事儿放下之后

2374
01:53:25,740 --> 01:53:26,700
你再去处理

2375
01:53:28,350 --> 01:53:29,880
这这有点儿像

2376
01:53:30,980 --> 01:53:31,940
这有点儿像什么

2377
01:53:31,940 --> 01:53:33,740
给你配了个秘书

2378
01:53:34,660 --> 01:53:35,950
给你配个秘书

2379
01:53:35,980 --> 01:53:37,180
秘书干什么

2380
01:53:37,390 --> 01:53:43,060
秘书负责帮着你去等结果

2381
01:53:44,640 --> 01:53:47,250
秘书负责帮你去等结果

2382
01:53:47,910 --> 01:53:48,990
你干什么

2383
01:53:49,140 --> 01:53:50,040
你去干别的

2384
01:53:51,430 --> 01:53:54,370
比如说你这个aa

2385
01:53:55,310 --> 01:53:56,450
要去打文件

2386
01:53:56,600 --> 01:53:57,380
然后呢

2387
01:53:57,410 --> 01:53:58,700
把这个文件

2388
01:53:59,380 --> 01:54:02,380
告诉告诉CC是他的秘书

2389
01:54:02,740 --> 01:54:03,760
告诉C干什么

2390
01:54:03,820 --> 01:54:06,730
把这个文件告让B去打印一下

2391
01:54:07,150 --> 01:54:08,620
他打完了你告诉我

2392
01:54:09,770 --> 01:54:11,420
然后这个B在打印的时候

2393
01:54:11,420 --> 01:54:12,650
他就闷头打

2394
01:54:12,650 --> 01:54:15,470
这个秘书也不问什么时候打完了

2395
01:54:15,770 --> 01:54:20,090
把这个结果告诉CC再告诉AA

2396
01:54:20,240 --> 01:54:23,960
那么a把这个活儿就相当于

2397
01:54:23,960 --> 01:54:27,740
交给交给交给他们俩辣交给他们俩了

2398
01:54:28,070 --> 01:54:30,410
让这个C去监督B

2399
01:54:31,650 --> 01:54:32,640
B干完了

2400
01:54:32,640 --> 01:54:34,800
C把结果给a na

2401
01:54:34,890 --> 01:54:38,640
那么C怎么把结果给压回调回调

2402
01:54:39,380 --> 01:54:40,700
那C去回掉a

2403
01:54:42,440 --> 01:54:44,480
这个时候这这个模式是什么

2404
01:54:44,660 --> 01:54:46,400
A就告诉C是吧

2405
01:54:46,430 --> 01:54:47,930
A告诉他的秘书说

2406
01:54:47,930 --> 01:54:50,690
你把这个文档交给B去打印

2407
01:54:50,690 --> 01:54:52,550
他打印完了以后你告诉我

2408
01:54:53,380 --> 01:54:56,050
你通知我通知a的时候

2409
01:54:56,230 --> 01:54:57,520
这就是回调

2410
01:54:57,520 --> 01:55:00,550
通过回调来通过回调来来通知

2411
01:55:00,790 --> 01:55:02,680
那么他在没有回调的时候呢

2412
01:55:02,710 --> 01:55:03,880
没有回调的时候

2413
01:55:03,880 --> 01:55:05,830
A可以干别的

2414
01:55:05,830 --> 01:55:07,120
可以喝点茶

2415
01:55:07,120 --> 01:55:08,290
见见客户啥的

2416
01:55:08,560 --> 01:55:09,850
那文件拿过来了

2417
01:55:09,850 --> 01:55:12,370
他立刻就停止手头的活

2418
01:55:12,400 --> 01:55:14,650
马上去马上去处理这个文件

2419
01:55:15,680 --> 01:55:18,110
这叫异步阻塞

2420
01:55:18,350 --> 01:55:25,910
那么这个异步阻塞这套这套IO模型在Linux思娜在Linux里边什么样呢

2421
01:55:26,270 --> 01:55:27,530
在Linux里边儿

2422
01:55:31,910 --> 01:55:35,690
异步模型在Linux里边儿要依赖一个

2423
01:55:36,820 --> 01:55:37,600
系统调用

2424
01:55:38,050 --> 01:55:38,770
哈哈

2425
01:55:38,890 --> 01:55:40,270
依赖一个系统调用

2426
01:55:40,270 --> 01:55:41,710
这个系统调用叫什么

2427
01:55:42,040 --> 01:55:42,790
他的函

2428
01:55:42,850 --> 01:55:45,070
这个函数名就叫select

2429
01:55:46,380 --> 01:55:47,220
他叫select

2430
01:55:47,250 --> 01:55:47,970
然后呢

2431
01:55:47,970 --> 01:55:50,910
Select它去再颓掉你的那个程序

2432
01:55:50,910 --> 01:55:52,650
这个select就相当于这个秘书

2433
01:55:53,070 --> 01:55:54,630
那么这个模式

2434
01:55:54,660 --> 01:55:57,210
异步阻塞模式

2435
01:55:57,330 --> 01:55:59,760
它也相对简单

2436
01:56:00,400 --> 01:56:01,690
也相对简单

2437
01:56:03,160 --> 01:56:03,760
但是呢

2438
01:56:03,760 --> 01:56:04,810
它有一个问题

2439
01:56:04,810 --> 01:56:05,770
问题是什么

2440
01:56:06,010 --> 01:56:10,480
它的它的那个并发量不大

2441
01:56:11,000 --> 01:56:12,140
并发数的

2442
01:56:12,970 --> 01:56:15,100
那你交给这个秘书

2443
01:56:15,100 --> 01:56:16,570
一个活在交给他一个蜜

2444
01:56:16,570 --> 01:56:19,000
一个活在交给一个活儿这个秘书

2445
01:56:19,000 --> 01:56:20,080
他就一个人

2446
01:56:20,110 --> 01:56:21,250
他能管的事儿

2447
01:56:21,430 --> 01:56:22,480
她能管的事儿

2448
01:56:23,560 --> 01:56:25,420
就那么几就那么点儿

2449
01:56:25,420 --> 01:56:26,350
他的精力有限

2450
01:56:26,530 --> 01:56:28,870
A select的这个秘书也一样

2451
01:56:28,870 --> 01:56:30,850
他最他的默认

2452
01:56:30,850 --> 01:56:33,340
它的默认并发数是多少个呢

2453
01:56:33,880 --> 01:56:34,690
1024个

2454
01:56:35,680 --> 01:56:39,550
Select默认能够帮你去管理的这个并发数是1.24个

2455
01:56:39,730 --> 01:56:43,930
也就是说它能够帮你最多帮你去管1024个这个爱屋任务

2456
01:56:44,260 --> 01:56:47,140
这他一不阻塞式模型适合做什么

2457
01:56:47,200 --> 01:56:50,140
适合做这种小病发的

2458
01:56:50,920 --> 01:56:53,890
这种小病发的这种IO任务

2459
01:56:53,890 --> 01:56:55,660
做一个简单小服务器

2460
01:56:55,660 --> 01:56:57,280
它它的那个上限

2461
01:56:57,460 --> 01:57:01,180
他地上限不超过不超过1000

2462
01:57:01,180 --> 01:57:01,960
这个时候呢

2463
01:57:03,450 --> 01:57:04,890
这个时候用select

2464
01:57:06,650 --> 01:57:08,030
那么高性能的

2465
01:57:08,920 --> 01:57:11,080
高性能的怎么去用

2466
01:57:11,440 --> 01:57:12,790
用一碰

2467
01:57:13,000 --> 01:57:14,170
用这个e po模式

2468
01:57:14,380 --> 01:57:16,150
这个一碰模式它是分层的

2469
01:57:17,410 --> 01:57:18,700
这一套模式分层的

2470
01:57:18,700 --> 01:57:22,150
他的所管理的并发数非常非常高

2471
01:57:22,150 --> 01:57:27,670
可以可以达到上万实际上别看select的默认的那个病发

2472
01:57:27,790 --> 01:57:31,270
默认的那个能够并发这个文件操作是1.24

2473
01:57:31,270 --> 01:57:32,890
实际上他还到不了1.24

2474
01:57:33,100 --> 01:57:40,660
他最多她最多维护1024个这个IOIO文件的这个文件句柄

2475
01:57:41,830 --> 01:57:44,680
也就是说最多维护11024个任务

2476
01:57:44,950 --> 01:57:45,940
但是他称

2477
01:57:46,150 --> 01:57:47,740
但是他未必能够撑得住

2478
01:57:48,660 --> 01:57:51,000
他的性他的性能未必能够保证

2479
01:57:51,030 --> 01:57:52,230
而这个e po呢

2480
01:57:52,320 --> 01:57:55,560
它可以它可以保证上万个并发

2481
01:57:55,590 --> 01:57:56,850
而且性能能够保证

2482
01:57:56,970 --> 01:57:59,070
因为一碰里边它是有缓存的

2483
01:57:59,430 --> 01:58:01,890
而这个select里边它它它没有缓存

2484
01:58:01,950 --> 01:58:04,140
它直接就是一个一个回调

2485
01:58:04,170 --> 01:58:06,900
一个简单回调只要数据来了

2486
01:58:06,900 --> 01:58:07,680
他就给你回掉

2487
01:58:07,920 --> 01:58:09,060
这我的秘书

2488
01:58:09,060 --> 01:58:10,680
他可不管你忙不忙

2489
01:58:10,680 --> 01:58:11,280
只要回来

2490
01:58:11,280 --> 01:58:12,360
他就他就给你回掉

2491
01:58:12,690 --> 01:58:15,120
你要你这儿要特别忙的秘书

2492
01:58:15,390 --> 01:58:20,160
他可能会把这个文件在暂时给存一会儿对吧

2493
01:58:20,160 --> 01:58:22,560
这这这这这这就是那个缓存

2494
01:58:22,800 --> 01:58:24,090
这就是缓存的那个概念

2495
01:58:26,570 --> 01:58:27,830
这是异步阻塞

2496
01:58:27,860 --> 01:58:32,060
异步阻塞那是和小病发的这个任务

2497
01:58:34,590 --> 01:58:36,180
那么最后一种呢

2498
01:58:36,180 --> 01:58:38,040
这是四种基本模型里边

2499
01:58:38,040 --> 01:58:42,120
最后一种是异步非阻塞异步非阻塞

2500
01:58:42,330 --> 01:58:45,090
那么异步非阻塞它

2501
01:58:45,620 --> 01:58:46,670
是怎么回事儿呢

2502
01:58:47,030 --> 01:58:49,730
他是多任务处理

2503
01:58:50,800 --> 01:58:54,340
多任务处理怎么叫多任务处理

2504
01:58:54,610 --> 01:58:56,230
专人办专事儿

2505
01:58:57,010 --> 01:58:58,120
专人办专事

2506
01:58:58,240 --> 01:59:01,150
怎么专人怎么专人办专事呢

2507
01:59:01,450 --> 01:59:03,970
比如说那比如说我要读文件

2508
01:59:05,090 --> 01:59:07,730
读文件的时候说把这个

2509
01:59:08,570 --> 01:59:10,190
把这个文件

2510
01:59:11,230 --> 01:59:16,030
交给专门读文件的那个那个进程或者是线程

2511
01:59:17,290 --> 01:59:18,190
然后呢

2512
01:59:18,550 --> 01:59:20,920
就等于把这个活交出去了之后

2513
01:59:20,920 --> 01:59:21,880
他这个进程

2514
01:59:22,030 --> 01:59:22,870
舅舅在这儿跑

2515
01:59:23,460 --> 01:59:25,290
然后再有读文件的时候

2516
01:59:25,380 --> 01:59:27,780
再交给另外一个人

2517
01:59:27,780 --> 01:59:28,920
再交给另外一个人

2518
01:59:29,130 --> 01:59:34,980
他再去打他他再去打文件你有比如说你有三份文件去打对吧

2519
01:59:35,010 --> 01:59:36,420
你就交给三个人去打

2520
01:59:37,320 --> 01:59:38,100
交给三个人

2521
01:59:38,220 --> 01:59:39,390
这就相当于

2522
01:59:40,950 --> 01:59:41,970
帅出

2523
01:59:42,680 --> 01:59:43,640
三个进程

2524
01:59:49,070 --> 01:59:50,720
这就相当于甩出三个进程

2525
01:59:50,960 --> 01:59:53,030
而这个交代任务的这个人呢

2526
01:59:53,150 --> 01:59:54,920
就相当于主进程

2527
01:59:56,680 --> 01:59:58,210
他他就这么个玩法

2528
01:59:58,660 --> 02:00:00,550
那这种玩法

2529
02:00:00,670 --> 02:00:02,920
这种玩法那咱们

2530
02:00:04,000 --> 02:00:04,780
他叫什么呢

2531
02:00:04,780 --> 02:00:06,730
它有它还有一个名字

2532
02:00:06,820 --> 02:00:07,780
还有一个名字

2533
02:00:08,110 --> 02:00:10,240
这个名字叫AIO

2534
02:00:11,220 --> 02:00:15,810
这个叫AIOAIO这个模式

2535
02:00:15,810 --> 02:00:16,800
AIO这个模式

2536
02:00:17,070 --> 02:00:18,900
如果说你学过Java

2537
02:00:18,900 --> 02:00:19,560
学过Java

2538
02:00:19,680 --> 02:00:22,200
在Java里边儿那个tomcat

2539
02:00:22,560 --> 02:00:24,780
就是这个那个web服务器

2540
02:00:24,930 --> 02:00:27,210
Java的那个服务器tomcat

2541
02:00:29,630 --> 02:00:31,310
那个里边儿

2542
02:00:31,460 --> 02:00:33,410
后来就加上哎呀好

2543
02:00:33,410 --> 02:00:34,700
它它默认的

2544
02:00:35,120 --> 02:00:38,630
它默认的就是模式就是AIO啊

2545
02:00:38,970 --> 02:00:40,380
它里边有好多处理线程

2546
02:00:40,770 --> 02:00:42,780
一个线程负责你一个请求

2547
02:00:43,660 --> 02:00:44,350
他是这么个

2548
02:00:44,530 --> 02:00:45,370
他是这么个模式

2549
02:00:45,610 --> 02:00:48,100
后来汤姆开的这个这个模式

2550
02:00:48,340 --> 02:00:51,430
就就这个觉觉得性能很低

2551
02:00:51,550 --> 02:00:56,020
再做做个扎瓦Java后端的同学应该知道

2552
02:00:56,020 --> 02:00:58,150
他们看的并发量是很低的

2553
02:00:58,960 --> 02:00:59,230
对吧

2554
02:00:59,230 --> 02:01:01,750
过去那个tomcat并发量是很低的

2555
02:01:01,750 --> 02:01:03,850
尤其是TOMCAT5的时候

2556
02:01:03,850 --> 02:01:05,140
为什么呢

2557
02:01:05,290 --> 02:01:06,760
他又吃内存

2558
02:01:06,760 --> 02:01:07,690
并发量又低

2559
02:01:07,720 --> 02:01:09,970
就是因为它默认的就是这个ae I ou

2560
02:01:10,210 --> 02:01:11,050
后来呢

2561
02:01:11,050 --> 02:01:12,490
加了一个新机制

2562
02:01:12,490 --> 02:01:14,170
叫NIO

2563
02:01:14,290 --> 02:01:15,130
加了个NIO

2564
02:01:15,130 --> 02:01:17,470
那个NIO就相当于那个世界循环

2565
02:01:18,480 --> 02:01:20,070
它的这个性能一下就上来了

2566
02:01:20,880 --> 02:01:22,800
那么咱们这个node JS啊

2567
02:01:22,950 --> 02:01:26,820
Node JS那个世界循环就相当于这个NIO啊

2568
02:01:26,970 --> 02:01:29,700
还有那个安奈克斯

2569
02:01:29,700 --> 02:01:31,320
安吉next里边

2570
02:01:31,320 --> 02:01:33,150
他用的也是这个事件循环机制

2571
02:01:33,180 --> 02:01:33,750
同时呢

2572
02:01:33,750 --> 02:01:36,840
还用了这个这个多任务

2573
02:01:36,840 --> 02:01:42,090
它也是一种集群模式一个这个集群模式这么一个进程实例

2574
02:01:42,300 --> 02:01:44,130
他的每一个进程实例里边儿

2575
02:01:44,130 --> 02:01:45,900
它都有一个这个世界循环

2576
02:01:45,900 --> 02:01:49,230
这这这样最大限度地去利用这个CPU

2577
02:01:50,970 --> 02:01:52,140
这是异步非阻塞

2578
02:01:52,200 --> 02:01:52,920
然后呢

2579
02:01:52,920 --> 02:01:53,820
咱们接着

2580
02:01:53,820 --> 02:01:54,930
这是四种

2581
02:01:54,930 --> 02:01:55,980
这四种模式

2582
02:01:56,310 --> 02:01:59,370
这四种模式是四种基本模式

2583
02:01:59,400 --> 02:02:01,500
然后后边这个是select

2584
02:02:02,270 --> 02:02:05,240
就是那个异步阻塞是

2585
02:02:05,240 --> 02:02:09,440
异步阻塞式的这个这个更加这个更加详细的这个

2586
02:02:10,100 --> 02:02:11,900
更加详细的这个描述

2587
02:02:11,900 --> 02:02:12,500
这是select

2588
02:02:12,500 --> 02:02:17,210
这个刚刚才刚才也给大家那个顺便一块讲了

2589
02:02:17,270 --> 02:02:21,980
他的那个select最大的那个这个文件句柄数呢

2590
02:02:21,980 --> 02:02:23,330
就是1.24个

2591
02:02:24,110 --> 02:02:24,620
而且呢

2592
02:02:24,620 --> 02:02:26,930
他的姓他他的那个开销挺大的

2593
02:02:27,290 --> 02:02:28,910
他的那个性能开销挺大

2594
02:02:29,210 --> 02:02:32,810
所以做做那个小小规模并发用select

2595
02:02:32,960 --> 02:02:33,890
然后呢

2596
02:02:33,980 --> 02:02:35,630
最终终极解决方案

2597
02:02:36,180 --> 02:02:37,500
Linux里边的这个

2598
02:02:38,790 --> 02:02:40,290
大并发IO

2599
02:02:40,290 --> 02:02:42,060
终极解决方案就是一碰

2600
02:02:42,790 --> 02:02:44,620
一炮方案这个一炮

2601
02:02:45,480 --> 02:02:48,330
过去在Linux里边儿是要自己实现的

2602
02:02:48,330 --> 02:02:48,990
后来呢

2603
02:02:48,990 --> 02:02:49,800
把这个一碰

2604
02:02:49,890 --> 02:02:53,340
把他给把这个模式放到了内核当中

2605
02:02:54,530 --> 02:02:57,530
那么这个1PO它是分层的

2606
02:02:57,530 --> 02:02:58,700
一碰是分层的

2607
02:02:59,330 --> 02:03:01,730
那么这一块儿是这一块是内核

2608
02:03:03,000 --> 02:03:03,870
这个一泡

2609
02:03:03,900 --> 02:03:07,380
它在内核里面实现他这他这儿呢

2610
02:03:07,590 --> 02:03:10,110
有有这个套接字

2611
02:03:10,110 --> 02:03:11,310
还有什么定时器

2612
02:03:11,340 --> 02:03:14,430
有这个处理进程有处理进程

2613
02:03:14,460 --> 02:03:15,150
然后呢

2614
02:03:15,330 --> 02:03:16,980
它这里边分了好多模块

2615
02:03:16,980 --> 02:03:20,310
而这些模块各司其职各干各的

2616
02:03:20,310 --> 02:03:20,790
然后呢

2617
02:03:20,790 --> 02:03:22,350
有共同的缓存之后

2618
02:03:22,410 --> 02:03:23,460
内核这一块儿

2619
02:03:23,460 --> 02:03:24,960
通过这个一套API

2620
02:03:25,140 --> 02:03:28,350
像你的程序来向你的程序来提供

2621
02:03:28,380 --> 02:03:31,380
来提供那个来提供这个服务

2622
02:03:32,340 --> 02:03:36,390
那么当大大规模并发的时候

2623
02:03:36,630 --> 02:03:39,210
大规模并发的时候有数据来了

2624
02:03:39,390 --> 02:03:41,010
在你的程序里边儿

2625
02:03:41,100 --> 02:03:43,380
你可以给他发多个任务出去

2626
02:03:44,520 --> 02:03:45,900
可以发多个任务出去

2627
02:03:46,110 --> 02:03:50,550
那么这一块儿是一泡在你程序那儿要调的那个库

2628
02:03:51,200 --> 02:03:53,720
要掉到那个库的那个实现

2629
02:03:53,960 --> 02:03:55,490
更上边儿才是啥呀

2630
02:03:55,580 --> 02:03:56,810
更上面才是你的程序

2631
02:03:57,290 --> 02:04:00,800
那就相当于这一块儿是一剖的客户端儿

2632
02:04:00,800 --> 02:04:02,780
这一块儿是1PO的服务端

2633
02:04:03,920 --> 02:04:08,510
服务端这边他要要他和客户端这边

2634
02:04:08,510 --> 02:04:15,500
它有自己的这么一套传输机制一套那个通这个通知的这个通知机制

2635
02:04:15,530 --> 02:04:17,210
然后他

2636
02:04:17,660 --> 02:04:21,350
告诉你的应用1PO告诉你的应用呢

2637
02:04:21,350 --> 02:04:23,030
他怎么告诉你的应用呢

2638
02:04:23,210 --> 02:04:24,560
它去触发你

2639
02:04:25,800 --> 02:04:28,440
他去触发你两种触发模式

2640
02:04:28,650 --> 02:04:30,510
一种是水平触发模式

2641
02:04:30,510 --> 02:04:32,970
一种是边缘触发模式

2642
02:04:33,510 --> 02:04:36,390
那么这这个先说水平触发模式

2643
02:04:36,390 --> 02:04:40,200
水平触发模式它所支持的这个IO

2644
02:04:40,200 --> 02:04:43,830
这个IO操作模式既支持阻塞式的

2645
02:04:43,980 --> 02:04:45,840
也支持非阻塞式的

2646
02:04:45,840 --> 02:04:47,640
他比较他比较灵活

2647
02:04:47,820 --> 02:04:49,590
那么这种水平触发

2648
02:04:49,650 --> 02:04:51,780
水平触发性能稍低

2649
02:04:52,460 --> 02:04:53,510
性能稍差

2650
02:04:53,600 --> 02:04:54,080
但是呢

2651
02:04:54,080 --> 02:04:56,390
它能够解决大并发

2652
02:04:56,630 --> 02:04:58,340
能够解决大并发的问题

2653
02:04:59,030 --> 02:05:02,450
那么第二种模式就是边缘触发模式

2654
02:05:02,480 --> 02:05:05,330
边缘触发模式只支持非阻塞的

2655
02:05:05,330 --> 02:05:06,320
只支持非阻塞的

2656
02:05:06,590 --> 02:05:08,300
那么这种模式

2657
02:05:10,010 --> 02:05:11,540
他能够

2658
02:05:11,600 --> 02:05:13,850
只要有所动作

2659
02:05:13,850 --> 02:05:14,750
只要有所动作

2660
02:05:14,750 --> 02:05:16,760
他就能够通知给你

2661
02:05:16,910 --> 02:05:17,660
然后呢

2662
02:05:18,430 --> 02:05:20,320
当你有了数据

2663
02:05:20,320 --> 02:05:21,820
通知给你

2664
02:05:21,820 --> 02:05:24,760
当你这个数据完了

2665
02:05:24,760 --> 02:05:25,870
收完了

2666
02:05:25,870 --> 02:05:26,830
再通知给你

2667
02:05:27,130 --> 02:05:29,650
通知给你你没读对吧

2668
02:05:29,680 --> 02:05:32,440
你没你没有把这个数数据读

2669
02:05:32,440 --> 02:05:34,420
你没有去拿这个数据

2670
02:05:34,870 --> 02:05:36,430
那那那好

2671
02:05:36,460 --> 02:05:37,870
这个数据我就扔了

2672
02:05:37,870 --> 02:05:39,160
我告诉你来拿

2673
02:05:39,220 --> 02:05:39,970
你不拿

2674
02:05:40,180 --> 02:05:44,830
那我这个数据我就给你扔掉了这是一种这个高高性能模式

2675
02:05:45,240 --> 02:05:47,700
而那个水平触发模式呢

2676
02:05:47,910 --> 02:05:48,750
就是告诉你

2677
02:05:48,900 --> 02:05:50,370
告诉你来拿这个数据

2678
02:05:50,400 --> 02:05:51,330
数据你不拿

2679
02:05:51,330 --> 02:05:52,200
我就帮你存

2680
02:05:52,200 --> 02:05:53,520
我我我就帮你

2681
02:05:53,520 --> 02:05:55,560
那个我就帮你保存着

2682
02:05:55,590 --> 02:05:57,090
然后不断的通知你来拿

2683
02:05:58,270 --> 02:05:59,530
这是水平触发模式

2684
02:05:59,800 --> 02:06:01,420
那么这两种触发模式

2685
02:06:01,540 --> 02:06:03,010
一个比较

2686
02:06:03,010 --> 02:06:06,310
一个一个可靠性高另外一个呢

2687
02:06:06,310 --> 02:06:07,270
性能更高

2688
02:06:07,270 --> 02:06:11,590
一个追求可靠性追求可靠性那你性能就会就会降低一些

2689
02:06:11,770 --> 02:06:15,400
而你要这这个追求更高的这个性能呢

2690
02:06:15,400 --> 02:06:16,900
你的可靠性就要降低

2691
02:06:16,900 --> 02:06:18,550
因为你不来拿这个数据

2692
02:06:18,550 --> 02:06:19,210
我会扔掉

2693
02:06:19,780 --> 02:06:21,550
这是一碰的两种模式

2694
02:06:21,850 --> 02:06:24,820
那么这个1PO和你的程序

2695
02:06:24,820 --> 02:06:27,670
和你的程序进行数据交换的时候用什么呢

2696
02:06:27,790 --> 02:06:28,900
用MAPP

2697
02:06:29,200 --> 02:06:32,050
那用MAPP它是一种共享内存

2698
02:06:32,740 --> 02:06:34,120
那共享内存的一种

2699
02:06:35,540 --> 02:06:40,580
操作系统内核和你的那个和你的那个程序

2700
02:06:40,580 --> 02:06:43,130
他都他都去操作这一块内存

2701
02:06:43,160 --> 02:06:51,830
一块特殊的内存区域就不就不用那个函数的返回不用函数的这个返回值来来给你传数据了

2702
02:06:51,980 --> 02:06:54,800
那种函数返回值传数据性能太低

2703
02:06:54,830 --> 02:06:58,760
还不如告诉你这个时候就就就就用到什么辣

2704
02:06:58,790 --> 02:06:59,630
用到信号了

2705
02:06:59,780 --> 02:07:02,150
通知信号通知你数据来了

2706
02:07:02,240 --> 02:07:03,440
你去拿对吧

2707
02:07:03,440 --> 02:07:04,460
你不拿的话

2708
02:07:05,270 --> 02:07:06,590
一小段时间

2709
02:07:06,590 --> 02:07:07,670
我我给你消除掉

2710
02:07:07,670 --> 02:07:10,370
我我心数据就给你覆盖掉了

2711
02:07:10,430 --> 02:07:11,870
这个数据就没了

2712
02:07:11,990 --> 02:07:14,660
这叫边缘触发模式

2713
02:07:16,460 --> 02:07:17,660
那如果说

2714
02:07:17,720 --> 02:07:20,150
这块共享内存它满了对吧

2715
02:07:20,240 --> 02:07:20,930
它满了

2716
02:07:21,230 --> 02:07:23,480
它满了以后你不来拿

2717
02:07:23,810 --> 02:07:24,470
那怎么办

2718
02:07:24,560 --> 02:07:27,470
他就塞不进东西去了塞不进东西去

2719
02:07:27,530 --> 02:07:34,130
那后边的全都给后边的那个数据全都给堵在这儿了所以说它的性能就会稍差

2720
02:07:35,270 --> 02:07:37,010
但是他可靠性高

2721
02:07:37,010 --> 02:07:38,360
你数据一直在那儿

2722
02:07:38,360 --> 02:07:40,550
我就我就不断通知你来拿a

2723
02:07:40,580 --> 02:07:43,970
可靠性就高然后下一种呢

2724
02:07:43,970 --> 02:07:46,160
就是IOCP模型

2725
02:07:46,160 --> 02:07:47,900
IOCP模型他是谁的

2726
02:07:47,900 --> 02:07:49,280
它是Windows的

2727
02:07:49,280 --> 02:07:53,240
它是Windows的这个这个异步IO模型

2728
02:07:53,720 --> 02:07:55,490
那Windows的异步IO模型

2729
02:07:55,490 --> 02:07:57,560
我们看他这形成了一个环

2730
02:07:58,160 --> 02:08:01,520
它形成了还这个玩意儿他

2731
02:08:02,160 --> 02:08:03,090
咳

2732
02:08:03,420 --> 02:08:05,850
这个玩意儿它不如这个模式

2733
02:08:05,850 --> 02:08:07,500
他不如这个e po这个模式

2734
02:08:07,500 --> 02:08:08,880
简单一po模式

2735
02:08:08,880 --> 02:08:09,660
它是分层的

2736
02:08:10,930 --> 02:08:11,110
咦

2737
02:08:11,110 --> 02:08:12,130
破模式分层

2738
02:08:12,280 --> 02:08:15,220
而这个IOCP模型呢

2739
02:08:15,340 --> 02:08:17,920
它形成了个环儿

2740
02:08:17,920 --> 02:08:20,620
这个LCP模型同时呢

2741
02:08:21,070 --> 02:08:23,500
用到了Windows的一个设计思想

2742
02:08:23,500 --> 02:08:26,170
就是组建这个组件思想

2743
02:08:26,530 --> 02:08:31,300
实际上那个异步IO Windows里面异步IO他用的是一个IO组件

2744
02:08:31,300 --> 02:08:35,530
给你提供一个IO的这个端口儿IO组件的端口

2745
02:08:35,800 --> 02:08:37,090
你的程序

2746
02:08:38,540 --> 02:08:39,170
像

2747
02:08:39,760 --> 02:08:43,300
这个异步组件儿去发任务

2748
02:08:43,630 --> 02:08:44,650
还有呢

2749
02:08:45,220 --> 02:08:49,090
去向向他去向他去发任务

2750
02:08:49,150 --> 02:08:52,780
像他发任务还有这个这个组件

2751
02:08:52,870 --> 02:08:54,970
这个组件把这个任务交还给你

2752
02:08:55,000 --> 02:08:56,320
走的是两条线路

2753
02:08:57,330 --> 02:08:58,470
他走的是两条线路

2754
02:08:58,470 --> 02:09:05,310
我们就可以看到他他他这是这是一个还你发任务走这个走这个线路

2755
02:09:06,210 --> 02:09:07,710
他交还给你呢

2756
02:09:07,740 --> 02:09:08,610
走这个线路

2757
02:09:09,730 --> 02:09:11,320
走这个线路那就复杂了

2758
02:09:11,470 --> 02:09:12,760
这个机制就复杂了

2759
02:09:12,940 --> 02:09:13,630
但是呢

2760
02:09:13,660 --> 02:09:16,000
他仍然是高校的嘻嘻

2761
02:09:16,210 --> 02:09:17,260
仍然是高效的

2762
02:09:17,470 --> 02:09:18,700
但是他也有问题

2763
02:09:18,850 --> 02:09:19,420
对吧

2764
02:09:19,510 --> 02:09:22,660
他也有好多问题那么这个问题呢

2765
02:09:24,690 --> 02:09:30,990
这个问题他过于过于去看中这个稳定

2766
02:09:30,990 --> 02:09:32,700
过于看重稳定性

2767
02:09:32,700 --> 02:09:33,930
过过于看重稳定性

2768
02:09:33,930 --> 02:09:36,090
它的这个性能就会稍差

2769
02:09:36,700 --> 02:09:41,200
所以说那个很多那个大并发的这个大并发的这个服务

2770
02:09:41,350 --> 02:09:42,160
大并发的服务

2771
02:09:42,160 --> 02:09:44,290
比如说像这个游戏服务器对吧

2772
02:09:44,380 --> 02:09:46,600
一般都用一破模型来解决

2773
02:09:47,600 --> 02:09:49,640
一炮模型收到这个数据以后

2774
02:09:49,640 --> 02:09:51,140
把这个数据放到队列里边

2775
02:09:51,140 --> 02:09:52,250
然后一个一个处理

2776
02:09:52,940 --> 02:09:53,990
哈哈哈

2777
02:09:54,350 --> 02:09:54,800
还对

2778
02:09:54,800 --> 02:09:55,910
还有聊天儿

2779
02:09:55,910 --> 02:09:57,410
还有聊天服务器

2780
02:09:57,530 --> 02:09:59,210
游戏服务器等等

2781
02:09:59,930 --> 02:10:02,330
这些都是用都是用一剖的

2782
02:10:12,140 --> 02:10:12,440
好

2783
02:10:12,440 --> 02:10:12,920
最后呢

2784
02:10:12,920 --> 02:10:14,210
就是这个lab

2785
02:10:14,690 --> 02:10:15,590
这节课呢

2786
02:10:16,130 --> 02:10:17,090
这节课呢

2787
02:10:17,300 --> 02:10:18,980
咱们那个先

2788
02:10:18,980 --> 02:10:20,000
咱们先那个

2789
02:10:20,800 --> 02:10:21,460
简单的

2790
02:10:21,460 --> 02:10:23,020
简单的看一下这个lab view

2791
02:10:23,020 --> 02:10:26,680
然后下节课下节课下节课主要看代码

2792
02:10:26,680 --> 02:10:28,540
一个是re viv代码

2793
02:10:28,540 --> 02:10:29,890
一个是note JS代码

2794
02:10:29,890 --> 02:10:31,150
还有一个VBA代码

2795
02:10:31,150 --> 02:10:33,310
下下下节课主要看这三个代码

2796
02:10:33,730 --> 02:10:37,210
这节课咱们先简单看简单的那个了解一下

2797
02:10:37,210 --> 02:10:39,490
Lab是用C语言写的

2798
02:10:39,760 --> 02:10:41,920
那么这个lab Le这个官网

2799
02:10:42,470 --> 02:10:47,390
写的是极其的简洁简洁

2800
02:10:47,390 --> 02:10:48,740
但是他不捡漏

2801
02:10:52,670 --> 02:10:56,960
过去lab的官网是极其简陋

2802
02:10:57,260 --> 02:10:58,520
她就是一个页面儿

2803
02:10:58,550 --> 02:11:00,920
没有用任何CS修饰

2804
02:11:00,920 --> 02:11:03,020
大家一看这是啥玩意儿

2805
02:11:03,170 --> 02:11:04,160
这太丑了

2806
02:11:04,370 --> 02:11:05,600
就有点儿像啥的

2807
02:11:05,750 --> 02:11:07,400
有点儿像安吉尼克斯

2808
02:11:11,280 --> 02:11:13,110
有点儿像安吉nice的这个官网

2809
02:11:13,230 --> 02:11:15,480
X官网就这么简陋

2810
02:11:16,390 --> 02:11:16,930
对吧

2811
02:11:16,990 --> 02:11:18,370
X较简陋

2812
02:11:18,460 --> 02:11:20,230
他他没有修饰线

2813
02:11:20,230 --> 02:11:22,300
这个这个lab we呢

2814
02:11:22,330 --> 02:11:23,320
这是简洁

2815
02:11:23,320 --> 02:11:28,750
过去lab的官网和APP next官网这这个这个风格是一模一样的

2816
02:11:28,810 --> 02:11:31,480
现在还现在还加了一个底图

2817
02:11:31,510 --> 02:11:33,220
看上去还好看一点

2818
02:11:33,670 --> 02:11:34,090
但是呢

2819
02:11:34,090 --> 02:11:35,650
你继续往里去点

2820
02:11:35,650 --> 02:11:39,100
你去看他的文档就就就那个就露馅儿了

2821
02:11:39,220 --> 02:11:39,700
对吧

2822
02:11:39,700 --> 02:11:42,880
他这个文档还稍微的稍微的有点儿修饰

2823
02:11:43,090 --> 02:11:45,670
过去这个文档也是那个纯页面

2824
02:11:45,700 --> 02:11:47,200
也是纯文本页面

2825
02:11:47,380 --> 02:11:50,740
像这个人家经历就就在那个lab UV上

2826
02:11:50,740 --> 02:11:51,670
人人家不去

2827
02:11:51,880 --> 02:11:53,980
人家不整得那么花里胡哨的

2828
02:11:53,980 --> 02:11:56,080
人家核心竞争力又不在这儿

2829
02:11:56,230 --> 02:11:57,760
你像那个X

2830
02:11:57,910 --> 02:12:00,400
我这就是web服务器对吧

2831
02:12:00,430 --> 02:12:03,040
我这个页面儿就是n Gin X上搭出来的

2832
02:12:03,100 --> 02:12:04,810
我不去做这个页面儿

2833
02:12:04,810 --> 02:12:05,920
你要你要来

2834
02:12:05,920 --> 02:12:07,750
你不是看我这花里胡哨的东西的

2835
02:12:07,930 --> 02:12:09,790
你是用你是用我这个

2836
02:12:09,910 --> 02:12:13,480
那你是用我这个我这个裤或者我这个软件的

2837
02:12:14,160 --> 02:12:16,230
所以这些底层的东西

2838
02:12:16,350 --> 02:12:19,080
一般都是很朴素的

2839
02:12:19,200 --> 02:12:21,030
那么这个lab Le这个代码

2840
02:12:21,030 --> 02:12:25,560
刚才刚才刚刚才给大家给大家比划了一下

2841
02:12:25,710 --> 02:12:27,030
下节课咱们

2842
02:12:27,030 --> 02:12:29,520
下节课咱们详细的看

2843
02:12:29,520 --> 02:12:32,070
我那个在这儿呢

2844
02:12:32,070 --> 02:12:33,000
那个代码在这呢

2845
02:12:33,330 --> 02:12:35,730
Lab Le a在这里

2846
02:12:35,760 --> 02:12:36,300
然后呢

2847
02:12:36,300 --> 02:12:38,910
Lab是纯粹C语言写的呢

2848
02:12:39,000 --> 02:12:40,710
而且它跨平台

2849
02:12:40,860 --> 02:12:43,740
这里还有那个还给Android

2850
02:12:43,740 --> 02:12:45,840
还有安卓的这个编译脚本

2851
02:12:46,590 --> 02:12:48,240
还给安卓写的编译脚本

2852
02:12:48,240 --> 02:12:49,860
就是林克斯的

2853
02:12:49,860 --> 02:12:59,430
而且给这个Android的编译脚本还还分那个32位arm64位arm32位X8664位X86这这这这玩意儿

2854
02:12:59,700 --> 02:13:02,970
他的那个代码就就就就这么点儿

2855
02:13:03,420 --> 02:13:04,260
代码就这么点儿

2856
02:13:04,260 --> 02:13:05,130
核心代码

2857
02:13:05,160 --> 02:13:06,360
这这就是核心代码

2858
02:13:06,750 --> 02:13:07,740
就这么几个文件

2859
02:13:07,770 --> 02:13:09,780
然后这两个里边是什么

2860
02:13:09,870 --> 02:13:11,490
封装的API

2861
02:13:11,850 --> 02:13:15,270
一个是优尼格斯把API的封装

2862
02:13:15,300 --> 02:13:17,520
一个是Windows的API封装

2863
02:13:17,520 --> 02:13:21,420
她把这个操作系统层面上的这个特性封装成统一的接口

2864
02:13:21,630 --> 02:13:23,100
然后给给这儿去用

2865
02:13:23,870 --> 02:13:24,920
给这个地方去用

2866
02:13:26,400 --> 02:13:28,740
那么他的那些函数

2867
02:13:28,740 --> 02:13:30,720
它的那些功能在哪呢

2868
02:13:30,720 --> 02:13:31,740
就就就在这儿呢

2869
02:13:31,980 --> 02:13:33,510
这是这是导入库的时候

2870
02:13:33,510 --> 02:13:35,070
导入点H怎么去

2871
02:13:35,190 --> 02:13:36,390
为什么要导入点H

2872
02:13:36,390 --> 02:13:37,740
下节课给大家讲

2873
02:13:37,890 --> 02:13:45,150
下节课就要回到这个这个这个C语言这个代码层面上来然后咱们咱们要看

2874
02:13:45,180 --> 02:13:47,880
教给大家怎么去看明白这个代码

2875
02:13:48,000 --> 02:13:51,270
比如说咱们打开的代码里边儿一堆一堆的这个玩意儿

2876
02:13:51,270 --> 02:13:53,520
乱乱乱糟糟的这么多警号

2877
02:13:53,790 --> 02:13:55,800
这么多井号是吧

2878
02:13:55,800 --> 02:13:56,970
还include什么什么

2879
02:13:57,060 --> 02:14:01,650
然后后边这么多这个东西个这么多XX这这这是啥呀

2880
02:14:01,650 --> 02:14:02,010
都是

2881
02:14:02,720 --> 02:14:03,530
这都是查

2882
02:14:03,620 --> 02:14:05,090
这叫红

2883
02:14:05,120 --> 02:14:06,170
那个C语言的红

2884
02:14:06,200 --> 02:14:08,810
然后里边什么开不的饭

2885
02:14:08,960 --> 02:14:09,980
这这是啥呀

2886
02:14:10,100 --> 02:14:10,610
对吧

2887
02:14:11,060 --> 02:14:12,950
这是自定义类型

2888
02:14:13,100 --> 02:14:15,050
这是结构体自定义类型

2889
02:14:15,230 --> 02:14:19,490
然后后边儿这玩意儿boy的小括号星儿

2890
02:14:19,490 --> 02:14:22,610
然后用小括号这啥呀函数指针

2891
02:14:23,860 --> 02:14:24,940
这是函数指针

2892
02:14:25,120 --> 02:14:26,620
下节课把这些东西

2893
02:14:26,650 --> 02:14:29,620
包括结构体函数指针红等等

2894
02:14:29,800 --> 02:14:32,290
都都都在给大家讲一讲

2895
02:14:32,320 --> 02:14:34,900
然后然后呢

2896
02:14:34,900 --> 02:14:37,390
就是那个哪去了

2897
02:14:39,670 --> 02:14:40,270
在这儿

2898
02:14:40,330 --> 02:14:43,840
然后就是加加的no de JS c加加的

2899
02:14:43,840 --> 02:14:46,540
看一下C加加的代码C加加的代码

2900
02:14:46,540 --> 02:14:48,070
比如说实现呢

2901
02:14:49,250 --> 02:14:50,060
找个C

2902
02:14:50,510 --> 02:14:51,620
比如说这个东西

2903
02:14:53,420 --> 02:14:54,740
Quick哈

2904
02:14:55,220 --> 02:14:56,900
这个玩意儿C加加的

2905
02:14:57,500 --> 02:15:01,370
C加加的这个C加加的函数

2906
02:15:01,370 --> 02:15:02,750
这这里边儿好多指针呢

2907
02:15:03,050 --> 02:15:03,440
对吧

2908
02:15:03,590 --> 02:15:05,300
还有那个类的实现

2909
02:15:05,510 --> 02:15:06,860
类的类的定义

2910
02:15:06,860 --> 02:15:09,470
类的定义得看头得看那个头文件了

2911
02:15:33,470 --> 02:15:35,720
随便随便随便来一个吧

2912
02:15:36,110 --> 02:15:37,790
比如说这个它的流

2913
02:15:37,790 --> 02:15:39,380
它的流是怎么处理的

2914
02:15:39,380 --> 02:15:41,510
这是那个基本输入对吧

2915
02:15:42,860 --> 02:15:45,470
流的基本输入流

2916
02:15:47,240 --> 02:15:49,070
这这监控号

2917
02:15:49,950 --> 02:15:50,370
对吧

2918
02:15:50,430 --> 02:15:51,480
监控号是什么

2919
02:15:51,540 --> 02:15:52,290
梵行

2920
02:15:53,130 --> 02:15:53,790
梵行

2921
02:15:54,480 --> 02:15:56,160
那TS里面有饭行吗

2922
02:15:56,190 --> 02:15:56,730
有

2923
02:15:57,490 --> 02:15:58,000
对吧

2924
02:15:58,180 --> 02:16:00,850
TS里面有饭行

2925
02:16:00,850 --> 02:16:02,110
里面泛型是这么写的吗

2926
02:16:02,500 --> 02:16:04,030
也差不多

2927
02:16:04,390 --> 02:16:05,620
泛型又叫什么

2928
02:16:05,650 --> 02:16:06,880
又叫模板类

2929
02:16:08,150 --> 02:16:11,510
泛型又叫模板类

2930
02:16:11,510 --> 02:16:14,030
就是那个ttemplate

2931
02:16:14,720 --> 02:16:17,030
就是C加加的C加加特性

2932
02:16:18,140 --> 02:16:18,950
好下节课呢

2933
02:16:18,950 --> 02:16:22,490
就详细的去详细的去给大家

2934
02:16:22,580 --> 02:16:29,570
去去给这个讲讲一下这个代码当中涉及到的这个这个语这个语法概念

2935
02:16:29,570 --> 02:16:31,100
让大家能够看懂

2936
02:16:31,100 --> 02:16:32,720
实际上让大家看懂这个代码

2937
02:16:32,720 --> 02:16:34,610
不是看这个代码本身

2938
02:16:34,820 --> 02:16:35,930
而是干什么

2939
02:16:36,020 --> 02:16:39,410
去看这个代码的这个实现的思路

2940
02:16:40,360 --> 02:16:42,040
你能你能看懂这个思路

2941
02:16:42,040 --> 02:16:43,810
并不是说把代码看懂

2942
02:16:43,810 --> 02:16:45,190
这一行干什么呢

2943
02:16:45,190 --> 02:16:46,630
这一行又是干什么的

2944
02:16:46,750 --> 02:16:47,290
不是这个

2945
02:16:47,500 --> 02:16:49,600
而是让你把这个流程看懂

2946
02:16:49,600 --> 02:16:50,500
他是怎么做的

2947
02:16:50,590 --> 02:16:52,000
先干什么再干什么

2948
02:16:52,000 --> 02:16:55,060
放到什么数据结构里这个数据结构它怎么操作

2949
02:16:55,210 --> 02:16:56,050
看的是这个

2950
02:16:56,440 --> 02:16:59,530
而不是说那个数据结构它是怎么实现的

2951
02:16:59,650 --> 02:17:03,850
不是这个像比如说像那个微吧

2952
02:17:03,940 --> 02:17:04,450
对吧

2953
02:17:04,600 --> 02:17:06,400
像那个V8V8

2954
02:17:07,220 --> 02:17:08,060
V8

2955
02:17:08,060 --> 02:17:11,210
这个V8V8里边他的那个堆

2956
02:17:11,850 --> 02:17:12,150
是吧

2957
02:17:12,150 --> 02:17:13,050
他的那个heap

2958
02:17:13,050 --> 02:17:14,550
咱咱咱简单看一眼

2959
02:17:15,000 --> 02:17:16,560
他的那个堆

2960
02:17:16,590 --> 02:17:19,560
在这儿微吧里边儿这个堆它是怎么实现的

2961
02:17:20,580 --> 02:17:21,930
他是一个

2962
02:17:23,640 --> 02:17:24,210
在这儿呢

2963
02:17:25,910 --> 02:17:31,610
这是那个堆的那个那个涉及到堆的那些定义

2964
02:17:32,630 --> 02:17:34,670
这个堆他她它定义了这么多东西

2965
02:17:34,880 --> 02:17:36,230
然后这个堆里边儿

2966
02:17:37,970 --> 02:17:39,230
堆实际上是个什么

2967
02:17:39,560 --> 02:17:42,560
他是一个他的这个堆的实现

2968
02:17:43,160 --> 02:17:44,870
是一个复合结构

2969
02:17:44,870 --> 02:17:46,160
一个复合的数据结构

2970
02:17:46,550 --> 02:17:48,980
一个大数组加上

2971
02:17:49,990 --> 02:17:50,620
加上

2972
02:17:51,200 --> 02:17:51,740
二叉树

2973
02:17:53,000 --> 02:17:55,310
一个数组加二叉树

2974
02:17:55,310 --> 02:17:57,200
这是他是这么实现的

2975
02:17:57,620 --> 02:17:59,960
那下个阶段就要给大家讲数据结构了

2976
02:17:59,990 --> 02:18:01,130
哈哈

2977
02:18:01,400 --> 02:18:02,960
下个阶段讲数据结构

2978
02:18:03,200 --> 02:18:05,420
讲完数据结构就能就就能看明白

2979
02:18:05,420 --> 02:18:08,210
你看你看这这这玩意是个啥呀

2980
02:18:08,390 --> 02:18:08,930
对吧

2981
02:18:09,890 --> 02:18:12,950
实际上实际上是个是个大顶堆

2982
02:18:13,930 --> 02:18:14,740
是个大顶堆

2983
02:18:16,090 --> 02:18:16,360
行

2984
02:18:16,360 --> 02:18:18,100
咱们这节课先讲到这儿

2985
02:18:18,190 --> 02:18:19,300
下节课

2986
02:18:19,300 --> 02:18:23,470
下节课先给大家讲一下那个V8引擎

2987
02:18:23,470 --> 02:18:24,760
V8引擎的那个东西

2988
02:18:24,760 --> 02:18:25,840
它的那个结构

2989
02:18:25,870 --> 02:18:30,040
然后剩下的时间都是代码都都都是基于这个代码的

2990
02:18:30,670 --> 02:18:32,200
好今天就先到这儿

2991
02:18:32,230 --> 02:18:34,000
然后明天咱们继续

2992
02:18:34,000 --> 02:18:34,960
咱们连着三天

2993
02:18:35,110 --> 02:18:36,400
连着三天都是这个

2994
02:18:40,930 --> 02:18:41,680
好了下课了

2995
02:18:41,680 --> 02:18:43,840
先明天明天同一时间

