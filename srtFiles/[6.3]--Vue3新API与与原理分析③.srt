1
00:00:01,920 --> 00:00:02,280
嗯

2
00:00:04,530 --> 00:00:04,950
喂

3
00:00:06,050 --> 00:00:06,500
喂

4
00:00:06,590 --> 00:00:07,640
听得到吗咱们

5
00:00:09,680 --> 00:00:11,000
听到好吧

6
00:00:14,840 --> 00:00:16,160
放首歌

7
00:00:38,460 --> 00:00:39,960
眉头就心头

8
00:00:41,070 --> 00:00:42,390
没空理会

9
00:00:42,390 --> 00:00:45,840
我只感受你的感受

10
00:00:46,890 --> 00:00:47,760
往哪走

11
00:00:49,530 --> 00:00:53,430
也带走它为你着了魔

12
00:00:53,790 --> 00:00:55,320
留着有什么用

13
00:01:23,490 --> 00:01:26,910
不伸手却温柔的宇宙

14
00:01:27,690 --> 00:01:31,710
我这颗小星球就在你手机

15
00:01:33,840 --> 00:01:34,440
看见

16
00:01:38,190 --> 00:01:40,110
我为你发疯

17
00:01:40,770 --> 00:01:42,510
你必须给我

18
00:02:25,660 --> 00:02:26,380
8.05开始

19
00:02:26,680 --> 00:02:29,080
你们可以把这个API去看一下这个proxy

20
00:02:29,650 --> 00:02:31,060
你们今天白天没有看的

21
00:02:31,630 --> 00:02:32,440
可以看一下这个

22
00:02:38,080 --> 00:02:39,250
请放弃

23
00:02:52,960 --> 00:02:53,920
核心字词

24
00:02:53,950 --> 00:02:54,310
面膜

25
00:03:02,760 --> 00:03:05,370
妈妈

26
00:03:06,450 --> 00:03:09,120
妈妈

27
00:03:10,230 --> 00:03:10,980
妈

28
00:03:12,060 --> 00:03:12,810
妈

29
00:03:13,920 --> 00:03:14,670
妈

30
00:03:15,870 --> 00:03:16,530
妈

31
00:03:17,670 --> 00:03:18,300
妈

32
00:03:36,510 --> 00:03:37,260
看我

33
00:03:38,430 --> 00:03:40,830
你猜猜什么

34
00:03:41,850 --> 00:03:42,750
是我错

35
00:03:43,740 --> 00:03:45,000
没能够

36
00:03:45,120 --> 00:03:48,240
把自己变得成熟

37
00:03:49,410 --> 00:03:50,070
伤口

38
00:03:51,180 --> 00:03:51,780
那么多

39
00:03:53,280 --> 00:03:55,050
已经不怕

40
00:03:56,670 --> 00:04:00,690
为什么转身以后我会

41
00:04:02,520 --> 00:04:03,240
一傻子

42
00:04:03,780 --> 00:04:06,810
看见蟑螂我不怕不怕啦

43
00:04:07,320 --> 00:04:08,910
我神经比较大

44
00:04:09,210 --> 00:04:18,240
不怕不怕不怕只会让自己更憔悴麻痹眼神表现

45
00:04:18,660 --> 00:04:21,840
一个人睡也不怕不怕

46
00:04:22,290 --> 00:04:23,310
勇气当棉被

47
00:04:24,030 --> 00:04:25,860
不怕不怕不怕啦

48
00:04:25,860 --> 00:04:27,600
夜晚再黑

49
00:04:27,600 --> 00:04:30,360
我就当看不见太阳

50
00:04:31,980 --> 00:04:32,910
快出现

51
00:04:33,780 --> 00:04:34,380
Hello

52
00:04:35,580 --> 00:04:36,390
看我

53
00:04:37,530 --> 00:04:44,070
你在害怕什么

54
00:04:44,190 --> 00:04:47,280
把自己变得成熟

55
00:04:52,050 --> 00:04:54,570
没有地方可以出声啦

56
00:04:55,740 --> 00:04:56,520
为什么

57
00:04:57,540 --> 00:04:58,260
转身一

58
00:04:59,940 --> 00:05:02,490
变成蝴蝶扇风

59
00:05:02,860 --> 00:05:05,890
看见蟑螂我不怕不怕啦

60
00:05:06,370 --> 00:05:07,990
我神经比较大

61
00:05:08,350 --> 00:05:10,510
不怕不怕不怕辣

62
00:05:10,960 --> 00:05:12,790
只会让自己很

63
00:05:13,960 --> 00:05:14,440
怕

64
00:05:14,470 --> 00:05:20,920
闭眼始终表现一个人睡也不怕不怕

65
00:05:21,370 --> 00:05:22,510
勇气当棉被

66
00:05:23,080 --> 00:05:25,000
不怕不怕不怕啦

67
00:05:25,000 --> 00:05:26,650
夜晚再黑

68
00:05:26,650 --> 00:05:29,470
我就当看不见太阳

69
00:05:29,470 --> 00:05:32,170
一你就快出生

70
00:05:32,350 --> 00:05:34,960
妈妈

71
00:05:36,070 --> 00:05:36,820
妈

72
00:05:37,840 --> 00:05:38,650
妈

73
00:05:39,790 --> 00:05:40,510
妈

74
00:05:41,560 --> 00:05:42,370
妈

75
00:05:43,510 --> 00:05:44,200
妈

76
00:05:45,430 --> 00:05:46,060
妈

77
00:05:47,230 --> 00:05:47,860
妈

78
00:05:49,120 --> 00:05:49,690
妈

79
00:06:02,670 --> 00:06:03,390
扎

80
00:06:03,600 --> 00:06:04,920
我不怕不怕啦

81
00:06:05,460 --> 00:06:07,080
我神经比较大

82
00:06:07,530 --> 00:06:08,460
不怕不怕

83
00:06:08,460 --> 00:06:09,150
不怕

84
00:06:10,530 --> 00:06:11,730
只会让自己

85
00:06:13,260 --> 00:06:13,740
麻痹

86
00:06:14,280 --> 00:06:16,260
也是勇敢表现

87
00:06:16,770 --> 00:06:21,540
一个人睡也不怕勇气当棉被

88
00:06:24,180 --> 00:06:25,740
夜晚再黑

89
00:06:25,740 --> 00:06:28,530
我就当看不见太阳

90
00:08:42,380 --> 00:08:42,800
喂

91
00:08:45,900 --> 00:08:46,380
为什么

92
00:08:51,090 --> 00:08:52,260
大结局差不多吧

93
00:08:53,290 --> 00:08:55,180
三节课差不多差不

94
00:08:56,970 --> 00:08:58,530
一般其实

95
00:08:59,160 --> 00:09:02,460
因为威尔我们花了两节课讲吗

96
00:09:02,460 --> 00:09:04,710
V2我们讲的时候其实讲了很多东西

97
00:09:04,710 --> 00:09:07,080
其实他是跟V3关联起来的

98
00:09:07,080 --> 00:09:07,380
是吧

99
00:09:08,100 --> 00:09:09,840
这三节课不算多

100
00:09:09,840 --> 00:09:10,140
不

101
00:09:10,140 --> 00:09:10,470
三节

102
00:09:10,470 --> 00:09:11,640
三节课已经算很多了

103
00:09:11,640 --> 00:09:14,010
我觉得如果你们基础好的话

104
00:09:14,010 --> 00:09:15,870
其实我们两节课就已经打通了

105
00:09:16,020 --> 00:09:18,270
因为你们的基础可能相对来说差一点

106
00:09:19,010 --> 00:09:19,340
是吧

107
00:09:20,930 --> 00:09:24,050
所以说我们这块儿今天继续拉我们三个同学们

108
00:09:24,680 --> 00:09:26,360
我们先回到上节课

109
00:09:27,510 --> 00:09:30,600
头两节课我们说了什么V1V2的原理是吧

110
00:09:30,630 --> 00:09:32,370
它的原理是什么

111
00:09:32,880 --> 00:09:34,890
它的原理是我们这一块儿

112
00:09:35,650 --> 00:09:37,210
我们写的所有的指令

113
00:09:37,210 --> 00:09:39,340
是不是这是我们写的所有的指令

114
00:09:39,340 --> 00:09:41,320
写的写写的所有主见

115
00:09:42,050 --> 00:09:42,830
写的所有东西

116
00:09:42,830 --> 00:09:43,670
他被编译了什么

117
00:09:43,670 --> 00:09:45,080
编译成了什么

118
00:09:45,110 --> 00:09:45,770
编成什么

119
00:09:45,980 --> 00:09:47,540
编成了render代码是不是

120
00:09:48,790 --> 00:09:49,210
对

121
00:09:49,720 --> 00:09:50,350
一个指令

122
00:09:50,350 --> 00:09:51,010
一个render

123
00:09:51,310 --> 00:09:52,510
这个是什么情况

124
00:09:52,510 --> 00:09:54,220
这个是V1的情况

125
00:09:54,220 --> 00:09:55,960
V2是一个组建一个render了

126
00:09:55,990 --> 00:09:56,380
是不是

127
00:09:57,080 --> 00:09:58,730
然后编译成了render函数

128
00:09:58,730 --> 00:09:59,780
Render函数之后怎么办

129
00:10:00,020 --> 00:10:01,340
被包装到里边了

130
00:10:01,490 --> 00:10:04,280
包装到威包装了water里边儿是吧

131
00:10:04,340 --> 00:10:05,390
包装的water里边儿的

132
00:10:05,750 --> 00:10:07,850
然后你再6V的时候

133
00:10:08,560 --> 00:10:11,140
6a的时候是不是第一次出错

134
00:10:11,140 --> 00:10:13,090
6A1的时候是不是water就会执行

135
00:10:13,300 --> 00:10:14,590
Water是不是就会溜一下

136
00:10:14,620 --> 00:10:15,970
是不是我们昨天给大家看到的

137
00:10:16,600 --> 00:10:17,770
然后WATER6的时候

138
00:10:17,770 --> 00:10:18,730
他就会执行什么

139
00:10:19,000 --> 00:10:20,170
就会执行里面的under

140
00:10:20,170 --> 00:10:21,430
是不是啊

141
00:10:21,960 --> 00:10:24,990
执行里边的执行render的时候就会做什么

142
00:10:24,990 --> 00:10:25,380
同学们

143
00:10:26,050 --> 00:10:28,360
执行render的时候就获取什么

144
00:10:28,390 --> 00:10:30,880
就会去获取数据是不是

145
00:10:31,440 --> 00:10:32,430
所以说获取数据

146
00:10:32,430 --> 00:10:33,750
我们这块儿有一个什么过程

147
00:10:33,900 --> 00:10:36,750
监听数据是把数据监听好了之后

148
00:10:36,810 --> 00:10:38,400
然后再他获取的时候

149
00:10:38,760 --> 00:10:40,680
我们知道是哪个render

150
00:10:40,710 --> 00:10:41,550
哪个water

151
00:10:41,820 --> 00:10:44,400
哪个关系过来获取数据是吧

152
00:10:44,940 --> 00:10:46,200
哪个关系过来获取数据

153
00:10:46,200 --> 00:10:47,940
获取的是哪一份数据是吧

154
00:10:48,180 --> 00:10:49,350
然后我们做一个什么

155
00:10:49,470 --> 00:10:50,160
我们给他

156
00:10:50,400 --> 00:10:52,140
做一个什么电话本儿是吧

157
00:10:52,290 --> 00:10:53,370
电话本儿记录下来

158
00:10:53,700 --> 00:10:54,330
记录什么

159
00:10:54,450 --> 00:10:55,920
记录是哪些water

160
00:10:55,920 --> 00:10:57,390
来获取我这些数据是

161
00:10:57,750 --> 00:10:58,920
我把电话本儿记录下来

162
00:10:58,950 --> 00:10:59,520
记录什么

163
00:10:59,520 --> 00:11:00,360
记录就是water

164
00:11:00,510 --> 00:11:01,470
然后记录到这里面来

165
00:11:01,770 --> 00:11:04,800
然后当我要修改数据的时候

166
00:11:04,800 --> 00:11:06,270
是不是当我修改数据的时候

167
00:11:06,390 --> 00:11:09,510
然后做什么什么你也可是不是也可以监听

168
00:11:10,270 --> 00:11:11,020
减轻了之后

169
00:11:11,020 --> 00:11:14,230
然后也可以做什么去通知我有电话本儿是吧

170
00:11:14,410 --> 00:11:17,620
通知我的电话本怎么打电话通知所有数据是吧

171
00:11:17,980 --> 00:11:18,790
通知所有数据

172
00:11:18,970 --> 00:11:20,020
所以说这一层

173
00:11:20,020 --> 00:11:21,370
这里边我们说了几个点

174
00:11:22,580 --> 00:11:24,770
第一个点监听数据是吧

175
00:11:25,160 --> 00:11:26,210
监听数据是吧

176
00:11:26,450 --> 00:11:28,580
监听数据六点是什么

177
00:11:28,790 --> 00:11:30,080
编译模板是吧

178
00:11:30,320 --> 00:11:31,700
编译模板是吧

179
00:11:31,790 --> 00:11:33,350
然后这中间就是一套什么

180
00:11:34,110 --> 00:11:36,720
通过在执行的时候去构建依赖

181
00:11:36,750 --> 00:11:38,040
是不是构建依赖

182
00:11:38,190 --> 00:11:39,240
然后把依赖

183
00:11:39,850 --> 00:11:40,300
做什么

184
00:11:40,330 --> 00:11:41,500
做一个分发是吧

185
00:11:41,530 --> 00:11:42,070
去执行

186
00:11:42,250 --> 00:11:43,240
所以我们这一块儿

187
00:11:43,240 --> 00:11:44,530
这一块儿V2里边儿

188
00:11:45,280 --> 00:11:45,790
几个步骤

189
00:11:45,790 --> 00:11:46,480
第一个

190
00:11:47,810 --> 00:11:49,340
运行时第一步是吧

191
00:11:49,370 --> 00:11:50,570
第一步首先是编译

192
00:11:50,570 --> 00:11:53,900
是不是编一时什么构件模板是吧

193
00:11:54,110 --> 00:11:54,830
构建模板

194
00:11:55,010 --> 00:11:56,360
构件模板处理什么

195
00:11:56,600 --> 00:11:58,460
处理render是不是处理render

196
00:11:59,630 --> 00:12:01,460
然后第二步是做什么同学

197
00:12:02,120 --> 00:12:03,080
构建模板完了之后

198
00:12:03,080 --> 00:12:04,880
第二步做什么

199
00:12:07,250 --> 00:12:08,330
处理数据是吧

200
00:12:08,630 --> 00:12:11,750
处理数据处理数据到什么

201
00:12:12,080 --> 00:12:14,120
处理数据到什么响应式是吧

202
00:12:14,800 --> 00:12:18,400
响应式数据最后一步是做什么

203
00:12:18,400 --> 00:12:18,850
同学们

204
00:12:19,720 --> 00:12:20,680
处理事小意思

205
00:12:20,860 --> 00:12:21,670
执行是吧

206
00:12:21,970 --> 00:12:24,190
执行就是初始化是吧

207
00:12:24,400 --> 00:12:25,030
说实话

208
00:12:25,270 --> 00:12:27,490
执行执行的时候就会触发什么

209
00:12:27,550 --> 00:12:28,840
触发water是吧

210
00:12:29,380 --> 00:12:33,370
是不是触发water对PCh12是吧

211
00:12:34,060 --> 00:12:35,980
那么粗暴water的时候就会做什么

212
00:12:36,250 --> 00:12:37,330
构建关系是吧

213
00:12:38,020 --> 00:12:40,000
构建关系链是吧

214
00:12:40,060 --> 00:12:40,660
构建关系链

215
00:12:41,050 --> 00:12:42,340
那么构建完关系链之后

216
00:12:42,340 --> 00:12:44,110
同学们就做什么

217
00:12:44,440 --> 00:12:45,850
用关系链就可以了

218
00:12:45,880 --> 00:12:48,250
就就执行就渲染页面了

219
00:12:48,250 --> 00:12:48,520
是吧

220
00:12:48,580 --> 00:12:49,990
数据返回渲染页面

221
00:12:51,330 --> 00:12:52,440
然后渲染页面完了之后

222
00:12:52,440 --> 00:12:53,820
当你发生了修改的时候

223
00:12:53,820 --> 00:12:54,630
它就根据什么

224
00:12:54,840 --> 00:12:56,310
根据关系链是吧

225
00:12:56,490 --> 00:12:58,800
根据关系链去做什么去做什么

226
00:12:58,890 --> 00:12:59,850
去做修改是吧

227
00:13:00,060 --> 00:13:00,540
去修改

228
00:13:02,030 --> 00:13:02,510
动漫

229
00:13:03,690 --> 00:13:05,430
这个思路是

230
00:13:05,430 --> 00:13:06,270
V2的思路是

231
00:13:06,660 --> 00:13:07,560
这个思路是

232
00:13:07,560 --> 00:13:08,280
V2的思路是

233
00:13:09,170 --> 00:13:15,170
V2的思路V3也是从从从抽象到这一层来看

234
00:13:15,170 --> 00:13:17,360
他也是这些思路

235
00:13:17,360 --> 00:13:18,800
V3也是这一套的东西

236
00:13:19,220 --> 00:13:21,050
微商唯一不一样的是几个点

237
00:13:21,200 --> 00:13:22,820
第一个点构建模板不一样

238
00:13:23,990 --> 00:13:24,950
构件模板不一样

239
00:13:26,090 --> 00:13:27,650
第二点是吧

240
00:13:27,650 --> 00:13:31,430
V3模板这边意思的不一样是吧边意思

241
00:13:32,280 --> 00:13:34,680
编译撕边意思不一样

242
00:13:34,800 --> 00:13:35,910
编译时不一样做了什么

243
00:13:35,910 --> 00:13:36,960
他做了很多优化是吧

244
00:13:36,960 --> 00:13:41,610
因为编译时优化编译时优化优化边意思不一样是吧

245
00:13:41,940 --> 00:13:42,780
第二个是什么

246
00:13:43,020 --> 00:13:43,620
第二个是吗

247
00:13:46,560 --> 00:13:51,420
响应式处理数据不一样处理数据响应式

248
00:13:53,930 --> 00:13:54,920
想意思

249
00:13:56,720 --> 00:13:57,170
像

250
00:13:58,280 --> 00:13:59,720
意思不一样

251
00:14:00,260 --> 00:14:02,570
然后构建关系这一块儿其实差不多

252
00:14:02,600 --> 00:14:03,230
差不了太多

253
00:14:03,560 --> 00:14:04,340
构建关系

254
00:14:04,340 --> 00:14:06,680
整个执行的体系其实差不了太多

255
00:14:07,180 --> 00:14:08,110
构建关系完了之后

256
00:14:08,110 --> 00:14:09,850
分发也其实差不了太多

257
00:14:10,470 --> 00:14:11,550
只是说他在里边儿

258
00:14:11,880 --> 00:14:13,380
Water变成了什么

259
00:14:13,740 --> 00:14:14,790
变成了副作用

260
00:14:15,030 --> 00:14:16,140
变成了effect

261
00:14:16,890 --> 00:14:17,400
知道吧

262
00:14:17,790 --> 00:14:18,960
Water变成了副作用

263
00:14:18,960 --> 00:14:19,740
什么叫做副作用

264
00:14:19,830 --> 00:14:22,890
就是你会去什么执行页面的过程

265
00:14:23,100 --> 00:14:24,810
就会去执行页面的过程

266
00:14:24,840 --> 00:14:26,640
Water变成了副作用这么一个概念

267
00:14:26,880 --> 00:14:27,900
这个维度不一样了

268
00:14:28,050 --> 00:14:28,740
懂不懂

269
00:14:29,310 --> 00:14:30,240
那么这个数据

270
00:14:30,240 --> 00:14:31,590
这个处理成响应式数据

271
00:14:31,590 --> 00:14:34,590
处理完了之后就不是什么这个维度

272
00:14:34,620 --> 00:14:37,380
原来是什么observer是吧abra

273
00:14:37,530 --> 00:14:38,490
现在变成了什么

274
00:14:38,610 --> 00:14:39,630
现在它变成了什么

275
00:14:39,660 --> 00:14:40,740
变成了re active

276
00:14:41,070 --> 00:14:42,360
就是可响应式数据

277
00:14:42,720 --> 00:14:45,150
可监听数据数数据relative

278
00:14:46,000 --> 00:14:47,410
Active active是吧

279
00:14:47,590 --> 00:14:48,490
它变成这种

280
00:14:48,760 --> 00:14:49,810
所以说这个维度

281
00:14:49,870 --> 00:14:50,560
这就是什么

282
00:14:50,680 --> 00:14:51,910
几个维度不一样而已

283
00:14:51,910 --> 00:14:55,780
所以说我们来学习V2到V3转变的过程

284
00:14:55,780 --> 00:14:57,430
你把V132学明白了

285
00:14:57,430 --> 00:14:58,510
V3其实特别快

286
00:14:59,950 --> 00:15:00,970
就包括今天

287
00:15:00,970 --> 00:15:01,990
如果你们听着懵逼

288
00:15:01,990 --> 00:15:03,220
其实下来之后

289
00:15:03,220 --> 00:15:03,940
OA2去明白了

290
00:15:03,940 --> 00:15:04,930
V3你们再来看

291
00:15:04,930 --> 00:15:06,010
也能够看明白

292
00:15:06,040 --> 00:15:06,520
知不知道

293
00:15:06,550 --> 00:15:08,020
所以说我们在这个基础上

294
00:15:08,020 --> 00:15:09,430
我们来从一个方面

295
00:15:09,430 --> 00:15:10,150
一个方面聊

296
00:15:10,300 --> 00:15:11,500
首先聊编译时

297
00:15:11,770 --> 00:15:12,310
编译时

298
00:15:12,310 --> 00:15:15,220
我们V2编译时有什么缺点

299
00:15:15,220 --> 00:15:15,790
WE2 : 10

300
00:15:17,040 --> 00:15:19,440
我说了什么便意他是把代码是吧

301
00:15:19,500 --> 00:15:21,720
把你的微1TEMPLATE是吧

302
00:15:21,750 --> 00:15:22,290
V1TEMPLATE a

303
00:15:22,980 --> 00:15:25,320
T MT template是吧

304
00:15:25,590 --> 00:15:26,640
Chapter编成什么

305
00:15:26,910 --> 00:15:27,450
编成什么

306
00:15:27,480 --> 00:15:28,230
编成什么

307
00:15:28,260 --> 00:15:29,190
编成render是吧

308
00:15:29,430 --> 00:15:31,410
那这个过程他是做了什么过程

309
00:15:31,740 --> 00:15:32,400
他做了什么

310
00:15:32,790 --> 00:15:33,240
做了什么

311
00:15:33,240 --> 00:15:34,350
做了ST是吧

312
00:15:34,380 --> 00:15:35,160
变成ST

313
00:15:35,310 --> 00:15:36,540
变成ST之后

314
00:15:36,600 --> 00:15:37,590
然后去做什么同学

315
00:15:39,040 --> 00:15:39,520
对

316
00:15:40,330 --> 00:15:42,580
边城render里面有什么有位置

317
00:15:42,580 --> 00:15:44,290
是不是有位置

318
00:15:45,290 --> 00:15:46,790
是不是有位置

319
00:15:49,010 --> 00:15:50,120
所以说这一步

320
00:15:50,480 --> 00:15:53,540
这一步它的中间是通过什么正则匹配

321
00:15:54,950 --> 00:15:55,640
正则

322
00:15:56,360 --> 00:15:57,050
正则

323
00:15:58,150 --> 00:15:59,890
正则匹配

324
00:16:00,160 --> 00:16:02,140
通过正则匹配的方式来编译

325
00:16:02,320 --> 00:16:03,880
正则匹配的边方式来编译

326
00:16:03,880 --> 00:16:04,840
就会有问题

327
00:16:04,870 --> 00:16:05,500
什么问题

328
00:16:06,040 --> 00:16:06,460
什么问题

329
00:16:06,460 --> 00:16:06,820
同学们

330
00:16:07,590 --> 00:16:08,010
来给大家

331
00:16:08,010 --> 00:16:10,260
我给大家说一下通过正则匹配有什么问题

332
00:16:11,180 --> 00:16:12,440
举个很简单的例子

333
00:16:12,770 --> 00:16:15,410
比如说我现在有一个表达式

334
00:16:15,410 --> 00:16:17,000
有一个正则匹配的表达式叫什么

335
00:16:17,000 --> 00:16:18,290
一灯

336
00:16:18,290 --> 00:16:21,890
比如说叫做正则匹配表的是叫伊登是吧

337
00:16:21,950 --> 00:16:22,640
一灯

338
00:16:22,730 --> 00:16:27,290
然后一到三之间有一个C

339
00:16:27,620 --> 00:16:30,140
比如说有这个这个政策表示我要匹配什么呢

340
00:16:30,800 --> 00:16:32,120
他是不是可以匹配什么

341
00:16:32,150 --> 00:16:33,290
它可以匹配什么类型

342
00:16:33,980 --> 00:16:35,360
Y首先可以匹配是吧

343
00:16:35,390 --> 00:16:36,230
它可以匹配外

344
00:16:36,410 --> 00:16:38,240
然后匹配一个低的情况是吧

345
00:16:38,510 --> 00:16:39,800
就是YDC是吧

346
00:16:39,830 --> 00:16:41,450
还可以配什么

347
00:16:41,450 --> 00:16:42,050
YDDC是吧

348
00:16:42,050 --> 00:16:42,650
两个弟弟

349
00:16:42,650 --> 00:16:43,460
两个弟弟的情况

350
00:16:43,460 --> 00:16:44,570
因为它是一到三个的嘛

351
00:16:44,570 --> 00:16:44,870
是吧

352
00:16:45,290 --> 00:16:48,290
还可以配什么三个地的情况是吧

353
00:16:48,290 --> 00:16:49,130
YDDDC是

354
00:16:49,660 --> 00:16:50,320
同学们

355
00:16:50,380 --> 00:16:53,050
那这个过程它会造成一个什么过程呢

356
00:16:53,050 --> 00:16:54,370
我来给大家说一下这个过程

357
00:16:54,370 --> 00:16:55,810
有的同学不知道这块儿

358
00:16:57,110 --> 00:16:58,310
它会造成一个什么过程

359
00:16:58,970 --> 00:17:00,680
很多人说性能回溯

360
00:17:00,740 --> 00:17:02,330
回溯到底有什么性能问题

361
00:17:02,360 --> 00:17:03,650
这一块儿我来给大家说一下

362
00:17:03,980 --> 00:17:06,440
如果你匹配的字符串是什么

363
00:17:06,620 --> 00:17:08,600
如果你现在匹配的字符串是这种

364
00:17:09,600 --> 00:17:10,920
YDDDC是吧

365
00:17:10,950 --> 00:17:12,000
匹配的这种

366
00:17:12,000 --> 00:17:12,570
他会怎么

367
00:17:12,780 --> 00:17:13,830
他会有一个贪婪

368
00:17:13,830 --> 00:17:15,720
匹配的过程就是他首先

369
00:17:16,500 --> 00:17:18,450
首先是外是吧

370
00:17:18,480 --> 00:17:19,980
第一个这儿取个外来匹配

371
00:17:19,980 --> 00:17:22,140
匹配这儿的这个YY配重了是吧

372
00:17:22,470 --> 00:17:23,940
然后这是匹配什么

373
00:17:24,000 --> 00:17:25,170
第二步首先是

374
00:17:26,050 --> 00:17:27,310
第一步是匹配个外是吧

375
00:17:27,370 --> 00:17:29,020
第二步是什么Y

376
00:17:29,380 --> 00:17:32,440
然后取什么取弟弟取什么的曲艺是吧

377
00:17:32,620 --> 00:17:33,940
地区来匹配

378
00:17:33,940 --> 00:17:35,650
他匹配的什么外地是吧

379
00:17:35,890 --> 00:17:37,270
我们这儿也能匹配外地

380
00:17:37,270 --> 00:17:38,290
刚好也能匹配中

381
00:17:38,440 --> 00:17:41,230
然后现在他又来什么外地

382
00:17:41,260 --> 00:17:42,910
然后他会继续去

383
00:17:43,120 --> 00:17:46,720
他这个时候他会把这个东西去最大化知道吗

384
00:17:46,900 --> 00:17:49,030
就是他会先一一尝试了之后

385
00:17:49,030 --> 00:17:52,360
然后去尝试二尝试了之后去尝试三是不是它会最大化

386
00:17:52,450 --> 00:17:53,980
然后这个时候会去二二

387
00:17:53,980 --> 00:17:56,410
这个时候我们这儿也可以配上外的地是吧

388
00:17:56,650 --> 00:17:57,790
然后又是外

389
00:17:57,820 --> 00:17:58,840
然后就删了是吧

390
00:17:58,990 --> 00:18:00,280
然后去山是吧

391
00:18:00,670 --> 00:18:02,980
然后YDD是吧

392
00:18:03,160 --> 00:18:05,320
然后这个时候再往下它就是什么

393
00:18:06,860 --> 00:18:08,120
3C是吧

394
00:18:08,150 --> 00:18:11,480
然后AYDDDC这个问题

395
00:18:11,480 --> 00:18:12,050
这个没问题

396
00:18:12,050 --> 00:18:13,250
这种情况没问题

397
00:18:13,340 --> 00:18:13,760
同学们

398
00:18:13,910 --> 00:18:16,250
那我现在如果是这种情况呢

399
00:18:16,770 --> 00:18:18,960
如果是YY的地呢

400
00:18:18,960 --> 00:18:19,440
YDDC呢

401
00:18:19,890 --> 00:18:21,780
是不是在前面也是一样的是吧

402
00:18:21,780 --> 00:18:22,950
这前面一一模一样

403
00:18:23,430 --> 00:18:24,360
但是在这一步的时候

404
00:18:24,360 --> 00:18:25,440
他还是会走

405
00:18:25,500 --> 00:18:26,160
走完这个之后

406
00:18:26,160 --> 00:18:27,090
他还是会走什么

407
00:18:27,300 --> 00:18:29,160
还是会走到第三步是吧

408
00:18:29,220 --> 00:18:30,060
他还是会走这儿

409
00:18:30,150 --> 00:18:31,950
但是这儿的时候他匹配不上了

410
00:18:32,070 --> 00:18:34,050
我们这儿什么YDD是吧

411
00:18:34,050 --> 00:18:35,010
这后边是个C了

412
00:18:35,160 --> 00:18:36,690
所以他这儿就匹配不上了是不是

413
00:18:37,260 --> 00:18:38,730
是不是这个C就匹配不上了

414
00:18:38,790 --> 00:18:41,190
是不是这叫匹配

415
00:18:42,220 --> 00:18:42,700
不上

416
00:18:42,910 --> 00:18:44,440
所以说他就回退到了一圈

417
00:18:44,470 --> 00:18:45,820
回退到这一步去是吧

418
00:18:45,970 --> 00:18:47,710
他要回溯回溯到这一步去是吧

419
00:18:47,800 --> 00:18:48,610
回溯到这一步

420
00:18:48,880 --> 00:18:49,960
回溯到这一步

421
00:18:49,960 --> 00:18:50,500
回到这一步

422
00:18:50,560 --> 00:18:52,180
然后继续退出这一步

423
00:18:52,180 --> 00:18:54,370
然后到什么去匹配什么

424
00:18:54,610 --> 00:18:56,860
匹配什么匹配谁这一步就走完了

425
00:18:56,860 --> 00:18:58,180
相当于这个走完了去匹配什么

426
00:18:58,210 --> 00:18:59,680
匹配C就是这块儿

427
00:18:59,680 --> 00:19:00,280
他匹配上了

428
00:19:00,460 --> 00:19:01,960
那这块儿同学这是简单的

429
00:19:02,170 --> 00:19:03,490
那我再给大家说一个

430
00:19:03,700 --> 00:19:05,320
如果是这个政策匹配表达式

431
00:19:06,000 --> 00:19:09,090
如果是这个YYD

432
00:19:10,610 --> 00:19:12,560
一到三

433
00:19:13,510 --> 00:19:14,080
DDC

434
00:19:14,650 --> 00:19:16,360
如果这个人品这个匹配别的事

435
00:19:17,110 --> 00:19:18,970
然后他要匹配的内容刚好是外

436
00:19:18,970 --> 00:19:20,770
他要匹配内容什么外

437
00:19:20,770 --> 00:19:25,810
还是我们这个YDDDC准备来看一下这个过程

438
00:19:26,560 --> 00:19:28,810
这个过程你会疯掉首先

439
00:19:29,460 --> 00:19:30,330
匹配外是吧

440
00:19:30,780 --> 00:19:33,630
首先是匹配外是不是首先匹配外

441
00:19:34,110 --> 00:19:35,550
这块儿外匹配上了是吧

442
00:19:35,760 --> 00:19:36,690
然后又匹配什么

443
00:19:37,880 --> 00:19:38,720
外地是吧

444
00:19:38,870 --> 00:19:40,790
外地皮外地这个时候

445
00:19:41,960 --> 00:19:42,500
外地

446
00:19:43,760 --> 00:19:45,050
地区什么地区一

447
00:19:45,050 --> 00:19:47,240
市地区一

448
00:19:51,570 --> 00:19:52,230
外地

449
00:19:53,490 --> 00:19:54,300
地区是不是

450
00:19:54,480 --> 00:19:56,790
那这个时候外地匹配上是不是

451
00:19:56,940 --> 00:19:58,080
外地是不是匹配上

452
00:19:58,440 --> 00:20:00,090
然后他又做什么同学们

453
00:20:00,710 --> 00:20:01,910
是不是他要扩大

454
00:20:02,180 --> 00:20:02,990
地球是不是

455
00:20:03,640 --> 00:20:04,210
的确

456
00:20:05,070 --> 00:20:06,270
是不是外地的

457
00:20:06,300 --> 00:20:07,230
是不是也匹配上

458
00:20:07,470 --> 00:20:09,240
然后用什么地取三是不是

459
00:20:10,540 --> 00:20:11,680
D区三

460
00:20:11,800 --> 00:20:14,020
什么外地的也配得上

461
00:20:14,020 --> 00:20:15,580
是不是那地区三完了之后

462
00:20:15,580 --> 00:20:16,750
是不是这一件就匹配完了

463
00:20:16,780 --> 00:20:18,250
他下一句就要匹配这个是吧

464
00:20:18,520 --> 00:20:19,690
然后所以说他要娶这个

465
00:20:19,780 --> 00:20:20,830
但是我们这个时候

466
00:20:20,830 --> 00:20:23,620
我们我们的文字下一个什么YDD

467
00:20:24,080 --> 00:20:24,710
C是不是

468
00:20:24,860 --> 00:20:26,600
他发现这个C匹配不上

469
00:20:26,720 --> 00:20:27,350
那怎么办

470
00:20:27,530 --> 00:20:29,120
回溯回溯到这一步

471
00:20:29,660 --> 00:20:30,410
回溯到这一步

472
00:20:31,000 --> 00:20:32,080
回到这一步是吧

473
00:20:32,440 --> 00:20:33,730
所以说就不能取到三

474
00:20:33,730 --> 00:20:34,120
是不是

475
00:20:34,450 --> 00:20:36,790
咱们这块儿就不能取到三是不是

476
00:20:37,360 --> 00:20:38,770
所以说要回溯到这一步

477
00:20:38,800 --> 00:20:41,980
回到这一步发现这一步不行

478
00:20:42,010 --> 00:20:42,970
还要回溯是吧

479
00:20:43,000 --> 00:20:43,480
还要回溯

480
00:20:43,480 --> 00:20:44,530
回溯到这一步了是吧

481
00:20:44,650 --> 00:20:45,430
他要取二了

482
00:20:45,730 --> 00:20:46,870
就会回溯到这一步

483
00:20:47,080 --> 00:20:49,330
其实就是八回溯两步的过程

484
00:20:49,360 --> 00:20:49,840
知道吧

485
00:20:50,080 --> 00:20:51,040
他会回复两部

486
00:20:52,390 --> 00:20:54,640
回收两步回到这儿取二

487
00:20:54,670 --> 00:20:55,570
取二的时候

488
00:20:55,600 --> 00:20:57,130
然后这再来是吧

489
00:20:57,310 --> 00:20:59,140
这就是取二的时候

490
00:20:59,170 --> 00:21:00,070
Y第二

491
00:21:00,070 --> 00:21:01,450
然后在后边取个地

492
00:21:01,570 --> 00:21:02,800
这是不是取缔

493
00:21:02,920 --> 00:21:04,030
这是三的情况是吧

494
00:21:04,060 --> 00:21:04,420
取缔

495
00:21:04,540 --> 00:21:06,490
然后取缔取缔

496
00:21:06,490 --> 00:21:08,140
这块儿发现YBD

497
00:21:08,910 --> 00:21:09,720
曲二是吧

498
00:21:09,870 --> 00:21:11,130
这两个匹配的上是吧

499
00:21:11,160 --> 00:21:12,180
这前面都匹配上

500
00:21:12,270 --> 00:21:14,460
然后后边儿有一个弟弟也匹配上

501
00:21:14,670 --> 00:21:15,210
然后

502
00:21:16,000 --> 00:21:16,900
曲二可以匹配上

503
00:21:16,930 --> 00:21:19,000
然后再来是不是取二完了之后

504
00:21:19,000 --> 00:21:20,110
在后边儿有一个是吧

505
00:21:20,200 --> 00:21:21,850
又取又匹配到这儿了是吧

506
00:21:22,120 --> 00:21:22,930
然后又匹配

507
00:21:23,630 --> 00:21:24,170
这块儿

508
00:21:25,090 --> 00:21:25,510
讨厌

509
00:21:25,810 --> 00:21:26,710
又是C是吧

510
00:21:26,770 --> 00:21:28,180
又不行又怎么办

511
00:21:28,240 --> 00:21:29,200
又要回宿是吧

512
00:21:29,440 --> 00:21:30,010
要回复他

513
00:21:30,010 --> 00:21:30,640
要回溯

514
00:21:30,730 --> 00:21:32,410
回溯这钱要回宿舍是吧

515
00:21:32,650 --> 00:21:33,610
要回到最前面

516
00:21:33,760 --> 00:21:36,160
最前面的她还要回过来对

517
00:21:36,190 --> 00:21:36,760
回到这儿

518
00:21:36,790 --> 00:21:37,360
回到这儿来

519
00:21:37,360 --> 00:21:38,080
然后取什么

520
00:21:38,560 --> 00:21:41,020
取一取一落取一的时候

521
00:21:41,020 --> 00:21:42,670
然后又走这个过程是吧

522
00:21:42,730 --> 00:21:43,180
取一

523
00:21:43,210 --> 00:21:44,170
然后这边取什么

524
00:21:45,060 --> 00:21:46,680
匹配地发现什么

525
00:21:47,320 --> 00:21:48,370
取一匹配

526
00:21:48,400 --> 00:21:49,960
然后匹配的是吧

527
00:21:50,020 --> 00:21:50,590
外地的

528
00:21:51,250 --> 00:21:52,090
然后再来

529
00:21:53,260 --> 00:21:54,730
这样子外地的

530
00:21:55,650 --> 00:21:56,520
外地是吧

531
00:21:56,970 --> 00:22:01,590
然后再来IDCIDC明白了吗

532
00:22:01,650 --> 00:22:02,070
同学们

533
00:22:02,490 --> 00:22:03,300
这个过程了吗

534
00:22:03,940 --> 00:22:05,410
看明白这个过程吗

535
00:22:05,590 --> 00:22:07,600
他在中间会恢复很多次

536
00:22:07,690 --> 00:22:09,550
我这个还是特别简单

537
00:22:09,550 --> 00:22:11,770
像这种特别简单的正则匹配老师

538
00:22:12,340 --> 00:22:13,570
我们昨天看到的那个

539
00:22:13,690 --> 00:22:18,160
我们昨天看到了他那个挣得匹匹配搞得是是不是特别特别复杂

540
00:22:19,040 --> 00:22:21,320
这是正则匹配本身就有的机制

541
00:22:22,860 --> 00:22:24,870
这是正则匹配本身就有的机制

542
00:22:25,110 --> 00:22:28,350
知不知道正则匹配这个算法它本身就有的机子

543
00:22:28,500 --> 00:22:29,820
你可以去看一本书

544
00:22:30,000 --> 00:22:31,530
就是正则匹配的那本书

545
00:22:32,720 --> 00:22:34,190
他本身就是这个实现

546
00:22:36,140 --> 00:22:36,680
是吧

547
00:22:37,650 --> 00:22:41,130
所以说模板匹配的时候就不能什么不能采用

548
00:22:41,820 --> 00:22:42,420
不能采用

549
00:22:42,810 --> 00:22:43,350
不能

550
00:22:45,680 --> 00:22:49,370
不能采用正则匹配

551
00:22:50,300 --> 00:22:51,320
不能采用正则匹配

552
00:22:51,410 --> 00:22:53,210
那不能采用正则匹配站采用什么

553
00:22:53,420 --> 00:22:54,650
采用状态机

554
00:22:55,760 --> 00:22:57,290
状态机什么叫状态机

555
00:22:57,320 --> 00:22:58,040
给大家举个例子

556
00:22:58,070 --> 00:23:00,320
比如说我们we are a等于一是吧

557
00:23:01,280 --> 00:23:02,000
VA等于一

558
00:23:02,150 --> 00:23:04,160
他首先他需要把它拆分成什么

559
00:23:04,250 --> 00:23:05,630
拆分成不同的字符

560
00:23:05,660 --> 00:23:06,710
拆分什么字符

561
00:23:06,860 --> 00:23:08,030
拆分成VR

562
00:23:08,240 --> 00:23:09,260
还有a

563
00:23:09,560 --> 00:23:10,640
还有等号

564
00:23:10,940 --> 00:23:11,720
还有一

565
00:23:11,960 --> 00:23:13,730
拆分成这种不同的字符

566
00:23:14,330 --> 00:23:16,250
然后拆成这种不同的字符之后

567
00:23:16,280 --> 00:23:17,480
然后我们又说了什么

568
00:23:17,540 --> 00:23:20,510
他会跟他会便利你这里边的每一个字符是吧

569
00:23:21,050 --> 00:23:21,920
当你在后边儿

570
00:23:21,920 --> 00:23:23,840
VR后边儿一定要接一个什么

571
00:23:23,840 --> 00:23:25,940
就是我们上节课上上节课是吧

572
00:23:26,090 --> 00:23:27,890
We are后面一定要接什么

573
00:23:28,100 --> 00:23:29,900
一个变量是变量下边儿

574
00:23:29,900 --> 00:23:31,490
后边儿如果还有等号

575
00:23:31,490 --> 00:23:33,170
一定要有个赋值的语句是不是

576
00:23:33,350 --> 00:23:35,300
这是不是我们上头两节课说说的

577
00:23:35,880 --> 00:23:38,460
所以说这块儿有一个词法匹配

578
00:23:39,040 --> 00:23:40,180
还有什么语法匹配

579
00:23:40,720 --> 00:23:42,130
把它拆分成

580
00:23:42,130 --> 00:23:43,600
这个过程叫做词法匹配

581
00:23:45,340 --> 00:23:46,870
死法匹配

582
00:23:47,290 --> 00:23:48,760
然后把他构建成什么

583
00:23:48,790 --> 00:23:50,500
一棵树的过程

584
00:23:50,500 --> 00:23:50,770
ST

585
00:23:52,850 --> 00:23:55,100
ST1棵树的过程叫做语法匹配

586
00:23:57,080 --> 00:23:57,860
叫做语法匹配

587
00:23:58,040 --> 00:23:58,880
那么这个过程

588
00:23:58,880 --> 00:24:02,000
同学们执法匹配到语法匹配这个过程

589
00:24:03,390 --> 00:24:04,980
首先这个到这个过程

590
00:24:05,160 --> 00:24:06,630
这个这个过程到这个过程

591
00:24:06,750 --> 00:24:07,350
我们怎么来

592
00:24:07,470 --> 00:24:08,520
这个过程就是这个过程

593
00:24:08,520 --> 00:24:09,300
这个过程怎么来

594
00:24:09,540 --> 00:24:10,500
这个过程我们是不是说了

595
00:24:10,500 --> 00:24:13,200
他会根据语法去遍历每一个这个东西是吧

596
00:24:13,230 --> 00:24:14,070
然后去构建起来

597
00:24:14,370 --> 00:24:15,630
这个有特定的语法

598
00:24:15,660 --> 00:24:16,260
特定的环境

599
00:24:16,260 --> 00:24:16,770
这个还好

600
00:24:16,830 --> 00:24:17,820
去构建一棵树就行

601
00:24:18,720 --> 00:24:19,230
那这个呢

602
00:24:19,260 --> 00:24:22,470
这个到这一步怎么驱动它其实也就是一个状态

603
00:24:22,470 --> 00:24:22,980
什么状态

604
00:24:23,190 --> 00:24:24,960
比如说我现在便利这个字符

605
00:24:24,990 --> 00:24:26,220
我会遍历每一个字符

606
00:24:26,430 --> 00:24:27,840
我现在的状态是什么状态

607
00:24:27,960 --> 00:24:29,280
如果现在的状态是吗

608
00:24:29,820 --> 00:24:31,860
状态首先是string是吧

609
00:24:31,920 --> 00:24:32,760
是个string状态

610
00:24:33,440 --> 00:24:36,230
讯状态如我现在遍地第一个字符

611
00:24:36,230 --> 00:24:37,790
发现这个东西是个字符串是吧

612
00:24:37,910 --> 00:24:38,630
发现一个字符

613
00:24:38,840 --> 00:24:40,310
然后我把这个字符我这儿有

614
00:24:40,340 --> 00:24:42,710
首先初始化一个什么托肯token

615
00:24:42,710 --> 00:24:44,390
你可以把它理解为什么一个字节

616
00:24:44,720 --> 00:24:47,030
然后遍历第一个字符示威是吧

617
00:24:47,060 --> 00:24:48,590
把这个加到最后边儿是吧

618
00:24:48,830 --> 00:24:51,170
然后变成第二个字符是什么

619
00:24:51,170 --> 00:24:51,950
还是这个状态

620
00:24:52,160 --> 00:24:54,980
这个状态这个状态和上一个状态相等是吧

621
00:24:55,100 --> 00:24:56,660
也是字符又加到后边

622
00:24:57,320 --> 00:25:01,160
然后下一个状态ARF方向和上一个状态相当于也是字符

623
00:25:01,340 --> 00:25:03,650
然后再下来便立下一个

624
00:25:03,650 --> 00:25:05,150
发现这个状态是空格是吧

625
00:25:05,390 --> 00:25:07,640
这个空格和我们这个是不是就不相等了

626
00:25:07,640 --> 00:25:09,620
所以把这变成什么空格是吧

627
00:25:09,980 --> 00:25:10,430
Bass

628
00:25:10,860 --> 00:25:11,220
是吧

629
00:25:11,280 --> 00:25:12,210
编辑空格之后

630
00:25:12,240 --> 00:25:14,850
然后这块儿把它处理成一个什么空格是吧

631
00:25:15,030 --> 00:25:16,860
空格空格是吧

632
00:25:17,040 --> 00:25:18,660
然后再下来继续

633
00:25:19,590 --> 00:25:20,970
编辑下一个字符

634
00:25:20,970 --> 00:25:22,980
下一个字符又是字符是吧

635
00:25:23,010 --> 00:25:23,790
又是字符串

636
00:25:23,820 --> 00:25:27,420
那字符又和这个什么space又不是一个同同一个类型

637
00:25:27,420 --> 00:25:28,860
所以说这块儿又把它处理什么

638
00:25:29,040 --> 00:25:30,720
处理什么处理成我们的什么

639
00:25:31,020 --> 00:25:32,520
把状态字为什么spring

640
00:25:32,580 --> 00:25:35,040
然后把这个东西又单独a加一个字符

641
00:25:35,070 --> 00:25:36,660
然后又变变立下一个

642
00:25:37,200 --> 00:25:39,420
他发现下一个什么符号是吧

643
00:25:39,480 --> 00:25:42,270
这个状态是符号和上一个状态又不一样是吧

644
00:25:42,670 --> 00:25:44,350
符号是符号

645
00:25:44,350 --> 00:25:45,460
然后我们这块儿

646
00:25:45,490 --> 00:25:46,240
符号是吧

647
00:25:46,420 --> 00:25:46,900
符号

648
00:25:47,760 --> 00:25:50,250
符号然后怕又变绿

649
00:25:50,310 --> 00:25:52,110
发现什么数字是吧

650
00:25:52,170 --> 00:25:52,740
数字

651
00:25:53,070 --> 00:25:56,280
然后数字是数字翻译数字和这个什么

652
00:25:56,370 --> 00:25:57,990
数字和这个东西又不一样是吧

653
00:25:57,990 --> 00:25:59,430
数字和上一个符号又不一样

654
00:25:59,430 --> 00:26:01,350
所以把把数字又拆分出来是吧

655
00:26:01,830 --> 00:26:02,700
数字也拆分出来

656
00:26:02,850 --> 00:26:04,050
然后再往下遍历

657
00:26:04,050 --> 00:26:05,430
发现结束了是吧

658
00:26:05,430 --> 00:26:06,810
结束了结束了之后

659
00:26:06,900 --> 00:26:08,040
它拆分成了什么

660
00:26:08,070 --> 00:26:09,000
就拆分成了这几种

661
00:26:09,710 --> 00:26:11,270
这叫什么状态机

662
00:26:11,450 --> 00:26:12,470
有限状态机

663
00:26:12,530 --> 00:26:15,200
它通过一个状态不同的扭转

664
00:26:15,320 --> 00:26:17,180
这种机器来切换什么

665
00:26:17,180 --> 00:26:18,620
来控制它的一个什么拆分

666
00:26:19,200 --> 00:26:19,710
明白

667
00:26:20,560 --> 00:26:22,060
这个也是一门学问

668
00:26:22,240 --> 00:26:22,840
这个是什么

669
00:26:22,900 --> 00:26:24,220
编译原理里边儿的

670
00:26:24,580 --> 00:26:26,590
这是什么语法编译原理的意义

671
00:26:26,680 --> 00:26:29,050
编译原理里边儿专门的一种学问

672
00:26:29,320 --> 00:26:30,370
编译原理分为什么

673
00:26:30,400 --> 00:26:31,390
分为很多种变异

674
00:26:32,220 --> 00:26:35,880
一其中就包含什么状态机的类型和什么正则匹配的过程

675
00:26:35,910 --> 00:26:36,720
懂不懂

676
00:26:37,140 --> 00:26:38,730
所以说这个东西你们下来之后

677
00:26:38,760 --> 00:26:41,130
如果真正的想在前端上面去精进

678
00:26:41,130 --> 00:26:43,680
同学们就是前端上面去精进

679
00:26:43,770 --> 00:26:46,230
你们一定要去看一下编译原理这本儿

680
00:26:46,230 --> 00:26:48,360
这这这个这个类型的书知道吧

681
00:26:48,390 --> 00:26:49,320
不明白有啥用

682
00:26:50,920 --> 00:26:51,250
不

683
00:26:51,520 --> 00:26:52,570
还不明白有啥用

684
00:26:54,220 --> 00:26:55,600
你所有的语法

685
00:27:01,980 --> 00:27:03,240
你所有的语法

686
00:27:04,260 --> 00:27:07,620
你所有的语言都要通过他来匹配成这个东西

687
00:27:07,980 --> 00:27:09,150
来匹配成这个东西

688
00:27:09,760 --> 00:27:12,670
你这你所谓的语言的底层实现都是这套思想

689
00:27:13,030 --> 00:27:14,980
语言的底层实现都是这套思想

690
00:27:15,710 --> 00:27:17,060
要把它编译成这个东西

691
00:27:17,570 --> 00:27:17,990
这个东西

692
00:27:17,990 --> 00:27:19,910
然后根据你这个机器的逻辑

693
00:27:20,060 --> 00:27:22,430
然后把它抽成什么字节码这些东西

694
00:27:29,140 --> 00:27:29,710
对

695
00:27:31,760 --> 00:27:33,740
我刚刚跟你说的就是二和三的对比

696
00:27:33,740 --> 00:27:36,380
这个同学说的二二用的是什么

697
00:27:36,410 --> 00:27:37,340
正则匹配

698
00:27:37,400 --> 00:27:39,650
这上面就是二的原原因知道吗

699
00:27:39,860 --> 00:27:42,140
这上面就是二二的原因是什么

700
00:27:42,140 --> 00:27:45,590
不断回溯造成算法他的机制特别凌乱是吧

701
00:27:46,220 --> 00:27:47,060
还有就是状态

702
00:27:47,090 --> 00:27:47,780
还有就是什么

703
00:27:47,900 --> 00:27:50,060
他构建出来的数状态不够

704
00:27:50,090 --> 00:27:51,230
所以说这块儿就出来了

705
00:27:51,820 --> 00:27:54,430
这会儿来了什么V3的变化

706
00:27:54,670 --> 00:27:55,930
相当于他的模板变化

707
00:27:56,170 --> 00:27:59,500
什么从编译编译的实现

708
00:28:01,090 --> 00:28:02,590
什么正则匹配

709
00:28:05,210 --> 00:28:07,910
到达什么正常的什么状态机

710
00:28:08,480 --> 00:28:12,050
正常的什么状态机机制懂

711
00:28:12,470 --> 00:28:16,190
这就是从正则匹配到达了什么正常的状态机机制

712
00:28:16,340 --> 00:28:17,150
这是第一个点

713
00:28:17,210 --> 00:28:17,750
这是第一个点

714
00:28:17,840 --> 00:28:19,550
也正是因为有状态机

715
00:28:19,760 --> 00:28:20,840
它就可以了解什么

716
00:28:20,840 --> 00:28:23,120
你看把这个拆分的是不是就更加细致

717
00:28:23,790 --> 00:28:26,250
他的正则匹配不能把这些东西拆得这么细致

718
00:28:26,250 --> 00:28:26,670
知道吧

719
00:28:27,030 --> 00:28:28,980
所以说正因为有正则匹配

720
00:28:28,980 --> 00:28:30,420
他是不是拆分的更加细致

721
00:28:30,810 --> 00:28:32,880
那么它拆分的更加细致之后

722
00:28:33,360 --> 00:28:34,350
他就可以去做什么

723
00:28:34,350 --> 00:28:35,460
同学们

724
00:28:35,670 --> 00:28:40,470
他就可以拿到你这个你我们写的微模板更多的信息

725
00:28:41,880 --> 00:28:43,110
什么叫更多信息

726
00:28:45,710 --> 00:28:47,840
就可以拿到微模板更多的信息

727
00:28:48,050 --> 00:28:49,100
什么叫更多信息

728
00:28:50,000 --> 00:28:51,350
我举个很简单例子

729
00:28:51,350 --> 00:28:51,680
同学们

730
00:28:51,950 --> 00:28:53,660
我们昨天说的有静态节点是吧

731
00:28:53,810 --> 00:28:57,200
这个还还还还能理解是不是是不是有静态节点

732
00:28:57,200 --> 00:28:58,130
这个还能理解是吧

733
00:29:00,460 --> 00:29:02,140
那我现在比如有这种节点

734
00:29:03,420 --> 00:29:04,710
静态节点V3

735
00:29:04,710 --> 00:29:06,060
你是不是也有时间呢

736
00:29:06,060 --> 00:29:07,740
我现在给大家说一下这个东西

737
00:29:17,580 --> 00:29:18,240
你看

738
00:29:18,600 --> 00:29:20,970
我们现在这是V2是吧

739
00:29:21,300 --> 00:29:23,010
这是V2吧

740
00:29:23,730 --> 00:29:24,570
我们现在

741
00:29:25,480 --> 00:29:29,740
V2去了是这是不是你V1写的那个写的盗墓节点

742
00:29:29,920 --> 00:29:31,000
如果你的道路节点

743
00:29:31,180 --> 00:29:33,160
这个节点哪去了

744
00:29:33,280 --> 00:29:34,450
我这个鼠标哪去了

745
00:29:35,040 --> 00:29:36,360
如果你的动节点

746
00:29:36,360 --> 00:29:37,560
这个节点是动态节点

747
00:29:38,180 --> 00:29:40,400
这个节点是动态节点是不是

748
00:29:41,770 --> 00:29:43,540
我每一次对比是不是都要

749
00:29:44,180 --> 00:29:44,990
这样对比

750
00:29:45,870 --> 00:29:47,280
然后这样对比

751
00:29:47,400 --> 00:29:48,570
然后这样对比是吧

752
00:29:48,690 --> 00:29:50,370
这这上面是不是静态的

753
00:29:50,400 --> 00:29:51,300
就不用对比是

754
00:29:51,540 --> 00:29:53,100
这边儿是静态的是不会不会比

755
00:29:53,100 --> 00:29:57,000
但是我是不是需要需要每一次我都需要都先比较这个

756
00:29:57,030 --> 00:29:57,870
然后再比较这个

757
00:29:57,960 --> 00:29:58,890
再到这儿来是吧

758
00:29:59,010 --> 00:30:01,590
每一次都要走到这儿来才能拿到这个对比是吧

759
00:30:02,370 --> 00:30:04,230
就是我V2的对比节点

760
00:30:04,230 --> 00:30:07,830
是不是也需要就是走到好几层才可以这么走进来是不是

761
00:30:08,630 --> 00:30:09,050
是不是

762
00:30:09,620 --> 00:30:11,510
但是我V3不用

763
00:30:11,510 --> 00:30:12,200
V3怎么不用

764
00:30:12,290 --> 00:30:13,490
我在编译的时候

765
00:30:13,550 --> 00:30:15,140
我是不是就已经知道了

766
00:30:15,290 --> 00:30:16,580
这个节点是动态节点

767
00:30:16,820 --> 00:30:19,040
我知道你这儿用了我的指令或者模板是吧

768
00:30:19,070 --> 00:30:20,930
同学们这一个概念明白吗

769
00:30:21,440 --> 00:30:22,130
微山里边儿

770
00:30:24,240 --> 00:30:25,230
同学们这个明白

771
00:30:25,260 --> 00:30:26,670
这个节这个概念明白吗

772
00:30:28,770 --> 00:30:29,790
我在这维C

773
00:30:29,910 --> 00:30:31,110
我在编译的时候

774
00:30:31,140 --> 00:30:32,790
我就知道这个节点是动态节点

775
00:30:32,820 --> 00:30:34,380
是不是因为我用了你的指令

776
00:30:34,380 --> 00:30:35,550
或者是匹配的东西

777
00:30:35,790 --> 00:30:36,840
那这个时候怎么办

778
00:30:37,350 --> 00:30:38,250
你不明白吗

779
00:30:38,860 --> 00:30:39,940
我在编译的时候

780
00:30:40,270 --> 00:30:43,300
我就知道你用了用了V杠衣服这些东西

781
00:30:45,090 --> 00:30:46,110
这个你不清楚吗

782
00:30:46,930 --> 00:30:48,070
我在编译的时候

783
00:30:48,100 --> 00:30:49,210
我在编译的时候

784
00:30:49,270 --> 00:30:50,740
这不是我们编译原理吗

785
00:30:51,040 --> 00:30:51,790
我们说了吗

786
00:30:52,000 --> 00:30:54,970
编译的时候你不是都知道他每个节点的信息了吗

787
00:30:58,020 --> 00:30:58,530
是吧

788
00:30:58,770 --> 00:31:00,510
那现在你知道这个节

789
00:31:00,510 --> 00:31:01,860
这个节点是动态节点

790
00:31:02,160 --> 00:31:06,660
那我能不能把这个节点的修改的方法收集到顶层来

791
00:31:07,660 --> 00:31:10,180
修收集到我当前这个主建的顶层来

792
00:31:12,040 --> 00:31:13,330
是什么意思

793
00:31:13,940 --> 00:31:14,630
什么意思

794
00:31:15,640 --> 00:31:16,300
什么意思

795
00:31:16,540 --> 00:31:19,570
就是说我之前需要什么

796
00:31:19,870 --> 00:31:23,560
我之前需要每一次从这儿到这儿

797
00:31:23,590 --> 00:31:25,480
再到这儿来才能修改它是吧

798
00:31:25,870 --> 00:31:30,400
我现在能不能直接把这个东西收集到顶层这个对象上面是吧

799
00:31:30,520 --> 00:31:34,480
比如我现在这家各属性在顶层这个root节点这加个属性

800
00:31:34,780 --> 00:31:36,310
这个属性加加什么

801
00:31:36,490 --> 00:31:39,220
就是他只节点所有的动态节点是吧

802
00:31:39,850 --> 00:31:42,100
子节点里边所包含的所有动态节点

803
00:31:42,610 --> 00:31:45,370
我就把这个东西所有的动态节点全部挪到了顶层

804
00:31:45,370 --> 00:31:46,540
是不是是不是

805
00:31:48,530 --> 00:31:48,980
是吧

806
00:31:51,770 --> 00:31:53,045
是不是我就可以

807
00:31:53,045 --> 00:31:54,200
我因为我在编译的时候

808
00:31:54,200 --> 00:31:56,390
我是不是就知道这个东西是动态节点

809
00:31:57,740 --> 00:31:59,960
是不是我在编译的时候是他是动态技能是吧

810
00:32:00,290 --> 00:32:03,110
我们是不是可以通过一些方式把这些东西

811
00:32:03,110 --> 00:32:04,760
这些节点在执行的时候

812
00:32:04,970 --> 00:32:06,020
执行render的时候

813
00:32:06,050 --> 00:32:07,430
把它收集到顶层来

814
00:32:07,700 --> 00:32:08,180
是不是

815
00:32:08,660 --> 00:32:09,470
至于怎么收集

816
00:32:09,470 --> 00:32:10,460
我后面跟你说

817
00:32:10,670 --> 00:32:11,900
现在你们不用着急

818
00:32:12,440 --> 00:32:13,700
你们要知道这个思维

819
00:32:14,260 --> 00:32:14,770
好不好

820
00:32:15,880 --> 00:32:17,830
现在我是不是给他打了标记的

821
00:32:20,690 --> 00:32:22,700
但它里边儿还有很复杂的逻辑

822
00:32:22,790 --> 00:32:24,680
它的运行时也要去做很多处理

823
00:32:24,980 --> 00:32:27,320
你说的这种只是威刚一幅这一种情况

824
00:32:28,480 --> 00:32:29,020
知道吧

825
00:32:30,280 --> 00:32:32,200
他有很多信息他匹配不到的

826
00:32:34,150 --> 00:32:35,800
而且V2他不敢做扩展

827
00:32:36,310 --> 00:32:38,710
很多扩展它它的模板我给大家说了

828
00:32:38,950 --> 00:32:40,300
正则匹配那个呢

829
00:32:40,300 --> 00:32:42,610
你也看到那个政策匹配的表达语句

830
00:32:43,000 --> 00:32:43,870
那个多复杂

831
00:32:43,900 --> 00:32:45,070
你稍微再扩展一下

832
00:32:45,130 --> 00:32:46,030
那他就更复杂

833
00:32:46,090 --> 00:32:47,800
知道我们在这一步

834
00:32:47,830 --> 00:32:49,870
他从通过这种形形式是吧

835
00:32:50,110 --> 00:32:52,840
我这块儿是不是他就知道我这个是动态节点是吧

836
00:32:52,870 --> 00:32:54,940
我既然知道我这个东西是动态技能

837
00:32:54,940 --> 00:32:56,320
在我在执行的

838
00:32:56,320 --> 00:32:58,540
我给他我在编译的时候给他打个标签是不是

839
00:32:59,210 --> 00:33:00,410
给他构建render的时候

840
00:33:00,410 --> 00:33:01,280
他会打个标签

841
00:33:01,460 --> 00:33:02,180
在执行的时候

842
00:33:02,180 --> 00:33:03,050
我就把这个标签

843
00:33:03,140 --> 00:33:06,320
把这个render收集到什么顶层的这儿来

844
00:33:06,320 --> 00:33:08,300
收集到顶层这个节点是什么

845
00:33:08,960 --> 00:33:10,160
某一个属性上面来

846
00:33:10,190 --> 00:33:12,500
比如说他这个顶层节点一个什么属性

847
00:33:12,980 --> 00:33:14,090
有个什么属性

848
00:33:14,390 --> 00:33:15,260
有一个叫什么

849
00:33:15,380 --> 00:33:19,070
有一个叫做动态节点的属性是吧

850
00:33:19,070 --> 00:33:20,240
动态子节点的属性

851
00:33:20,390 --> 00:33:22,400
把这些点全部收集到这里边儿是吧

852
00:33:22,580 --> 00:33:24,050
把这些节点全部收到这里边儿

853
00:33:24,200 --> 00:33:27,110
那我下一次我每一次数据发生变更

854
00:33:27,260 --> 00:33:28,820
我重新执行整个组件

855
00:33:28,820 --> 00:33:30,650
同学们重新执行整个组件

856
00:33:30,710 --> 00:33:32,240
我还需要去动的驸马

857
00:33:33,850 --> 00:33:35,770
我还需要每一层每一层去东地服吗

858
00:33:35,950 --> 00:33:37,030
我是不是不需要了

859
00:33:37,330 --> 00:33:38,380
我只需要怎么办

860
00:33:38,500 --> 00:33:41,110
我只需要去拿到我这个根节点所有的什么

861
00:33:41,620 --> 00:33:42,460
阿根节点

862
00:33:42,460 --> 00:33:45,310
所谓什么动态节点拿来执行就行了是不是

863
00:33:46,400 --> 00:33:47,120
明白了吗

864
00:33:47,820 --> 00:33:48,900
明白这个过程吗

865
00:33:50,800 --> 00:33:51,280
同学们

866
00:33:52,110 --> 00:33:53,220
明白这个过程吗

867
00:33:54,900 --> 00:33:55,920
就是说你看

868
00:33:57,040 --> 00:33:58,240
有没有不明白的同学

869
00:34:02,850 --> 00:34:03,840
你不要着急嘛

870
00:34:03,960 --> 00:34:05,355
是不是按照这个逻辑来说

871
00:34:05,355 --> 00:34:06,780
动地府是不是就不需要了

872
00:34:06,960 --> 00:34:07,320
是不是

873
00:34:07,650 --> 00:34:08,580
你不要着急嘛

874
00:34:08,580 --> 00:34:09,570
我要给你讲嘛

875
00:34:10,020 --> 00:34:10,920
是按照这么来说

876
00:34:10,920 --> 00:34:12,210
到地府是不是不需要了

877
00:34:15,360 --> 00:34:15,780
是吧

878
00:34:15,990 --> 00:34:17,190
我后边给大家讲这一块儿

879
00:34:17,400 --> 00:34:18,900
所以说你们现在先不要着急

880
00:34:18,900 --> 00:34:20,310
这个东西的这个这个东西

881
00:34:20,700 --> 00:34:22,530
所以说他会直接收集

882
00:34:23,250 --> 00:34:24,270
在编译的时候

883
00:34:24,300 --> 00:34:25,470
在编译的时候

884
00:34:25,560 --> 00:34:27,960
我在编译的时候是吧

885
00:34:28,140 --> 00:34:30,690
We在编译的时候直接收集是吧

886
00:34:30,720 --> 00:34:33,210
收集就可以

887
00:34:33,210 --> 00:34:40,440
收集对应的这边的时候就可以怎么给动态节点打标签是吧

888
00:34:40,920 --> 00:34:41,430
打标签

889
00:34:41,490 --> 00:34:43,140
那么它构建出来的render

890
00:34:43,380 --> 00:34:47,730
他构建出来的render是不是在执行的时候就知道哪个节点是动态节点

891
00:34:48,600 --> 00:34:50,310
构建重点就是执行时

892
00:34:51,630 --> 00:34:59,160
执行时知道具体的动动态的点是吧

893
00:34:59,340 --> 00:35:06,480
然后在什么在在在执行的时候就收集动态节点到顶层是吧

894
00:35:06,690 --> 00:35:07,470
顶层的什么

895
00:35:07,530 --> 00:35:11,250
顶层的动态节点属性当中

896
00:35:12,650 --> 00:35:13,340
存起来

897
00:35:14,220 --> 00:35:16,530
储存存储存储是吧

898
00:35:16,800 --> 00:35:17,370
存储

899
00:35:18,600 --> 00:35:20,340
存储存储起来是吧

900
00:35:20,400 --> 00:35:20,730
存储

901
00:35:20,730 --> 00:35:21,840
然后去做什么

902
00:35:21,840 --> 00:35:25,950
咱们然后在运行的时候是不是直接获取直接

903
00:35:27,320 --> 00:35:27,950
直接

904
00:35:31,010 --> 00:35:33,440
直接直接获取是吧

905
00:35:33,740 --> 00:35:37,370
所以说V3里边儿这儿又多了一个什么纯

906
00:35:38,160 --> 00:35:38,700
存什么

907
00:35:39,090 --> 00:35:40,380
存动态节点是吧

908
00:35:40,410 --> 00:35:43,470
存动态动态节点的事吗

909
00:35:43,530 --> 00:35:44,550
内存消耗是吧

910
00:35:46,170 --> 00:35:47,850
内存消耗是吧

911
00:35:47,940 --> 00:35:49,110
所以说这块儿

912
00:35:49,930 --> 00:35:50,980
她又占了内存

913
00:35:50,980 --> 00:35:51,580
那怎么办

914
00:35:51,820 --> 00:35:55,210
他是不是在性能上是不是大大应用还是不行

915
00:35:55,240 --> 00:35:55,630
是不是

916
00:35:55,930 --> 00:35:57,730
所以a这块儿也是这么一点

917
00:35:58,630 --> 00:36:00,880
这这就是编译是他做的优化

918
00:36:00,940 --> 00:36:02,560
那具体其他的一些优化

919
00:36:02,560 --> 00:36:05,200
我们后后一会儿再给大家讲更多的优化

920
00:36:05,200 --> 00:36:08,020
我们会给大家讲这块儿只是把这个东西给大家抛出来

921
00:36:08,200 --> 00:36:09,430
这个概念给大家抛出来

922
00:36:09,970 --> 00:36:12,820
然后我们再讲运行时这个阶段

923
00:36:13,920 --> 00:36:15,150
运行是这个阶段是吧

924
00:36:15,210 --> 00:36:15,960
运行是这个阶段

925
00:36:16,620 --> 00:36:17,100
这个阶段

926
00:36:17,610 --> 00:36:19,380
这个阶段我们昨天给大家说了

927
00:36:19,500 --> 00:36:21,840
你们有多少同学下来看到proxy的

928
00:36:22,530 --> 00:36:23,850
有多少同学看proxy的

929
00:36:26,580 --> 00:36:28,470
运行时唯一的不一样

930
00:36:28,470 --> 00:36:30,000
他就是什么监听数据

931
00:36:30,000 --> 00:36:32,010
把数据处理成可监听数据是吧

932
00:36:32,340 --> 00:36:33,540
那么可监听数据

933
00:36:33,570 --> 00:36:36,750
我们在V2的时候什么重写每一个K是吧

934
00:36:38,000 --> 00:36:38,270
是吧

935
00:36:38,270 --> 00:36:39,170
重写每一个K

936
00:36:39,260 --> 00:36:42,890
重写每一个KD有个坏处是什么

937
00:36:43,510 --> 00:36:45,220
每一个K数据是吧

938
00:36:45,430 --> 00:36:46,420
要去便利是吧

939
00:36:46,750 --> 00:36:48,550
数据需要便利是吧

940
00:36:48,850 --> 00:36:49,210
是吧

941
00:36:49,540 --> 00:36:51,310
然后嵌套数据是吧

942
00:36:52,060 --> 00:36:53,740
嵌套对象的数据需要什么

943
00:36:53,980 --> 00:36:55,300
需要递归是不是

944
00:36:55,660 --> 00:36:59,230
需要递归遍历是不是是不是需要递归遍历

945
00:36:59,230 --> 00:37:01,630
是不是还有什么数组

946
00:37:02,020 --> 00:37:03,700
需要重写是吧

947
00:37:04,060 --> 00:37:05,260
数据需要重写是吧

948
00:37:05,650 --> 00:37:07,840
那么在这个基础之上

949
00:37:08,440 --> 00:37:10,690
这是object DeFine property的维维度是吧

950
00:37:10,780 --> 00:37:13,690
我们又说了V3用的什么proxy

951
00:37:13,810 --> 00:37:15,820
那么proxy他在哪几个维度

952
00:37:16,300 --> 00:37:18,640
这个是重写这个什么拦截是吧

953
00:37:18,700 --> 00:37:19,360
拦截

954
00:37:21,130 --> 00:37:22,570
拦截他并没有什么

955
00:37:22,780 --> 00:37:24,160
并没有修改原对象

956
00:37:24,160 --> 00:37:24,490
知道吧

957
00:37:24,700 --> 00:37:27,790
并没有修改原对象

958
00:37:27,880 --> 00:37:28,420
同学们

959
00:37:28,810 --> 00:37:29,980
这个你一定要搞明白

960
00:37:30,040 --> 00:37:31,720
并没有修改最原始的对象

961
00:37:31,930 --> 00:37:33,310
他拦截之后会形成什么

962
00:37:33,430 --> 00:37:35,020
生成新对象

963
00:37:35,530 --> 00:37:40,720
新的什么新的新的被

964
00:37:41,200 --> 00:37:42,940
新的代理对象

965
00:37:43,540 --> 00:37:45,640
你拿的是代理之后的代理对象

966
00:37:45,880 --> 00:37:47,350
相当于你现在拿到了

967
00:37:47,380 --> 00:37:48,910
你原来直接是什么

968
00:37:49,090 --> 00:37:54,910
跟跟门跟跟一个小区里面的业主直接送外卖是吧

969
00:37:54,940 --> 00:37:57,970
送外卖原来是直接可以送到小区里边是吧

970
00:37:58,240 --> 00:38:00,730
现在小区里面加了个防盗门是不是

971
00:38:01,030 --> 00:38:02,710
你现在送外卖只能送到门口

972
00:38:02,890 --> 00:38:05,650
有保安给你送进去是吧

973
00:38:05,740 --> 00:38:06,310
通知他

974
00:38:06,660 --> 00:38:08,400
所以说现在是什么

975
00:38:08,730 --> 00:38:10,800
完全没有修改原来的数据

976
00:38:10,830 --> 00:38:12,570
所以我们来看一下proxy的使用

977
00:38:12,990 --> 00:38:13,770
这是我们的Pro

978
00:38:13,770 --> 00:38:14,640
这是我们的一份数据

979
00:38:14,640 --> 00:38:15,900
同学们这是我们的数据

980
00:38:16,350 --> 00:38:20,430
然后这是我们的proxy new proxy proxy它可以拦截你的数据

981
00:38:20,490 --> 00:38:21,970
拦截你数据的行为

982
00:38:21,970 --> 00:38:23,010
什么行为

983
00:38:23,160 --> 00:38:24,000
Get行为

984
00:38:24,440 --> 00:38:25,190
还有什么行为

985
00:38:25,190 --> 00:38:26,240
Sight的行为是吧

986
00:38:26,450 --> 00:38:28,130
Sight行为拦截完了之后

987
00:38:28,130 --> 00:38:29,810
同学们拦截了之后

988
00:38:30,050 --> 00:38:31,400
我们是不是拦截了之后

989
00:38:31,400 --> 00:38:32,780
我们是要做一些什么操作

990
00:38:33,110 --> 00:38:34,640
那么拦截完了之后做了什么操作

991
00:38:34,640 --> 00:38:35,990
比如说我现在要获取数据

992
00:38:36,200 --> 00:38:37,640
获取数据这个行为

993
00:38:38,140 --> 00:38:40,750
我们要拦截它获取数据这个行为

994
00:38:40,750 --> 00:38:45,100
那么我是不是最后我还是应该给他执行他最后获取数据这个行为

995
00:38:45,490 --> 00:38:46,000
是不是

996
00:38:46,710 --> 00:38:47,400
明白吗

997
00:38:48,640 --> 00:38:50,800
比如说他现在来获取我的数据

998
00:38:50,800 --> 00:38:51,430
那我拦截了

999
00:38:51,430 --> 00:38:53,170
拦截了我难道不把数据给他吗

1000
00:38:53,290 --> 00:38:54,550
是不是还是要把数据给他

1001
00:38:54,910 --> 00:38:57,100
那是不是就算拦截我拦截这个行为

1002
00:38:57,100 --> 00:39:00,850
只是说我要对她做一层什么封装功能的加强

1003
00:39:00,910 --> 00:39:01,300
是啊

1004
00:39:01,540 --> 00:39:03,820
但是他最原始获取数据这个动作

1005
00:39:03,820 --> 00:39:06,250
我们是不是还需要去给他去获取数据

1006
00:39:06,640 --> 00:39:09,640
是不是在这儿有一个什么反射这个说法

1007
00:39:09,850 --> 00:39:11,980
反射反射这个说法又是什么

1008
00:39:12,560 --> 00:39:16,820
去重新把最拦截的行为重新给执行是吧

1009
00:39:16,880 --> 00:39:18,230
拦截的行为重新给执行

1010
00:39:18,440 --> 00:39:21,080
所以你看我们这儿写的这个代码是怎么写的

1011
00:39:21,950 --> 00:39:22,760
拦截是吧

1012
00:39:22,790 --> 00:39:24,200
拦截这个数据

1013
00:39:24,200 --> 00:39:25,100
拦截数据之后

1014
00:39:25,100 --> 00:39:25,940
然后去做什么

1015
00:39:26,090 --> 00:39:27,740
拦截数据的对象K是吧

1016
00:39:28,010 --> 00:39:28,970
然后去做什么

1017
00:39:29,240 --> 00:39:30,140
去打印

1018
00:39:30,140 --> 00:39:30,830
打印了之后

1019
00:39:30,830 --> 00:39:34,550
然后去把最原始你要拦截的这个方法要执行的内容

1020
00:39:34,550 --> 00:39:35,510
然后重新来执行

1021
00:39:35,510 --> 00:39:36,320
然后返回数据

1022
00:39:36,320 --> 00:39:37,640
然后去接他是吧

1023
00:39:37,790 --> 00:39:39,860
这是这这是这是给他是吧

1024
00:39:40,100 --> 00:39:41,330
Sight也是是吧

1025
00:39:41,390 --> 00:39:42,350
拦截赛特

1026
00:39:42,380 --> 00:39:44,420
然后去做什么最原始的这个处理

1027
00:39:44,780 --> 00:39:46,850
那么这里边儿它就没有什么

1028
00:39:47,000 --> 00:39:49,220
就没有什么修改我们这个data

1029
00:39:49,370 --> 00:39:50,300
它返回的是什么

1030
00:39:50,330 --> 00:39:54,050
一个新的这个被拦截之后的这个proxy代理的数据

1031
00:39:54,170 --> 00:39:56,060
它并没有修改我们这个里边的这个data

1032
00:39:56,300 --> 00:39:58,310
知不知道同学们这个明白吗

1033
00:39:58,430 --> 00:39:59,630
这个使用不用说了吧

1034
00:39:59,840 --> 00:40:00,920
使用要不清楚了

1035
00:40:00,920 --> 00:40:02,420
你们下来之后自己去翻

1036
00:40:03,580 --> 00:40:04,780
Reflect

1037
00:40:04,780 --> 00:40:05,350
不太明白

1038
00:40:08,310 --> 00:40:12,330
其实我跟你说这种这个东西我都不应该跟你讲

1039
00:40:12,330 --> 00:40:14,190
这是API知道吗

1040
00:40:14,220 --> 00:40:15,180
这都是API

1041
00:40:15,720 --> 00:40:17,040
昨天我就给你们说了

1042
00:40:17,040 --> 00:40:18,270
让你们去看这个proxy

1043
00:40:18,390 --> 00:40:19,770
看proxy难道就没有

1044
00:40:19,800 --> 00:40:21,810
它里边就没有reflect嘛

1045
00:40:21,870 --> 00:40:22,590
肯定有

1046
00:40:24,960 --> 00:40:27,600
所以说你还是没有去认真看知不知道

1047
00:40:29,280 --> 00:40:30,600
Reflect是个什么东西

1048
00:40:31,050 --> 00:40:31,710
你拦截

1049
00:40:31,710 --> 00:40:33,360
比如说我现在要重写这个数据是吧

1050
00:40:33,570 --> 00:40:34,620
我要重写这个数据

1051
00:40:35,200 --> 00:40:36,310
我要给把这个K

1052
00:40:36,460 --> 00:40:38,440
把这个else写成三是吧

1053
00:40:38,710 --> 00:40:40,120
那我现在写成三呢

1054
00:40:40,120 --> 00:40:40,690
我问你

1055
00:40:41,320 --> 00:40:42,280
我这儿拦截了之后

1056
00:40:42,280 --> 00:40:43,270
如果没有这个东西

1057
00:40:43,630 --> 00:40:44,740
我拦截了之后怎么办

1058
00:40:45,660 --> 00:40:50,220
那我写成三这个动作没对数据没有真实的进行什么血

1059
00:40:51,100 --> 00:40:54,550
那我是不是需要一个东西来让它真实写这个数据的动作

1060
00:40:55,200 --> 00:40:57,840
所以说这是真正去写三这个动作

1061
00:40:57,930 --> 00:40:58,380
知道吧

1062
00:40:58,500 --> 00:40:59,430
就是在

1063
00:41:00,160 --> 00:41:02,650
原生方法里边儿真正去写三的这个动作

1064
00:41:03,760 --> 00:41:04,570
知知不知道

1065
00:41:04,630 --> 00:41:06,760
就相当于我们把三这个动作拿来写

1066
00:41:06,880 --> 00:41:07,690
这是这个过程

1067
00:41:08,410 --> 00:41:10,360
你就算就是你就算拦截了之后

1068
00:41:10,360 --> 00:41:11,800
你其实还是要做这个事情

1069
00:41:11,890 --> 00:41:13,480
只是说你拦截是为了做什么

1070
00:41:13,570 --> 00:41:14,920
你自己去做一个加强

1071
00:41:15,100 --> 00:41:16,960
但加强还是要去做这些事情是不是

1072
00:41:19,380 --> 00:41:20,370
所以说这一步

1073
00:41:20,430 --> 00:41:21,930
这一步搞明白了之后

1074
00:41:24,060 --> 00:41:25,110
这不搞明白之后

1075
00:41:25,110 --> 00:41:27,330
我们下来继续继续

1076
00:41:27,750 --> 00:41:28,770
我们来执行一下

1077
00:41:28,770 --> 00:41:30,270
你看执行一下执行一下

1078
00:41:31,380 --> 00:41:34,110
等一下看一下执行生成出来的这个数据是吧

1079
00:41:34,800 --> 00:41:35,340
发现什么

1080
00:41:35,370 --> 00:41:38,100
贝塔还是没有没有被拦截是吧

1081
00:41:38,310 --> 00:41:40,440
贝塔没有被拦截还是没有proxy

1082
00:41:40,560 --> 00:41:41,670
我来看PP

1083
00:41:41,670 --> 00:41:43,320
你看P就是被拦截的数据了

1084
00:41:43,320 --> 00:41:43,650
看见吗

1085
00:41:43,650 --> 00:41:44,790
P就是被拦截的数据了

1086
00:41:45,060 --> 00:41:48,120
我们现在来修改p.else获取是吧

1087
00:41:48,150 --> 00:41:48,780
我获取

1088
00:41:49,050 --> 00:41:51,990
那我获取它是不是能够拿到我获取的这个操作

1089
00:41:51,990 --> 00:41:52,980
你看我获取这个操作

1090
00:41:53,280 --> 00:41:55,740
但是他最后还是返回了我这个二的数据是吧

1091
00:41:55,890 --> 00:41:57,210
那这个二的数据是谁来返回的

1092
00:41:57,360 --> 00:42:00,330
是他这个动作真正去执行获取这个操作

1093
00:42:00,720 --> 00:42:01,980
返回的懂了吗

1094
00:42:02,250 --> 00:42:04,680
这个kiss l z明白了吗

1095
00:42:04,680 --> 00:42:05,460
QLZ明白了吗

1096
00:42:06,790 --> 00:42:07,240
是不是

1097
00:42:07,480 --> 00:42:08,860
那我现在来解他是吧

1098
00:42:10,340 --> 00:42:11,420
是的三是吧

1099
00:42:11,660 --> 00:42:12,500
他修改了是吧

1100
00:42:12,590 --> 00:42:13,730
那修改完了之后

1101
00:42:14,260 --> 00:42:15,460
那我如果拦截了之后

1102
00:42:15,490 --> 00:42:16,930
如果没有执行这个东西

1103
00:42:17,140 --> 00:42:18,880
它的数据就不会真正发生修改

1104
00:42:18,880 --> 00:42:20,770
但是对他现在的数据是吧

1105
00:42:20,830 --> 00:42:22,030
现在发生了修改是吧

1106
00:42:22,660 --> 00:42:23,050
对

1107
00:42:23,760 --> 00:42:25,080
所以说他是拦截看到吗

1108
00:42:25,080 --> 00:42:26,100
这中间是拦截

1109
00:42:26,680 --> 00:42:29,860
拦截数拦截数据就不需要去便利什么

1110
00:42:29,890 --> 00:42:30,820
便利每一个K了

1111
00:42:30,820 --> 00:42:31,150
是不是

1112
00:42:31,330 --> 00:42:32,290
所以说这是一点

1113
00:42:32,470 --> 00:42:33,760
那么现在我问大家

1114
00:42:34,690 --> 00:42:37,150
数组操作有问题

1115
00:42:37,730 --> 00:42:38,960
数组的拦截有问题

1116
00:42:40,420 --> 00:42:41,140
数组案件

1117
00:42:41,260 --> 00:42:43,540
我们昨天说了数组屁事

1118
00:42:44,660 --> 00:42:47,330
Object点地方party数组拦截有问题

1119
00:42:48,180 --> 00:42:48,900
没问题是吧

1120
00:42:50,160 --> 00:42:51,720
那么数组的改写有问题

1121
00:42:55,000 --> 00:42:56,560
我们昨天说了新增的对象

1122
00:42:56,590 --> 00:42:58,510
包括他现在所谓的新增是吧

1123
00:42:58,660 --> 00:42:59,740
我们现在新增是吧

1124
00:42:59,890 --> 00:43:00,520
我们昨天说了

1125
00:43:00,520 --> 00:43:02,320
不管是新增的K这些都不行是吧

1126
00:43:02,530 --> 00:43:04,450
那我现在新增是吧

1127
00:43:04,810 --> 00:43:06,340
你看新增K也行了是吧

1128
00:43:06,430 --> 00:43:08,140
现在新增的K是不是也行

1129
00:43:09,210 --> 00:43:11,160
是新增的可以也行了是吧

1130
00:43:11,310 --> 00:43:12,420
因为他是拦截

1131
00:43:13,000 --> 00:43:15,850
是不是拦截所有新增的K是不是都有问题

1132
00:43:15,850 --> 00:43:16,900
都都没问题是吧

1133
00:43:16,900 --> 00:43:18,790
新增K是不是都没问题是吧

1134
00:43:18,940 --> 00:43:21,220
我现在我们来看数组了来看数组

1135
00:43:22,210 --> 00:43:24,250
数组数组这个样子是吧

1136
00:43:24,250 --> 00:43:25,180
这是数组是吧

1137
00:43:25,450 --> 00:43:27,250
数组数组是不是直接拦截

1138
00:43:27,580 --> 00:43:29,200
因为我们不需要遍历每一个K了嘛

1139
00:43:29,200 --> 00:43:29,470
是吧

1140
00:43:29,500 --> 00:43:30,940
他是拦截直接拦截对象吗

1141
00:43:30,970 --> 00:43:31,240
是吧

1142
00:43:33,780 --> 00:43:34,140
妈的

1143
00:43:34,140 --> 00:43:34,980
有两个data

1144
00:43:38,260 --> 00:43:38,800
哎呀

1145
00:43:39,040 --> 00:43:39,610
买衣服

1146
00:43:41,010 --> 00:43:42,840
有他妈两个皮皮吧

1147
00:43:44,690 --> 00:43:45,260
子

1148
00:43:46,080 --> 00:43:47,520
现在我执行是吧

1149
00:43:47,520 --> 00:43:48,750
执行执行完了之后

1150
00:43:48,750 --> 00:43:51,150
我们来看data还是DATA1是吧

1151
00:43:51,300 --> 00:43:52,560
还是还是数字是吧

1152
00:43:53,160 --> 00:43:53,970
然后P1

1153
00:43:54,150 --> 00:43:55,980
我们来看P1是吧是吧

1154
00:43:56,130 --> 00:43:57,060
他被拦截揍

1155
00:43:57,060 --> 00:43:58,650
皮皮

1156
00:44:09,160 --> 00:44:09,790
片儿吧

1157
00:44:22,080 --> 00:44:22,710
等一下

1158
00:44:28,430 --> 00:44:28,550
等

1159
00:44:29,570 --> 00:44:29,960
一下

1160
00:44:29,960 --> 00:44:30,860
我重新开一个

1161
00:44:32,090 --> 00:44:32,960
重新开一个

1162
00:44:33,290 --> 00:44:34,970
还有一个应该是因为执行过了

1163
00:44:34,970 --> 00:44:36,980
在同一个同一个那个里边儿

1164
00:44:38,980 --> 00:44:39,820
这儿是吧

1165
00:44:39,850 --> 00:44:40,270
哪儿去了

1166
00:44:41,020 --> 00:44:41,470
这儿

1167
00:44:42,130 --> 00:44:42,700
这儿是吧

1168
00:44:42,700 --> 00:44:43,030
这

1169
00:44:43,680 --> 00:44:44,340
咨询一下

1170
00:44:45,120 --> 00:44:45,720
Data

1171
00:44:46,500 --> 00:44:47,430
It is not DeFined

1172
00:44:50,620 --> 00:44:51,310
妈的

1173
00:44:52,240 --> 00:44:52,810
重新来

1174
00:44:55,080 --> 00:44:55,830
现在可以啦

1175
00:44:57,210 --> 00:44:58,740
我就我就不不改名儿了

1176
00:44:59,310 --> 00:45:03,180
劈吧劈时间听之后的数据贝塔

1177
00:45:03,880 --> 00:45:05,860
贝塔是没有接听之前的数据是吧

1178
00:45:06,250 --> 00:45:08,050
我们来看获取数据是吧

1179
00:45:08,260 --> 00:45:08,740
获取

1180
00:45:12,100 --> 00:45:13,000
没问题是吧

1181
00:45:13,390 --> 00:45:14,050
设置

1182
00:45:16,440 --> 00:45:16,890
没问题

1183
00:45:16,890 --> 00:45:17,340
算

1184
00:45:18,200 --> 00:45:19,880
新的新的缩影是吧

1185
00:45:19,970 --> 00:45:20,660
比如说三

1186
00:45:20,690 --> 00:45:21,470
他没有三是吧

1187
00:45:21,830 --> 00:45:22,460
心的缩影

1188
00:45:25,210 --> 00:45:25,900
没问题

1189
00:45:26,630 --> 00:45:28,670
我们来看设置之后的数据

1190
00:45:28,700 --> 00:45:29,750
发现也没问题是吧

1191
00:45:29,810 --> 00:45:30,380
设置上了

1192
00:45:30,800 --> 00:45:32,390
那现在有问题的是什么同学们

1193
00:45:37,460 --> 00:45:38,510
不看弹幕什么

1194
00:45:39,780 --> 00:45:42,270
看不太能

1195
00:45:43,210 --> 00:45:44,170
现在有问题了是吧

1196
00:45:44,170 --> 00:45:44,740
同学们

1197
00:45:44,860 --> 00:45:46,840
我们昨天说了数组是连续内存

1198
00:45:46,840 --> 00:45:49,090
对是不是只要数组移动

1199
00:45:49,150 --> 00:45:50,410
是不是它都会有这个问题

1200
00:45:50,410 --> 00:45:52,870
是它这个东西照样也是有问题的

1201
00:45:52,870 --> 00:45:54,160
是不是只要数组移动

1202
00:45:56,580 --> 00:45:59,100
有问题吃饭了吗

1203
00:45:59,310 --> 00:46:00,180
只要速度移动

1204
00:46:00,180 --> 00:46:01,050
它就会有问题

1205
00:46:02,180 --> 00:46:02,660
是不是

1206
00:46:04,080 --> 00:46:04,680
明白吗

1207
00:46:04,740 --> 00:46:06,870
我们昨天说了你坚定的数组

1208
00:46:06,870 --> 00:46:07,710
数组的索引

1209
00:46:07,860 --> 00:46:09,390
他现在是拿移动

1210
00:46:09,390 --> 00:46:10,590
你是拿所有索引

1211
00:46:11,590 --> 00:46:12,880
你代理也是拿代理的

1212
00:46:12,880 --> 00:46:15,250
所代理的整个数据数据对象

1213
00:46:15,580 --> 00:46:16,750
他也是所有索引

1214
00:46:16,990 --> 00:46:17,530
是不是啊

1215
00:46:18,290 --> 00:46:18,800
是不是

1216
00:46:21,900 --> 00:46:22,530
明白吗

1217
00:46:26,110 --> 00:46:26,680
懂吗

1218
00:46:33,100 --> 00:46:33,610
不懂

1219
00:46:39,600 --> 00:46:40,950
不懂吗

1220
00:46:40,980 --> 00:46:42,060
你这个你这不懂吗

1221
00:46:42,060 --> 00:46:42,960
昨天我讲的那个

1222
00:46:43,110 --> 00:46:46,350
昨天我讲的那个懂不懂速度连续内存这块懂不懂

1223
00:46:49,600 --> 00:46:50,380
你懂不懂

1224
00:46:50,920 --> 00:46:53,500
那今天这个有一模一模一样

1225
00:46:54,820 --> 00:46:55,840
一模一样啊

1226
00:46:58,380 --> 00:46:59,070
语速有点快

1227
00:46:59,130 --> 00:47:01,110
那你懂得跟语速有点快有什么关系

1228
00:47:02,400 --> 00:47:02,910
没关系

1229
00:47:02,910 --> 00:47:03,360
知道吧

1230
00:47:03,980 --> 00:47:05,390
我们要讲的东西还很多

1231
00:47:08,150 --> 00:47:09,890
因为树长不是长度

1232
00:47:10,010 --> 00:47:10,730
是因为她的

1233
00:47:10,850 --> 00:47:11,990
她的位移

1234
00:47:12,020 --> 00:47:13,430
它会变成它的

1235
00:47:13,430 --> 00:47:15,050
它的索引发生变化

1236
00:47:23,050 --> 00:47:25,060
我是不是鉴定的所有数据的给他

1237
00:47:25,480 --> 00:47:27,790
我现在这是一这是二

1238
00:47:27,820 --> 00:47:28,750
这是三是吧

1239
00:47:28,810 --> 00:47:31,450
我坚定的所有数据给他

1240
00:47:31,960 --> 00:47:34,360
那我现在我给他调用一个方法

1241
00:47:34,360 --> 00:47:35,260
比如说调用什么

1242
00:47:35,380 --> 00:47:37,240
调用排序这个方法

1243
00:47:37,390 --> 00:47:38,710
或者说反转这个方法

1244
00:47:38,740 --> 00:47:40,570
我把这个三挪到这儿来

1245
00:47:40,630 --> 00:47:43,090
是不是也需要先去get一下这个三

1246
00:47:44,460 --> 00:47:45,420
Get了这个三之后

1247
00:47:45,420 --> 00:47:47,070
还需要get一下这个仪式

1248
00:47:47,490 --> 00:47:49,020
然后两边重新set

1249
00:47:49,020 --> 00:47:50,130
把这个1SET到这儿

1250
00:47:50,130 --> 00:47:51,330
把这个3SET到这儿是吧

1251
00:47:51,510 --> 00:47:53,430
这中间是不是也触发了get和set

1252
00:47:54,290 --> 00:47:56,180
是不是就算没有新增

1253
00:47:56,180 --> 00:47:56,870
所以是不是

1254
00:47:58,250 --> 00:47:59,000
明白了吗

1255
00:48:01,300 --> 00:48:02,050
那对

1256
00:48:05,270 --> 00:48:05,990
明白了吧

1257
00:48:06,050 --> 00:48:08,210
所以我们这块儿就算是没有用

1258
00:48:08,210 --> 00:48:11,150
这个就是receive receive就是正常的这个

1259
00:48:13,870 --> 00:48:15,040
照样看看什么

1260
00:48:15,070 --> 00:48:16,180
他照样会发生这些

1261
00:48:16,300 --> 00:48:18,370
这所有的这个流程懂了吧

1262
00:48:18,460 --> 00:48:20,470
所以说素组还是有问题

1263
00:48:20,470 --> 00:48:21,550
速组还是有什么问题

1264
00:48:21,850 --> 00:48:22,600
数组索引

1265
00:48:24,110 --> 00:48:24,680
所以

1266
00:48:26,430 --> 00:48:28,800
数组移动

1267
00:48:30,060 --> 00:48:31,530
还是有问题是吧

1268
00:48:31,800 --> 00:48:32,190
有问题

1269
00:48:32,580 --> 00:48:34,290
所以说他这块儿还是数重写的

1270
00:48:34,290 --> 00:48:36,180
数组的原型重写方法一模一样

1271
00:48:36,330 --> 00:48:37,200
重写那些方法

1272
00:48:38,430 --> 00:48:42,120
今天就重写方法这个过程就不讲了一会儿给大家稍微瞟一眼

1273
00:48:42,120 --> 00:48:43,050
昨天给大家讲的

1274
00:48:46,710 --> 00:48:48,120
瞟一眼V3的创业方法

1275
00:48:48,630 --> 00:48:49,380
大致差不多

1276
00:48:51,060 --> 00:48:51,840
还是有问题

1277
00:48:51,930 --> 00:48:52,860
重写所有的方法

1278
00:48:52,890 --> 00:48:53,310
知道吧

1279
00:48:53,400 --> 00:48:55,110
重启所有数字圆形的方法

1280
00:48:55,410 --> 00:48:57,390
那么这就是索引上面的问题

1281
00:48:57,660 --> 00:48:58,650
那么现在我们再来

1282
00:48:58,800 --> 00:48:59,100
再来

1283
00:48:59,100 --> 00:48:59,640
再来什么

1284
00:49:00,590 --> 00:49:01,340
再来看是吧

1285
00:49:02,880 --> 00:49:04,320
另一个上面的问题什么问题

1286
00:49:04,530 --> 00:49:05,730
嵌套数据的问题

1287
00:49:06,850 --> 00:49:07,780
嵌套数据的问题

1288
00:49:09,860 --> 00:49:10,220
妈的

1289
00:49:10,220 --> 00:49:11,060
又要重新来了

1290
00:49:19,280 --> 00:49:20,090
嵌套数据

1291
00:49:21,270 --> 00:49:21,810
看一下

1292
00:49:22,610 --> 00:49:23,210
执行

1293
00:49:29,040 --> 00:49:29,340
同学

1294
00:49:29,670 --> 00:49:30,210
我问你

1295
00:49:31,550 --> 00:49:32,870
嵌套数据明白什么意思吗

1296
00:49:32,930 --> 00:49:34,310
你看这是我的嵌套数据是吧

1297
00:49:34,640 --> 00:49:35,240
我签了个这个

1298
00:49:35,240 --> 00:49:37,280
然后这儿又签了这个八二又签了个对象

1299
00:49:37,280 --> 00:49:38,090
可以看到吗

1300
00:49:39,040 --> 00:49:39,550
键吗

1301
00:49:40,160 --> 00:49:41,000
那我问你

1302
00:49:41,000 --> 00:49:44,150
我现在把这个数据做了一个带带塔是吧

1303
00:49:44,210 --> 00:49:44,870
我返回了个屁

1304
00:49:44,870 --> 00:49:45,800
我现在访问

1305
00:49:46,830 --> 00:49:48,150
我现在访问这个东西

1306
00:49:48,180 --> 00:49:49,860
访问这个东西它会触发get吗

1307
00:49:52,050 --> 00:49:52,560
会发

1308
00:49:52,560 --> 00:49:53,250
会出发sight吗

1309
00:49:53,250 --> 00:49:54,780
我先说会话ST吗

1310
00:49:55,500 --> 00:49:56,130
会出话费的吗

1311
00:49:56,130 --> 00:49:57,810
同学们会出CD吗

1312
00:49:58,140 --> 00:49:58,680
会不会

1313
00:49:59,720 --> 00:50:00,320
小同学

1314
00:50:06,200 --> 00:50:06,950
会刷色的马

1315
00:50:12,210 --> 00:50:12,900
会出

1316
00:50:12,930 --> 00:50:14,010
因为我这儿改了一下

1317
00:50:14,040 --> 00:50:14,940
先不要着急

1318
00:50:15,700 --> 00:50:17,020
应该看没改之前的

1319
00:50:17,880 --> 00:50:18,840
改了之后的东西

1320
00:50:18,840 --> 00:50:20,100
那就是我做了兼容了

1321
00:50:20,490 --> 00:50:21,420
我做了修改了

1322
00:50:22,710 --> 00:50:23,310
重新来

1323
00:50:27,160 --> 00:50:28,870
我们如果按照他正常的逻辑

1324
00:50:29,710 --> 00:50:30,910
你看直接获取

1325
00:50:31,710 --> 00:50:32,400
获取数据

1326
00:50:32,430 --> 00:50:33,420
然后去调用是吧

1327
00:50:33,660 --> 00:50:36,150
然后返回没有我修改这个这个过程

1328
00:50:36,330 --> 00:50:38,130
你们先不用管修修怎么修改的

1329
00:50:39,010 --> 00:50:41,020
那么我这块儿给大家看一下

1330
00:50:43,280 --> 00:50:44,300
妈的屁

1331
00:50:44,300 --> 00:50:45,080
当当烦

1332
00:50:45,700 --> 00:50:46,510
什么鬼

1333
00:50:50,490 --> 00:50:51,180
没有自信

1334
00:50:52,020 --> 00:50:53,250
看一下出发了吗

1335
00:50:53,340 --> 00:50:54,210
出发了吗

1336
00:50:55,280 --> 00:50:56,210
没有触发set a

1337
00:50:56,750 --> 00:50:57,830
他只触发了给它

1338
00:50:58,130 --> 00:50:59,540
触发了哪个给他

1339
00:50:59,810 --> 00:51:00,680
触发了吧

1340
00:51:00,680 --> 00:51:02,900
二因为它获取了这个八二

1341
00:51:02,930 --> 00:51:04,940
你是P点八二是吧

1342
00:51:05,150 --> 00:51:06,650
所以说它会先获取八二

1343
00:51:07,810 --> 00:51:09,040
但是点K的时候

1344
00:51:09,040 --> 00:51:09,850
你修改K的时候

1345
00:51:09,850 --> 00:51:11,170
他就没有处罚可以了吗

1346
00:51:13,080 --> 00:51:14,220
所以说

1347
00:51:15,010 --> 00:51:15,730
Proxy

1348
00:51:15,730 --> 00:51:16,840
它有个问题是什么

1349
00:51:17,410 --> 00:51:20,080
他只会带你一层纸袋里

1350
00:51:20,740 --> 00:51:21,130
什么

1351
00:51:23,580 --> 00:51:26,580
纸袋里一层数据

1352
00:51:27,510 --> 00:51:28,140
明白了吗

1353
00:51:28,970 --> 00:51:29,630
明白了吗

1354
00:51:29,660 --> 00:51:31,040
同学们不明白

1355
00:51:33,710 --> 00:51:34,820
纸袋里一层数据

1356
00:51:36,250 --> 00:51:36,910
不明白吗

1357
00:51:37,390 --> 00:51:37,930
明白吧

1358
00:51:39,680 --> 00:51:40,220
是不是

1359
00:51:40,820 --> 00:51:41,330
毛岸的

1360
00:51:41,390 --> 00:51:42,050
杀了吧

1361
00:51:45,140 --> 00:51:46,730
所以说只带你一层数据

1362
00:51:47,420 --> 00:51:48,410
养个老婆多好

1363
00:51:49,540 --> 00:51:50,470
赢个老婆多好

1364
00:51:51,040 --> 00:51:51,850
是不是五舅

1365
00:51:52,990 --> 00:51:55,630
找个媳妇儿娶个老婆不不不好吗

1366
00:51:57,310 --> 00:51:58,210
我老婆

1367
00:51:59,560 --> 00:52:00,400
老婆明天回来

1368
00:52:00,610 --> 00:52:01,540
那就把猫杀了吧

1369
00:52:04,240 --> 00:52:04,930
继续啊

1370
00:52:05,770 --> 00:52:07,690
实在老婆没老

1371
00:52:08,290 --> 00:52:09,010
老婆太凶了

1372
00:52:09,010 --> 00:52:09,850
就生个孩子

1373
00:52:10,390 --> 00:52:11,320
生个孩子挺有意思

1374
00:52:11,350 --> 00:52:12,160
天天完孩子

1375
00:52:12,930 --> 00:52:14,670
也好玩也好玩儿是吧

1376
00:52:14,820 --> 00:52:16,500
只要等你老了之后

1377
00:52:16,500 --> 00:52:17,580
他不会把你的滚

1378
00:52:19,020 --> 00:52:19,980
老婆没了

1379
00:52:19,980 --> 00:52:21,660
那你这那把老婆杀了吧

1380
00:52:21,660 --> 00:52:22,470
哈哈哈

1381
00:52:23,760 --> 00:52:24,390
开玩笑啊

1382
00:52:24,450 --> 00:52:25,020
我们继续

1383
00:52:29,580 --> 00:52:30,540
就想换个名字

1384
00:52:31,200 --> 00:52:34,350
说我就说你为什么动不动就会说个零

1385
00:52:36,820 --> 00:52:39,910
因为你天天就天天天天天天在想啥

1386
00:52:40,600 --> 00:52:41,200
继续啊

1387
00:52:41,500 --> 00:52:42,760
他只能带你一层数据

1388
00:52:42,760 --> 00:52:46,360
是他现在是不是只能带你一层数据同学们

1389
00:52:48,290 --> 00:52:48,620
是啊

1390
00:52:48,620 --> 00:52:49,340
现在明白了吗

1391
00:52:49,400 --> 00:52:52,430
我现在你看我现在就包括我现在这个样子

1392
00:52:52,430 --> 00:52:56,270
我现在给他修改我这个这个这个什么这个数组是吧

1393
00:52:56,390 --> 00:53:00,170
我修改数组这个数组A1是吧

1394
00:53:00,410 --> 00:53:02,690
ALE我这样子是不是可以访问到

1395
00:53:02,690 --> 00:53:07,940
那我修改它或访问修改他修改他怎么修改它的值是吧

1396
00:53:07,940 --> 00:53:08,720
修改成这个样子

1397
00:53:08,810 --> 00:53:11,420
你说现在会触发这个里边儿数组里面这个sight吗

1398
00:53:11,980 --> 00:53:12,640
触发不到了

1399
00:53:12,850 --> 00:53:14,290
是不是不能触发这个set了

1400
00:53:14,910 --> 00:53:15,510
看到吗

1401
00:53:16,080 --> 00:53:17,250
不能触发这个sight了

1402
00:53:17,640 --> 00:53:21,810
他只能够监听这一层最外边儿这一层据每一个K的

1403
00:53:21,930 --> 00:53:23,910
如果你这个东西它又是一个新数据了

1404
00:53:23,910 --> 00:53:24,300
同学们

1405
00:53:24,600 --> 00:53:26,820
这是不是又是一个新的引用了

1406
00:53:27,120 --> 00:53:28,800
是不是又是一个新的引用了

1407
00:53:28,950 --> 00:53:30,510
这是不是又是一个新的引用了

1408
00:53:30,870 --> 00:53:33,420
它拦截拦截的只是你当前这个地地址

1409
00:53:33,420 --> 00:53:33,930
知道吧

1410
00:53:34,170 --> 00:53:37,980
拦截这个东西只是去拦截你当前这个引用的地址

1411
00:53:38,280 --> 00:53:40,530
你下一个引用的地址他是不会被拦截的

1412
00:53:40,680 --> 00:53:41,880
明白这个过程吗同学们

1413
00:53:43,810 --> 00:53:44,410
明白吗

1414
00:53:45,500 --> 00:53:47,750
那怎么处理怎么处理

1415
00:53:48,320 --> 00:53:51,560
怎么处理递归吗递归吗

1416
00:53:56,150 --> 00:53:56,690
递归吗

1417
00:53:59,140 --> 00:53:59,830
能递归吗

1418
00:54:00,400 --> 00:54:01,120
不用递归

1419
00:54:01,770 --> 00:54:03,150
我这儿这样一下

1420
00:54:03,770 --> 00:54:04,550
这个用递归吗

1421
00:54:04,580 --> 00:54:04,880
同学们

1422
00:54:04,940 --> 00:54:05,810
我这个是递归吗

1423
00:54:06,440 --> 00:54:07,220
我不用递归

1424
00:54:08,080 --> 00:54:10,390
你看我现在现在这样一下就可以了

1425
00:54:10,540 --> 00:54:12,700
我现在就可以了是

1426
00:54:12,700 --> 00:54:13,900
现在是不是就出来了

1427
00:54:16,020 --> 00:54:16,440
对

1428
00:54:17,430 --> 00:54:17,850
对

1429
00:54:18,270 --> 00:54:19,200
返回一个新的

1430
00:54:19,440 --> 00:54:20,610
他什么时候返回新的

1431
00:54:20,880 --> 00:54:21,360
我问你

1432
00:54:21,570 --> 00:54:22,770
他什么时候返回新的

1433
00:54:25,780 --> 00:54:27,790
他在你get的时候才去返回新的

1434
00:54:28,300 --> 00:54:30,490
你没有get的时候还需要返回新的吗

1435
00:54:30,850 --> 00:54:32,350
你看同学们我们这个过程

1436
00:54:32,350 --> 00:54:33,340
你要看我这个过程

1437
00:54:33,490 --> 00:54:36,670
我P我先P底儿era

1438
00:54:37,930 --> 00:54:40,240
这个时候我如果不执行PDL

1439
00:54:40,300 --> 00:54:44,380
我这个PDL他就一直不会就不会去代理他是吧

1440
00:54:44,960 --> 00:54:46,970
我如果不不获取这个东西

1441
00:54:47,450 --> 00:54:49,310
是不是就一直一直不会去带领他

1442
00:54:49,580 --> 00:54:51,350
是不是同学明白这个过程嘛

1443
00:54:51,380 --> 00:54:52,850
我一直不去获取他

1444
00:54:52,970 --> 00:54:55,310
他就不知道我这个get具体要get的是什么

1445
00:54:55,490 --> 00:54:57,620
因为我get了之后再返回的结果是吧

1446
00:54:58,040 --> 00:55:00,380
我如果不去不去获取他

1447
00:55:00,380 --> 00:55:01,340
我获取的是这些

1448
00:55:01,370 --> 00:55:03,560
他一直就不知道我这儿反馈的是什么内容是吧

1449
00:55:04,320 --> 00:55:04,770
是吧

1450
00:55:06,040 --> 00:55:09,640
但是我当我去需要get钬使用它的时候

1451
00:55:10,860 --> 00:55:11,940
我这样去返回

1452
00:55:12,640 --> 00:55:14,890
你看它就会返回一个代理的数据可以了吗

1453
00:55:15,840 --> 00:55:17,610
因为我这个时候获取的时候

1454
00:55:17,610 --> 00:55:18,390
他才会去代理

1455
00:55:18,840 --> 00:55:23,250
然后再去拿什么再去做什么再去修改就没问题了是吧

1456
00:55:25,300 --> 00:55:27,310
是不是再去修改是不是

1457
00:55:28,400 --> 00:55:30,290
再去是不是就没问题了是吧

1458
00:55:31,790 --> 00:55:33,080
那这个过程是什么过程

1459
00:55:33,320 --> 00:55:34,550
你看他是做了一个什么

1460
00:55:34,730 --> 00:55:36,320
在你获取的时候

1461
00:55:36,770 --> 00:55:38,600
在你真正使用的时候

1462
00:55:39,650 --> 00:55:41,720
他能够拦截到你要使用的这个值

1463
00:55:42,740 --> 00:55:43,850
下一个字是什么是吧

1464
00:55:44,240 --> 00:55:46,190
然后他去做什么拦截

1465
00:55:46,250 --> 00:55:47,150
懂了这个过程吗

1466
00:55:47,990 --> 00:55:48,950
没懂得扣零

1467
00:55:48,980 --> 00:55:49,700
懂的扣一

1468
00:55:55,580 --> 00:55:56,030
是吧

1469
00:55:56,210 --> 00:55:58,010
这块做了一个什么懒代理

1470
00:55:58,700 --> 00:55:59,120
知道吧

1471
00:55:59,420 --> 00:56:00,470
这叫懒代理

1472
00:56:01,300 --> 00:56:02,650
在你使用的时候

1473
00:56:03,070 --> 00:56:05,320
在你在使用时

1474
00:56:06,470 --> 00:56:06,950
在

1475
00:56:07,700 --> 00:56:08,270
获取

1476
00:56:08,900 --> 00:56:09,530
明白了吗

1477
00:56:09,650 --> 00:56:11,570
所以说他需要一开始去递归吗

1478
00:56:12,140 --> 00:56:13,280
需要一开始去递归吗

1479
00:56:13,280 --> 00:56:14,540
同学们需要吗

1480
00:56:16,670 --> 00:56:17,210
需要吗

1481
00:56:18,270 --> 00:56:19,230
是不需要

1482
00:56:20,060 --> 00:56:20,570
是啊

1483
00:56:21,220 --> 00:56:22,600
不需要一开始就递归了

1484
00:56:23,720 --> 00:56:25,730
是不是就不需要去递归了

1485
00:56:26,210 --> 00:56:27,860
是不是他只需要去便利一层

1486
00:56:28,010 --> 00:56:30,170
把这个数据的顶层数据给拦截了就行

1487
00:56:30,620 --> 00:56:31,790
因为你访问数据的时候

1488
00:56:31,820 --> 00:56:34,250
一定是一层一层一层去访问内部的数据

1489
00:56:34,250 --> 00:56:34,610
是不是

1490
00:56:35,800 --> 00:56:37,810
明白了吧明白了吧

1491
00:56:38,140 --> 00:56:40,000
所以这两个点搞完了之后

1492
00:56:40,210 --> 00:56:41,020
我们就继续了

1493
00:56:46,280 --> 00:56:47,030
每一次性

1494
00:56:47,940 --> 00:56:48,480
不用啊

1495
00:56:48,570 --> 00:56:52,950
你如果已经你如你它这里边肯定还要做出去做再做处理

1496
00:56:53,100 --> 00:56:53,820
你返回的值

1497
00:56:53,820 --> 00:56:55,230
如果已经是代理对象了

1498
00:56:55,770 --> 00:56:59,580
他这个我那我这儿只是给大家写这个使用例子

1499
00:56:59,760 --> 00:57:02,550
它这里边会维护你这里边儿如果这个值

1500
00:57:02,730 --> 00:57:04,110
我这再加个标识背是吧

1501
00:57:04,440 --> 00:57:05,160
代理了之后

1502
00:57:05,160 --> 00:57:06,330
我在这儿给他加一个标识

1503
00:57:06,330 --> 00:57:08,400
被你代理之后的值给他加一个加一个

1504
00:57:08,400 --> 00:57:11,400
比如说什么加一个加一个标识叫做什么

1505
00:57:11,430 --> 00:57:13,740
叫做已经处理之后的标识

1506
00:57:14,040 --> 00:57:14,430
是吧

1507
00:57:18,240 --> 00:57:18,720
对啊

1508
00:57:19,800 --> 00:57:20,850
不用重写每一个K

1509
00:57:20,850 --> 00:57:21,600
不用代理

1510
00:57:21,630 --> 00:57:22,410
可以拦截

1511
00:57:23,360 --> 00:57:24,170
是吧

1512
00:57:24,170 --> 00:57:24,740
继续

1513
00:57:25,220 --> 00:57:26,780
我们继续要到V3里边儿了

1514
00:57:27,050 --> 00:57:29,600
我们现在现在把这些东西讲完了

1515
00:57:29,600 --> 00:57:31,550
我们就开始源码里边儿的部分了

1516
00:57:31,700 --> 00:57:32,720
源码里边的部分了

1517
00:57:34,890 --> 00:57:36,120
V3里面很多没用过

1518
00:57:36,510 --> 00:57:37,470
没用过无所谓

1519
00:57:38,080 --> 00:57:38,320
没用

1520
00:57:38,320 --> 00:57:40,300
我们来看一下它的例子

1521
00:57:40,570 --> 00:57:41,710
这是V3的源码

1522
00:57:41,740 --> 00:57:43,270
这是V3的源码

1523
00:57:43,270 --> 00:57:44,170
V3的源码

1524
00:57:44,170 --> 00:57:45,280
V3的源码还是那句话

1525
00:57:45,310 --> 00:57:46,360
我们来看目录结构

1526
00:57:46,780 --> 00:57:48,220
最核心的几个目录结构

1527
00:57:48,370 --> 00:57:48,910
同学们

1528
00:57:49,420 --> 00:57:50,380
这上面不用说了吧

1529
00:57:50,740 --> 00:57:51,610
这边儿也不用说了

1530
00:57:51,610 --> 00:57:52,660
这是打包的一些东西

1531
00:57:52,690 --> 00:57:53,920
是打包的一些东西是吧

1532
00:57:54,130 --> 00:57:55,000
这边是一些政策

1533
00:57:55,300 --> 00:57:55,870
这是什么

1534
00:57:56,380 --> 00:57:58,840
也也是一些打包的一些开发的一些东西

1535
00:57:58,840 --> 00:57:59,140
是不是

1536
00:57:59,590 --> 00:58:01,480
那么最核心的什么在package里面

1537
00:58:02,150 --> 00:58:03,140
他用了什么打包

1538
00:58:03,200 --> 00:58:04,190
他这个东西用了什么

1539
00:58:04,190 --> 00:58:04,670
用了什么

1540
00:58:04,670 --> 00:58:06,560
用了什么什么方式

1541
00:58:07,390 --> 00:58:08,350
他这个用什么方式

1542
00:58:08,410 --> 00:58:09,880
用了melrose是吧

1543
00:58:10,030 --> 00:58:11,440
用rap是吧

1544
00:58:11,920 --> 00:58:12,310
是吧

1545
00:58:12,850 --> 00:58:15,130
Wait wait wait啊

1546
00:58:15,370 --> 00:58:16,030
他是用什么

1547
00:58:16,120 --> 00:58:17,710
用了mel rap这种东西

1548
00:58:17,800 --> 00:58:19,570
Mill I这个是什么

1549
00:58:20,160 --> 00:58:23,730
就是相当于把不同的功能分到不同的PK几下

1550
00:58:24,300 --> 00:58:25,110
不同的包

1551
00:58:25,140 --> 00:58:26,970
每一个功能包都可以单独去发

1552
00:58:26,970 --> 00:58:28,230
不明白吗

1553
00:58:28,830 --> 00:58:30,630
知道这个机智机智吗

1554
00:58:30,660 --> 00:58:31,530
知道这个机制吗

1555
00:58:31,680 --> 00:58:32,970
前面你们没学这个机子吗

1556
00:58:34,150 --> 00:58:34,840
Mineral

1557
00:58:35,780 --> 00:58:36,650
没学这个句子吗

1558
00:58:37,160 --> 00:58:38,930
我给你稍稍微稍微说一下

1559
00:58:38,960 --> 00:58:40,310
稍微歇

1560
00:58:43,100 --> 00:58:44,210
一个打包工具叫什么

1561
00:58:44,210 --> 00:58:44,900
累吧

1562
00:58:46,410 --> 00:58:47,340
这个累啦

1563
00:58:55,680 --> 00:58:56,370
Kiss

1564
00:58:58,690 --> 00:58:59,380
JS

1565
00:59:05,120 --> 00:59:06,920
那个那个叫啥玩意儿

1566
00:59:06,920 --> 00:59:09,830
这个这对对对

1567
00:59:10,880 --> 00:59:11,150
对

1568
00:59:11,630 --> 00:59:12,620
还是有同学知道是吧

1569
00:59:12,950 --> 00:59:15,290
这个东西他这个东西做什么

1570
00:59:15,650 --> 00:59:19,340
他可以把你一个项目里边儿打多个软件包出来

1571
00:59:19,550 --> 00:59:20,330
什么意思呢

1572
00:59:20,950 --> 00:59:22,750
就是说我这里边所有的东西

1573
00:59:22,930 --> 00:59:25,030
我可以通过这个功能来管理

1574
00:59:25,690 --> 00:59:27,700
按理说按理说是吧

1575
00:59:27,700 --> 00:59:30,820
按理说我这一刻是不是可以单独发一个NPM包

1576
00:59:30,880 --> 00:59:31,690
是一个单独的功能

1577
00:59:31,690 --> 00:59:35,350
你看这个链接是不是这个又是一个单独的PK点

1578
00:59:35,350 --> 00:59:36,640
接着又是一个单独的APP钱包

1579
00:59:36,640 --> 00:59:41,080
是不是这边又是一个在下边每这个pic下边每一个文件夹

1580
00:59:41,140 --> 00:59:45,520
每一个文件夹都是一个单独可以去发布的一个什么PK

1581
00:59:46,730 --> 00:59:47,990
KK的包知道吧

1582
00:59:48,170 --> 00:59:50,330
它的功能都是独立的明白吗

1583
00:59:50,480 --> 00:59:51,230
这个你明白吗

1584
00:59:53,160 --> 00:59:54,630
它的功能都是独立的

1585
00:59:54,960 --> 00:59:57,000
那么这个那说明你们这个学习不认真

1586
00:59:57,150 --> 00:59:59,190
那么它的文件夹结构就是通过什么

1587
00:59:59,220 --> 01:00:01,170
通过这个东西结实了这个这个玩意儿

1588
01:00:01,200 --> 01:00:03,270
这个玩意儿它可以多包管理工具

1589
01:00:03,540 --> 01:00:04,950
多包管理工具来管理什么

1590
01:00:04,980 --> 01:00:06,450
来管理这种这种多个包

1591
01:00:06,780 --> 01:00:07,500
来管理多个包

1592
01:00:07,500 --> 01:00:10,710
每一个包它像它的结构一定是有一个PK及文件夹

1593
01:00:10,860 --> 01:00:12,990
每个文件夹下面有多个目录

1594
01:00:12,990 --> 01:00:13,710
有多个文件

1595
01:00:13,800 --> 01:00:15,750
每个文件里边儿都有个陪练节省

1596
01:00:16,410 --> 01:00:18,030
每一个文件都有个链接

1597
01:00:18,030 --> 01:00:18,330
同学们

1598
01:00:18,980 --> 01:00:20,750
都有个会剪辑审了吗

1599
01:00:21,370 --> 01:00:22,990
然后每个文件都可以单独发布

1600
01:00:23,590 --> 01:00:25,030
他们每一个功能都是独立的

1601
01:00:25,240 --> 01:00:25,540
懂了吧

1602
01:00:25,540 --> 01:00:26,440
所以说这就是

1603
01:00:27,240 --> 01:00:29,040
没了瑞普的打包机子

1604
01:00:30,060 --> 01:00:30,630
然后继续

1605
01:00:31,280 --> 01:00:32,300
然后回到这边儿

1606
01:00:32,300 --> 01:00:32,930
回到这里边儿

1607
01:00:32,930 --> 01:00:34,700
什么唯一唯一的用法

1608
01:00:34,850 --> 01:00:35,660
唯一的用法呢

1609
01:00:35,660 --> 01:00:37,550
其实怎么说呢

1610
01:00:38,330 --> 01:00:39,200
嗯

1611
01:00:39,740 --> 01:00:41,090
没有太大的区别

1612
01:00:41,390 --> 01:00:42,350
没有太大的区别

1613
01:00:43,710 --> 01:00:44,250
你看

1614
01:00:44,520 --> 01:00:45,930
它唯一的区别就是什么

1615
01:00:47,420 --> 01:00:50,750
我先给大家说一下这个这个这个这个区这个使用吧

1616
01:00:51,140 --> 01:00:52,370
你看这是我们的模板是吧

1617
01:00:52,520 --> 01:00:53,840
这是我们的模板是吧

1618
01:00:53,990 --> 01:00:54,800
这是我们的模板

1619
01:00:55,470 --> 01:00:56,970
然后这些模板拿过来呢

1620
01:00:57,000 --> 01:00:57,630
你做什么

1621
01:00:57,780 --> 01:00:58,920
这些模板拿过来做什么

1622
01:00:59,610 --> 01:01:01,110
模板会变成render是不是

1623
01:01:02,310 --> 01:01:03,030
变成render

1624
01:01:03,210 --> 01:01:04,260
然后这是里边儿

1625
01:01:04,260 --> 01:01:05,850
这是你里边儿写的逻辑

1626
01:01:05,970 --> 01:01:08,790
你现在写的所有逻辑要写在哪边呢

1627
01:01:08,940 --> 01:01:10,380
要写在这个setup里边儿

1628
01:01:10,770 --> 01:01:12,780
要写在这个setup里边的同学们知道吗

1629
01:01:13,110 --> 01:01:15,240
你们所有的逻辑要写在一个setup里边

1630
01:01:15,510 --> 01:01:17,580
Setup里边你可以通过一个什么

1631
01:01:17,610 --> 01:01:18,510
通过一些指令

1632
01:01:18,780 --> 01:01:19,740
比如riff

1633
01:01:19,740 --> 01:01:20,790
或者说active

1634
01:01:20,790 --> 01:01:21,510
把它处理什么

1635
01:01:21,510 --> 01:01:22,350
响应式数据

1636
01:01:22,740 --> 01:01:25,440
处理的响应式数据之后把数据从这儿返回回去

1637
01:01:25,880 --> 01:01:27,170
把这些详细数据返回去

1638
01:01:27,500 --> 01:01:29,450
返回去的数据在这里面就可以使用

1639
01:01:29,870 --> 01:01:31,490
方法数据都可以在这儿使用

1640
01:01:31,550 --> 01:01:31,940
知道吧

1641
01:01:32,210 --> 01:01:34,160
你的方法数数据都可以在这使用

1642
01:01:34,400 --> 01:01:35,930
当然他照样支持什么

1643
01:01:36,260 --> 01:01:38,630
照样支持你之前的那种V2的写法

1644
01:01:39,310 --> 01:01:42,820
知不知道照样支持你的之前的那个什么V2的写法

1645
01:01:43,150 --> 01:01:44,260
就是MR这些东西

1646
01:01:44,320 --> 01:01:45,460
照样支持这些写法

1647
01:01:45,610 --> 01:01:46,360
懂不懂

1648
01:01:47,360 --> 01:01:48,650
明白明白了

1649
01:01:50,280 --> 01:01:51,480
相当于他现在支持

1650
01:01:52,080 --> 01:01:53,760
一个是用之前的写法

1651
01:01:53,760 --> 01:01:57,300
一个是类似什么V的那个什么V的什么的

1652
01:01:57,300 --> 01:01:58,680
是哪一种写法是吧

1653
01:01:59,100 --> 01:02:01,050
他现在单独拎一个hooks进来

1654
01:02:01,440 --> 01:02:03,090
然后写hooks这种写法

1655
01:02:03,150 --> 01:02:03,510
知道吧

1656
01:02:04,100 --> 01:02:04,790
所以这种功能

1657
01:02:05,000 --> 01:02:08,270
那么现在我们来聊微微核心的东西

1658
01:02:08,570 --> 01:02:13,250
你们下周要去把录播课里边那些V3的用法这些东西要给搞明白

1659
01:02:13,250 --> 01:02:15,350
我不可能给你们讲用法了是吧

1660
01:02:16,300 --> 01:02:18,130
这块要给大家讲一下核心的东西

1661
01:02:19,960 --> 01:02:21,190
最核心的是这个东西

1662
01:02:23,000 --> 01:02:23,750
我们说了

1663
01:02:25,200 --> 01:02:25,860
V3里边儿

1664
01:02:26,980 --> 01:02:29,770
我微你们你们的VI就两个维度

1665
01:02:30,190 --> 01:02:31,090
第一个维度是什么

1666
01:02:31,180 --> 01:02:32,110
模板编译是吧

1667
01:02:32,170 --> 01:02:33,100
把模板编译什么

1668
01:02:33,130 --> 01:02:35,170
Render边城render之后是吧

1669
01:02:35,290 --> 01:02:35,890
去做什么

1670
01:02:36,070 --> 01:02:37,150
收集依赖是吧

1671
01:02:37,330 --> 01:02:38,590
收集依赖是吧

1672
01:02:38,950 --> 01:02:40,870
收集完依赖然后去做什么

1673
01:02:41,170 --> 01:02:43,270
然后去去去去执行是吧

1674
01:02:44,200 --> 01:02:44,740
执行

1675
01:02:47,020 --> 01:02:48,400
执行执行完了之后

1676
01:02:48,490 --> 01:02:49,420
数据改变的时候

1677
01:02:49,420 --> 01:02:50,560
什么发布是吧

1678
01:02:50,800 --> 01:02:55,240
发布那么这一块儿同学们这个搜集来的东西要怎么来收集

1679
01:02:55,270 --> 01:02:55,930
怎么收集

1680
01:02:56,020 --> 01:02:58,330
我们之前是什么是什么来维护的

1681
01:02:58,330 --> 01:02:59,920
是地铺收集了是吧

1682
01:03:00,190 --> 01:03:01,120
地铺收集了是吧

1683
01:03:01,920 --> 01:03:02,340
是不是

1684
01:03:04,680 --> 01:03:05,490
你自己搜吧

1685
01:03:05,520 --> 01:03:06,000
自己搜吧

1686
01:03:06,750 --> 01:03:07,110
是吧

1687
01:03:07,230 --> 01:03:08,370
的谱里边维护的是不是

1688
01:03:08,910 --> 01:03:12,510
那么现在的普维护搜集什么water water

1689
01:03:15,470 --> 01:03:15,830
对

1690
01:03:16,010 --> 01:03:16,700
收集water

1691
01:03:16,820 --> 01:03:17,990
那么现在我们搜集什么

1692
01:03:18,140 --> 01:03:18,980
换一个东西是吧

1693
01:03:19,220 --> 01:03:20,960
收集water water之前怎么收集

1694
01:03:21,230 --> 01:03:22,550
他需要给一个call back是吧

1695
01:03:22,640 --> 01:03:24,200
你的call back轨道render是吧

1696
01:03:24,290 --> 01:03:27,680
把你的render给到call back里边儿是怎么是这个样子

1697
01:03:27,800 --> 01:03:29,180
然后这是个V1实力是吧

1698
01:03:29,870 --> 01:03:30,110
是吧

1699
01:03:30,110 --> 01:03:30,920
哪个威力实力

1700
01:03:30,920 --> 01:03:32,180
然后还有它的render是吧

1701
01:03:32,450 --> 01:03:33,200
是这个样子

1702
01:03:34,030 --> 01:03:35,650
这是我们昨天给大家讲的是吧

1703
01:03:36,070 --> 01:03:37,690
那么现在他换一种收集方式

1704
01:03:37,780 --> 01:03:39,130
他怎么收集出来给大家看一下

1705
01:03:40,960 --> 01:03:42,100
换一种收集方式

1706
01:03:48,870 --> 01:03:49,140
嗯

1707
01:04:10,320 --> 01:04:11,280
我们来看这

1708
01:04:12,490 --> 01:04:12,970
嗯

1709
01:04:14,100 --> 01:04:15,960
我们之前是不是收集了

1710
01:04:15,990 --> 01:04:16,560
处理数据

1711
01:04:16,560 --> 01:04:18,060
先把数据处理详细数据

1712
01:04:18,240 --> 01:04:20,610
我们之前处理的详细数据是通过什么来处理的

1713
01:04:20,760 --> 01:04:22,800
Ador现在是通过什么来处理

1714
01:04:23,010 --> 01:04:24,240
Relative看到吗

1715
01:04:24,450 --> 01:04:25,560
这是我声明一个数据

1716
01:04:25,830 --> 01:04:26,850
这是re active

1717
01:04:27,000 --> 01:04:29,490
这是软V里边导出来的两个方法

1718
01:04:29,760 --> 01:04:31,050
We里边倒出来两个方法

1719
01:04:31,830 --> 01:04:32,910
我首先声明一个

1720
01:04:32,940 --> 01:04:33,960
声明一份数据是吧

1721
01:04:33,960 --> 01:04:34,860
声明一份什么数据

1722
01:04:35,160 --> 01:04:37,440
证明一份这个数据是原始数据

1723
01:04:37,650 --> 01:04:41,790
然后把这份原始数据通过一个relative把它处理成什么响应式数据

1724
01:04:42,210 --> 01:04:43,980
这个响应数据都是通过什么

1725
01:04:44,010 --> 01:04:45,600
通过proxy被处理了

1726
01:04:45,840 --> 01:04:46,500
被处理了

1727
01:04:47,230 --> 01:04:48,700
然后去做一个什么同学们

1728
01:04:49,920 --> 01:04:52,110
去做一个或使用这个数据

1729
01:04:52,470 --> 01:04:53,850
你们在使用数据的时候

1730
01:04:53,850 --> 01:04:55,650
平时就是render里面使用数据了

1731
01:04:55,650 --> 01:04:57,300
是不是我们现在不用render

1732
01:04:57,600 --> 01:04:58,350
我们就是什么

1733
01:04:58,590 --> 01:05:00,600
就是正常的去打印数据是吧

1734
01:05:00,750 --> 01:05:02,940
就是就是不是就算使用数据了是吧

1735
01:05:03,180 --> 01:05:05,460
你们平时使用数据是通过render是吧

1736
01:05:05,730 --> 01:05:06,450
我们的模板编译

1737
01:05:06,450 --> 01:05:07,350
我们现在简单一点

1738
01:05:07,440 --> 01:05:08,490
通过获取是吧

1739
01:05:08,730 --> 01:05:09,390
通过什么呢

1740
01:05:09,390 --> 01:05:10,080
通过那个什么

1741
01:05:11,050 --> 01:05:12,730
通过正常的获取数据来使用

1742
01:05:12,730 --> 01:05:14,890
然后打印是来使用数据

1743
01:05:14,890 --> 01:05:16,480
这个样子来使用数据

1744
01:05:16,540 --> 01:05:21,400
那他什么时候来执行这个N是什么时候执行N是不是就是什么时候来使用数据了

1745
01:05:21,400 --> 01:05:21,670
是吧

1746
01:05:22,120 --> 01:05:22,480
是吧

1747
01:05:22,630 --> 01:05:24,670
执行a分的时候是不是就执行render了

1748
01:05:24,910 --> 01:05:27,010
执行a分的时候是不是就执行render是吧

1749
01:05:27,430 --> 01:05:29,620
执行render是执行M的

1750
01:05:29,620 --> 01:05:30,760
是不是就执行render

1751
01:05:31,120 --> 01:05:31,930
咱们这个明白吗

1752
01:05:34,770 --> 01:05:36,540
执行N的时候是不是执行的呢

1753
01:05:39,630 --> 01:05:41,640
那么我们怎么来处理他一下

1754
01:05:43,060 --> 01:05:44,650
我们通过这个effect

1755
01:05:44,680 --> 01:05:46,750
它会导出一个什么effect这个玩意儿

1756
01:05:47,170 --> 01:05:49,870
Effect这玩意儿他把N包装一下

1757
01:05:50,610 --> 01:05:52,500
把这个F的回调函数包装一下

1758
01:05:52,500 --> 01:05:54,510
包装一下包装完了就没了

1759
01:05:54,510 --> 01:05:55,860
你看这下边儿全是我的注册

1760
01:05:56,010 --> 01:05:57,120
包装完了他就没了

1761
01:05:57,150 --> 01:05:57,510
看到吗

1762
01:05:57,600 --> 01:05:58,080
看见了吗

1763
01:05:58,200 --> 01:05:59,340
包装完了之后就没了

1764
01:05:59,900 --> 01:06:03,410
那说明只要我打印这个东西是不是就执行了一次是吧

1765
01:06:04,140 --> 01:06:04,500
是啊

1766
01:06:04,500 --> 01:06:05,730
所以我们来看一下

1767
01:06:05,760 --> 01:06:06,960
来看一下刷新一下

1768
01:06:08,240 --> 01:06:08,720
是不是

1769
01:06:08,720 --> 01:06:12,500
你看他打印了一次是不是打印而且获取了数据是不是说明什么

1770
01:06:12,560 --> 01:06:19,580
说明这个F是不是就直接直接你只要用这个effect包这个包你这个N是不是就会执行一次所以说是不是

1771
01:06:19,850 --> 01:06:22,850
所以说effect这为三的赶紧了

1772
01:06:24,350 --> 01:06:25,040
我就得赶紧了

1773
01:06:25,370 --> 01:06:26,000
你废他

1774
01:06:27,440 --> 01:06:29,450
会包裹包裹

1775
01:06:30,550 --> 01:06:31,600
使用的是吧

1776
01:06:31,660 --> 01:06:33,730
使用响应式

1777
01:06:34,830 --> 01:06:36,300
数据的函数是吧

1778
01:06:36,840 --> 01:06:37,620
他会做什么

1779
01:06:37,800 --> 01:06:38,760
执行一次是不是

1780
01:06:39,650 --> 01:06:41,060
什么是执行一次

1781
01:06:41,450 --> 01:06:42,320
执行一次默认

1782
01:06:42,320 --> 01:06:44,180
你只要包了他是不是就会执行一次

1783
01:06:46,650 --> 01:06:47,400
不负责

1784
01:06:48,040 --> 01:06:48,790
也字行吗

1785
01:06:49,030 --> 01:06:49,600
什么意思

1786
01:06:50,240 --> 01:06:50,690
不负责

1787
01:06:50,690 --> 01:06:51,110
他也自信

1788
01:06:51,110 --> 01:06:52,220
我现在没有复制

1789
01:06:53,900 --> 01:06:54,620
我也没有复制

1790
01:06:54,620 --> 01:06:55,220
我哪里复制

1791
01:06:55,220 --> 01:06:56,030
我这儿获取

1792
01:06:56,030 --> 01:06:56,840
我只是获取

1793
01:06:57,110 --> 01:06:57,890
我获取这个东西

1794
01:06:57,890 --> 01:06:58,670
我没有赋值

1795
01:07:01,270 --> 01:07:01,480
对啊

1796
01:07:01,480 --> 01:07:02,530
这是获取数据

1797
01:07:02,980 --> 01:07:03,910
我没有复制

1798
01:07:04,330 --> 01:07:05,260
我哪儿复制的

1799
01:07:06,640 --> 01:07:07,690
我哪儿都没复制

1800
01:07:08,170 --> 01:07:09,310
我这是获取数据

1801
01:07:11,860 --> 01:07:13,030
你这个什么情况

1802
01:07:13,270 --> 01:07:14,320
看你看明白了吗

1803
01:07:18,760 --> 01:07:20,080
你说他这里边儿

1804
01:07:20,080 --> 01:07:20,710
你说这个

1805
01:07:21,470 --> 01:07:22,520
这个东西没区别

1806
01:07:22,520 --> 01:07:23,750
这个东西还有什么区别吗

1807
01:07:24,050 --> 01:07:25,850
这个我给你我的天

1808
01:07:25,850 --> 01:07:26,750
这个有什么区别吗

1809
01:07:28,720 --> 01:07:30,790
我副职这个东西没有什么关系

1810
01:07:31,900 --> 01:07:32,800
这个你负值

1811
01:07:33,160 --> 01:07:34,210
这个负值能有什么

1812
01:07:34,210 --> 01:07:35,740
能有什么关系吗

1813
01:07:36,780 --> 01:07:37,950
这个肯定没有什么关系

1814
01:07:37,950 --> 01:07:39,480
我复制这个变量有什么关系吗

1815
01:07:39,660 --> 01:07:40,680
这是它的返回值

1816
01:07:41,380 --> 01:07:42,820
那返回值肯定不影响

1817
01:07:43,580 --> 01:07:46,490
所以你看这一步它会有一个什么执行是吧

1818
01:07:46,550 --> 01:07:48,260
执行包裹的什么

1819
01:07:49,540 --> 01:07:50,590
包裹的函数

1820
01:07:53,600 --> 01:07:53,900
是吧

1821
01:07:55,070 --> 01:07:58,010
包裹的函数包裹的函数具有什么使用

1822
01:07:59,460 --> 01:08:00,540
这儿有响应式

1823
01:08:00,540 --> 01:08:01,470
这是是吧

1824
01:08:01,560 --> 01:08:02,190
想一次数据

1825
01:08:02,460 --> 01:08:04,920
那么同学们这块儿我们要要到这里边儿了

1826
01:08:05,540 --> 01:08:06,470
这里边儿了是吧

1827
01:08:06,710 --> 01:08:08,720
我现在是不是第一次执行

1828
01:08:08,750 --> 01:08:11,030
那这个过程是不是就类似于我们的什么render

1829
01:08:11,030 --> 01:08:11,330
是不是

1830
01:08:11,630 --> 01:08:12,800
是不是就类似于我们的

1831
01:08:13,100 --> 01:08:14,180
你只要用render

1832
01:08:14,210 --> 01:08:16,610
只要把用effect把render包裹一下

1833
01:08:16,880 --> 01:08:18,560
他是不是就会执行一次是吧

1834
01:08:18,890 --> 01:08:19,730
是不是就会执行一次

1835
01:08:19,730 --> 01:08:20,210
同学们

1836
01:08:20,790 --> 01:08:22,320
执行一次

1837
01:08:24,030 --> 01:08:26,490
是不是就会执行一次页面是不是就渲染出来

1838
01:08:27,030 --> 01:08:27,450
是不是

1839
01:08:28,970 --> 01:08:29,540
明白吧

1840
01:08:29,990 --> 01:08:32,030
那现在我要修改这个数据了

1841
01:08:32,480 --> 01:08:33,500
我要修改这个数据

1842
01:08:33,770 --> 01:08:34,490
修改这个数据

1843
01:08:34,760 --> 01:08:35,690
按理说修改数据

1844
01:08:35,690 --> 01:08:37,880
我这个F是不是也要重新执行一次

1845
01:08:37,940 --> 01:08:39,140
我们再来看修改一次

1846
01:08:40,030 --> 01:08:40,690
Counter

1847
01:08:43,950 --> 01:08:47,910
这样修改是啥呀应该是谁

1848
01:08:49,090 --> 01:08:49,660
详细数据

1849
01:08:49,720 --> 01:08:51,370
Data counter

1850
01:08:52,290 --> 01:08:52,590
是吧

1851
01:08:53,040 --> 01:08:55,500
等于什么

1852
01:08:55,530 --> 01:08:56,910
是不是执行了一次

1853
01:08:56,910 --> 01:08:59,400
是不是打印了一次是吧是吧

1854
01:08:59,490 --> 01:09:00,090
说明什么

1855
01:09:00,120 --> 01:09:01,080
修改数据

1856
01:09:02,580 --> 01:09:03,660
修改数据的时候

1857
01:09:06,100 --> 01:09:07,540
修改数据的时候

1858
01:09:08,540 --> 01:09:10,640
也会执行是什么render是不是

1859
01:09:11,510 --> 01:09:14,000
那他这中这中间就是什么是吧

1860
01:09:14,770 --> 01:09:16,120
那他修改数据的时候

1861
01:09:16,120 --> 01:09:16,900
他怎么知道

1862
01:09:17,050 --> 01:09:17,860
他怎么知道

1863
01:09:17,890 --> 01:09:19,510
他怎么知道我哪个数据

1864
01:09:19,510 --> 01:09:22,030
我哪个哪个函数使用了我这个东西呢

1865
01:09:22,270 --> 01:09:23,290
使用我这个数据呢

1866
01:09:23,320 --> 01:09:23,650
是吧

1867
01:09:24,160 --> 01:09:25,750
他是什么时候知道我这个东西呢

1868
01:09:25,810 --> 01:09:27,130
是不是就在effect里边儿

1869
01:09:28,270 --> 01:09:29,260
是不是在APP里边儿

1870
01:09:29,470 --> 01:09:35,470
Effect里边怎么去知道的同学们是不是就是我们昨天那个流程构建构建依赖

1871
01:09:35,500 --> 01:09:37,090
是不是构建依赖是

1872
01:09:37,300 --> 01:09:38,620
它这里边是怎么构建依赖的

1873
01:09:38,620 --> 01:09:41,200
是你执行一份给他拿过来

1874
01:09:41,680 --> 01:09:45,070
你的effect里边儿是不是你的ex函数里边儿是吧

1875
01:09:45,580 --> 01:09:46,960
你的ex函数里边儿

1876
01:09:47,780 --> 01:09:48,860
是不是有个N是吧

1877
01:09:49,130 --> 01:09:50,150
这是我们的分是吧

1878
01:09:50,420 --> 01:09:51,830
你执行en的时候是吧

1879
01:09:51,830 --> 01:09:52,190
兄弟们

1880
01:09:52,580 --> 01:09:53,390
你执行FM

1881
01:09:53,390 --> 01:09:53,870
你拿过来

1882
01:09:53,870 --> 01:09:55,490
我们是不是首先会执行一次FN

1883
01:09:55,670 --> 01:09:56,600
你执行L的

1884
01:09:56,600 --> 01:09:57,410
L的时候

1885
01:09:57,530 --> 01:09:59,630
我们这里边是不是有个proxy是吧

1886
01:10:00,140 --> 01:10:00,470
是不是

1887
01:10:00,470 --> 01:10:03,830
这里边是不是我们先把这里边儿先先给他net是吧

1888
01:10:03,980 --> 01:10:07,370
Net effect net text ma net a net TE

1889
01:10:08,230 --> 01:10:08,830
赖特

1890
01:10:10,380 --> 01:10:12,660
Net a target是

1891
01:10:13,830 --> 01:10:14,670
8X等于什么

1892
01:10:14,760 --> 01:10:15,960
Text是8X

1893
01:10:16,140 --> 01:10:19,290
然后在这里边儿把这个net是吧

1894
01:10:19,290 --> 01:10:19,890
FN是吧

1895
01:10:20,010 --> 01:10:20,640
给到什么

1896
01:10:20,910 --> 01:10:22,560
给到我们这个上面是吧

1897
01:10:24,160 --> 01:10:28,660
把这个NXTRA给了N上面所记录下来

1898
01:10:28,750 --> 01:10:31,630
记录一下当前正是谁正在执行这个东西是吧

1899
01:10:32,440 --> 01:10:33,640
对同学这个明白吗

1900
01:10:33,820 --> 01:10:37,390
这是我现在N的函数的内部的函数的一个大体逻辑

1901
01:10:37,390 --> 01:10:38,590
我给大家先说一下

1902
01:10:39,630 --> 01:10:40,380
你看明白吗

1903
01:10:40,680 --> 01:10:41,940
看着我跟着我这个走

1904
01:10:42,000 --> 01:10:43,830
他是不是一定要构建这个map

1905
01:10:44,130 --> 01:10:48,930
因为一定要构建依赖我下一次才能知道我执行我什么时候执行这个东西是吧

1906
01:10:49,320 --> 01:10:51,870
这个跟我们昨天讲的这个PPT是不是一模一样

1907
01:10:52,440 --> 01:10:53,700
没有什么区别是不是

1908
01:10:54,360 --> 01:10:56,010
讲这个PPT是没有什么区别

1909
01:10:56,690 --> 01:10:58,070
我执行第一次的时候

1910
01:10:58,070 --> 01:11:01,190
是不是就需要去什么去获取通知

1911
01:11:01,370 --> 01:11:03,260
谁使用了这个东西是不

1912
01:11:03,290 --> 01:11:04,490
谁使用了我这个water

1913
01:11:04,730 --> 01:11:06,830
现在谁来使用了我这个a是吧

1914
01:11:06,950 --> 01:11:08,180
然后把它收集到依赖里面

1915
01:11:08,570 --> 01:11:10,580
是不是同学们是这个过程

1916
01:11:11,000 --> 01:11:12,350
我们这块儿是不是也是这个过程

1917
01:11:12,470 --> 01:11:13,340
明白这个过程

1918
01:11:13,340 --> 01:11:14,900
你们给我一个

1919
01:11:15,320 --> 01:11:15,920
Answer

1920
01:11:17,310 --> 01:11:18,450
你不管构建什么

1921
01:11:18,450 --> 01:11:19,680
它就是构建一个依赖

1922
01:11:19,710 --> 01:11:21,300
你不用管这个依赖是什么东西

1923
01:11:22,060 --> 01:11:22,540
好不好

1924
01:11:22,570 --> 01:11:23,620
给我一个answer

1925
01:11:24,680 --> 01:11:26,360
我现在给了你们一个question

1926
01:11:26,360 --> 01:11:27,800
我需要你们给我一个answer

1927
01:11:29,190 --> 01:11:29,670
好吧

1928
01:11:31,360 --> 01:11:31,930
明白吧

1929
01:11:31,960 --> 01:11:32,320
好

1930
01:11:32,650 --> 01:11:35,290
那这块儿他是怎么一个大体的逻辑同学们看着

1931
01:11:35,680 --> 01:11:36,340
我执行N

1932
01:11:36,460 --> 01:11:37,150
这个N是吧

1933
01:11:37,360 --> 01:11:38,230
这就是一个分是吧

1934
01:11:38,290 --> 01:11:41,380
我直行他走这块儿我把它拿来这儿执行是吧

1935
01:11:41,410 --> 01:11:41,890
这也执行

1936
01:11:42,130 --> 01:11:42,850
那执行他的手

1937
01:11:42,850 --> 01:11:44,110
同学们的proxy

1938
01:11:46,880 --> 01:11:47,750
What proxy

1939
01:11:48,670 --> 01:11:49,930
把这个proxy复制过来

1940
01:11:53,580 --> 01:11:54,390
我的proxy是吧

1941
01:11:54,540 --> 01:11:55,500
这是我的proxy是不是

1942
01:12:03,400 --> 01:12:05,080
这是我的proxy是吧

1943
01:12:05,200 --> 01:12:06,670
我的proxy我监听什么

1944
01:12:06,850 --> 01:12:08,200
我监听的这个数据是吧

1945
01:12:08,380 --> 01:12:09,220
我的数据

1946
01:12:09,220 --> 01:12:10,240
我监听的这个数据

1947
01:12:11,420 --> 01:12:13,640
然后你这个数据的K我也知道什么是吧

1948
01:12:13,700 --> 01:12:15,290
我在这块儿你在获取

1949
01:12:15,320 --> 01:12:16,280
你让我使用

1950
01:12:16,520 --> 01:12:18,170
你在使用我这个分的时候

1951
01:12:18,500 --> 01:12:20,360
你再使用我这个分的时候是吧

1952
01:12:20,390 --> 01:12:22,250
同学们你在使用我这个分的时候

1953
01:12:23,010 --> 01:12:24,720
A分里边是不是就会执行的吗

1954
01:12:24,840 --> 01:12:26,100
A是不是就会执行什么

1955
01:12:26,400 --> 01:12:27,270
执行哪个东西

1956
01:12:27,390 --> 01:12:28,530
是不是就会执行这个

1957
01:12:28,560 --> 01:12:30,570
执行就执行这个玩意儿是吧

1958
01:12:31,020 --> 01:12:32,940
这里边内部是就会执行这个东西

1959
01:12:34,220 --> 01:12:35,660
是不是就会执行这个玩意儿

1960
01:12:35,810 --> 01:12:36,560
这个玩意儿的时候

1961
01:12:36,560 --> 01:12:37,940
我的数据是不是已经被监听了

1962
01:12:37,940 --> 01:12:42,560
是不是他在里边是不是会拿会就会触发get是八处发给他的时候

1963
01:12:42,560 --> 01:12:45,350
我刚好刚好刚好现在是吧

1964
01:12:45,920 --> 01:12:46,310
同学们

1965
01:12:46,400 --> 01:12:47,480
我出发给他的时候

1966
01:12:48,920 --> 01:12:50,150
我出发给他的时候

1967
01:12:53,470 --> 01:12:54,580
我出发get的时候

1968
01:12:54,580 --> 01:12:57,250
你看我这儿执行FNFN获取数据

1969
01:12:57,460 --> 01:12:58,510
获取数据的时候

1970
01:12:58,540 --> 01:12:59,830
出发给出get的时候

1971
01:12:59,860 --> 01:13:02,050
我这个tag是不是刚好也是分是吧

1972
01:13:02,680 --> 01:13:03,100
是吧

1973
01:13:03,190 --> 01:13:05,410
我这个tag是不是刚好也是一分是吧

1974
01:13:06,460 --> 01:13:06,880
是的

1975
01:13:11,160 --> 01:13:11,790
明白吗

1976
01:13:15,050 --> 01:13:15,680
明白吗

1977
01:13:16,130 --> 01:13:16,970
就这么难吗

1978
01:13:17,920 --> 01:13:19,300
你们这儿就这么难吗

1979
01:13:19,300 --> 01:13:21,610
你们你们给我个反馈就这么难吗

1980
01:13:23,580 --> 01:13:24,030
是吧

1981
01:13:24,060 --> 01:13:25,800
我在这一步执行到这儿的时候

1982
01:13:25,830 --> 01:13:26,760
我这个是不是target

1983
01:13:26,760 --> 01:13:27,990
是不是就刚好是FM

1984
01:13:28,230 --> 01:13:30,390
那我是不是就能够构建这个关系是吧

1985
01:13:30,720 --> 01:13:32,160
就把这个东西是不是就拿过来了

1986
01:13:32,400 --> 01:13:34,740
你非给他点什么点什么

1987
01:13:34,740 --> 01:13:36,510
这个map的方法叫啥

1988
01:13:37,560 --> 01:13:42,870
New net a等于谬吗

1989
01:13:47,570 --> 01:13:51,710
A点

1990
01:13:52,820 --> 01:13:54,410
是是a的还是什么

1991
01:13:55,950 --> 01:13:56,250
Sight

1992
01:13:56,250 --> 01:13:57,000
Sight sight吗

1993
01:13:57,030 --> 01:13:57,450
Sight吗

1994
01:13:58,050 --> 01:13:58,620
赛特

1995
01:13:59,910 --> 01:14:00,330
赛特

1996
01:14:00,330 --> 01:14:03,510
Set几个K威威

1997
01:14:03,510 --> 01:14:05,280
你看我这是不是就可以set了

1998
01:14:05,670 --> 01:14:06,570
赛特是吧

1999
01:14:07,350 --> 01:14:07,710
是吧

2000
01:14:07,740 --> 01:14:09,660
Sight什么set一个K是吧

2001
01:14:10,200 --> 01:14:10,500
是吧

2002
01:14:10,500 --> 01:14:11,850
我是不是就可以set一个K

2003
01:14:12,000 --> 01:14:13,110
然后再set一个什么

2004
01:14:13,320 --> 01:14:14,220
在set一个N

2005
01:14:14,220 --> 01:14:16,260
是一个N进来不就行了吗

2006
01:14:16,320 --> 01:14:17,670
我这个不是构建好了

2007
01:14:17,970 --> 01:14:19,380
是不是我是我这个吗

2008
01:14:19,380 --> 01:14:21,180
不是就建好了咱们

2009
01:14:21,680 --> 01:14:22,280
明白吗

2010
01:14:23,380 --> 01:14:24,760
我在这儿使用的时候

2011
01:14:25,000 --> 01:14:28,150
我是不是就直接到那个effect里边去get一下

2012
01:14:29,090 --> 01:14:30,860
Get一下这个玩意儿是不是

2013
01:14:30,860 --> 01:14:33,320
Get一下这个K是它它就会返回我所有的

2014
01:14:33,350 --> 01:14:34,490
返回我当前这个什么

2015
01:14:35,050 --> 01:14:36,400
返回我这个东西是吧

2016
01:14:36,520 --> 01:14:37,450
如果我在这儿

2017
01:14:37,480 --> 01:14:38,410
我我在这块儿

2018
01:14:38,590 --> 01:14:40,210
我是不是可以在这样来一下

2019
01:14:40,450 --> 01:14:43,030
我这块儿如果不是还可以把它处理什么

2020
01:14:43,060 --> 01:14:44,020
处理成数组是吧

2021
01:14:44,020 --> 01:14:44,380
同学们

2022
01:14:44,650 --> 01:14:45,910
我在这块儿set的时候

2023
01:14:45,910 --> 01:14:48,880
我可以是不是可以set数组什么意思

2024
01:14:48,880 --> 01:14:50,350
Let你看我在这块儿let

2025
01:14:50,350 --> 01:14:53,170
比如说我声明一个什么声明一个

2026
01:14:53,350 --> 01:14:54,580
我首先去get一下是吧

2027
01:14:54,790 --> 01:14:56,050
先去get一下这个K

2028
01:14:57,140 --> 01:14:57,680
嗯

2029
01:14:59,700 --> 01:15:00,360
Dip是吧

2030
01:15:00,810 --> 01:15:03,240
Dip get一下这个K给他

2031
01:15:04,140 --> 01:15:06,720
我判断一下是否已经有了这个K是吧

2032
01:15:06,780 --> 01:15:09,090
是否这个K已经有对应的依赖了

2033
01:15:09,390 --> 01:15:10,830
然后如果没有这个依赖

2034
01:15:10,980 --> 01:15:13,110
没有依赖没有这个没有依赖

2035
01:15:13,730 --> 01:15:15,050
没有没有依赖

2036
01:15:15,500 --> 01:15:16,670
并且呢

2037
01:15:16,670 --> 01:15:17,630
那怎么办呢

2038
01:15:17,660 --> 01:15:19,400
那么就声明一个什么声明

2039
01:15:19,460 --> 01:15:21,110
把这个东西如果没有

2040
01:15:21,200 --> 01:15:22,070
如果没有

2041
01:15:22,610 --> 01:15:24,650
如果这个东西是俺的饭是吧

2042
01:15:25,790 --> 01:15:26,750
如果这个东西是案例

2043
01:15:26,990 --> 01:15:28,880
就是说我们这一步是什么意思

2044
01:15:28,910 --> 01:15:31,370
我判断之前是否已经有这个map啦

2045
01:15:31,700 --> 01:15:38,360
就是就是我这块儿是不是这个东西还可以用其就是我这儿这个N是不是还可以有其他数据来使用是吧

2046
01:15:38,390 --> 01:15:39,230
我这个K

2047
01:15:39,260 --> 01:15:41,360
我这个K是不是可以有多个N来使用

2048
01:15:41,450 --> 01:15:42,710
我这打印的是这个

2049
01:15:42,710 --> 01:15:43,820
我现在打印换一个是吧

2050
01:15:44,030 --> 01:15:45,260
我是不是就两个M的

2051
01:15:45,500 --> 01:15:47,570
我是不是可能这一个可以有多个课外课

2052
01:15:48,000 --> 01:15:50,940
那么这个K是不是就可能要有多个call back来收集

2053
01:15:51,450 --> 01:15:52,020
明白吗

2054
01:15:52,470 --> 01:15:54,390
所以我这块儿就是一个什么过程什么过程

2055
01:15:54,390 --> 01:15:55,860
你看我这块儿拿到我这个地方

2056
01:15:55,860 --> 01:15:56,550
同学们看见了吗

2057
01:15:56,670 --> 01:15:58,800
我拿这个dip如果没有

2058
01:15:59,010 --> 01:16:00,180
如果都没有怎么办

2059
01:16:00,330 --> 01:16:01,920
我把dip去构建一个sight

2060
01:16:02,940 --> 01:16:04,080
Dip去构建一个六

2061
01:16:04,080 --> 01:16:05,910
Sight是构建一个

2062
01:16:05,940 --> 01:16:06,660
是吧键

2063
01:16:06,660 --> 01:16:08,670
一个是构建一个空的赛特

2064
01:16:09,140 --> 01:16:10,640
然后如果有的话

2065
01:16:10,820 --> 01:16:12,860
如果有如果有

2066
01:16:12,890 --> 01:16:14,330
如果如果有了是吧

2067
01:16:14,420 --> 01:16:15,290
如果有

2068
01:16:17,260 --> 01:16:18,760
如果有LSE

2069
01:16:19,090 --> 01:16:20,560
如果有的话判断一下

2070
01:16:21,380 --> 01:16:22,640
如果已经有店铺了

2071
01:16:22,700 --> 01:16:25,910
那判断一下这个的是否已经有了什么

2072
01:16:27,310 --> 01:16:28,510
是否已经有了什么

2073
01:16:28,660 --> 01:16:31,180
是否已经有了我当前这个N了是吧

2074
01:16:31,810 --> 01:16:34,360
是不是已经有了我当前这个target了

2075
01:16:34,360 --> 01:16:36,130
当前我正在执行的这个N了是吧

2076
01:16:36,370 --> 01:16:38,740
因为我可能第一次获取数据

2077
01:16:38,800 --> 01:16:41,230
已经把这个CGO关系已经构建好了

2078
01:16:41,230 --> 01:16:44,890
是不是这块儿第一次获取数据的时候已经构建好关系了

2079
01:16:44,950 --> 01:16:45,970
那么就不会再走

2080
01:16:46,450 --> 01:16:47,740
就不会再走这块儿是吧

2081
01:16:49,140 --> 01:16:49,650
FFX

2082
01:16:49,770 --> 01:16:50,760
如果已经有了是吧

2083
01:16:51,760 --> 01:16:52,330
这块儿什么意思

2084
01:16:52,330 --> 01:16:52,990
我想一下

2085
01:16:53,880 --> 01:16:55,170
如果已经有了这个东西了

2086
01:16:55,170 --> 01:16:56,970
就是我第一次已经构建好了数据了

2087
01:16:56,970 --> 01:16:57,300
是吧

2088
01:16:57,540 --> 01:16:58,920
我可能已经构建好数据了

2089
01:16:59,520 --> 01:17:02,220
对我就不需要再再再再往这边走了是吧

2090
01:17:02,640 --> 01:17:03,060
是吧

2091
01:17:04,190 --> 01:17:07,400
所以说这里边还要判断她没有这个数据明白吗

2092
01:17:07,430 --> 01:17:08,840
同学们明白这个过程吗

2093
01:17:09,530 --> 01:17:11,360
我这会儿只是构建了一个依赖

2094
01:17:11,360 --> 01:17:12,260
多个集合

2095
01:17:12,880 --> 01:17:14,140
对是否是第一次

2096
01:17:14,170 --> 01:17:16,000
对这块儿是判断是第一次

2097
01:17:16,930 --> 01:17:18,430
当前这个东西是第一次

2098
01:17:18,490 --> 01:17:20,590
我当前这个玩艺儿是否是第一次是吧

2099
01:17:20,890 --> 01:17:21,880
然后你看我在这一步

2100
01:17:22,180 --> 01:17:23,560
如果这块儿这个样子是吧

2101
01:17:23,860 --> 01:17:24,460
那怎么办

2102
01:17:24,730 --> 01:17:26,080
然后我在这一步

2103
01:17:26,440 --> 01:17:26,860
这一步

2104
01:17:26,860 --> 01:17:28,150
然后再去做什么什么

2105
01:17:28,240 --> 01:17:29,170
如果这儿有了

2106
01:17:29,170 --> 01:17:30,520
如果没有没有什么

2107
01:17:30,820 --> 01:17:32,110
我去构建一个依赖是吧

2108
01:17:32,170 --> 01:17:34,330
构建依赖把这个东西去做一个什么呢

2109
01:17:34,330 --> 01:17:35,740
我们把这块儿去做一个什么

2110
01:17:35,950 --> 01:17:36,520
如果没有

2111
01:17:36,520 --> 01:17:38,200
我才把他的车去APP是吧

2112
01:17:38,470 --> 01:17:40,480
Deep at是吧

2113
01:17:40,480 --> 01:17:40,780
什么

2114
01:17:41,590 --> 01:17:42,130
地不

2115
01:17:42,130 --> 01:17:43,000
Sight是a的吧

2116
01:17:43,390 --> 01:17:44,260
Sight是a的吗

2117
01:17:46,950 --> 01:17:48,570
测试a的是吧是吧

2118
01:17:49,540 --> 01:17:50,680
然后去APP什么APP

2119
01:17:50,680 --> 01:17:51,880
我这个他给他是吧

2120
01:17:51,880 --> 01:17:55,300
我这个他是不是如果没有我才去的这个

2121
01:17:55,300 --> 01:18:01,090
他是这块应该是应该是这么来这么来这么来这么来来

2122
01:18:01,700 --> 01:18:02,930
不应该LL是吧

2123
01:18:02,960 --> 01:18:03,320
这么来

2124
01:18:03,650 --> 01:18:06,350
然后这里边儿的tag之后

2125
01:18:06,440 --> 01:18:08,180
然后我们再我再把这个dip是吧

2126
01:18:08,300 --> 01:18:09,770
我有多个屁是吧

2127
01:18:09,800 --> 01:18:12,050
然后再把这个这个关系是吧

2128
01:18:12,110 --> 01:18:13,250
构建好怎么维护起来

2129
01:18:13,580 --> 01:18:16,370
那么下一次当我数据发生了修改的时候

2130
01:18:16,370 --> 01:18:19,040
同学们当我这个数据发生了修改的时候

2131
01:18:20,080 --> 01:18:21,280
我是不是就可以去了

2132
01:18:21,280 --> 01:18:24,340
他所谓的PLA net map是不是

2133
01:18:25,170 --> 01:18:27,150
获取所有的这个K的所有APP是吧

2134
01:18:27,240 --> 01:18:28,320
然后去做什么

2135
01:18:29,220 --> 01:18:29,850
去做什么

2136
01:18:30,180 --> 01:18:30,750
修改的时候

2137
01:18:30,750 --> 01:18:31,410
然后去做什么

2138
01:18:31,530 --> 01:18:32,610
重新去触发什么

2139
01:18:33,260 --> 01:18:33,770
同学们

2140
01:18:33,800 --> 01:18:34,670
重新出发什么

2141
01:18:36,270 --> 01:18:36,870
重新出发

2142
01:18:36,870 --> 01:18:38,280
我这个什么他的

2143
01:18:39,230 --> 01:18:40,550
触发他的依赖是吧

2144
01:18:40,730 --> 01:18:42,680
点骂点骂

2145
01:18:43,670 --> 01:18:45,770
然后a是map吗

2146
01:18:45,800 --> 01:18:46,850
他应该是负178

2147
01:18:47,360 --> 01:18:49,010
他拿到的是塞塔是吧

2148
01:18:49,070 --> 01:18:49,940
拿到的是赛特

2149
01:18:50,180 --> 01:18:51,200
然后佛一起

2150
01:18:54,960 --> 01:18:56,040
拿到所有的是吧

2151
01:18:56,220 --> 01:18:57,480
拿到所有的分是吧

2152
01:18:57,540 --> 01:18:58,440
拿到所有的分

2153
01:19:00,130 --> 01:19:00,490
是吧

2154
01:19:00,820 --> 01:19:01,750
拿了所有的分

2155
01:19:02,770 --> 01:19:04,120
去执行就行了是吧

2156
01:19:04,150 --> 01:19:06,220
拿了所有的分去执行就行了是吧

2157
01:19:06,520 --> 01:19:08,710
这个过程就这个样子是吧

2158
01:19:09,370 --> 01:19:10,780
就是这个样子

2159
01:19:11,110 --> 01:19:13,240
我这个东西其实拿过来应该都会运行

2160
01:19:13,240 --> 01:19:15,070
但是有一些其他的小的问题

2161
01:19:15,130 --> 01:19:16,660
就是什么对战维护

2162
01:19:16,660 --> 01:19:18,010
这些东西有些小的问题

2163
01:19:18,010 --> 01:19:19,360
但是这个东西不影响咱们

2164
01:19:20,170 --> 01:19:23,260
我这个东西完全就这个这个依赖构建依赖这个关系

2165
01:19:23,260 --> 01:19:25,210
就完全就就就可以用用了

2166
01:19:25,720 --> 01:19:26,350
能明白吗

2167
01:19:27,190 --> 01:19:28,450
这个东西完全就可以用了

2168
01:19:32,480 --> 01:19:33,140
嗯

2169
01:19:36,320 --> 01:19:36,920
Sister

2170
01:19:40,030 --> 01:19:40,480
对呀

2171
01:19:41,260 --> 01:19:42,340
所以我判断

2172
01:19:43,420 --> 01:19:45,010
我就没必要再重新去加了吗

2173
01:19:45,010 --> 01:19:45,760
你直接去重

2174
01:19:45,760 --> 01:19:46,810
但是也是实话

2175
01:19:46,810 --> 01:19:48,460
我就没必要去直接去家了吗

2176
01:19:50,520 --> 01:19:52,440
看一下有没有错

2177
01:19:52,890 --> 01:19:54,540
Effect has already

2178
01:19:56,980 --> 01:19:58,270
哪儿都行

2179
01:20:04,070 --> 01:20:05,690
我这个data还没放进来

2180
01:20:05,960 --> 01:20:07,610
怎么我的data还没放进来

2181
01:20:08,410 --> 01:20:10,000
我的分也还没实名

2182
01:20:14,490 --> 01:20:15,630
我的分也还没声明

2183
01:20:19,050 --> 01:20:20,010
一分也没收米

2184
01:20:20,610 --> 01:20:21,720
然后我的

2185
01:20:22,820 --> 01:20:25,280
分声明在这边

2186
01:20:25,640 --> 01:20:27,170
然后我的data也还没有

2187
01:20:27,940 --> 01:20:29,320
我的data也还没有

2188
01:20:30,400 --> 01:20:31,360
也还没有生命

2189
01:20:34,870 --> 01:20:35,440
的data

2190
01:20:35,440 --> 01:20:36,310
也还没有声明

2191
01:20:37,600 --> 01:20:40,000
然后还有一个就是我的effect

2192
01:20:40,000 --> 01:20:40,780
我哪儿effect

2193
01:20:40,780 --> 01:20:41,350
我生病了

2194
01:20:45,920 --> 01:20:46,880
我当前这个东西

2195
01:20:46,880 --> 01:20:48,170
这个东西已经执行了

2196
01:20:48,170 --> 01:20:49,190
执行过effect

2197
01:20:49,220 --> 01:20:50,360
已经有一个ID了

2198
01:20:52,020 --> 01:20:57,840
咱们现在你看现在我的我来我的执行一下我当前的那个effect是吧

2199
01:20:58,580 --> 01:21:01,310
执行一下我当前的FA的X应该是什么样子

2200
01:21:02,140 --> 01:21:03,430
If是这个样子是吧

2201
01:21:04,120 --> 01:21:05,140
Effect是这个样子

2202
01:21:06,100 --> 01:21:09,610
Statue is not stated stated在哪儿

2203
01:21:12,300 --> 01:21:13,050
Statue

2204
01:21:15,130 --> 01:21:15,910
这个studio

2205
01:21:17,020 --> 01:21:19,270
我想一下

2206
01:21:19,270 --> 01:21:21,250
我这妈的

2207
01:21:22,720 --> 01:21:23,890
我这稍微有一点点

2208
01:21:24,010 --> 01:21:26,740
就是稍微这个这个这个前后关系要处理一下他们

2209
01:21:29,280 --> 01:21:32,880
当然那里边儿框架里面就做了很多很多兼容的处理了

2210
01:21:33,090 --> 01:21:34,110
像我这个就很简单了

2211
01:21:34,110 --> 01:21:35,880
是不是像我这个就很简单了是吧

2212
01:21:36,600 --> 01:21:38,010
我这个简单的原因是什么

2213
01:21:38,040 --> 01:21:39,300
是因为要给大家用嘛

2214
01:21:39,300 --> 01:21:39,570
是吧

2215
01:21:43,450 --> 01:21:43,960
看到吗

2216
01:21:44,350 --> 01:21:45,940
直接执行一次这个事儿

2217
01:21:45,940 --> 01:21:46,960
然后我们来修改一下

2218
01:21:47,830 --> 01:21:49,240
Counter等于

2219
01:21:50,570 --> 01:21:52,370
A分扣百的恩

2220
01:21:55,780 --> 01:21:57,070
F n is not function

2221
01:21:57,220 --> 01:21:58,600
但他这儿也执行了一次是吧

2222
01:22:00,370 --> 01:22:01,150
打印了一下

2223
01:22:01,150 --> 01:22:01,810
CC

2224
01:22:02,460 --> 01:22:04,800
然后a分没有拿到

2225
01:22:05,310 --> 01:22:06,720
是我这个map不对吗

2226
01:22:06,750 --> 01:22:07,860
我拿到这个map不对吗

2227
01:22:07,860 --> 01:22:08,760
我这个没有吗

2228
01:22:11,260 --> 01:22:11,740
Ti

2229
01:22:12,620 --> 01:22:13,580
我的kiss counter

2230
01:22:13,970 --> 01:22:14,660
那么我看一下

2231
01:22:14,660 --> 01:22:15,200
等一下

2232
01:22:16,040 --> 01:22:19,910
我看一下我这个关系effect buff

2233
01:22:20,650 --> 01:22:21,130
Counter

2234
01:22:21,160 --> 01:22:21,790
没问题

2235
01:22:22,420 --> 01:22:23,020
赛特

2236
01:22:23,110 --> 01:22:23,710
没问题

2237
01:22:24,670 --> 01:22:25,270
Call back

2238
01:22:25,940 --> 01:22:26,570
有问题

2239
01:22:28,960 --> 01:22:29,950
我存的是

2240
01:22:30,870 --> 01:22:32,280
我存的是

2241
01:22:32,940 --> 01:22:35,070
我这set的是deep

2242
01:22:36,340 --> 01:22:36,850
探探路

2243
01:22:37,880 --> 01:22:39,110
啥啥啥玩意儿

2244
01:22:39,590 --> 01:22:41,990
Net里边儿take多家各类特

2245
01:22:42,910 --> 01:22:45,160
给多家各类哪儿take多家各类

2246
01:22:50,830 --> 01:22:52,840
Let里边target作家

2247
01:22:57,390 --> 01:23:00,570
Effect里边effect里边的texture

2248
01:23:01,440 --> 01:23:02,670
多加一个擂台

2249
01:23:03,990 --> 01:23:04,710
什么意思

2250
01:23:04,950 --> 01:23:05,670
我加了这个

2251
01:23:05,850 --> 01:23:07,950
我不应该加这个擂台

2252
01:23:07,950 --> 01:23:09,330
我我不应该叫这个了吗

2253
01:23:10,460 --> 01:23:11,120
这个问题

2254
01:23:11,150 --> 01:23:11,780
不应该加这个

2255
01:23:12,990 --> 01:23:13,650
确实是

2256
01:23:17,040 --> 01:23:18,000
不应该不应该不应该

2257
01:23:23,640 --> 01:23:24,690
这不还是有问题吗

2258
01:23:28,160 --> 01:23:29,780
是是我们这个map里边儿

2259
01:23:29,780 --> 01:23:31,070
这个map里边存的不对

2260
01:23:31,680 --> 01:23:33,630
Map里面的卡没有的谱

2261
01:23:33,630 --> 01:23:34,560
就生命那个依赖

2262
01:23:34,860 --> 01:23:36,960
然后判断有没有这个target

2263
01:23:37,380 --> 01:23:39,930
没有target就往里面去加了一个target

2264
01:23:41,660 --> 01:23:44,000
News it na Li sh哪儿呢

2265
01:23:44,880 --> 01:23:45,150
这

2266
01:23:45,150 --> 01:23:45,750
这怎么了

2267
01:23:46,440 --> 01:23:47,040
这怎么了

2268
01:23:47,920 --> 01:23:48,430
怎么了

2269
01:23:50,420 --> 01:23:51,350
这这怎么了

2270
01:23:51,350 --> 01:23:53,000
你你光跟我说问题

2271
01:23:53,720 --> 01:23:55,370
没有的话我才声明对

2272
01:23:59,810 --> 01:24:00,380
怎么了

2273
01:24:00,860 --> 01:24:02,480
里面得放东东

2274
01:24:04,140 --> 01:24:04,890
没有的话

2275
01:24:07,660 --> 01:24:09,400
我这不又又判断了一片吗

2276
01:24:10,240 --> 01:24:11,950
我这不又盼又盼了一遍吗

2277
01:24:12,520 --> 01:24:13,750
我这不又判断了一遍吗

2278
01:24:14,520 --> 01:24:15,930
要判断有没有这个吗

2279
01:24:16,470 --> 01:24:18,180
没有的话他就会那什么吗

2280
01:24:20,360 --> 01:24:24,440
我这我在我在这儿是不是又看了一遍在这儿在这儿

2281
01:24:25,020 --> 01:24:26,130
这是不是又看了一遍

2282
01:24:26,370 --> 01:24:26,940
没问题

2283
01:24:27,640 --> 01:24:28,270
来看一下

2284
01:24:30,000 --> 01:24:31,230
Counter为什么带个tag

2285
01:24:31,230 --> 01:24:31,950
是这个玩意儿

2286
01:24:36,330 --> 01:24:36,990
妈的

2287
01:24:36,990 --> 01:24:37,800
这个他

2288
01:24:39,440 --> 01:24:40,430
你们这个

2289
01:24:41,360 --> 01:24:42,230
你们这有问题

2290
01:24:42,230 --> 01:24:43,100
你们这基础

2291
01:24:45,810 --> 01:24:46,770
是我的问题吗

2292
01:24:47,130 --> 01:24:48,330
这是你们看问题

2293
01:24:49,280 --> 01:24:50,150
看不出来知道吧

2294
01:24:50,450 --> 01:24:51,800
你看我这儿有个tag是吧

2295
01:24:52,070 --> 01:24:53,420
这个是个tag的知道吧

2296
01:24:55,370 --> 01:24:56,690
他拿到这个东西是个tag

2297
01:24:57,750 --> 01:24:58,560
我真的是

2298
01:24:59,550 --> 01:25:01,050
X1X8

2299
01:25:01,700 --> 01:25:02,360
你给他一个

2300
01:25:03,230 --> 01:25:03,830
给他一个

2301
01:25:07,900 --> 01:25:10,000
你给他一个给他一个

2302
01:25:10,750 --> 01:25:14,500
这是这这我们就判断这个F是有没有

2303
01:25:14,830 --> 01:25:17,050
如果没有添加X是吧

2304
01:25:18,110 --> 01:25:19,610
这样子来咨询

2305
01:25:21,400 --> 01:25:22,210
执行一下

2306
01:25:23,920 --> 01:25:24,490
看到吗

2307
01:25:25,120 --> 01:25:27,850
是不是获取执行是不是

2308
01:25:28,330 --> 01:25:30,640
但我这块儿有问题的原因是什么

2309
01:25:30,910 --> 01:25:36,040
这块有原问题的原因是他在这儿执行的这个effect没有去做一个什么

2310
01:25:36,250 --> 01:25:38,320
没有去做一个

2311
01:25:39,110 --> 01:25:42,080
这个X其实它没有包一层PAR Ms知道吧

2312
01:25:42,440 --> 01:25:44,090
这个东西它没有包一层帕米斯

2313
01:25:44,510 --> 01:25:46,280
其实在在那个什么

2314
01:25:46,460 --> 01:25:49,250
在那个他那里边儿包了一层帕里斯知不知道

2315
01:25:50,980 --> 01:25:52,780
同学们在这儿包了一层

2316
01:25:52,780 --> 01:25:53,590
怕Miss它里边

2317
01:25:53,590 --> 01:25:56,560
因为我们的render是不是有微任务是不是

2318
01:25:57,460 --> 01:25:58,780
论是不是有任务

2319
01:26:00,300 --> 01:26:01,740
在这里边会包一个PAR Ms

2320
01:26:02,880 --> 01:26:05,130
Promise resolve

2321
01:26:06,060 --> 01:26:07,620
然后去

2322
01:26:12,120 --> 01:26:13,320
就反正就这个意思

2323
01:26:13,470 --> 01:26:15,000
就在这就是sight帽子

2324
01:26:15,090 --> 01:26:15,810
你就给个sight

2325
01:26:15,810 --> 01:26:16,950
我就给你个sight帽子吧

2326
01:26:22,400 --> 01:26:24,230
Set a Tom

2327
01:26:25,520 --> 01:26:26,120
out

2328
01:26:30,740 --> 01:26:31,280
明白吗

2329
01:26:31,580 --> 01:26:32,480
他会这么包一下

2330
01:26:32,480 --> 01:26:33,350
包一下知道吧

2331
01:26:33,770 --> 01:26:37,190
因为你的那个渲染的时候是不是有一有个V任务

2332
01:26:37,220 --> 01:26:39,860
是不是我们说了渲染的时候是不是有个任务

2333
01:26:41,550 --> 01:26:43,200
他在这块儿就可以拿到正确的直达

2334
01:26:43,230 --> 01:26:43,620
知道吧

2335
01:26:43,680 --> 01:26:45,000
这块就可以拿到正确的直达

2336
01:26:45,700 --> 01:26:47,560
你看我们第一次这个样子是吧

2337
01:26:48,220 --> 01:26:48,700
然后修改

2338
01:26:48,700 --> 01:26:50,020
因为我刚刚执行了两次吗

2339
01:26:50,680 --> 01:26:54,610
修改得分有有有问题有问题

2340
01:26:56,880 --> 01:26:58,110
F n is not function

2341
01:26:59,710 --> 01:27:00,610
什么鬼

2342
01:27:00,610 --> 01:27:02,860
这是自信FM

2343
01:27:08,320 --> 01:27:09,070
这是什么原因

2344
01:27:09,070 --> 01:27:10,030
同学们看一下

2345
01:27:11,010 --> 01:27:11,880
Set timeout

2346
01:27:15,160 --> 01:27:16,720
这个n is not a function

2347
01:27:16,780 --> 01:27:17,830
这不就是个function吗

2348
01:27:21,070 --> 01:27:21,850
妈的

2349
01:27:21,850 --> 01:27:23,440
天天跟屎一样

2350
01:27:23,440 --> 01:27:24,190
我觉得现在我

2351
01:27:25,540 --> 01:27:26,890
这人有时候太着急了

2352
01:27:26,890 --> 01:27:27,730
就是这个样子

2353
01:27:29,210 --> 01:27:31,160
直接返回一个set amount了都

2354
01:27:33,480 --> 01:27:33,840
是不是

2355
01:27:33,840 --> 01:27:38,130
我是不是应该返回一个异步任务是不是是不是是不是

2356
01:27:40,930 --> 01:27:41,980
返不返回都无所谓了

2357
01:27:42,010 --> 01:27:42,970
他只要执行就行

2358
01:27:44,220 --> 01:27:44,610
你看

2359
01:27:45,600 --> 01:27:47,130
执行一次是

2360
01:27:47,550 --> 01:27:49,350
然后再来看到吗

2361
01:27:49,800 --> 01:27:51,360
看到同学们获取最新的数据

2362
01:27:52,040 --> 01:27:52,580
看到吗

2363
01:27:54,730 --> 01:27:55,390
明白了吗

2364
01:27:57,200 --> 01:27:58,070
所以说这块儿

2365
01:27:58,100 --> 01:27:59,060
但是我这个东西

2366
01:27:59,090 --> 01:28:00,680
如果你系测还是有很多bug

2367
01:28:00,680 --> 01:28:01,910
比如说嵌套的情况

2368
01:28:02,240 --> 01:28:04,310
就是effect各种effect里边儿

2369
01:28:04,490 --> 01:28:06,770
我这个我我使用这个APP的时候

2370
01:28:07,400 --> 01:28:08,390
我声明一个X

2371
01:28:08,390 --> 01:28:11,990
我这是不是返回一个是返回一个

2372
01:28:13,520 --> 01:28:15,110
然后我这边又可以嵌套Africa

2373
01:28:15,320 --> 01:28:16,730
但这种情况又是嵌套的情况

2374
01:28:16,730 --> 01:28:17,030
知道吧

2375
01:28:17,390 --> 01:28:18,650
这种情况就什么情况

2376
01:28:18,770 --> 01:28:21,560
这种情况就是就是它这个框架里边就需要处理的

2377
01:28:21,560 --> 01:28:24,500
我这块儿也是只是为了什么把这个串起来

2378
01:28:24,500 --> 01:28:25,940
给大家串起来明白了吗

2379
01:28:26,120 --> 01:28:28,280
咱们这块儿这个思维串起来了吗

2380
01:28:29,040 --> 01:28:29,850
春节了吗

2381
01:28:30,420 --> 01:28:30,900
怎么样

2382
01:28:31,410 --> 01:28:32,400
下来之后没穿起来

2383
01:28:32,400 --> 01:28:33,750
再看一下这是这个代码吗

2384
01:28:34,400 --> 01:28:35,510
好串起来之后

2385
01:28:35,900 --> 01:28:40,670
我们现在就快速的拉一下他这个真正响应式数据这一块的东西了

2386
01:28:41,300 --> 01:28:42,290
要发都要发

2387
01:28:42,290 --> 01:28:44,420
今天我整个整个东西都要发

2388
01:28:45,320 --> 01:28:49,280
所以说我们现在就要看一下re active he effect里面做的事情好不好

2389
01:28:50,720 --> 01:28:51,740
Relative是做什么

2390
01:28:51,770 --> 01:28:53,990
想把数据处理成响应式数据是吧

2391
01:28:54,200 --> 01:28:55,160
来看active

2392
01:28:56,240 --> 01:28:57,770
这是整个re active是吧

2393
01:28:57,800 --> 01:28:58,910
他单独的包

2394
01:28:58,940 --> 01:28:59,450
单独的包

2395
01:28:59,450 --> 01:29:01,010
这是一个单独的re active这个包

2396
01:29:01,220 --> 01:29:03,530
你可以单独只用这个包来处理下一次数据

2397
01:29:03,710 --> 01:29:04,820
都不用引其他的

2398
01:29:05,210 --> 01:29:06,350
你看你这个

2399
01:29:06,960 --> 01:29:08,940
在这里边儿有一个index

2400
01:29:09,580 --> 01:29:10,390
这里边儿有一个

2401
01:29:12,180 --> 01:29:13,740
那个什么relative在这儿

2402
01:29:13,860 --> 01:29:16,050
Relative relative他在里边儿

2403
01:29:17,000 --> 01:29:21,290
在这里边同学他维护了很多不一样的各种逻辑

2404
01:29:21,380 --> 01:29:22,160
但是这些逻辑呢

2405
01:29:22,160 --> 01:29:23,570
都是为了做一些各种兼容

2406
01:29:24,020 --> 01:29:25,790
像他像我们那些东西就不一样了

2407
01:29:25,790 --> 01:29:28,010
你看这是一个处理的响应数据

2408
01:29:28,040 --> 01:29:30,560
数据的S的首先把数据给进来

2409
01:29:30,560 --> 01:29:34,160
给进来之后它会判断你这个数据是否是只读数据

2410
01:29:34,190 --> 01:29:36,290
还有一种数据类型是只读数据类型

2411
01:29:38,140 --> 01:29:39,250
如果不是只读数据

2412
01:29:39,250 --> 01:29:40,180
如果是指读数据

2413
01:29:40,180 --> 01:29:41,740
它就不会处理剩下一次数据

2414
01:29:41,740 --> 01:29:42,280
直接返回

2415
01:29:42,790 --> 01:29:45,400
然后调用返回这个方这个东西

2416
01:29:45,400 --> 01:29:47,710
这个东西然后把数据给到这块儿同学们

2417
01:29:47,950 --> 01:29:49,660
这个里边就是我们执行的东西

2418
01:29:49,870 --> 01:29:51,910
来判断你这个数据是否是对象是吧

2419
01:29:52,210 --> 01:29:53,230
如果不是对象

2420
01:29:53,260 --> 01:29:54,490
他就不会用relative

2421
01:29:55,220 --> 01:29:55,940
那么用什么呢

2422
01:29:55,970 --> 01:29:57,890
一会给大家说会用另一个东西

2423
01:29:58,490 --> 01:29:59,420
会用一个东西

2424
01:30:00,180 --> 01:30:01,320
然后同学们

2425
01:30:10,330 --> 01:30:10,660
怎么

2426
01:30:11,600 --> 01:30:12,560
从这个问题

2427
01:30:12,590 --> 01:30:13,250
从这个文

2428
01:30:14,550 --> 01:30:15,360
我来看弹幕

2429
01:30:18,220 --> 01:30:22,330
刚刚有的同学给老给老师说我不看弹幕

2430
01:30:22,660 --> 01:30:23,890
说我直接略过

2431
01:30:24,660 --> 01:30:25,710
不回答就略过

2432
01:30:25,710 --> 01:30:26,910
我我看一下这个问题

2433
01:30:26,910 --> 01:30:29,640
是哪个同学说我不看弹幕掠过

2434
01:30:30,060 --> 01:30:30,870
是这个同学吗

2435
01:30:31,320 --> 01:30:33,450
你这个链接还需要我给你找吗

2436
01:30:36,100 --> 01:30:37,630
你这个链接还需要我给你找吗

2437
01:30:41,700 --> 01:30:43,260
你这个链接还需要我给你找吗

2438
01:30:48,720 --> 01:30:50,490
这个真的是这就是

2439
01:30:51,600 --> 01:30:53,220
这个我就没办法了

2440
01:31:12,370 --> 01:31:13,180
那你有什么问题

2441
01:31:13,180 --> 01:31:14,290
你有什么问题你说出来

2442
01:31:14,410 --> 01:31:15,610
我让你们说问题的时候

2443
01:31:15,610 --> 01:31:16,360
你们又不说

2444
01:31:19,930 --> 01:31:20,500
知道吧

2445
01:31:20,740 --> 01:31:25,690
你们我一我我是不是每次问你扣一扣零你有问题你就说

2446
01:31:26,200 --> 01:31:28,150
我问你有没有问题你又不说

2447
01:31:30,380 --> 01:31:31,700
是不是现在搞得我很无奈

2448
01:31:31,700 --> 01:31:32,810
你们这个这个状态

2449
01:31:34,050 --> 01:31:35,250
说我又不看弹幕

2450
01:31:40,190 --> 01:31:40,850
知道吧

2451
01:31:45,680 --> 01:31:48,350
有问题我跟你互动的时候你就说出来

2452
01:31:49,340 --> 01:31:51,140
我会给你们停下来的时间

2453
01:31:59,820 --> 01:32:00,360
好吧

2454
01:32:03,600 --> 01:32:06,120
雷达处理的处理后的项目入口怎么找

2455
01:32:06,980 --> 01:32:08,600
处理后的项目入口什么意思

2456
01:32:11,140 --> 01:32:12,220
这个就是PK技

2457
01:32:13,880 --> 01:32:14,750
就是PK机

2458
01:32:14,750 --> 01:32:16,430
只要只要是PK中的东西

2459
01:32:16,520 --> 01:32:18,230
就是它的弹幕明白吗

2460
01:32:18,880 --> 01:32:19,510
只要是PK

2461
01:32:19,510 --> 01:32:20,800
下边的东西就是弹幕

2462
01:32:21,440 --> 01:32:22,040
约吗

2463
01:32:24,830 --> 01:32:25,400
懂了吗

2464
01:32:26,360 --> 01:32:27,110
没看到入口

2465
01:32:27,230 --> 01:32:28,130
这就是入口吗

2466
01:32:28,190 --> 01:32:29,390
这不就是a的入口吗

2467
01:32:30,380 --> 01:32:31,310
这不就是PK吗

2468
01:32:32,010 --> 01:32:34,350
下面的所有每一个包都是他的单独的包

2469
01:32:36,590 --> 01:32:37,850
每个包都是单独的包

2470
01:32:38,710 --> 01:32:39,520
这种东西

2471
01:32:39,550 --> 01:32:42,670
这种东西你都不应该在课堂上问我为什么不应该在课堂上问我

2472
01:32:42,970 --> 01:32:43,540
这种东西

2473
01:32:43,540 --> 01:32:46,390
你都直接去自己使用一下这个东西

2474
01:32:46,390 --> 01:32:47,560
你就知道是什么样子了

2475
01:32:48,780 --> 01:32:52,380
知不知道有很多同学说这些东西有什么问题

2476
01:32:52,380 --> 01:32:54,450
哪些东西这个店这个地址是什么

2477
01:32:55,650 --> 01:32:56,280
这个玩意儿

2478
01:32:56,280 --> 01:32:57,510
这个API应该怎么用

2479
01:32:57,840 --> 01:32:59,760
你说这个问题我全部都回答你了

2480
01:33:00,270 --> 01:33:01,590
我们在上课这几个小时

2481
01:33:01,980 --> 01:33:02,940
我可以讲的东西

2482
01:33:02,940 --> 01:33:03,450
讲什么东西

2483
01:33:03,450 --> 01:33:04,470
我就讲这些东西了吗

2484
01:33:05,350 --> 01:33:06,910
同学们你们要自己去

2485
01:33:06,970 --> 01:33:08,710
像这些东西你们要自己去

2486
01:33:09,400 --> 01:33:12,460
自己去有一个自主驱动的一个能力

2487
01:33:13,360 --> 01:33:13,990
知不知道

2488
01:33:15,020 --> 01:33:17,060
像这种东西你们完全就可以自己去找了

2489
01:33:17,150 --> 01:33:18,830
自己去尝试玩一下这个东西

2490
01:33:18,890 --> 01:33:20,930
就知道这个东西目录结构是什么样子了

2491
01:33:21,230 --> 01:33:23,750
并不需要我来跟你说这个目录结构什么样子

2492
01:33:25,340 --> 01:33:26,000
知不知道

2493
01:33:27,410 --> 01:33:29,570
有问题就反馈好不好反馈

2494
01:33:29,600 --> 01:33:30,530
有问题就反馈

2495
01:33:30,590 --> 01:33:32,870
我问你的时候你就扣零扣一就行了

2496
01:33:33,540 --> 01:33:34,110
好不好

2497
01:33:34,560 --> 01:33:35,100
这个叫什么

2498
01:33:35,100 --> 01:33:35,940
这个同学叫什么

2499
01:33:36,810 --> 01:33:39,720
这个叫一堂一堂这个同学知道吧

2500
01:33:41,600 --> 01:33:42,380
我们继续

2501
01:33:43,240 --> 01:33:46,030
这块判断会判断这个对象是吧

2502
01:33:46,180 --> 01:33:48,430
判断我们这个判断我们这个对象

2503
01:33:48,670 --> 01:33:50,710
我们这个团建的数据是否是对象是吧

2504
01:33:51,040 --> 01:33:53,770
如果不是对象他会做什么

2505
01:33:54,480 --> 01:33:55,500
如果不是对象

2506
01:33:55,920 --> 01:33:57,000
如果不是对象是什么

2507
01:33:57,030 --> 01:33:58,860
它会返回这个数据是吧

2508
01:33:58,980 --> 01:34:00,510
如果不是对象他就不会反

2509
01:34:00,540 --> 01:34:01,320
他就不会来处理

2510
01:34:01,320 --> 01:34:04,350
因为我们这个react IV只能处理什么对象是吧

2511
01:34:04,590 --> 01:34:06,090
Proxy只能监听对象是不是

2512
01:34:06,420 --> 01:34:07,500
Proxy只能监听对象

2513
01:34:09,300 --> 01:34:10,890
然后继续往下

2514
01:34:10,920 --> 01:34:11,820
继续往下就什么

2515
01:34:11,940 --> 01:34:15,720
就拿到我们的什么响应式数据是不是是不是是不是

2516
01:34:17,280 --> 01:34:17,760
是吧

2517
01:34:20,320 --> 01:34:21,940
这响应数据看到吗

2518
01:34:22,420 --> 01:34:25,060
然后判断你这个数据是否已经是详细数据

2519
01:34:25,090 --> 01:34:27,700
因为我们传进来这个数据可能已经是详细数据了

2520
01:34:27,910 --> 01:34:29,290
已经是详细数据的时候

2521
01:34:29,530 --> 01:34:30,220
它会有什么

2522
01:34:30,520 --> 01:34:31,540
会有一个map

2523
01:34:31,690 --> 01:34:32,800
会有一个K知道吧

2524
01:34:32,860 --> 01:34:34,480
响应数据被处理了之后

2525
01:34:34,900 --> 01:34:35,740
有一个K知道吗

2526
01:34:35,740 --> 01:34:36,100
同学们

2527
01:34:36,750 --> 01:34:37,320
一个K

2528
01:34:38,460 --> 01:34:39,660
还有一个这个K知道吧

2529
01:34:39,750 --> 01:34:42,480
有个有个有个有个K给加到这上面

2530
01:34:43,050 --> 01:34:45,390
如果判断你这个数据已经是响应式数据了

2531
01:34:45,720 --> 01:34:46,680
已经是proxy了

2532
01:34:46,890 --> 01:34:48,060
他就直接返回这个数据

2533
01:34:48,150 --> 01:34:49,260
那么就不需要被处理了

2534
01:34:49,410 --> 01:34:49,950
明白吗

2535
01:34:50,160 --> 01:34:51,570
数据已经相应数据了

2536
01:34:51,960 --> 01:34:52,770
还有就是什么

2537
01:34:53,260 --> 01:34:54,490
返回我这个数据

2538
01:34:54,880 --> 01:34:55,900
还有一种情况是吗

2539
01:34:55,930 --> 01:34:58,870
就比如说我这个数据这个a是不是已经被处理过了

2540
01:34:58,900 --> 01:35:00,880
现在你又把这个a拿进来重新处理

2541
01:35:01,720 --> 01:35:03,640
那我现在还需要重新再处理这个数据吗

2542
01:35:04,240 --> 01:35:06,520
第一种情况是你传进来的数据

2543
01:35:07,200 --> 01:35:07,830
第一种情况

2544
01:35:07,830 --> 01:35:11,910
同学们你这种情况是你传进来的数据就已经思想意识数据了

2545
01:35:12,530 --> 01:35:13,490
第二种情况是什么

2546
01:35:13,670 --> 01:35:17,660
第二种情况是你传进来的这个数据已经被处理过了

2547
01:35:17,930 --> 01:35:18,800
明白这个过程吗

2548
01:35:19,580 --> 01:35:20,270
这个名字

2549
01:35:22,040 --> 01:35:22,730
就是明白吗

2550
01:35:24,640 --> 01:35:26,200
你们给我个反馈好吧

2551
01:35:27,080 --> 01:35:29,570
第一种情况是你传递的数据已经是详细数据了

2552
01:35:29,630 --> 01:35:31,940
第二种情况是你们传递的被处理过了

2553
01:35:31,940 --> 01:35:32,300
啥意思

2554
01:35:32,630 --> 01:35:34,280
就是已经proceed了

2555
01:35:34,430 --> 01:35:35,270
New proxy的

2556
01:35:35,270 --> 01:35:35,870
返回来

2557
01:35:35,990 --> 01:35:39,020
这个数据已经是刘proxy代理之后的数据了

2558
01:35:40,770 --> 01:35:41,280
看到吗

2559
01:35:41,820 --> 01:35:44,940
所以说这块儿就如果是已经被代理之后的数据了

2560
01:35:45,150 --> 01:35:49,200
他直接通过这种他会构建一个什么全局的map是吧

2561
01:35:49,350 --> 01:35:50,700
去找这个map键了吗

2562
01:35:51,090 --> 01:35:55,530
找这个全局的map去去去去去寻找已经被代理之后的数据

2563
01:35:55,740 --> 01:35:57,630
如果存在直接返回数据明白吗

2564
01:35:58,860 --> 01:36:03,300
然后还有就是他判断你当前这个数据是否可以被代理是吧

2565
01:36:05,760 --> 01:36:06,090
对呀

2566
01:36:06,090 --> 01:36:09,300
就是被就就是被处理过过后的数据是响应式的

2567
01:36:09,870 --> 01:36:10,440
什么意思

2568
01:36:10,440 --> 01:36:12,180
同学们你没明白我这个意思吗

2569
01:36:14,610 --> 01:36:17,130
我调用了我一个数据调用active

2570
01:36:17,130 --> 01:36:18,540
是不是还可以调用active

2571
01:36:18,780 --> 01:36:22,410
比如我现在这个返回这这这是不是已经返回relative数据了

2572
01:36:22,560 --> 01:36:25,200
我现在是不是还可以把这个数据再拿进来重新再处理

2573
01:36:25,590 --> 01:36:26,520
那明明这个数据

2574
01:36:26,520 --> 01:36:29,400
但是已经被处理过了过了是不是

2575
01:36:29,940 --> 01:36:31,470
这个数据已经是响应式数据了

2576
01:36:31,470 --> 01:36:36,300
是不是还他你再拿进去处理有没有意义他在给你PRODUCTS1层嘛

2577
01:36:36,360 --> 01:36:37,170
是不是没必要了

2578
01:36:37,290 --> 01:36:39,630
直接给你返回你这个处理之后的数据

2579
01:36:40,020 --> 01:36:41,430
还有这一种情况是什么

2580
01:36:41,790 --> 01:36:44,910
这种情况就是你这一单已经被处理了是吧

2581
01:36:44,940 --> 01:36:45,750
已经被处理了

2582
01:36:45,810 --> 01:36:47,400
处理完了之后已经是C了

2583
01:36:47,490 --> 01:36:48,570
同样一份数据

2584
01:36:49,000 --> 01:36:49,990
同样一份原始数据

2585
01:36:49,990 --> 01:36:51,070
你再传进来

2586
01:36:51,160 --> 01:36:52,690
再形成一份新的数据

2587
01:36:52,930 --> 01:36:54,640
这份新的数据不需要是新的

2588
01:36:54,640 --> 01:36:56,920
因为它的原型儿就是同一个知道吧

2589
01:36:57,640 --> 01:36:59,170
他原始的数据是同一个

2590
01:36:59,170 --> 01:37:01,600
所以说再返回它已经被处理过的数据

2591
01:37:01,690 --> 01:37:02,170
明白了吗

2592
01:37:02,170 --> 01:37:04,300
同学这两个过过程不一样

2593
01:37:04,840 --> 01:37:05,860
这两个过程不一样

2594
01:37:05,950 --> 01:37:08,410
一个是已经被处理过的数据拿进去

2595
01:37:08,500 --> 01:37:10,870
一个是已经被处理过的原型

2596
01:37:10,900 --> 01:37:14,050
它对应的原来的数据拿去拉进去重新处理一遍

2597
01:37:14,650 --> 01:37:16,990
两个都是需要都是不需要重新处理的

2598
01:37:17,020 --> 01:37:17,440
知道吧

2599
01:37:17,560 --> 01:37:18,730
都是不需要重新处理的

2600
01:37:18,820 --> 01:37:21,640
然后再这块儿再去判断你这个数据是什么

2601
01:37:21,760 --> 01:37:25,180
是否是可以被处理的响应式数据什么意思

2602
01:37:25,240 --> 01:37:27,130
你这个数据可能什么微动是吧

2603
01:37:27,580 --> 01:37:28,330
可能是微动

2604
01:37:28,510 --> 01:37:29,980
你可能是component实例

2605
01:37:30,130 --> 01:37:32,320
是不是这些数据都不应该被代理是吧

2606
01:37:32,980 --> 01:37:34,300
因为这些数据都是一个什么

2607
01:37:34,330 --> 01:37:35,170
都是一个data数据

2608
01:37:35,170 --> 01:37:37,600
是不是是不是都应都不应该被代理

2609
01:37:38,350 --> 01:37:39,490
那在这个维度之上

2610
01:37:40,300 --> 01:37:41,590
然后去判断是吧

2611
01:37:41,920 --> 01:37:42,970
如果不能

2612
01:37:43,000 --> 01:37:44,230
如果可以被代理

2613
01:37:44,840 --> 01:37:45,230
如果

2614
01:37:45,230 --> 01:37:46,790
如果可以被代理的情况

2615
01:37:46,790 --> 01:37:48,320
然后继续找new proxy

2616
01:37:48,320 --> 01:37:49,190
同学们看见了吗

2617
01:37:49,340 --> 01:37:54,950
New proxy new一个project new proxy之后把这个proxy加到我这个map里边来

2618
01:37:54,980 --> 01:37:55,340
是吧

2619
01:37:55,400 --> 01:37:56,885
就是被代理之后的数据

2620
01:37:56,885 --> 01:38:00,020
我加到这里面来维护一个全局的被代理的映射到嘛

2621
01:38:00,260 --> 01:38:01,850
然后proxy就构建完了

2622
01:38:01,880 --> 01:38:03,710
看到proxy就构建了

2623
01:38:03,920 --> 01:38:05,270
反向数据构建完了

2624
01:38:05,720 --> 01:38:07,370
那么它核心的东西在哪边儿

2625
01:38:07,490 --> 01:38:08,750
在get和set里边

2626
01:38:08,750 --> 01:38:10,040
是不是我们来看get

2627
01:38:10,040 --> 01:38:11,780
而在based hand那里边

2628
01:38:11,990 --> 01:38:13,310
Based儿在这上面

2629
01:38:13,760 --> 01:38:14,390
在这个上边儿

2630
01:38:15,320 --> 01:38:15,920
在这里边儿

2631
01:38:16,610 --> 01:38:18,410
这里边儿你看它有一个get和set

2632
01:38:18,410 --> 01:38:22,430
这三个东西跟这个东西跟跟这两个没什么区别

2633
01:38:22,460 --> 01:38:25,430
都是都是去处理某一个K或者订阅发布

2634
01:38:25,640 --> 01:38:27,080
所以我们只关注这两个东西

2635
01:38:27,110 --> 01:38:29,630
订阅发布给我们说了是吧

2636
01:38:29,660 --> 01:38:30,650
是做什么收集袋

2637
01:38:30,650 --> 01:38:32,270
我刚给大家也实现了代码是吧

2638
01:38:32,390 --> 01:38:33,680
我们来看这个给他

2639
01:38:33,740 --> 01:38:34,520
实际上这个给他

2640
01:38:35,330 --> 01:38:36,380
来来实现这个给他

2641
01:38:36,380 --> 01:38:38,300
我们来看给他收集来

2642
01:38:39,010 --> 01:38:39,670
是个什么依赖

2643
01:38:42,340 --> 01:38:43,030
给他收集依赖

2644
01:38:43,390 --> 01:38:45,820
这个依赖是不是给他收集依赖之后

2645
01:38:45,820 --> 01:38:46,390
在这儿来

2646
01:38:46,480 --> 01:38:47,770
我们判断它会返回

2647
01:38:47,770 --> 01:38:49,360
这个get函数是返回函数

2648
01:38:49,360 --> 01:38:49,840
返回是什么

2649
01:38:49,840 --> 01:38:51,400
同学们这是你的给他

2650
01:38:51,700 --> 01:38:53,110
这就是我们这边维护的给他

2651
01:38:53,530 --> 01:38:54,490
他会拿到你的target

2652
01:38:54,490 --> 01:38:55,660
拿到你对应的K是吧

2653
01:38:55,690 --> 01:38:57,850
还有你的这个当前你这个句柄是吧

2654
01:38:58,420 --> 01:39:11,260
你这个玩意儿同学们他会你看他在里边儿会判断你这个数据是否已经是这个数据是否已经是想你这个K里边的这个数据是否已经是什么

2655
01:39:11,960 --> 01:39:14,150
是否已经是响应式数据了是吧

2656
01:39:14,740 --> 01:39:16,300
如果已经是详细数据了

2657
01:39:16,660 --> 01:39:18,760
直接返回是直接返回

2658
01:39:19,500 --> 01:39:22,770
就是判断什么样的数据是否是响应数据

2659
01:39:22,890 --> 01:39:25,020
如果是只读数据或原始数据直接返回

2660
01:39:25,140 --> 01:39:28,590
那这种情况就不应该处去触发get her是吧

2661
01:39:28,980 --> 01:39:33,240
不应该收集依赖他有的数据就不应该收集依赖他只有在什么情况下

2662
01:39:33,740 --> 01:39:36,530
只有在一有些数据就不应该收机了

2663
01:39:36,530 --> 01:39:37,550
像一些原始数据

2664
01:39:37,550 --> 01:39:41,120
同学们有些很很多种数据都不应该收鸡的知道吧

2665
01:39:41,600 --> 01:39:42,200
然后

2666
01:39:43,040 --> 01:39:44,930
这几种情况都是不应该收集来的

2667
01:39:45,110 --> 01:39:46,130
这块都有备注

2668
01:39:46,750 --> 01:39:47,740
都有都有备注

2669
01:39:47,800 --> 01:39:50,140
原始数据获取原始数据

2670
01:39:50,140 --> 01:39:51,130
或者只读数据

2671
01:39:51,130 --> 01:39:53,170
这些东西都不应该数据数据来

2672
01:39:53,290 --> 01:39:56,140
然后他在这块儿判断是否是数组

2673
01:39:56,170 --> 01:39:58,390
看到会判断是否是数组同学们

2674
01:39:59,250 --> 01:40:00,570
如果是数组

2675
01:40:00,720 --> 01:40:01,980
你看判断数组

2676
01:40:02,160 --> 01:40:02,850
如果是数组

2677
01:40:02,850 --> 01:40:03,720
它会做一个什么处理

2678
01:40:04,620 --> 01:40:05,370
大家看一下

2679
01:40:06,020 --> 01:40:06,710
可能是数组

2680
01:40:06,770 --> 01:40:09,620
数组它会做一个处理数组的处理看到吗

2681
01:40:09,620 --> 01:40:10,640
这块儿还用说吗

2682
01:40:10,850 --> 01:40:12,200
这是昨天一模一样的东西

2683
01:40:12,320 --> 01:40:14,030
我还用吗用吗

2684
01:40:14,800 --> 01:40:19,180
跟昨天V1V2 V2里面是不是同样的东西是吧

2685
01:40:19,270 --> 01:40:20,740
这些东西他是不是还重写了一些

2686
01:40:20,830 --> 01:40:22,480
重写更多的一些东西了是吧

2687
01:40:23,340 --> 01:40:23,940
不能说了吧

2688
01:40:24,690 --> 01:40:26,970
说了还要说

2689
01:40:28,210 --> 01:40:29,080
意思就是说了吗

2690
01:40:29,110 --> 01:40:30,370
是不是不用说了吧

2691
01:40:30,550 --> 01:40:31,600
那这个东西还要跟你说

2692
01:40:31,600 --> 01:40:32,740
那就没意义了是吧

2693
01:40:35,110 --> 01:40:36,160
所以这块儿继续

2694
01:40:36,190 --> 01:40:37,270
所以说数组的情况

2695
01:40:37,270 --> 01:40:38,290
他又会去重写数组

2696
01:40:38,410 --> 01:40:39,370
重写数据是吧

2697
01:40:39,820 --> 01:40:41,500
然后去判断判断什么

2698
01:40:41,530 --> 01:40:42,550
判断是否是数组

2699
01:40:42,550 --> 01:40:43,090
如果是数组

2700
01:40:43,090 --> 01:40:44,290
它会去做一些处理

2701
01:40:44,620 --> 01:40:46,810
然后判断什么是获取数据是吧

2702
01:40:46,930 --> 01:40:48,820
获取我最原始的数据是吧

2703
01:40:48,850 --> 01:40:50,140
拿到我们最原始的值

2704
01:40:50,290 --> 01:40:52,270
然后判断你这个原始的值

2705
01:40:52,450 --> 01:40:53,140
如果

2706
01:40:53,870 --> 01:40:55,400
是有一些其他的数据

2707
01:40:55,430 --> 01:40:56,060
他直接返回

2708
01:40:56,060 --> 01:40:57,440
这这种情况不用管

2709
01:40:57,470 --> 01:41:00,110
这种这种很多兼容性的东西不用管

2710
01:41:00,890 --> 01:41:03,170
然后在这块同学他要去做什么

2711
01:41:03,320 --> 01:41:04,100
如果

2712
01:41:04,780 --> 01:41:05,650
不是只读数据

2713
01:41:05,650 --> 01:41:07,750
就是正正常的响应式数据

2714
01:41:07,750 --> 01:41:10,000
他就应该去做什么这块儿就应该做什么

2715
01:41:10,610 --> 01:41:11,570
手机依赖

2716
01:41:12,160 --> 01:41:14,080
构建map收集依赖知道吗

2717
01:41:14,380 --> 01:41:16,390
这块就应该去构建map收集来了

2718
01:41:16,420 --> 01:41:17,860
同学们清楚这块儿吗

2719
01:41:18,830 --> 01:41:20,300
这会儿我一会儿跟他说

2720
01:41:20,330 --> 01:41:21,560
收集那个那个逻辑

2721
01:41:21,560 --> 01:41:23,450
它这里边的逻辑跟我们那个逻辑一模一样

2722
01:41:23,450 --> 01:41:24,950
没什么区别是吧

2723
01:41:24,950 --> 01:41:25,670
没什么区别

2724
01:41:25,670 --> 01:41:26,540
就是我那个东西

2725
01:41:26,810 --> 01:41:29,720
我这个收集来的逻辑没什么区别知道吧

2726
01:41:29,720 --> 01:41:30,290
所以呢

2727
01:41:30,290 --> 01:41:31,070
这块儿做一个什么

2728
01:41:31,680 --> 01:41:33,360
去触发收集的这个逻辑

2729
01:41:33,390 --> 01:41:35,640
逻辑我们这块儿收集类的逻辑是这一块儿

2730
01:41:36,240 --> 01:41:36,990
在一块儿

2731
01:41:39,410 --> 01:41:40,190
这块手机来了

2732
01:41:40,190 --> 01:41:43,790
逻辑这块是不是也是在这里边儿

2733
01:41:45,750 --> 01:41:47,160
是不是这一步这一步是吧

2734
01:41:47,610 --> 01:41:49,770
是不是这一步收集了是吧

2735
01:41:50,310 --> 01:41:52,710
是不是这这里面是吧是吧

2736
01:41:53,160 --> 01:41:55,080
我们这儿也是去收集了是吧

2737
01:41:55,290 --> 01:41:56,220
也是去收集了

2738
01:41:57,190 --> 01:41:57,490
是吧

2739
01:41:57,610 --> 01:41:59,380
手机来哪去了

2740
01:41:59,530 --> 01:42:00,130
这里边算

2741
01:42:00,940 --> 01:42:03,340
然后去韩德尔panda里边儿算

2742
01:42:03,340 --> 01:42:05,110
这块儿收集来收集来

2743
01:42:05,260 --> 01:42:05,920
然后

2744
01:42:06,860 --> 01:42:07,700
所以我先反应一会儿

2745
01:42:08,240 --> 01:42:09,470
我不会让你反应的

2746
01:42:09,620 --> 01:42:10,730
你可能会听懵逼

2747
01:42:11,060 --> 01:42:11,900
但是很正常

2748
01:42:12,020 --> 01:42:12,590
你下来之后

2749
01:42:12,590 --> 01:42:13,640
你自己要去看

2750
01:42:13,640 --> 01:42:14,540
我不可能在这暂停

2751
01:42:14,570 --> 01:42:16,010
同学们你先思考五分钟

2752
01:42:18,290 --> 01:42:20,540
知不知道你把这个东西听明听明白了

2753
01:42:20,540 --> 01:42:22,580
这些东西其实就很很很很好说了

2754
01:42:22,790 --> 01:42:24,320
可能稍微有一点点

2755
01:42:24,590 --> 01:42:26,810
看着代码克特可能有点多

2756
01:42:26,810 --> 01:42:27,770
但是没关系

2757
01:42:28,190 --> 01:42:30,770
能把这个大体的逻辑你明白理顺

2758
01:42:31,280 --> 01:42:31,820
下来之后

2759
01:42:31,820 --> 01:42:35,600
你们自己再根据我的备注和我们这个东西再看就明白了

2760
01:42:35,600 --> 01:42:35,930
知道吧

2761
01:42:35,990 --> 01:42:38,600
所以我这块儿只是给给大家看

2762
01:42:38,600 --> 01:42:41,030
说的这个过程肯定是你们在听的时候

2763
01:42:41,240 --> 01:42:42,650
你们听前面这么多课

2764
01:42:42,680 --> 01:42:43,460
说实话

2765
01:42:44,180 --> 01:42:48,170
很多东西是不是都是你下来要啃几遍的内容你才能看明白

2766
01:42:48,800 --> 01:42:49,280
是不是

2767
01:42:54,250 --> 01:42:54,730
是啊

2768
01:42:56,700 --> 01:42:57,150
是吧

2769
01:42:59,190 --> 01:42:59,910
明白吗

2770
01:43:01,170 --> 01:43:02,970
所以说这块儿继续再继续

2771
01:43:03,060 --> 01:43:04,560
然后他返回收集依赖

2772
01:43:04,560 --> 01:43:06,240
收集依赖完成之后就做什么

2773
01:43:06,660 --> 01:43:07,560
返回数据是吧

2774
01:43:07,980 --> 01:43:08,610
返回数据

2775
01:43:09,000 --> 01:43:10,440
返回数据它会返回什么数据

2776
01:43:10,560 --> 01:43:13,020
会判断你这个数据是否是对象

2777
01:43:13,200 --> 01:43:14,700
如果是对象

2778
01:43:14,940 --> 01:43:16,350
再re active一下可以了吗

2779
01:43:18,350 --> 01:43:20,360
是不是跟我们那个说的是不是一模一样

2780
01:43:20,870 --> 01:43:21,530
明白吗

2781
01:43:22,250 --> 01:43:22,640
明白吗

2782
01:43:22,640 --> 01:43:23,000
是吧

2783
01:43:23,030 --> 01:43:23,750
是否是对象

2784
01:43:23,750 --> 01:43:24,380
如果是对象

2785
01:43:24,410 --> 01:43:25,460
我再返回rock you

2786
01:43:26,200 --> 01:43:27,670
难看的很难啃

2787
01:43:27,670 --> 01:43:28,840
说明你在进步

2788
01:43:29,350 --> 01:43:30,370
说明你在学习

2789
01:43:30,490 --> 01:43:32,860
你如果学的知识一直是不痛不痒的

2790
01:43:32,950 --> 01:43:35,140
就是对自己来说没有觉得没有难度的知识

2791
01:43:35,140 --> 01:43:36,640
你一定是没有进步的过程

2792
01:43:37,920 --> 01:43:40,950
进步的过程一定是感觉自己浑身难受

2793
01:43:40,950 --> 01:43:41,880
很难受的过程

2794
01:43:43,360 --> 01:43:46,090
这个我最近我最近我在做一个项目

2795
01:43:46,090 --> 01:43:47,050
我在接一个项目

2796
01:43:47,080 --> 01:43:51,610
我其实很多年都没有好两有两年多没有真正做业务项目了

2797
01:43:51,790 --> 01:43:52,990
我最近在做业务项目

2798
01:43:53,290 --> 01:43:54,910
贷业务项目做什么呢

2799
01:43:54,910 --> 01:43:55,600
做富文本

2800
01:43:56,170 --> 01:43:57,280
自己开发富文本

2801
01:43:57,940 --> 01:43:58,840
自己开发富文本

2802
01:43:58,840 --> 01:44:00,010
基于什么来做呢

2803
01:44:00,220 --> 01:44:01,180
基于卡瓦斯

2804
01:44:01,570 --> 01:44:05,620
基于canvas来做绘图引擎来做来做来做渲染引擎

2805
01:44:05,650 --> 01:44:10,090
来做渲染引擎相当于自己做一套要做自己做一套浏览器的一套东西渲染

2806
01:44:10,870 --> 01:44:13,390
然后自己做副本里边的各种编辑这些东西

2807
01:44:14,870 --> 01:44:15,530
那这里边呢

2808
01:44:15,530 --> 01:44:18,830
就是这里边就就就就我在这个过程当中

2809
01:44:18,860 --> 01:44:21,020
因为喀什引擎渲染引擎这一块儿我们做过

2810
01:44:21,170 --> 01:44:25,670
但是富文本里边会涉及到很多很多特别其他的一些逻辑

2811
01:44:26,770 --> 01:44:28,180
我这个过程我觉得很难受

2812
01:44:28,210 --> 01:44:29,290
真的难受的过程

2813
01:44:29,290 --> 01:44:30,850
我也天天在思考自己

2814
01:44:30,850 --> 01:44:31,870
每天也要复盘

2815
01:44:32,260 --> 01:44:33,100
我为什么难受

2816
01:44:33,130 --> 01:44:33,790
什么难受

2817
01:44:33,790 --> 01:44:34,420
是哪儿难受

2818
01:44:35,180 --> 01:44:36,890
我其实每次也给自己鼓劲儿

2819
01:44:36,890 --> 01:44:37,610
也给自己复盘

2820
01:44:38,120 --> 01:44:40,760
为什么这个这个这个感觉很难受很难受

2821
01:44:40,760 --> 01:44:41,390
你就想放弃

2822
01:44:41,390 --> 01:44:45,590
你就想去找一些逃避的一些一些一些一些东西没有没有没有

2823
01:44:46,320 --> 01:44:47,460
没有我在成都

2824
01:44:47,520 --> 01:44:49,770
你以为成都想百家

2825
01:44:49,770 --> 01:44:53,580
那都是都是整个带团队大团队的

2826
01:44:54,160 --> 01:44:54,820
Leader

2827
01:44:56,940 --> 01:44:58,170
你问跟北京一样吗

2828
01:44:59,900 --> 01:45:00,380
没有啊

2829
01:45:01,900 --> 01:45:03,250
所以在这个维度之上

2830
01:45:05,240 --> 01:45:05,600
谁

2831
01:45:05,630 --> 01:45:06,530
还有谁在成都

2832
01:45:06,530 --> 01:45:07,880
你们有谁在成都的嘛

2833
01:45:10,650 --> 01:45:11,160
好地方

2834
01:45:11,790 --> 01:45:13,020
你说你说个这个

2835
01:45:15,030 --> 01:45:16,470
十个人有九个人这么说

2836
01:45:16,530 --> 01:45:17,460
我以为你也在成都

2837
01:45:17,880 --> 01:45:20,100
所以说这个过程你们一定要遇到难的东西

2838
01:45:20,100 --> 01:45:22,680
一定要自己去咬下心来去肯知道吧

2839
01:45:23,040 --> 01:45:27,630
咬下心来去肯自己去自己去就是自己去反思这个过程

2840
01:45:27,960 --> 01:45:28,260
好吧

2841
01:45:28,290 --> 01:45:31,560
继续继续说代理对象就会返回是吧

2842
01:45:31,590 --> 01:45:32,490
对象会返回

2843
01:45:32,580 --> 01:45:34,440
那所以说我们这收集依赖是吧

2844
01:45:34,530 --> 01:45:34,920
同学们

2845
01:45:35,040 --> 01:45:37,140
那这块是不是就到收集依赖这个流程呢

2846
01:45:37,170 --> 01:45:39,600
我们一会儿再来看收集依赖这个过程是吧

2847
01:45:39,810 --> 01:45:42,450
收集依赖他什么时候才会去触发给他

2848
01:45:42,480 --> 01:45:45,270
才会去收集依赖它在使用你这个数据的时候是吧

2849
01:45:45,570 --> 01:45:48,180
真正使用你这个数据的时候才去才会去获取是吧

2850
01:45:48,270 --> 01:45:50,010
但是我们现在并没有使用数据

2851
01:45:50,100 --> 01:45:51,825
所以说并不会触发给他

2852
01:45:51,825 --> 01:45:52,740
也不会收集了

2853
01:45:52,740 --> 01:45:52,980
是不是

2854
01:45:53,980 --> 01:45:55,300
让我们继续继续

2855
01:45:57,170 --> 01:45:57,770
给他说完了

2856
01:45:57,770 --> 01:46:01,250
我们说seat是SOCIETECH就很简单很简单

2857
01:46:01,430 --> 01:46:02,930
赛特赛特很简单

2858
01:46:02,930 --> 01:46:04,160
我们来看赛特是吧

2859
01:46:04,580 --> 01:46:05,120
给他说完了

2860
01:46:05,120 --> 01:46:07,610
我们来说赛特赛特很简单

2861
01:46:07,640 --> 01:46:10,670
塞在里边还是硬的撒出来的

2862
01:46:10,670 --> 01:46:11,870
赛特拿过来

2863
01:46:12,140 --> 01:46:15,410
拿过来之后你看可以判断我这个数据是否是老数据是吧

2864
01:46:15,740 --> 01:46:17,330
我这个数据是否是老数据

2865
01:46:18,330 --> 01:46:19,260
拿到我的老数据

2866
01:46:19,290 --> 01:46:21,540
判断我这个数据和老数据是否是相同的

2867
01:46:21,870 --> 01:46:24,840
包括我这个数据是否是一些什么瑞福数据

2868
01:46:24,840 --> 01:46:27,240
这些瑞福数据我会给大家瑞福数据是什么东西

2869
01:46:28,090 --> 01:46:30,610
然后判断你这个数据是否是新增的K是吧

2870
01:46:30,850 --> 01:46:31,870
如果是新增的K

2871
01:46:31,960 --> 01:46:34,420
他会有一些相对一些处理

2872
01:46:34,480 --> 01:46:37,120
就是比如说像素组这些东西都会有一些处理

2873
01:46:37,510 --> 01:46:43,630
然后去拿到去触发修改的依赖然后去触发什么trigger trigger是什么

2874
01:46:43,810 --> 01:46:44,890
派发通知是吧

2875
01:46:45,010 --> 01:46:47,740
就是通知所有的依赖去通知了是吧

2876
01:46:47,770 --> 01:46:49,720
拍完拍完通知之后返回数据

2877
01:46:50,210 --> 01:46:50,600
你看

2878
01:46:50,750 --> 01:46:52,040
所以说这这个东西

2879
01:46:52,040 --> 01:46:53,810
这个数据这个这个过程明白吗

2880
01:46:53,810 --> 01:46:54,800
同学们

2881
01:46:55,200 --> 01:46:56,640
Relative这个过程明白了吗

2882
01:46:56,700 --> 01:46:58,410
他的过程就是什么的过程

2883
01:46:58,410 --> 01:46:59,730
是不是就是跟我们这个一样

2884
01:47:01,060 --> 01:47:01,960
就是一个什么

2885
01:47:02,440 --> 01:47:03,550
是不是跟我们这个一样

2886
01:47:03,580 --> 01:47:05,950
是不是跟这个是不是一模一样是

2887
01:47:06,800 --> 01:47:07,250
是不是

2888
01:47:08,070 --> 01:47:08,490
是吧

2889
01:47:08,520 --> 01:47:11,370
把这个这个数据这个这个这个东西在给大家拉进来

2890
01:47:11,400 --> 01:47:11,940
拉进来

2891
01:47:16,200 --> 01:47:16,860
把这个过程

2892
01:47:16,860 --> 01:47:20,010
这个嵌套的数据处理的逻辑在给大家记录下来

2893
01:47:20,040 --> 01:47:21,300
记录到这儿来是吧

2894
01:47:22,150 --> 01:47:23,710
所以逻辑大致是不是一样

2895
01:47:23,830 --> 01:47:27,670
你只是觉得代码里边有很多其他他有很多兼容性的处理

2896
01:47:28,060 --> 01:47:29,740
像我们这种我写个DEMO

2897
01:47:29,740 --> 01:47:31,600
我还需要写个什么兼容性嘛

2898
01:47:32,080 --> 01:47:32,890
也比较兼容性

2899
01:47:32,890 --> 01:47:34,660
就是多多种方案的考虑

2900
01:47:35,600 --> 01:47:35,960
是不是

2901
01:47:36,470 --> 01:47:37,580
所以这个维度之上

2902
01:47:37,970 --> 01:47:40,070
这个维度之上我们再回过头来看

2903
01:47:40,070 --> 01:47:40,730
就要看什么

2904
01:47:41,000 --> 01:47:42,830
我们现在已经聊了什么

2905
01:47:42,860 --> 01:47:44,900
他只是把数据处理成想硬数据了是吧

2906
01:47:45,260 --> 01:47:46,970
怎么又把它关了吧

2907
01:47:46,970 --> 01:47:48,320
我只是把数据处理成小意思

2908
01:47:48,380 --> 01:47:49,880
那什么时候触发这个get or

2909
01:47:50,000 --> 01:47:51,350
什么时候触发这个theatre呢

2910
01:47:51,440 --> 01:47:52,730
他才会去收集依赖

2911
01:47:52,970 --> 01:47:53,540
才会

2912
01:47:53,540 --> 01:47:54,530
才会去收集依赖

2913
01:47:54,590 --> 01:47:55,670
才会去派发通知呢

2914
01:47:55,670 --> 01:47:55,970
是吧

2915
01:47:56,270 --> 01:47:57,920
在真正获取数据的时候

2916
01:47:57,950 --> 01:47:59,030
那什么时候获取数据呢

2917
01:47:59,030 --> 01:48:01,580
按照我们这个逻辑执行effect的时候

2918
01:48:01,580 --> 01:48:01,820
是吧

2919
01:48:02,150 --> 01:48:04,100
所以我们现在要到APP里边儿去了

2920
01:48:04,130 --> 01:48:04,430
是吧

2921
01:48:05,210 --> 01:48:07,010
这块儿你给他一份

2922
01:48:07,010 --> 01:48:07,940
里边我们说了

2923
01:48:07,940 --> 01:48:10,010
也给同学们以非逻辑

2924
01:48:11,040 --> 01:48:11,790
一沸腾

2925
01:48:13,830 --> 01:48:15,270
我们要以飞鹤里边去了

2926
01:48:15,930 --> 01:48:17,280
我们的effect

2927
01:48:21,290 --> 01:48:22,880
这是trigger派发

2928
01:48:23,720 --> 01:48:27,050
然后这是我们的track收集

2929
01:48:28,180 --> 01:48:30,760
然后这是cleanup清楚一来

2930
01:48:31,800 --> 01:48:32,760
就是所有的备注

2931
01:48:32,760 --> 01:48:34,440
我备注写的特别特别完整

2932
01:48:34,440 --> 01:48:35,280
都给大家写好了的

2933
01:48:35,970 --> 01:48:39,480
所以这块儿都是你们下来之后都可以去重新看一下我的备注

2934
01:48:39,480 --> 01:48:40,920
我包括也写了很多原因

2935
01:48:41,220 --> 01:48:42,510
咱们这块儿给他

2936
01:48:43,710 --> 01:48:45,750
你的ID是不是给一个a分是吧

2937
01:48:45,870 --> 01:48:51,030
给一个分他会判断我给到这个N是否是已经是A1FE TE什么意思

2938
01:48:51,240 --> 01:48:54,210
就是我已经声明了这个东西这一块儿

2939
01:48:54,210 --> 01:48:56,190
这个东西很有意思就是

2940
01:48:58,150 --> 01:48:59,890
模板读取使用数据和

2941
01:49:00,910 --> 01:49:01,540
e fe TE

2942
01:49:01,750 --> 01:49:02,590
你先不要着急嘛

2943
01:49:02,590 --> 01:49:03,520
我还没到那块儿

2944
01:49:03,970 --> 01:49:05,440
我说了我这块儿完了

2945
01:49:05,440 --> 01:49:08,890
说这串给给大家串的时候就会串到这个知识点

2946
01:49:09,520 --> 01:49:11,410
给你们串的时候就会看到这个时间好吧

2947
01:49:13,220 --> 01:49:15,260
所以说在这块儿

2948
01:49:15,260 --> 01:49:16,790
你看这块儿就会有什么

2949
01:49:17,320 --> 01:49:18,580
你看在这块儿有一个什么

2950
01:49:18,700 --> 01:49:20,170
有一个拿到获取数据是吧

2951
01:49:20,170 --> 01:49:20,950
这是我们的APP

2952
01:49:21,160 --> 01:49:22,720
他在APP的时候会返回是吧

2953
01:49:22,930 --> 01:49:24,370
这块会返返回一个

2954
01:49:25,370 --> 01:49:26,360
新的一课

2955
01:49:27,190 --> 01:49:29,260
那我是不是可以这这也是一个函数

2956
01:49:29,320 --> 01:49:31,690
我是不就还可以在这这块儿再来

2957
01:49:32,920 --> 01:49:35,770
我是不是可以在这块儿再来出来

2958
01:49:38,570 --> 01:49:39,050
看到吗

2959
01:49:39,530 --> 01:49:40,820
我是不是可以把这个返回的H

2960
01:49:40,820 --> 01:49:42,140
它是返回一个新的给了我

2961
01:49:42,140 --> 01:49:43,160
这一刻再欠他

2962
01:49:43,370 --> 01:49:45,890
所以在这里边他就在嵌套的时候

2963
01:49:45,950 --> 01:49:48,770
它就返回你原来这个IP就不会再去带领一层

2964
01:49:49,010 --> 01:49:51,260
所以说他在你返回的这个FX上边儿

2965
01:49:51,260 --> 01:49:54,230
它会把你自己原生的effect拿过来返回

2966
01:49:54,260 --> 01:49:54,680
知道吧

2967
01:49:55,320 --> 01:49:55,770
明白吧

2968
01:49:55,980 --> 01:50:02,250
所以这一步然后继续同学们他会通过create a rock effect来创建一个函数

2969
01:50:02,400 --> 01:50:02,790
是吧

2970
01:50:02,820 --> 01:50:03,750
来创建一个函数

2971
01:50:03,840 --> 01:50:05,580
因为我们这个函数要去做什么

2972
01:50:05,610 --> 01:50:06,660
要收集依赖是不是

2973
01:50:07,220 --> 01:50:09,290
他收集这个依赖一定是个函数是吧

2974
01:50:09,470 --> 01:50:10,910
所以说这块儿会创建一个函数

2975
01:50:11,840 --> 01:50:14,060
然后把这个MS执行一次是吧

2976
01:50:14,210 --> 01:50:16,100
他会出判断是否是懒加载

2977
01:50:16,430 --> 01:50:17,930
如果不是懒加载就会执行一次

2978
01:50:17,930 --> 01:50:19,670
同学们看见执行这个就可以了

2979
01:50:19,670 --> 01:50:20,270
就执行什么

2980
01:50:20,300 --> 01:50:21,650
执行的这个玩意儿是吧

2981
01:50:21,650 --> 01:50:22,460
就执行这个玩意儿

2982
01:50:22,580 --> 01:50:24,560
这个玩意儿执行什么我们这个东西是吧

2983
01:50:24,740 --> 01:50:27,350
这就是首次你执行这个一份的时候

2984
01:50:27,680 --> 01:50:29,660
外边的时候就会执行这个F的原因

2985
01:50:29,660 --> 01:50:30,380
就会执行它

2986
01:50:30,800 --> 01:50:32,120
你的N就包到这里边儿了

2987
01:50:32,590 --> 01:50:33,700
所以执行这东西

2988
01:50:33,940 --> 01:50:35,050
执行这个东西的时候

2989
01:50:35,910 --> 01:50:37,500
之前那个东西的时候他会做什么

2990
01:50:37,800 --> 01:50:40,080
他会把你这个L来加上ID

2991
01:50:40,080 --> 01:50:41,010
这就是我们的water

2992
01:50:41,010 --> 01:50:41,790
是不是一样的

2993
01:50:42,550 --> 01:50:43,810
你是不是也需要ID

2994
01:50:44,380 --> 01:50:46,780
是不是需要判断你这个water是否激活

2995
01:50:46,900 --> 01:50:47,320
是吧

2996
01:50:47,590 --> 01:50:49,960
包括你这个地图里边儿依赖了哪些数据

2997
01:50:49,960 --> 01:50:50,230
是吧

2998
01:50:50,410 --> 01:50:52,270
有哪些响应式数据来使用

2999
01:50:52,630 --> 01:50:52,870
是吧

3000
01:50:52,870 --> 01:50:53,740
我这个店铺里边儿

3001
01:50:54,040 --> 01:50:56,920
我这个的里边只有只有这个counter是不是

3002
01:50:56,980 --> 01:51:00,640
但是我这个deep是不是还可以由其他的详细数据来使用

3003
01:51:00,640 --> 01:51:01,660
所以我这个地

3004
01:51:01,870 --> 01:51:03,400
我这个effect还要维护什么

3005
01:51:03,910 --> 01:51:06,250
维护哪些数据的依赖下知道吧

3006
01:51:07,050 --> 01:51:07,650
明白吗

3007
01:51:08,280 --> 01:51:09,990
还不只是就是维护

3008
01:51:09,990 --> 01:51:11,400
维护了一些数据的依赖下

3009
01:51:11,490 --> 01:51:13,080
这个东西又是一点

3010
01:51:13,200 --> 01:51:16,650
所以说这个其实还稍微这个这个东西稍微有一点绕

3011
01:51:16,650 --> 01:51:17,580
但是没关系

3012
01:51:17,580 --> 01:51:18,960
这个不影响逻辑

3013
01:51:19,170 --> 01:51:21,270
我这会儿备注给他写的很清楚

3014
01:51:21,540 --> 01:51:21,930
好吧

3015
01:51:22,830 --> 01:51:25,140
然后你把这个N你看原始得分拿到这儿来

3016
01:51:25,170 --> 01:51:25,650
你看了吗

3017
01:51:25,710 --> 01:51:26,760
这是你原始的份

3018
01:51:27,060 --> 01:51:27,810
到家了什么

3019
01:51:27,840 --> 01:51:28,770
然后active是吧

3020
01:51:28,980 --> 01:51:32,310
所以说最你最后还是在那边跑到这边来了是吧

3021
01:51:32,400 --> 01:51:32,970
到这边了

3022
01:51:32,970 --> 01:51:33,750
因为你的N

3023
01:51:33,780 --> 01:51:34,530
你这个effect

3024
01:51:34,710 --> 01:51:37,620
你外边返回那个X执行的effect是不是就是这个东西

3025
01:51:37,710 --> 01:51:38,820
是不是就是这个APP

3026
01:51:38,820 --> 01:51:41,190
是不是这个函数在这个函数里边儿

3027
01:51:41,550 --> 01:51:42,390
在这个函数里边

3028
01:51:42,870 --> 01:51:43,680
这个函数里边呢

3029
01:51:43,680 --> 01:51:47,040
它会判断当前IP是否不是激活的状态

3030
01:51:47,250 --> 01:51:48,660
如果不是激活的状态

3031
01:51:48,660 --> 01:51:49,680
没有激活的状态

3032
01:51:49,830 --> 01:51:54,270
他才会去执行这个回回掉这个东西执行这个调度的东西

3033
01:51:54,990 --> 01:51:56,460
这个歇一会儿给大家说吧

3034
01:51:56,820 --> 01:52:01,230
然后会判断你当前这个肺上是否已经在站内

3035
01:52:02,060 --> 01:52:04,280
当前这个IP是否在已经在站内

3036
01:52:04,280 --> 01:52:04,790
什么意思呢

3037
01:52:04,790 --> 01:52:07,250
就是effects嵌套effect这种情况

3038
01:52:07,730 --> 01:52:09,230
又嵌套X这种情况

3039
01:52:10,020 --> 01:52:11,010
如果这种情况

3040
01:52:11,130 --> 01:52:12,780
如果是以这种情况

3041
01:52:12,780 --> 01:52:13,740
他会做一个什么

3042
01:52:13,860 --> 01:52:14,940
做一个清除处理

3043
01:52:15,750 --> 01:52:16,170
是吧

3044
01:52:16,200 --> 01:52:18,780
就会掉嵌嵌套多的站内是吧

3045
01:52:18,810 --> 01:52:20,340
你看这里边儿收集费的

3046
01:52:20,730 --> 01:52:21,390
那么这里边呢

3047
01:52:21,390 --> 01:52:22,260
就会出现问题

3048
01:52:22,260 --> 01:52:23,310
出现什么问题呢

3049
01:52:23,430 --> 01:52:24,150
在这种情况

3050
01:52:24,150 --> 01:52:24,990
你看我这里边有

3051
01:52:24,990 --> 01:52:28,230
同学们这都是都会有这种这些我写的情况

3052
01:52:29,200 --> 01:52:30,460
这这里边都会有这种

3053
01:52:30,460 --> 01:52:33,490
我处理这些这些这些这些各种小问题

3054
01:52:33,490 --> 01:52:35,620
他为什么要去做cleanup

3055
01:52:35,680 --> 01:52:38,170
或者说判断是否在站内这些东西对吧

3056
01:52:38,680 --> 01:52:39,280
然后

3057
01:52:40,330 --> 01:52:41,440
处理完了之后

3058
01:52:41,890 --> 01:52:43,690
这些东西都是一个兼容性的处理

3059
01:52:44,080 --> 01:52:44,860
处理完了之后

3060
01:52:44,920 --> 01:52:46,000
我教大家还有一个

3061
01:52:46,090 --> 01:52:48,310
还有一个大家准备去看一下代码

3062
01:52:48,310 --> 01:52:50,350
你不知道他要用的原因是什么

3063
01:52:50,440 --> 01:52:51,100
把他做事了

3064
01:52:51,220 --> 01:52:53,200
做事了之后重新去编一下这个代码

3065
01:52:53,780 --> 01:52:55,490
重新编一下这个代码跑

3066
01:52:55,520 --> 01:52:57,980
或者重新跑一下这个东西的单侧是吧

3067
01:52:58,070 --> 01:53:00,980
跑一下这个东西的单测测试用例是吧

3068
01:53:01,010 --> 01:53:02,300
跑一下这个东西的测试用例

3069
01:53:02,420 --> 01:53:04,010
跑一下这个东西的测试用例

3070
01:53:04,070 --> 01:53:05,840
重新跑一下这个文件的测试用例

3071
01:53:05,840 --> 01:53:07,670
跑一下哪个通不过

3072
01:53:07,850 --> 01:53:09,560
你就知道它的它的功能是哪个了

3073
01:53:09,620 --> 01:53:10,160
明白了

3074
01:53:10,520 --> 01:53:11,120
明白了吗

3075
01:53:11,330 --> 01:53:12,230
这就是看源码

3076
01:53:12,260 --> 01:53:14,810
就是开源码最好的一个方法就是跑测试用例

3077
01:53:14,870 --> 01:53:17,870
别人以别人的源码是基于测试用例来测试的

3078
01:53:18,520 --> 01:53:19,510
那你不知道的时候

3079
01:53:19,510 --> 01:53:20,020
你就什么

3080
01:53:20,140 --> 01:53:20,950
你就把他做事了

3081
01:53:21,100 --> 01:53:22,540
你不知道这个代表什么

3082
01:53:22,600 --> 01:53:23,260
你把他做事了

3083
01:53:23,380 --> 01:53:25,660
做事了之后跑一下测试用例不就行了吗

3084
01:53:25,960 --> 01:53:26,320
是吧

3085
01:53:26,680 --> 01:53:28,300
那哪块儿测试用例没有通过

3086
01:53:28,300 --> 01:53:30,490
那这个代码就是做这个用处的明白吗

3087
01:53:31,210 --> 01:53:32,800
这块我们又回到这里边是吧

3088
01:53:32,980 --> 01:53:33,520
在这里边儿

3089
01:53:33,880 --> 01:53:34,960
你看这里边儿是吧

3090
01:53:34,960 --> 01:53:35,890
就到了哪一步

3091
01:53:36,480 --> 01:53:37,350
到了这一步了是吧

3092
01:53:37,770 --> 01:53:39,570
到了这一步执行是吧

3093
01:53:39,630 --> 01:53:43,920
就开始把我当前这个IP的当前ICT是不是就是我这个函数是吧

3094
01:53:43,980 --> 01:53:45,360
都是我当前这个函数是吧

3095
01:53:45,600 --> 01:53:47,550
我当前这个函数然后加到我

3096
01:53:47,730 --> 01:53:51,330
加到我这个什么XD卡里边儿expected就是一个什么

3097
01:53:51,450 --> 01:53:53,010
就是一个数组知道吧

3098
01:53:53,550 --> 01:53:54,810
压到站里边儿知道吧

3099
01:53:54,840 --> 01:53:55,920
压到站里边儿

3100
01:53:56,040 --> 01:53:57,510
为什么他要压到占领

3101
01:53:57,840 --> 01:53:58,890
我们要做一个标记

3102
01:53:58,890 --> 01:54:01,590
要把它记录下来这块跟我们的那个什么

3103
01:54:01,650 --> 01:54:05,460
是不是声明一个全局的target没什么区别声明全局的target

3104
01:54:05,700 --> 01:54:08,100
我这块儿是升级的生命的全局的

3105
01:54:08,100 --> 01:54:10,110
他这块儿是压到数组里面去是吧

3106
01:54:10,230 --> 01:54:11,430
为什么要到数组里边儿

3107
01:54:11,520 --> 01:54:12,420
我们给大家说了

3108
01:54:12,540 --> 01:54:13,440
他是不是可以飞

3109
01:54:13,440 --> 01:54:14,520
他又嵌套if a他

3110
01:54:15,280 --> 01:54:16,420
那XX又嵌套

3111
01:54:16,420 --> 01:54:17,710
X这种嵌套的情况

3112
01:54:17,890 --> 01:54:20,140
他是要通过栈来避免是不是

3113
01:54:20,530 --> 01:54:21,790
所以这块儿他要占领

3114
01:54:21,940 --> 01:54:23,650
要占领之后同学们执行a分

3115
01:54:24,180 --> 01:54:29,910
直接分的时候就会触发什么触发什么是不是就处罚我们外边儿获取数据的逻辑啦

3116
01:54:30,300 --> 01:54:32,520
是不是是不是就获取这个数据了

3117
01:54:32,550 --> 01:54:35,520
是不是获取数据的时候是不是就会触发什么是吧

3118
01:54:35,520 --> 01:54:36,810
Get和set a了是吧

3119
01:54:38,960 --> 01:54:41,930
To Get ER完了之后是不是就会触发什么收集依赖

3120
01:54:41,930 --> 01:54:43,790
是不是我们先不说收集依赖

3121
01:54:43,790 --> 01:54:44,690
会收集袋

3122
01:54:44,690 --> 01:54:46,790
收集完了之后就会把数据返回回来是吧

3123
01:54:47,090 --> 01:54:48,500
回来之后返回到这儿

3124
01:54:49,540 --> 01:54:50,440
返回回来之后

3125
01:54:51,100 --> 01:54:52,390
FN执行完了之后是吧

3126
01:54:52,570 --> 01:54:54,220
FN返回给F里边儿

3127
01:54:54,250 --> 01:54:55,510
FM执行完了之后是吧

3128
01:54:55,750 --> 01:54:56,830
Render执行完了之后

3129
01:54:56,860 --> 01:54:57,460
然后这里边儿

3130
01:54:58,100 --> 01:55:00,560
Speak出站就是我当前这个IP是不就出站了

3131
01:55:01,010 --> 01:55:01,790
出站了之后

3132
01:55:01,850 --> 01:55:03,560
当前这个是不是就不是他了

3133
01:55:04,040 --> 01:55:04,880
是不是懂了吗

3134
01:55:05,060 --> 01:55:06,020
然后出了站之后

3135
01:55:06,050 --> 01:55:07,400
然后这块儿指向对

3136
01:55:07,400 --> 01:55:11,270
然后然后把当前这个X只鸡就是当前这个

3137
01:55:11,850 --> 01:55:12,300
激活的

3138
01:55:12,300 --> 01:55:15,030
因为我在这一步是不是这个active

3139
01:55:15,030 --> 01:55:17,640
当前active in fact是当前这个IP是吧

3140
01:55:17,850 --> 01:55:19,470
当前激活的ID是当前这个IP

3141
01:55:19,710 --> 01:55:20,820
然后我出了站之后

3142
01:55:21,000 --> 01:55:21,750
是不是它激活了

3143
01:55:21,750 --> 01:55:23,760
就是他站顶出了站之后

3144
01:55:23,760 --> 01:55:25,860
其他下一个元素的X是吧

3145
01:55:26,130 --> 01:55:28,980
因为为什么有这么多个一卡通有嵌套

3146
01:55:29,160 --> 01:55:30,360
给大家说了有嵌套

3147
01:55:31,230 --> 01:55:33,540
是不是我可以有嵌套是吧

3148
01:55:33,540 --> 01:55:34,980
我的IP是可以有嵌套

3149
01:55:35,070 --> 01:55:36,540
我的主见是不是也可以嵌套

3150
01:55:36,690 --> 01:55:39,000
我的主见他是我的APP就可以嵌套

3151
01:55:39,330 --> 01:55:39,990
有嵌套

3152
01:55:40,620 --> 01:55:41,070
明白吗

3153
01:55:41,370 --> 01:55:42,540
你非得嵌套的情况下

3154
01:55:43,970 --> 01:55:45,500
所以说这块儿执行完了之后

3155
01:55:45,500 --> 01:55:46,310
你看这会儿初三

3156
01:55:46,760 --> 01:55:47,600
然后初三完了之后

3157
01:55:47,600 --> 01:55:48,290
一黑了就完了

3158
01:55:48,710 --> 01:55:49,910
所以这块儿是在哪块儿

3159
01:55:50,000 --> 01:55:51,380
在执行FM的时候

3160
01:55:51,800 --> 01:55:53,300
执行N的时候获取数据

3161
01:55:53,300 --> 01:55:55,790
就会执行到一块儿map里边嘛

3162
01:55:55,790 --> 01:55:57,710
里边就会什么trigger truck啊

3163
01:55:57,830 --> 01:55:58,730
就会触发什么

3164
01:55:58,940 --> 01:56:00,620
触发什么门窗什么处罚

3165
01:56:00,620 --> 01:56:01,550
我这个逻辑思

3166
01:56:02,150 --> 01:56:02,870
下一个逻辑

3167
01:56:03,530 --> 01:56:05,150
拖到这儿获取数据是吧

3168
01:56:05,240 --> 01:56:07,460
Truck收集依赖收集依赖是吧

3169
01:56:07,700 --> 01:56:08,960
收集赖是吧

3170
01:56:09,050 --> 01:56:09,980
这块收集依赖

3171
01:56:11,080 --> 01:56:11,560
哪块儿

3172
01:56:12,950 --> 01:56:14,450
这块是不是收鸡蛋是吧

3173
01:56:14,510 --> 01:56:15,560
收集在这里边儿

3174
01:56:15,590 --> 01:56:16,910
收鸡蛋也在这里边儿是吧

3175
01:56:17,000 --> 01:56:18,020
收集了也在这里面

3176
01:56:18,020 --> 01:56:19,040
你看就会穿吗

3177
01:56:19,040 --> 01:56:19,640
收机了

3178
01:56:20,500 --> 01:56:21,400
这块收集袋

3179
01:56:21,610 --> 01:56:24,190
你看收集袋收集一袋收集依赖

3180
01:56:24,190 --> 01:56:27,130
你看它会判断你当前没有APP的时候

3181
01:56:27,160 --> 01:56:27,730
那就返回

3182
01:56:27,850 --> 01:56:28,570
你说没有effect

3183
01:56:28,570 --> 01:56:30,280
我还给你收集什么依赖是吧

3184
01:56:30,850 --> 01:56:32,680
那么然后收集依赖

3185
01:56:32,800 --> 01:56:35,470
它会判断你当前这是我们的take up同伴

3186
01:56:36,420 --> 01:56:39,060
会判断我当前特朗普有没有我当前这个依赖

3187
01:56:39,480 --> 01:56:40,980
其实就跟我那个一样是吧

3188
01:56:40,980 --> 01:56:41,850
维护了一个什么

3189
01:56:41,880 --> 01:56:43,320
维护了一个这么这么一个东西

3190
01:56:43,320 --> 01:56:46,740
它会判断你当前这个东西是否有没有当前我这个K

3191
01:56:46,740 --> 01:56:48,120
他如果没有这个target

3192
01:56:48,240 --> 01:56:49,110
它构建一个target

3193
01:56:49,110 --> 01:56:50,220
构建一个APP可以了吗

3194
01:56:50,640 --> 01:56:52,950
构建一个APP他会构建出来一个这种

3195
01:56:52,980 --> 01:56:54,390
你看这是我的数据是吧

3196
01:56:54,510 --> 01:56:55,620
这是我的数据

3197
01:56:55,770 --> 01:56:56,820
这是我的原始数据

3198
01:56:57,210 --> 01:56:58,200
可以判断我这里边儿

3199
01:56:58,230 --> 01:57:01,920
我这份原始数据是否已经有X使用了

3200
01:57:01,950 --> 01:57:03,090
如果没有APP的使用

3201
01:57:03,150 --> 01:57:04,620
那就说明没有构建起来依赖

3202
01:57:04,920 --> 01:57:06,120
没有构建起来依赖怎么办

3203
01:57:06,240 --> 01:57:07,350
构建一份依赖是吧

3204
01:57:07,530 --> 01:57:09,180
够一份儿这份数据

3205
01:57:09,560 --> 01:57:10,550
他会构建一个map

3206
01:57:10,970 --> 01:57:13,460
这个map这份数据里面map这个K

3207
01:57:13,730 --> 01:57:15,590
然后你看的map是吧

3208
01:57:15,740 --> 01:57:18,770
然后然后又判断的map里面是否获取了这个K

3209
01:57:18,770 --> 01:57:21,080
是不是这个K是什么counter是吧

3210
01:57:21,200 --> 01:57:22,460
是否有人用这个counter

3211
01:57:22,460 --> 01:57:23,720
如果没有人用这个counter

3212
01:57:23,870 --> 01:57:24,590
那就没有是吧

3213
01:57:24,740 --> 01:57:26,390
然后又构建一个什么new set是吧

3214
01:57:26,390 --> 01:57:27,680
跟那个是一模一样

3215
01:57:28,010 --> 01:57:29,060
溜了sight完了之后

3216
01:57:29,120 --> 01:57:31,760
然后判断是否已经有了我们当前这个F是吧

3217
01:57:31,940 --> 01:57:32,990
是不是跟我们这个一模一样

3218
01:57:32,990 --> 01:57:33,650
同学们

3219
01:57:33,760 --> 01:57:37,240
跟这个是不是一模一样判断是否已经有了是吧

3220
01:57:37,690 --> 01:57:39,610
已经有了一样吗

3221
01:57:40,060 --> 01:57:40,750
是不是一模一样

3222
01:57:40,750 --> 01:57:41,950
这块的逻辑是一模一样

3223
01:57:44,460 --> 01:57:45,300
要敲黑板吗

3224
01:57:45,690 --> 01:57:46,770
我的金塔木

3225
01:57:50,780 --> 01:57:51,380
听到明白吗

3226
01:57:51,380 --> 01:57:53,030
这块儿稍微有点绕

3227
01:57:53,060 --> 01:57:54,050
但是带个大逻辑

3228
01:57:54,050 --> 01:57:55,100
你要拉通就行了

3229
01:57:55,640 --> 01:57:55,940
知道吧

3230
01:57:56,000 --> 01:57:57,920
下来之后有些细小的逻辑

3231
01:57:57,980 --> 01:57:59,900
你看我的备注就很不错

3232
01:58:00,320 --> 01:58:01,640
懂不懂好吧

3233
01:58:01,940 --> 01:58:02,750
所以说这块儿

3234
01:58:06,690 --> 01:58:07,260
继续啊

3235
01:58:08,570 --> 01:58:09,980
这块继续你看

3236
01:58:10,100 --> 01:58:11,960
他会判断a是否已经有了

3237
01:58:11,990 --> 01:58:13,070
如果没有怎么办

3238
01:58:13,660 --> 01:58:14,260
如果没有

3239
01:58:14,880 --> 01:58:16,140
把他添加到这个依赖里边儿

3240
01:58:16,170 --> 01:58:17,880
看到添加到当前这个依赖里边儿

3241
01:58:17,910 --> 01:58:19,950
然后同时我我说了什么

3242
01:58:20,040 --> 01:58:21,120
把当前这个依赖

3243
01:58:21,930 --> 01:58:22,980
当前你这个依赖

3244
01:58:23,010 --> 01:58:25,650
就是我当前依赖你这个东西的依赖叫什么

3245
01:58:25,680 --> 01:58:26,970
我这个激活的低谷里边儿

3246
01:58:26,970 --> 01:58:29,760
我们说了为什么要有这么这么关心

3247
01:58:29,760 --> 01:58:31,110
因为你的这个effect

3248
01:58:33,770 --> 01:58:35,090
还有必要看回放

3249
01:58:36,240 --> 01:58:38,910
意思意思就是你平时都不看其他项目

3250
01:58:38,910 --> 01:58:41,280
其他你平时都不看回放吗

3251
01:58:43,100 --> 01:58:44,270
我们一登的课程

3252
01:58:44,360 --> 01:58:46,340
你看一次回放会收获一次东西

3253
01:58:46,460 --> 01:58:48,260
你看一次回放会收获一次东西

3254
01:58:49,220 --> 01:58:52,190
就包括我现在我也有时候也会看一下回放

3255
01:58:52,190 --> 01:58:53,180
看一下谁的回放了

3256
01:58:53,510 --> 01:58:54,470
就是你们后边会

3257
01:58:55,140 --> 01:58:57,630
会应该有一个麻省理工的大佬给大家讲课

3258
01:58:58,600 --> 01:59:00,670
我经常看他的一些游戏方面的一些东西

3259
01:59:01,030 --> 01:59:02,560
或者说可视化上面的一些东西

3260
01:59:05,130 --> 01:59:05,610
知道吧

3261
01:59:06,570 --> 01:59:07,500
麻省理工的大佬

3262
01:59:07,500 --> 01:59:09,990
有人到时候会给大家讲虚幻四吧

3263
01:59:10,050 --> 01:59:10,920
宣武还是虚幻四

3264
01:59:10,920 --> 01:59:11,970
应该有吧

3265
01:59:13,500 --> 01:59:14,640
后边会给你们讲

3266
01:59:15,120 --> 01:59:16,020
他们会给你们讲

3267
01:59:16,980 --> 01:59:19,110
数据结构就是这个东西

3268
01:59:20,070 --> 01:59:21,360
你们这个课里面就有

3269
01:59:22,430 --> 01:59:23,720
你们这人数据结构去了

3270
01:59:23,720 --> 01:59:25,040
你们这里边就有他的

3271
01:59:25,070 --> 01:59:26,000
他他要跟你讲

3272
01:59:26,810 --> 01:59:27,290
是吧

3273
01:59:30,920 --> 01:59:32,480
我看我看

3274
01:59:32,480 --> 01:59:34,190
我更多看书吧

3275
01:59:34,520 --> 01:59:35,450
我更多看书

3276
01:59:37,050 --> 01:59:37,680
我更多看书

3277
01:59:37,680 --> 01:59:38,430
我看视频

3278
01:59:38,430 --> 01:59:40,500
其实偶尔也只看几个人的视频

3279
01:59:40,500 --> 01:59:41,460
我也看书看得多

3280
01:59:42,030 --> 01:59:43,170
看视频这个东西

3281
01:59:44,310 --> 01:59:44,730
太慢了

3282
01:59:44,730 --> 01:59:45,690
我觉得有的时候

3283
01:59:45,930 --> 01:59:47,250
但是有些生

3284
01:59:47,250 --> 01:59:48,150
有些新知识

3285
01:59:48,150 --> 01:59:49,980
我可能会去看一些书入门

3286
01:59:51,020 --> 01:59:51,680
信

3287
01:59:52,960 --> 01:59:54,730
李老师李老师

3288
01:59:56,290 --> 01:59:56,770
李老师

3289
01:59:59,030 --> 01:59:59,540
继续啊

3290
02:00:00,170 --> 02:00:00,680
继续

3291
02:00:03,620 --> 02:00:04,580
新知识

3292
02:00:06,680 --> 02:00:07,160
不一样

3293
02:00:07,580 --> 02:00:10,370
要看你如果没有体系的时候

3294
02:00:10,370 --> 02:00:11,600
你需要别人给你体系

3295
02:00:11,600 --> 02:00:12,680
你就看视频比较好

3296
02:00:13,940 --> 02:00:15,080
就是这个也要看

3297
02:00:15,080 --> 02:00:16,040
就是你来我们一登

3298
02:00:16,040 --> 02:00:17,060
比如我们一蹬一蹬

3299
02:00:17,060 --> 02:00:17,870
当然不出书

3300
02:00:18,500 --> 02:00:20,570
所以说你在市面上找不到前端这种东西

3301
02:00:22,480 --> 02:00:22,900
老板

3302
02:00:24,810 --> 02:00:25,830
继续继续

3303
02:00:27,500 --> 02:00:28,370
然后我在这块儿

3304
02:00:28,370 --> 02:00:30,410
你看他会把我们的依赖添加进来是吧

3305
02:00:30,410 --> 02:00:30,890
添加进来

3306
02:00:30,890 --> 02:00:31,670
然后构建起来

3307
02:00:31,670 --> 02:00:33,080
依赖是依赖就构建起来了

3308
02:00:33,320 --> 02:00:36,830
那么我这个依赖是不是就构建起来了构建起来是不是

3309
02:00:37,640 --> 02:00:39,260
然后我再修改数据的时候

3310
02:00:39,380 --> 02:00:40,340
它就执行什么

3311
02:00:40,520 --> 02:00:42,050
执行trigger trigger是吧

3312
02:00:42,290 --> 02:00:45,590
修改数据的时候触发set TE set出发什么trigger是吧

3313
02:00:46,040 --> 02:00:48,350
是不是执行trigger出了春哥最后怎么样

3314
02:00:48,380 --> 02:00:48,800
懂吗

3315
02:00:49,990 --> 02:00:50,470
这

3316
02:00:51,920 --> 02:00:53,120
子春哥是什么

3317
02:00:53,120 --> 02:00:54,560
你看这个村儿是吧

3318
02:00:54,620 --> 02:00:55,340
春哥怎么样

3319
02:00:55,400 --> 02:00:57,410
拿到我这个APP是吧

3320
02:00:57,530 --> 02:00:59,510
拿到我这个APP然后去做什么

3321
02:01:00,100 --> 02:01:01,150
没有收机啦

3322
02:01:01,180 --> 02:01:01,810
那就返回

3323
02:01:01,840 --> 02:01:02,650
如果有收集了

3324
02:01:02,650 --> 02:01:04,420
同学们收集了怎么办

3325
02:01:05,120 --> 02:01:05,750
有手机依赖

3326
02:01:05,840 --> 02:01:07,640
拿到我所谓的依赖是吧

3327
02:01:07,880 --> 02:01:08,960
这是我所有的依赖是吧

3328
02:01:08,960 --> 02:01:10,250
这是我当前所有的依赖

3329
02:01:10,250 --> 02:01:11,030
我的依赖在哪儿

3330
02:01:11,060 --> 02:01:12,950
这个这个是所谓的依赖是吧

3331
02:01:13,070 --> 02:01:14,780
我所谓的依赖拿来付一起

3332
02:01:15,050 --> 02:01:15,860
付一起了之后

3333
02:01:15,860 --> 02:01:20,270
他在这块儿他会构建一个新的ID基于我这种相当于拷贝一份

3334
02:01:20,450 --> 02:01:22,940
会把这个地map拷贝到我这个新的APP里边儿

3335
02:01:23,300 --> 02:01:24,110
这个map里边儿

3336
02:01:24,440 --> 02:01:26,780
它拷贝里边有有一些他的处理逻辑

3337
02:01:26,960 --> 02:01:27,920
拷贝完了之后

3338
02:01:28,220 --> 02:01:29,720
然后去便利什么便利

3339
02:01:29,720 --> 02:01:31,190
我这个effect同学们在下边

3340
02:01:33,460 --> 02:01:34,450
拷贝完了之后

3341
02:01:34,600 --> 02:01:36,100
必定我这个effect看到吗

3342
02:01:36,250 --> 02:01:37,060
便利我的effect

3343
02:01:37,060 --> 02:01:37,870
然后执行run

3344
02:01:38,500 --> 02:01:40,120
执行wrong wrong里边儿就是什么

3345
02:01:40,420 --> 02:01:43,390
就是执行拿到你这个X去执行看到吗

3346
02:01:43,960 --> 02:01:44,740
同学看见了吗

3347
02:01:44,950 --> 02:01:46,960
里面就有一份去执行

3348
02:01:47,520 --> 02:01:47,910
干嘛

3349
02:01:47,970 --> 02:01:50,340
所以说这会儿收集依赖和处罚依赖是不是就通了

3350
02:01:50,580 --> 02:01:52,950
我们这个东西整个流程是不是通了

3351
02:01:53,970 --> 02:01:55,560
数据层这块儿就通了

3352
02:01:56,190 --> 02:01:58,380
所以说这块儿还有两个东西

3353
02:01:58,440 --> 02:01:59,580
数据上还有一个

3354
02:01:59,580 --> 02:02:00,630
还有两个东西要烧给他

3355
02:02:00,630 --> 02:02:02,070
给他要要拖堂

3356
02:02:02,070 --> 02:02:04,380
差不多二三十分钟的糖

3357
02:02:04,830 --> 02:02:06,600
所以说这块儿有一个什么

3358
02:02:06,630 --> 02:02:08,700
你看拿到open这块有一个effect

3359
02:02:08,700 --> 02:02:09,420
有个open

3360
02:02:09,570 --> 02:02:11,460
如果他这块有option的时候

3361
02:02:11,460 --> 02:02:13,650
他会在option里面去执行一个什么意思呢

3362
02:02:13,650 --> 02:02:13,950
同学们

3363
02:02:14,550 --> 02:02:16,980
我们在这儿初始化这个东西的时候

3364
02:02:17,820 --> 02:02:19,050
初始化effect的时候

3365
02:02:19,410 --> 02:02:20,670
你可以在这儿去加open

3366
02:02:20,670 --> 02:02:21,060
知道吧

3367
02:02:21,540 --> 02:02:22,770
加op是什么

3368
02:02:22,890 --> 02:02:25,560
什么时候他去执行我的那个意思

3369
02:02:26,040 --> 02:02:26,880
执行我的什么

3370
02:02:26,910 --> 02:02:28,620
执行我的执行我的这个

3371
02:02:29,500 --> 02:02:31,480
Effect就是他触发依赖的时候

3372
02:02:31,480 --> 02:02:32,890
他怎么去执行我这个effect

3373
02:02:33,370 --> 02:02:36,520
你看我这儿是不是可以加一个skin or调度这个scheduler

3374
02:02:36,520 --> 02:02:38,080
调度我在里边儿什么时候去执行

3375
02:02:38,080 --> 02:02:39,490
他会拿把M传给你

3376
02:02:39,490 --> 02:02:40,990
然后我什么时候去执行我这个N

3377
02:02:41,660 --> 02:02:43,580
所以说你看他传过来分就什么

3378
02:02:43,760 --> 02:02:45,110
就是你这里边儿执行的什么

3379
02:02:45,950 --> 02:02:47,030
就是执行的effect

3380
02:02:47,150 --> 02:02:48,560
所以说它这里边其实是什么

3381
02:02:48,590 --> 02:02:50,750
就是你自己去加了一个调度的过程

3382
02:02:50,990 --> 02:02:51,500
现在明白

3383
02:02:51,500 --> 02:02:54,110
我刚刚给大家说那个schedule的那个东西了吗

3384
02:02:54,440 --> 02:02:55,190
调度的东西

3385
02:02:55,880 --> 02:02:57,830
那里边儿给他说的这个调度的东西

3386
02:02:57,920 --> 02:03:00,170
刚刚在在构建APP的时候

3387
02:03:01,260 --> 02:03:02,190
构建map的时候

3388
02:03:02,280 --> 02:03:03,480
大家说一个调度的东西

3389
02:03:06,540 --> 02:03:07,080
这块是吧

3390
02:03:07,140 --> 02:03:08,670
Scheduler调度的东西是吧

3391
02:03:09,280 --> 02:03:09,910
好继续

3392
02:03:10,450 --> 02:03:13,810
所以说这个东西全是这两个双向数据是不是就出来了

3393
02:03:13,810 --> 02:03:15,850
双数据整个流程是不是出来了

3394
02:03:16,150 --> 02:03:17,380
那块儿有个东西要给大家

3395
02:03:17,380 --> 02:03:18,010
就是瑞府

3396
02:03:18,560 --> 02:03:19,310
瑞福这个数据

3397
02:03:19,920 --> 02:03:21,060
瑞福这个数据呢

3398
02:03:21,540 --> 02:03:22,710
一个瑞福这个数据结构

3399
02:03:23,070 --> 02:03:23,670
你看

3400
02:03:23,730 --> 02:03:25,770
瑞福瑞福这种数据结构

3401
02:03:25,830 --> 02:03:26,700
瑞福这个数据结构

3402
02:03:26,790 --> 02:03:28,320
瑞福的数据结构什么意思

3403
02:03:29,140 --> 02:03:32,830
就是说我们这个re active active这组数据结构是不是只能处理

3404
02:03:32,860 --> 02:03:33,640
只能鉴定什么

3405
02:03:33,820 --> 02:03:35,440
只能处理响应式数据

3406
02:03:35,440 --> 02:03:37,210
只能处理什么对象这种数据是吧

3407
02:03:37,480 --> 02:03:38,920
那么瑞弗他可以处理什么数据

3408
02:03:38,950 --> 02:03:41,410
同学们你看瑞福它可以属于什么数据

3409
02:03:41,530 --> 02:03:43,270
处理原始数据看到吗

3410
02:03:43,330 --> 02:03:44,830
瑞甫他可以处理原始数据

3411
02:03:45,360 --> 02:03:45,750
是吧

3412
02:03:45,900 --> 02:03:47,730
他原始数据来监听到吗

3413
02:03:47,760 --> 02:03:49,020
把原始数据来监听

3414
02:03:49,020 --> 02:03:50,220
那么瑞弗他怎么实现的

3415
02:03:50,400 --> 02:03:50,790
瑞甫

3416
02:03:50,790 --> 02:03:51,510
实现很简单

3417
02:03:53,030 --> 02:03:53,510
瑞夫斯

3418
02:03:53,510 --> 02:03:54,200
就很简单

3419
02:03:55,420 --> 02:03:56,230
咱们看

3420
02:03:56,500 --> 02:03:57,190
这是riff

3421
02:03:57,190 --> 02:03:57,970
这是rough的实现

3422
02:03:58,240 --> 02:03:58,570
瑞弗

3423
02:03:58,570 --> 02:03:59,590
他也有给他是吧

3424
02:03:59,620 --> 02:04:00,430
也有给他theatre

3425
02:04:01,000 --> 02:04:01,390
你出发了

3426
02:04:01,390 --> 02:04:02,200
给他的时候

3427
02:04:03,130 --> 02:04:03,520
Truck

3428
02:04:03,580 --> 02:04:05,620
看到妈的时候是不是就出了truck

3429
02:04:06,420 --> 02:04:07,500
夸是不是就收集了

3430
02:04:07,890 --> 02:04:09,690
出生的时候是不是春哥是吧

3431
02:04:09,720 --> 02:04:10,650
也是这个东西

3432
02:04:10,740 --> 02:04:12,210
他是不是就走到我们那边去了

3433
02:04:12,900 --> 02:04:14,100
无非它这就是什么

3434
02:04:14,610 --> 02:04:15,600
我们的基础数据

3435
02:04:15,600 --> 02:04:16,290
他返回的

3436
02:04:16,560 --> 02:04:17,970
你把基础数据传进来之后

3437
02:04:17,970 --> 02:04:19,410
他返回的就不是一个什么

3438
02:04:19,620 --> 02:04:22,530
不是一个基础数据返回一个返回一个对象

3439
02:04:22,620 --> 02:04:23,580
这个对象一个什么

3440
02:04:23,670 --> 02:04:25,890
一个点微流这个属性明白了吗

3441
02:04:26,960 --> 02:04:27,440
明白了吗

3442
02:04:27,440 --> 02:04:29,120
这个对象有一点温柔这个属性呢

3443
02:04:30,510 --> 02:04:31,650
这是基础数据

3444
02:04:31,650 --> 02:04:33,510
所以说你们平时用瑞福就这个过程

3445
02:04:34,220 --> 02:04:34,610
好吧

3446
02:04:35,580 --> 02:04:36,690
所以这是数据层

3447
02:04:36,810 --> 02:04:38,340
数据层数据层

3448
02:04:38,520 --> 02:04:40,740
然后再给大家说编译编译这一层

3449
02:04:41,130 --> 02:04:41,970
再说边一层

3450
02:04:45,040 --> 02:04:46,210
大家说边一层

3451
02:04:47,060 --> 02:04:48,860
就是边一层边一层

3452
02:04:48,860 --> 02:04:49,340
说了之后

3453
02:04:49,340 --> 02:04:50,900
然后喝康比特

3454
02:04:51,760 --> 02:04:52,330
Computer

3455
02:04:53,380 --> 02:04:54,490
Commit啥意思

3456
02:04:56,310 --> 02:04:57,420
你说的康米是啥意思

3457
02:04:57,420 --> 02:04:58,170
我不知道你说的

3458
02:04:58,170 --> 02:04:59,130
com是什么意思

3459
02:05:03,600 --> 02:05:04,530
Computer的吗

3460
02:05:07,040 --> 02:05:09,410
Computer computer又不一样

3461
02:05:09,410 --> 02:05:10,940
它computer也没什么区别

3462
02:05:10,940 --> 02:05:11,510
Computer

3463
02:05:12,660 --> 02:05:14,430
Computer就是你一个

3464
02:05:16,310 --> 02:05:17,060
和什么区别

3465
02:05:17,060 --> 02:05:19,070
你说它的使用期使用区别

3466
02:05:19,070 --> 02:05:19,940
我不跟你说

3467
02:05:20,660 --> 02:05:21,800
使用区别我跟你说

3468
02:05:23,320 --> 02:05:24,100
它的实现

3469
02:05:30,750 --> 02:05:32,340
实现computer实实现吗

3470
02:05:32,340 --> 02:05:34,200
你说computer实现不就实现吗

3471
02:05:34,200 --> 02:05:35,460
他就包了一个一费

3472
02:05:36,350 --> 02:05:37,370
咪咪啊

3473
02:05:38,270 --> 02:05:39,350
一米的这个东西

3474
02:05:39,410 --> 02:05:40,550
这个一米特

3475
02:05:41,890 --> 02:05:44,380
这个东西我觉得都没有必要跟你讲

3476
02:05:44,470 --> 02:05:46,210
他就是一个什么event bus

3477
02:05:48,080 --> 02:05:49,190
你知道什么叫even的吧

3478
02:05:49,190 --> 02:05:49,520
是吗

3479
02:05:49,730 --> 02:05:50,930
不知道你去搜一下

3480
02:05:51,320 --> 02:05:52,760
就是一个发布订阅的过程

3481
02:05:52,940 --> 02:05:53,330
知道吧

3482
02:05:53,940 --> 02:05:56,250
这个东西我就没没没必要花时间跟你讲

3483
02:05:58,280 --> 02:05:58,520
对

3484
02:05:58,520 --> 02:05:58,970
四件吧

3485
02:05:58,970 --> 02:06:01,070
四对同学说的很对

3486
02:06:02,140 --> 02:06:03,250
这个就是一个这个东西

3487
02:06:05,310 --> 02:06:08,610
数据传递这个东西就是一个消息订阅这个东西

3488
02:06:08,610 --> 02:06:11,730
就是就是这个L这个东西就是这个样子知道吧

3489
02:06:12,780 --> 02:06:14,790
Computer的实现就是这个东西

3490
02:06:14,790 --> 02:06:15,630
这个API的实现

3491
02:06:15,630 --> 02:06:17,760
Computer这个这个东西API的实现

3492
02:06:17,970 --> 02:06:21,180
他的实现也是基于effect和skinner

3493
02:06:21,480 --> 02:06:22,620
还有tIgEr tIgEr

3494
02:06:22,680 --> 02:06:23,520
所以说没什么好讲的

3495
02:06:23,520 --> 02:06:24,270
这个这个知道吧

3496
02:06:24,270 --> 02:06:25,140
我这加了备注

3497
02:06:25,140 --> 02:06:25,980
你们想想去看

3498
02:06:25,980 --> 02:06:26,490
你看一下

3499
02:06:27,180 --> 02:06:28,770
然后这个原理我们给大家讲了

3500
02:06:28,770 --> 02:06:30,510
这个原理我们也给大家讲这个原理讲

3501
02:06:30,510 --> 02:06:31,200
所以他很简单

3502
02:06:31,320 --> 02:06:31,860
很简单

3503
02:06:32,380 --> 02:06:34,930
我给大家讲那个变异这块的东西了

3504
02:06:35,050 --> 02:06:35,740
大家讲变异了

3505
02:06:38,630 --> 02:06:39,170
编译模板

3506
02:06:39,530 --> 02:06:41,450
模板编译的优化这块儿还没给他讲

3507
02:06:41,450 --> 02:06:42,980
模板编译的优化完成这块儿

3508
02:06:45,280 --> 02:06:45,820
嗯

3509
02:06:49,000 --> 02:06:49,750
模板编译

3510
02:06:52,000 --> 02:06:53,830
我们给大家讲了是不是讲了什么

3511
02:06:54,010 --> 02:06:56,440
讲了我们编译的模板是不是东dif是吧

3512
02:06:56,470 --> 02:06:57,460
他要去什么做一个

3513
02:06:57,460 --> 02:07:00,610
什么做一个做一个什么做一个

3514
02:07:01,790 --> 02:07:02,720
做一个优化是吧

3515
02:07:03,320 --> 02:07:04,280
就是我们之前的

3516
02:07:04,310 --> 02:07:05,630
我们之前的动物结构是什么样子

3517
02:07:05,630 --> 02:07:07,250
我们之前地洞结构成这个样子

3518
02:07:07,250 --> 02:07:08,300
是不是同学们

3519
02:07:08,590 --> 02:07:11,890
比如说给大家讲编译画模板变异这块的优化

3520
02:07:15,760 --> 02:07:16,240
哪去了

3521
02:07:17,380 --> 02:07:17,770
我的

3522
02:07:17,770 --> 02:07:18,970
我的我的笔记呢

3523
02:07:20,200 --> 02:07:20,920
把笔记了

3524
02:07:27,770 --> 02:07:29,450
这是不是我们的那个

3525
02:07:31,280 --> 02:07:33,740
动态数据在之前

3526
02:07:33,800 --> 02:07:35,900
我们需要我们在修改这个东西

3527
02:07:36,050 --> 02:07:37,760
在之前当我这个数据变的时候

3528
02:07:37,760 --> 02:07:38,420
我需要什么

3529
02:07:38,480 --> 02:07:39,230
先遍历它

3530
02:07:39,230 --> 02:07:39,770
先访问他

3531
02:07:39,770 --> 02:07:40,235
在访问他

3532
02:07:40,235 --> 02:07:40,685
在访问他

3533
02:07:40,685 --> 02:07:41,090
在访问他

3534
02:07:41,090 --> 02:07:41,360
是吧

3535
02:07:41,480 --> 02:07:42,860
然后再修改这个冻结的是不是

3536
02:07:43,250 --> 02:07:43,610
是不是

3537
02:07:43,940 --> 02:07:44,450
为什么

3538
02:07:44,480 --> 02:07:48,320
因为之前他够这个东西它构建出来的威露的是什么结构

3539
02:07:48,770 --> 02:07:50,720
这个东西之前构建出来的微辣的是什么结构

3540
02:07:51,620 --> 02:07:54,020
他够之前构建出来的VIVO的这种结构

3541
02:07:54,050 --> 02:07:54,410
知道吗

3542
02:07:54,740 --> 02:07:56,810
他之前构建出来的VIVO是这种结构

3543
02:08:00,460 --> 02:08:03,040
是不是他之前构建出来的微弱是不是这种结构

3544
02:08:05,950 --> 02:08:07,810
是不是这种结构的V是吧

3545
02:08:08,170 --> 02:08:09,340
我这个是吧

3546
02:08:09,490 --> 02:08:10,360
这是我的微是吧

3547
02:08:10,360 --> 02:08:10,780
DV

3548
02:08:10,900 --> 02:08:12,580
然后什么station是吧

3549
02:08:13,030 --> 02:08:13,330
是吧

3550
02:08:13,390 --> 02:08:16,150
Skating skating还有第二个是吧

3551
02:08:16,240 --> 02:08:17,320
Children有个C是吧

3552
02:08:17,440 --> 02:08:18,610
Stay下边有个调整

3553
02:08:18,640 --> 02:08:20,110
调整有什么标签是吧

3554
02:08:20,110 --> 02:08:21,400
我这边儿是吧

3555
02:08:21,920 --> 02:08:23,120
这边有什么

3556
02:08:23,660 --> 02:08:24,140
一个什么

3557
02:08:24,170 --> 02:08:25,100
一个text是吧

3558
02:08:25,370 --> 02:08:27,470
一个text text是吧

3559
02:08:28,200 --> 02:08:29,130
是不是这种事

3560
02:08:29,160 --> 02:08:29,610
Text

3561
02:08:30,240 --> 02:08:30,750
明白吗

3562
02:08:31,950 --> 02:08:32,490
明白吗

3563
02:08:32,790 --> 02:08:33,900
之前是这个样子

3564
02:08:34,080 --> 02:08:35,160
之前是这个样子的

3565
02:08:35,520 --> 02:08:36,900
之前的微弱的是不是这个样子

3566
02:08:37,460 --> 02:08:38,330
那我之前有访问

3567
02:08:38,330 --> 02:08:40,160
我就应该先顶着它

3568
02:08:40,190 --> 02:08:41,240
然后再敲它

3569
02:08:41,270 --> 02:08:42,200
然后再点它

3570
02:08:42,230 --> 02:08:42,890
然后再敲它

3571
02:08:42,890 --> 02:08:43,970
然后再点他再去

3572
02:08:44,540 --> 02:08:45,320
获取它是吧

3573
02:08:45,500 --> 02:08:47,660
再去便利这个值是吧

3574
02:08:47,720 --> 02:08:49,160
再去修改这个东西的只是

3575
02:08:50,160 --> 02:08:51,330
是不是算结构

3576
02:08:51,330 --> 02:08:52,830
我的数就应该这么对比算

3577
02:08:53,010 --> 02:08:53,730
现在需要吗

3578
02:08:53,880 --> 02:08:54,570
现在不需要了

3579
02:08:54,630 --> 02:08:55,350
现在我把它

3580
02:08:55,560 --> 02:08:56,700
我现在在编译的时候

3581
02:08:56,700 --> 02:08:57,870
我一我在编译的时候

3582
02:08:57,870 --> 02:09:00,030
我就已经知道这个节点

3583
02:09:00,030 --> 02:09:01,410
我会给这个节点加一个什么

3584
02:09:01,440 --> 02:09:02,100
加个tag

3585
02:09:02,160 --> 02:09:02,850
就这个tag

3586
02:09:03,440 --> 02:09:03,680
价格

3587
02:09:03,680 --> 02:09:05,300
这个叫做佩奇

3588
02:09:06,010 --> 02:09:07,060
Page flag flag

3589
02:09:07,360 --> 02:09:08,380
我可以说加个tag

3590
02:09:08,440 --> 02:09:09,370
这个tag表示什么

3591
02:09:09,370 --> 02:09:10,000
动态节点

3592
02:09:10,390 --> 02:09:11,710
只要加了动态节点之后

3593
02:09:11,710 --> 02:09:13,870
我就会在这一层加个什么

3594
02:09:14,660 --> 02:09:17,240
加一个to的这个这个动态的

3595
02:09:17,880 --> 02:09:19,020
就会加一个动态气了

3596
02:09:20,120 --> 02:09:20,900
同学明白吗

3597
02:09:20,960 --> 02:09:23,030
我就为了这一层去加个动态剪切了

3598
02:09:23,540 --> 02:09:27,860
那我以后再修改这当这个整个组件在发生变化的时候

3599
02:09:27,860 --> 02:09:29,480
我还需要一层递归

3600
02:09:29,480 --> 02:09:31,340
一层递归一层递归的再进来干嘛

3601
02:09:31,370 --> 02:09:32,000
我就不需要了

3602
02:09:32,060 --> 02:09:34,220
我直接拿到这个动态的跳的

3603
02:09:34,720 --> 02:09:36,730
全部去遍历遍历一遍不就行了嘛

3604
02:09:36,730 --> 02:09:37,120
是吧

3605
02:09:37,270 --> 02:09:39,790
直接拿到这个跳的动态的这个跳的

3606
02:09:40,450 --> 02:09:43,420
它里边就有所有的这个下面的动态结构了

3607
02:09:43,450 --> 02:09:43,750
是吧

3608
02:09:43,810 --> 02:09:45,010
动态结构了是吧

3609
02:09:45,340 --> 02:09:46,390
他们明白这个过程了吗

3610
02:09:47,490 --> 02:09:48,180
这是怎么实现的

3611
02:09:48,180 --> 02:09:48,930
你先不要着急

3612
02:09:49,260 --> 02:09:50,160
明白这个过程吗

3613
02:09:51,300 --> 02:09:51,720
是不是

3614
02:09:52,230 --> 02:09:54,390
那所以这个过程我还需要种地吗

3615
02:09:54,510 --> 02:09:55,260
是不需要

3616
02:09:55,980 --> 02:09:57,000
是不是对

3617
02:09:57,000 --> 02:09:57,750
这就是编译优化

3618
02:09:57,750 --> 02:09:59,430
因为变异的时候他加了flag

3619
02:09:59,730 --> 02:10:00,540
你在构建的时候

3620
02:10:00,540 --> 02:10:01,830
我就可以通过flag

3621
02:10:01,980 --> 02:10:04,380
然后把它提升到我的顶层这个东西来

3622
02:10:05,010 --> 02:10:05,550
我还需要

3623
02:10:05,550 --> 02:10:06,750
当地驸马还需要

3624
02:10:06,750 --> 02:10:07,710
为什么还需要

3625
02:10:08,040 --> 02:10:08,760
给大家举个例子

3626
02:10:10,390 --> 02:10:11,320
大家举个例子

3627
02:10:12,950 --> 02:10:13,880
为什么还需要动的

3628
02:10:15,750 --> 02:10:16,620
就是原因

3629
02:10:16,950 --> 02:10:18,360
有一些不稳定的情况

3630
02:10:24,810 --> 02:10:25,440
这种情况

3631
02:10:26,940 --> 02:10:29,010
同学们看这种情况

3632
02:10:30,660 --> 02:10:32,580
这种情况我第一次渲染

3633
02:10:32,580 --> 02:10:34,680
比如说我的范围促的氛围促

3634
02:10:34,950 --> 02:10:36,270
我第一次渲染的时候

3635
02:10:40,270 --> 02:10:43,960
如果嵌套的嵌套的那个是不是还是一层一层给你讲

3636
02:10:44,200 --> 02:10:45,520
我这儿就没有嵌套了

3637
02:10:45,520 --> 02:10:46,570
我这哪还嵌套

3638
02:10:46,750 --> 02:10:48,190
我不管哪一块儿的东西

3639
02:10:48,190 --> 02:10:50,620
我都会收集到这我所有这个节点

3640
02:10:50,620 --> 02:10:52,360
所有的嵌套索索有的递归

3641
02:10:52,360 --> 02:10:54,010
所有的东西全部会涉及到这一层

3642
02:10:54,010 --> 02:10:55,720
它是一一维的一个数组

3643
02:10:56,170 --> 02:10:57,430
一维的数组知不知道

3644
02:10:57,920 --> 02:10:58,580
意味着数字

3645
02:10:59,030 --> 02:11:00,410
他直接遍历所有的东西

3646
02:11:00,440 --> 02:11:01,070
直接修改了

3647
02:11:03,750 --> 02:11:05,130
对动态拉平了明白吧

3648
02:11:05,940 --> 02:11:06,720
所以这块儿你看

3649
02:11:06,780 --> 02:11:07,620
如果这儿没错

3650
02:11:07,620 --> 02:11:08,340
同学们我问你

3651
02:11:09,030 --> 02:11:10,320
我在为促的时候

3652
02:11:12,060 --> 02:11:13,740
我这个是不是显示a是吧

3653
02:11:13,800 --> 02:11:14,190
显示了a

3654
02:11:14,970 --> 02:11:16,200
那现在我变成fourth

3655
02:11:17,150 --> 02:11:17,960
我这个是不是

3656
02:11:19,730 --> 02:11:20,570
我这儿没错的时候

3657
02:11:20,570 --> 02:11:23,075
是不是同学们我收集的动态指令是不是

3658
02:11:23,075 --> 02:11:25,460
我是不是收收集的是这个东西是吧

3659
02:11:26,260 --> 02:11:28,900
我是不是收集的这个东西

3660
02:11:28,900 --> 02:11:30,040
我收集的是这个东西

3661
02:11:30,070 --> 02:11:30,850
我收集这个东西

3662
02:11:31,420 --> 02:11:32,500
我这为促的时候

3663
02:11:33,240 --> 02:11:34,470
我如果只收集动态指令

3664
02:11:34,470 --> 02:11:35,940
我是不是收集的这个东西是吧

3665
02:11:36,180 --> 02:11:38,070
我收集的数据结构是不是这个东西这个样子的

3666
02:11:38,700 --> 02:11:39,150
来看

3667
02:11:52,190 --> 02:11:55,460
我收集的动态结构是这个样子的是这个样子

3668
02:11:56,110 --> 02:11:56,590
是啊

3669
02:11:58,370 --> 02:11:59,630
动态数据是这样子

3670
02:12:00,840 --> 02:12:01,920
是不是这个样子

3671
02:12:02,610 --> 02:12:04,740
我的跳的我收集的这个动态数据是吧

3672
02:12:04,920 --> 02:12:06,480
设置在这上面了是吧

3673
02:12:07,130 --> 02:12:08,180
不管这两个是哪个

3674
02:12:08,210 --> 02:12:09,440
他都是这个样子是吧

3675
02:12:09,680 --> 02:12:10,820
如果按照我们那个逻辑

3676
02:12:10,850 --> 02:12:11,660
是不是就这个样子

3677
02:12:11,990 --> 02:12:13,070
只收集这个动态数据

3678
02:12:13,220 --> 02:12:14,960
现在有问题同学们什么问题

3679
02:12:16,000 --> 02:12:17,050
我如果收集这个

3680
02:12:17,050 --> 02:12:17,680
我只修改

3681
02:12:17,680 --> 02:12:19,720
只修改这个剧里边的具体内容

3682
02:12:20,360 --> 02:12:24,860
那我现在他的V杠F便从处变成了force它的节点

3683
02:12:24,860 --> 02:12:27,350
他的节点是不是应该从section变成DV

3684
02:12:27,590 --> 02:12:28,010
是啊

3685
02:12:28,880 --> 02:12:31,160
我这个比如说是个半圆

3686
02:12:31,160 --> 02:12:32,960
这个是比如说是个直角

3687
02:12:33,080 --> 02:12:34,100
这个是个圆弧

3688
02:12:34,700 --> 02:12:35,870
他这样是不是就不一样

3689
02:12:35,870 --> 02:12:37,460
他展示形态就不一样是不是

3690
02:12:37,970 --> 02:12:39,440
但是我现在只修改的内容

3691
02:12:39,440 --> 02:12:40,280
它收集收集了

3692
02:12:40,280 --> 02:12:43,100
是不是具体的内容就会有问题是

3693
02:12:43,460 --> 02:12:45,260
同学们就有问题

3694
02:12:46,540 --> 02:12:48,700
所以说这种情况就会舅舅怎么办

3695
02:12:49,240 --> 02:12:50,170
这种情况就不行

3696
02:12:50,170 --> 02:12:50,650
知道吧

3697
02:12:51,610 --> 02:12:52,150
知道吗

3698
02:12:52,240 --> 02:12:53,110
这种情况就不行

3699
02:12:53,110 --> 02:12:54,460
这种情况是不是不稳定

3700
02:12:55,140 --> 02:12:56,130
这种情况是不是不稳定

3701
02:12:56,130 --> 02:12:57,300
威刚衣服他就不稳定

3702
02:12:57,300 --> 02:12:57,750
知道吗

3703
02:12:59,200 --> 02:12:59,740
知道吧

3704
02:12:59,920 --> 02:13:02,350
这种情况他就要降到什么多么地府层面

3705
02:13:02,710 --> 02:13:03,670
到地方层面

3706
02:13:04,180 --> 02:13:05,560
然后降到目前的层面

3707
02:13:05,770 --> 02:13:07,300
把这个维度提升到哪个维度

3708
02:13:07,420 --> 02:13:09,790
把这个把这个静态标签提升到哪块儿

3709
02:13:09,790 --> 02:13:11,320
提升到这块儿了是吧

3710
02:13:11,530 --> 02:13:14,590
把这个漂圈的动态修改就提升到这块儿了

3711
02:13:14,800 --> 02:13:16,630
相当于他现在就维护了这个东西

3712
02:13:17,200 --> 02:13:18,010
维护了这个东西

3713
02:13:19,390 --> 02:13:20,140
维护的是什么东西

3714
02:13:20,140 --> 02:13:20,980
维护的是这个东西

3715
02:13:23,950 --> 02:13:26,410
维护的是station

3716
02:13:26,410 --> 02:13:32,320
这是skate ski下边station下边的child是这个东西

3717
02:13:32,320 --> 02:13:33,760
是是是这个东西是吧

3718
02:13:34,060 --> 02:13:35,770
然后station下边的切的是这个东西

3719
02:13:35,770 --> 02:13:37,780
然后station下边儿还有一个东西

3720
02:13:37,780 --> 02:13:39,190
还有什么动态数据是吧

3721
02:13:41,620 --> 02:13:42,910
为啥不把指令放进去

3722
02:13:45,990 --> 02:13:47,910
所以说他这一步也会去放指令

3723
02:13:48,240 --> 02:13:49,590
他这一步会去放指令

3724
02:13:49,590 --> 02:13:49,950
知道吧

3725
02:13:50,220 --> 02:13:51,480
在这一步会去放指令

3726
02:13:52,260 --> 02:13:54,360
他在这一步也会去放动态指令知道吧

3727
02:13:56,560 --> 02:13:57,820
所以这是我要跟你说的吗

3728
02:13:58,520 --> 02:13:59,870
他这一步也会去放动态指令

3729
02:13:59,870 --> 02:14:01,070
具体的我就不给你写了

3730
02:14:01,790 --> 02:14:04,220
然后你还会发现还有其他的问题

3731
02:14:05,040 --> 02:14:06,360
这是威刚一幅的情况是吧

3732
02:14:06,690 --> 02:14:07,920
它会降级

3733
02:14:08,070 --> 02:14:12,120
就是把这个指令收集动态东西收集

3734
02:14:12,120 --> 02:14:14,040
他不会收集到顶层了是吧

3735
02:14:14,100 --> 02:14:15,750
各位收集到离他最近的事吗

3736
02:14:17,040 --> 02:14:18,660
动态指令上层知道吧

3737
02:14:19,290 --> 02:14:21,090
离他最近的父元素的动态指令上升

3738
02:14:21,300 --> 02:14:21,780
明白吗

3739
02:14:23,140 --> 02:14:24,670
好这一层这一层搞明白了

3740
02:14:24,970 --> 02:14:26,260
那块儿有一个问题什么呢

3741
02:14:26,260 --> 02:14:27,010
刚发的情况

3742
02:14:27,640 --> 02:14:28,360
恢复的情况

3743
02:14:29,820 --> 02:14:31,050
为康复的情况什么意思

3744
02:14:31,140 --> 02:14:32,580
比如说我现在是这个样子

3745
02:14:33,500 --> 02:14:34,430
模板这样子同学

3746
02:14:35,900 --> 02:14:36,800
模板是这个样子

3747
02:14:37,660 --> 02:14:41,080
那我现在渲染出来的内容是什么

3748
02:14:41,140 --> 02:14:42,550
我现在渲染出来的内容是什么

3749
02:14:43,200 --> 02:14:43,590
对吧

3750
02:14:43,800 --> 02:14:44,880
我现在渲染出来的内容

3751
02:14:44,880 --> 02:14:47,010
比如说我现在list的数据是什么

3752
02:14:48,020 --> 02:14:49,550
现在渲染出来的black是什么

3753
02:14:49,580 --> 02:14:50,420
就这个样子是吧

3754
02:14:51,500 --> 02:14:53,600
是不是现在这个样子是吧

3755
02:15:02,230 --> 02:15:02,590
是吧

3756
02:15:02,680 --> 02:15:04,600
现在如果按照正常的逻辑

3757
02:15:04,690 --> 02:15:09,460
是不是就这个样子收集这三艘艘收集这这是他的直接点是吧

3758
02:15:09,820 --> 02:15:10,840
这两个直接点是吧

3759
02:15:11,020 --> 02:15:12,040
两个皮圈是吧

3760
02:15:12,070 --> 02:15:12,610
动态节点

3761
02:15:13,740 --> 02:15:15,690
那现在我在第一次渲染的时候

3762
02:15:15,690 --> 02:15:16,620
你见你

3763
02:15:16,620 --> 02:15:17,760
我在第一次渲染的时候

3764
02:15:17,760 --> 02:15:19,080
你动态收集的是这个标签是吧

3765
02:15:19,320 --> 02:15:21,240
现在就有问题了现在

3766
02:15:21,930 --> 02:15:23,970
我变化之后是这个样子了

3767
02:15:25,950 --> 02:15:27,630
我变化之后是这个样子的

3768
02:15:35,490 --> 02:15:35,940
特卖

3769
02:15:37,930 --> 02:15:39,220
我变化之后是这个样子了

3770
02:15:39,400 --> 02:15:41,440
同学们你说我变化之后这个样子

3771
02:15:41,500 --> 02:15:42,520
我这个东西

3772
02:15:42,820 --> 02:15:43,360
我这个东西

3773
02:15:43,390 --> 02:15:46,540
那我这个我这个东西是不是还被保留着

3774
02:15:46,600 --> 02:15:47,440
那我怎么办

3775
02:15:47,770 --> 02:15:48,850
这种情况怎么办

3776
02:15:50,710 --> 02:15:51,730
就是我之前

3777
02:15:51,850 --> 02:15:53,740
我之前是这样是这个样子的是吧

3778
02:15:53,740 --> 02:15:54,400
之前是这样子

3779
02:15:54,430 --> 02:15:55,600
我现在变成这个样子

3780
02:15:56,230 --> 02:15:58,600
那我直接定向修改的就是这三个了是不是

3781
02:15:59,680 --> 02:16:00,550
那我这个怎么办

3782
02:16:01,640 --> 02:16:02,780
就是他会丢失

3783
02:16:02,780 --> 02:16:04,730
是不是有些东西就不会被改造

3784
02:16:04,730 --> 02:16:07,670
是不是威刚威刚付是不是就不会被改到

3785
02:16:08,990 --> 02:16:10,460
因为我这个长度是不行的

3786
02:16:10,460 --> 02:16:10,790
知道吧

3787
02:16:10,940 --> 02:16:12,560
所以说在V杠four的时候

3788
02:16:13,070 --> 02:16:14,030
在V杠four的时候

3789
02:16:14,030 --> 02:16:15,410
这种是动态结构的时候

3790
02:16:15,590 --> 02:16:16,310
We go的时候

3791
02:16:16,340 --> 02:16:16,910
他会做什么

3792
02:16:17,390 --> 02:16:19,580
会降级V杠的时候

3793
02:16:19,580 --> 02:16:20,870
只是V杠的

3794
02:16:21,170 --> 02:16:22,250
只是V杠的时候

3795
02:16:23,480 --> 02:16:24,440
会降低到什么

3796
02:16:25,700 --> 02:16:26,660
降级到地府

3797
02:16:27,530 --> 02:16:28,940
降级到原本的到地府

3798
02:16:30,080 --> 02:16:30,530
明白吗

3799
02:16:30,560 --> 02:16:31,100
明白了吗

3800
02:16:31,370 --> 02:16:33,050
将降级到原本的盗墓地府

3801
02:16:34,390 --> 02:16:34,900
清楚了吗

3802
02:16:34,900 --> 02:16:35,410
同学们

3803
02:16:37,320 --> 02:16:38,220
这不明白吗

3804
02:16:41,650 --> 02:16:42,160
是吧

3805
02:16:43,780 --> 02:16:46,060
但是它的内部是不是还可以靶向更新

3806
02:16:46,240 --> 02:16:49,450
你每一个比如说你每一个这个这个节点呢

3807
02:16:50,020 --> 02:16:52,810
具体下边的动态节电是不是还可以动态更新

3808
02:16:52,990 --> 02:16:54,550
它下边如果还有其他动态节点

3809
02:16:54,550 --> 02:16:56,380
是不是就可以提升到这个维度是吧

3810
02:16:57,260 --> 02:16:57,680
对

3811
02:16:59,150 --> 02:17:01,250
所以说这里边这就是一个点

3812
02:17:01,640 --> 02:17:02,780
第二个点就是静态提升

3813
02:17:02,780 --> 02:17:03,380
静态提升呢

3814
02:17:03,380 --> 02:17:03,980
不用说了吧

3815
02:17:04,600 --> 02:17:07,270
静态静态静态节点的提升都不用说了吧

3816
02:17:07,540 --> 02:17:10,180
就是提升进来

3817
02:17:13,670 --> 02:17:19,370
来给大家看一下这个来给来给大家看一下这个这个创建出来的这个虚拟动是个什么样子

3818
02:17:21,410 --> 02:17:22,130
怎么创建的

3819
02:17:22,130 --> 02:17:23,420
怎么构建这个维度的

3820
02:17:26,870 --> 02:17:29,060
然后是是是是是

3821
02:17:36,260 --> 02:17:37,610
然后在这里边儿

3822
02:17:38,960 --> 02:17:39,770
的这个东西是吧

3823
02:17:40,100 --> 02:17:40,700
这个这个东西

3824
02:17:41,870 --> 02:17:43,190
这个你可以去编译模板

3825
02:17:43,190 --> 02:17:44,330
你看这是我们的模板是吧

3826
02:17:44,800 --> 02:17:45,610
这是我们的模板

3827
02:17:46,850 --> 02:17:47,570
这是我们的模板

3828
02:17:48,380 --> 02:17:49,640
在模板编译的时候

3829
02:17:49,670 --> 02:17:49,880
他

3830
02:17:49,910 --> 02:17:53,330
你看现在模板汇编一什么会创建一个block

3831
02:17:53,480 --> 02:17:55,100
当你创建一个block的时候

3832
02:17:55,490 --> 02:17:56,510
这个black这个东西

3833
02:17:56,510 --> 02:18:00,950
同学们open block he cried block open black就是开始创建一个create

3834
02:18:00,950 --> 02:18:02,120
就是创建一个block

3835
02:18:02,660 --> 02:18:03,860
这个block就是一个什么

3836
02:18:03,920 --> 02:18:09,620
就是一个我们所谓的提升到把这个东西提升到这个维度的一个一个层面

3837
02:18:09,920 --> 02:18:11,750
就是当他创建一个block的时候

3838
02:18:12,170 --> 02:18:15,980
它就它这个它这上面就一定有一个什么动态属性

3839
02:18:16,930 --> 02:18:17,440
是不是啊

3840
02:18:17,590 --> 02:18:20,530
就相当于是在哪个维度哪个层级

3841
02:18:21,060 --> 02:18:22,410
比如说我们在这个维度是吧

3842
02:18:22,410 --> 02:18:23,280
刚刚说这个维度

3843
02:18:23,370 --> 02:18:24,690
我们说一开始

3844
02:18:25,170 --> 02:18:28,260
一开始这种情况是在这个情这这上面去创建布拉克

3845
02:18:28,290 --> 02:18:30,570
这个black直接维护了这个东西是吧

3846
02:18:30,960 --> 02:18:31,950
那在这种情况

3847
02:18:32,310 --> 02:18:33,720
我们就应该哪个情况

3848
02:18:33,750 --> 02:18:34,290
哪个上边儿

3849
02:18:34,380 --> 02:18:35,400
上边儿要去创建black

3850
02:18:35,400 --> 02:18:38,160
这个black维护了威刚if he Wei Gang l是吧

3851
02:18:38,280 --> 02:18:40,020
然后又需要在这个上面去创建black

3852
02:18:40,020 --> 02:18:42,690
这个black创建维护了什么这个东西是吧

3853
02:18:42,810 --> 02:18:44,910
这个black又维护了什么这个东西是吧

3854
02:18:44,910 --> 02:18:45,780
所以说这上面

3855
02:18:45,990 --> 02:18:47,310
所以说这个black就是什么

3856
02:18:47,340 --> 02:18:48,390
就是去创建什么

3857
02:18:48,450 --> 02:18:49,830
就是一个动态的这个过程

3858
02:18:50,270 --> 02:18:50,840
我们看一下

3859
02:18:50,990 --> 02:18:53,360
就是你看他这块儿外边儿会创建一个

3860
02:18:53,630 --> 02:18:55,880
把这两个东西添加到black上面

3861
02:18:56,150 --> 02:18:58,520
然后又在这个指令上面又会创建一个block

3862
02:18:58,730 --> 02:19:01,820
把这个动态修改节点的东西维护到这上边儿

3863
02:19:02,030 --> 02:19:02,900
就回到这上边儿

3864
02:19:03,140 --> 02:19:03,710
明白了吗

3865
02:19:03,770 --> 02:19:05,360
所以调用block的时候

3866
02:19:05,630 --> 02:19:07,910
你编译出来要用black的东西的时候

3867
02:19:08,210 --> 02:19:09,230
就会去创建这个东西

3868
02:19:09,290 --> 02:19:10,670
一会儿给大家看这个black

3869
02:19:11,980 --> 02:19:13,390
然后他正常创建节点

3870
02:19:13,450 --> 02:19:15,880
正常创建虚拟动物节点就是这个微弱的看到吗

3871
02:19:16,180 --> 02:19:19,540
正常创建虚拟动物借鉴就是威露的看到吗同学们

3872
02:19:20,140 --> 02:19:22,420
证券我们就在这儿微露的

3873
02:19:23,090 --> 02:19:23,690
明白吧

3874
02:19:25,690 --> 02:19:26,260
明白吗

3875
02:19:29,260 --> 02:19:29,830
明白吧

3876
02:19:30,420 --> 02:19:32,280
然后在这一步继续

3877
02:19:32,310 --> 02:19:34,620
我们再来做一个什么其他的一些点

3878
02:19:35,070 --> 02:19:35,970
其他什么点呢

3879
02:19:36,720 --> 02:19:38,370
比如说静态节点优化

3880
02:19:38,400 --> 02:19:41,910
静态节点优化我们之前我们现在我们现在

3881
02:19:42,710 --> 02:19:45,020
我们现在这儿搞一个进来纪念

3882
02:19:45,680 --> 02:19:46,730
搞一个这个样子

3883
02:19:46,730 --> 02:19:48,920
进镜头节点这个样子是吧

3884
02:19:49,820 --> 02:19:52,160
你在这个节点在这块创建是不是

3885
02:19:52,520 --> 02:19:54,020
那我现在搞一个优化

3886
02:19:55,400 --> 02:19:57,860
你看我把这个静态节点提升到这儿了是吧

3887
02:19:58,250 --> 02:20:00,620
我把所有的静态节点同学们提升到最上层了

3888
02:20:00,620 --> 02:20:00,980
可以吗

3889
02:20:01,040 --> 02:20:02,810
为什么我要把静态节点提升到上层

3890
02:20:03,700 --> 02:20:05,680
我是不是我每一次创建render

3891
02:20:05,680 --> 02:20:06,430
构建render的时候

3892
02:20:06,430 --> 02:20:08,290
我的精彩经典是不是都是一模一样的

3893
02:20:09,850 --> 02:20:11,800
我们上街我们之前V2是不是讲了

3894
02:20:12,160 --> 02:20:13,870
我们每一次的静态界面是不是一模一样的

3895
02:20:13,960 --> 02:20:15,670
那我是不是只需要创建一次

3896
02:20:15,850 --> 02:20:18,580
我下一次直接拿到这个东西内存里边来用就行了

3897
02:20:18,610 --> 02:20:18,910
是吧

3898
02:20:19,180 --> 02:20:20,380
这个静态节点来用就行了

3899
02:20:20,380 --> 02:20:22,930
所以我有一个创建静态节点提升的过程

3900
02:20:22,930 --> 02:20:24,370
这是第一层优化是吧

3901
02:20:24,730 --> 02:20:26,260
这个也是它编译时做的优化

3902
02:20:26,410 --> 02:20:28,630
也是根据ST做的优化是吧

3903
02:20:29,020 --> 02:20:30,610
然后这个完了之后

3904
02:20:32,010 --> 02:20:33,630
这个完了之后又是什么

3905
02:20:33,780 --> 02:20:35,400
又是制服又是什么

3906
02:20:35,430 --> 02:20:37,170
就是这个静态字符策划

3907
02:20:37,590 --> 02:20:38,280
静态字符策划

3908
02:20:38,280 --> 02:20:39,360
什么叫静态字符策划

3909
02:20:39,750 --> 02:20:40,650
给大家举个例子

3910
02:20:41,640 --> 02:20:42,750
我们创建节点

3911
02:20:43,020 --> 02:20:44,040
它会创建多个是吧

3912
02:20:45,480 --> 02:20:47,310
你看他这种情况是不是创建很

3913
02:20:47,520 --> 02:20:48,450
你看我们刚刚

3914
02:20:51,860 --> 02:20:54,770
你看刚刚这个他是不是创建了这么多精彩经典是吧

3915
02:20:55,380 --> 02:20:56,730
创建了五个计算节点是吧

3916
02:20:57,030 --> 02:20:59,790
但是这五个阶段节点他每一次都不会变是吧

3917
02:21:00,360 --> 02:21:01,080
那么不会变

3918
02:21:01,080 --> 02:21:03,540
它其实是不是就是一个静态字符串是吧

3919
02:21:03,540 --> 02:21:05,490
同学们是不是就是一个静态字符串

3920
02:21:06,970 --> 02:21:10,540
这个这不是静态的字符串是不

3921
02:21:10,690 --> 02:21:13,630
我不需要我都他都不需要去占内存是不是

3922
02:21:14,370 --> 02:21:14,940
那怎么办

3923
02:21:15,540 --> 02:21:16,290
我把字符串

3924
02:21:18,490 --> 02:21:18,910
对

3925
02:21:18,940 --> 02:21:20,680
把它直接构建一个字符串的精彩激烈

3926
02:21:22,060 --> 02:21:22,330
是吧

3927
02:21:22,720 --> 02:21:23,230
那这个样子

3928
02:21:23,230 --> 02:21:25,540
你在知道你在使用这个静态节点的时候

3929
02:21:25,630 --> 02:21:27,550
直接把它append到页面里面就行了

3930
02:21:28,200 --> 02:21:28,830
明白了吗

3931
02:21:29,420 --> 02:21:30,800
所以说这也是它的一个优化

3932
02:21:30,950 --> 02:21:31,460
知道吧

3933
02:21:31,580 --> 02:21:32,870
静态字符策划

3934
02:21:33,490 --> 02:21:34,690
静态节点字符串的话

3935
02:21:35,020 --> 02:21:36,940
这也是需要做一些处理了

3936
02:21:37,150 --> 02:21:39,070
然后还有就是什么事件

3937
02:21:40,120 --> 02:21:41,500
四件的提升

3938
02:21:41,500 --> 02:21:43,630
四件的也叫实践提升吧

3939
02:21:44,140 --> 02:21:46,300
四件缓存举荐的例子

3940
02:21:46,990 --> 02:21:50,320
比如说我们现在一个这个东西有一个call back啊

3941
02:21:53,060 --> 02:21:54,140
你看有个call back是吧

3942
02:21:54,440 --> 02:21:57,980
Call back我这是不是快客这儿创建一个庆姐是吧

3943
02:21:58,040 --> 02:21:59,150
庆姐有个bug是吧

3944
02:21:59,510 --> 02:22:01,190
我是不是每一次创建call back的时候

3945
02:22:01,190 --> 02:22:04,640
我是不是都要重新溜一下我这个这个事件是不是

3946
02:22:05,320 --> 02:22:08,230
那是不是每一次也有也有内存的浪费开辟是吧

3947
02:22:08,470 --> 02:22:11,200
新内存的开辟是不是其实可以做什么

3948
02:22:11,380 --> 02:22:12,220
做一个优化是吧

3949
02:22:12,520 --> 02:22:15,670
把这个事件把这个事件的创建

3950
02:22:16,000 --> 02:22:16,660
他说没有

3951
02:22:17,520 --> 02:22:20,160
你看是不是是不是可以把事件的创建

3952
02:22:20,160 --> 02:22:21,690
你看也缓存一下

3953
02:22:21,750 --> 02:22:22,080
是啊

3954
02:22:22,080 --> 02:22:24,000
我只要之前缓存过一次了

3955
02:22:24,270 --> 02:22:25,080
我直接拿来用

3956
02:22:26,280 --> 02:22:26,850
看到吗

3957
02:22:30,530 --> 02:22:31,190
对呀

3958
02:22:33,400 --> 02:22:34,090
明白吧

3959
02:22:34,390 --> 02:22:37,690
所以说这就是编译里边儿的不同的层面上的优化

3960
02:22:37,930 --> 02:22:39,730
编译层面不同的层面上的优化

3961
02:22:39,730 --> 02:22:40,450
都是在这个层面

3962
02:22:40,450 --> 02:22:40,840
知道吧

3963
02:22:41,110 --> 02:22:44,380
所以说再给大家聊一个就是编译层面的优化

3964
02:22:44,380 --> 02:22:45,730
这个create a rock

3965
02:22:46,310 --> 02:22:48,110
他创建的这个过程聊完了

3966
02:22:48,110 --> 02:22:50,390
我们编译和运行时再把它串一下

3967
02:22:50,390 --> 02:22:51,290
基本上就没问题了

3968
02:22:51,500 --> 02:22:51,830
是吧

3969
02:22:54,990 --> 02:22:55,950
然后

3970
02:22:56,960 --> 02:22:57,800
然后然后

3971
02:22:59,150 --> 02:23:00,200
然后就是什么

3972
02:23:00,230 --> 02:23:01,160
就是我们的那个什么

3973
02:23:02,450 --> 02:23:05,900
create blackblack在VIVO的VIVO的里边创建VIVO的那边

3974
02:23:06,590 --> 02:23:07,490
创建微弱的

3975
02:23:08,390 --> 02:23:14,330
创建微露的在我们的这个是在我们这个不同的不同的东西

3976
02:23:14,720 --> 02:23:16,520
我给大家这块有一个备注

3977
02:23:17,310 --> 02:23:18,900
问的东西这块儿有一个

3978
02:23:20,180 --> 02:23:21,140
这块有一个备注

3979
02:23:21,170 --> 02:23:24,680
我给大家把这个东西就是不同的文件夹有什么有什么

3980
02:23:24,680 --> 02:23:25,850
有什么有什么东西

3981
02:23:25,910 --> 02:23:27,770
把这个备注给大家写到这儿

3982
02:23:27,770 --> 02:23:29,780
不同的文件夹有什么不同的功能

3983
02:23:32,150 --> 02:23:33,530
不同文件夹不同的功能

3984
02:23:34,960 --> 02:23:38,050
这个是re active这个东西是响应式数据功能

3985
02:23:38,560 --> 02:23:39,400
对于不同的平台

3986
02:23:39,400 --> 02:23:41,140
我们我们是不是说有响应

3987
02:23:41,140 --> 02:23:42,460
是有运行时

3988
02:23:42,520 --> 02:23:43,240
编译时

3989
02:23:43,510 --> 02:23:44,710
这上面儿这是编译时

3990
02:23:44,980 --> 02:23:49,060
这是针对于什么编编译什么单个文件夹SFC是吧

3991
02:23:49,180 --> 02:23:51,820
这是编译针对于道路节点的冻结点

3992
02:23:52,770 --> 02:23:56,010
冻结点的就是在外部层面上的变异

3993
02:23:56,430 --> 02:23:57,030
这是什么

3994
02:23:57,060 --> 02:23:59,940
真正脱离外部层面上的一些一些变异

3995
02:24:00,270 --> 02:24:01,530
然后这是运行时

3996
02:24:01,680 --> 02:24:02,580
这是脱离

3997
02:24:03,700 --> 02:24:07,300
动冻结冻冻环境的运行时就是

3998
02:24:08,110 --> 02:24:09,250
动物环境的运行时

3999
02:24:09,280 --> 02:24:10,840
就是比如说他要操作一些东西

4000
02:24:10,840 --> 02:24:12,190
或者什么一些东西是吧

4001
02:24:12,250 --> 02:24:12,790
打配器

4002
02:24:12,790 --> 02:24:15,160
修改真正修改配置这其他的东西是什么

4003
02:24:15,280 --> 02:24:16,150
SP rain的这些东西

4004
02:24:16,150 --> 02:24:17,650
我在这儿目录结构都写着的

4005
02:24:18,480 --> 02:24:19,440
里边有一些备注

4006
02:24:19,650 --> 02:24:20,820
当然核心的东西

4007
02:24:21,030 --> 02:24:21,870
Compare这些东西

4008
02:24:21,870 --> 02:24:24,300
这里边的东西ST语法编译这些东西

4009
02:24:24,300 --> 02:24:25,560
它就是一个一门

4010
02:24:25,560 --> 02:24:26,850
其他有备注

4011
02:24:26,940 --> 02:24:29,070
同学们下来可以看一下里边的备注

4012
02:24:29,520 --> 02:24:31,200
这个编译的东西我们就给大家讲了

4013
02:24:31,200 --> 02:24:33,300
因为编译它其实是一门编译原理

4014
02:24:33,300 --> 02:24:33,990
一个实现

4015
02:24:35,000 --> 02:24:36,020
编译原理的实现

4016
02:24:37,570 --> 02:24:38,380
这是什么东西

4017
02:24:43,590 --> 02:24:44,790
你要去点右上角

4018
02:24:45,300 --> 02:24:46,650
右上角不是有个东西吗

4019
02:24:46,650 --> 02:24:49,860
右上角不是有一个有一个那个那个东西吗

4020
02:24:54,880 --> 02:24:55,150
老师

4021
02:24:55,150 --> 02:24:56,410
为啥一个同学都没编译

4022
02:24:56,410 --> 02:24:57,040
什么意思

4023
02:25:03,160 --> 02:25:03,880
你说你那个吗

4024
02:25:03,880 --> 02:25:04,840
你要去点右上角

4025
02:25:04,840 --> 02:25:07,180
右上角有个开启静态编译的那个东西

4026
02:25:07,210 --> 02:25:07,690
它默认

4027
02:25:11,010 --> 02:25:12,480
他要去点右上角

4028
02:25:13,270 --> 02:25:14,110
要去点右上角

4029
02:25:14,110 --> 02:25:16,180
右上角不是有一个有一个优化吗

4030
02:25:16,180 --> 02:25:18,100
这个是在优化的情况下做了处理

4031
02:25:18,100 --> 02:25:18,580
知道吧

4032
02:25:19,460 --> 02:25:20,240
我的天

4033
02:25:29,690 --> 02:25:29,960
哎呀

4034
02:25:29,960 --> 02:25:30,620
我这都关了

4035
02:25:31,220 --> 02:25:32,420
现在自己玩儿吧

4036
02:25:34,120 --> 02:25:35,320
他要去点右上角

4037
02:25:35,590 --> 02:25:38,530
在这里边在这里边这里边有这个这个文件夹

4038
02:25:38,800 --> 02:25:39,520
这个文件夹

4039
02:25:40,260 --> 02:25:42,840
这个文件夹就是这个这个template文件夹

4040
02:25:42,840 --> 02:25:45,330
你们直接去把这个取个http server

4041
02:25:45,360 --> 02:25:46,320
把这个东西运行起来

4042
02:25:47,170 --> 02:25:47,980
他有个右上角

4043
02:25:48,010 --> 02:25:49,300
右上角上面有几个功能

4044
02:25:49,330 --> 02:25:50,200
你直接去玩就行

4045
02:25:50,260 --> 02:25:50,740
知道吧

4046
02:25:51,040 --> 02:25:51,670
这个很简单的

4047
02:25:52,880 --> 02:25:54,500
然后这边就是不同的文件

4048
02:25:54,530 --> 02:25:55,910
不同文件不同的目录

4049
02:25:56,150 --> 02:25:57,290
所以编译这一块儿的东西

4050
02:25:57,290 --> 02:25:59,300
基本上就是你们要去学一下编译原理

4051
02:25:59,300 --> 02:26:02,390
我推荐大家编译原理你们学会了为所欲为

4052
02:26:02,420 --> 02:26:03,140
真的为所欲为

4053
02:26:03,470 --> 02:26:04,910
很多东西都是在编译原理之上

4054
02:26:04,910 --> 02:26:06,140
为派克也是编译原理

4055
02:26:09,740 --> 02:26:10,250
知道吧

4056
02:26:11,480 --> 02:26:12,980
外派课也是在编译原理

4057
02:26:12,980 --> 02:26:14,660
那些东西都是边缘懂

4058
02:26:15,080 --> 02:26:16,250
所以他都是一层一层

4059
02:26:17,090 --> 02:26:18,140
能写对

4060
02:26:18,900 --> 02:26:20,310
右上角好几个优化呢

4061
02:26:20,490 --> 02:26:21,390
一个一个去玩吧

4062
02:26:21,990 --> 02:26:24,990
所以说我们在这一步来给大家看一下这个

4063
02:26:25,020 --> 02:26:27,330
创建微露的威露的里边的维度

4064
02:26:27,920 --> 02:26:29,030
不同的文件夹

4065
02:26:30,520 --> 02:26:31,420
不同的文件夹

4066
02:26:31,420 --> 02:26:33,340
这个是响应式数据是吧

4067
02:26:33,400 --> 02:26:34,300
这是响应数据

4068
02:26:34,420 --> 02:26:37,030
我们最最核心要关注的就是这个文件夹

4069
02:26:37,330 --> 02:26:38,050
这个文件夹

4070
02:26:38,290 --> 02:26:38,950
这个文件夹

4071
02:26:39,010 --> 02:26:41,380
其实这三个文件运行时的几个文件夹

4072
02:26:41,560 --> 02:26:42,490
就编译的文件夹

4073
02:26:42,490 --> 02:26:46,750
说实话真的能把编译时这里边的源码全部看明白的人很少

4074
02:26:47,240 --> 02:26:50,510
我也只是看了个大概把编译运行时里边的大体逻辑

4075
02:26:50,930 --> 02:26:53,030
因为这一套东西是一个什么

4076
02:26:53,700 --> 02:26:55,860
是一个一门学问

4077
02:26:55,950 --> 02:26:56,940
没有必要去

4078
02:26:57,120 --> 02:26:57,690
我会的

4079
02:26:57,690 --> 02:26:58,410
我本来就会

4080
02:26:58,410 --> 02:27:00,810
我还为什么我需要去看它每一个API呢

4081
02:27:00,810 --> 02:27:02,160
你看它每一个这些东西

4082
02:27:02,160 --> 02:27:03,060
每一个节点的定义

4083
02:27:03,060 --> 02:27:04,650
我还需要去看它每一个节点的定义吗

4084
02:27:04,710 --> 02:27:05,430
不需要去看的

4085
02:27:05,700 --> 02:27:06,120
知道吧

4086
02:27:06,420 --> 02:27:07,260
不同的节点定义

4087
02:27:07,260 --> 02:27:08,010
你看他在里边儿

4088
02:27:08,730 --> 02:27:09,210
知道吧

4089
02:27:09,690 --> 02:27:12,030
他这你要去学的是他这套思路

4090
02:27:12,680 --> 02:27:15,380
它的源码的思路不需要去看它每一个节点的定义

4091
02:27:15,380 --> 02:27:16,550
知道ST的定义

4092
02:27:16,550 --> 02:27:17,930
这些东西不需要去看

4093
02:27:18,410 --> 02:27:19,580
学习有方法

4094
02:27:21,070 --> 02:27:23,320
然后我们来看一下威刚black

4095
02:27:23,350 --> 02:27:24,010
微辣的

4096
02:27:24,040 --> 02:27:24,460
微露的

4097
02:27:24,940 --> 02:27:26,680
在这里边儿的威露的

4098
02:27:28,090 --> 02:27:28,960
创建温柔的

4099
02:27:29,830 --> 02:27:32,080
VIVO VIVO的里面有个什么it black啊

4100
02:27:32,080 --> 02:27:32,950
这是create VIVO的

4101
02:27:33,160 --> 02:27:34,270
VIVO的就很简单

4102
02:27:34,570 --> 02:27:35,380
他就是一个什么

4103
02:27:35,960 --> 02:27:36,980
VIVO的就是一个什么

4104
02:27:37,370 --> 02:27:40,370
就是构建需就是构建一个动物对象

4105
02:27:40,400 --> 02:27:41,690
就是构建一个对象

4106
02:27:41,930 --> 02:27:44,870
你看这里边儿就是判断是否是冻结点

4107
02:27:44,990 --> 02:27:45,680
如果是多么节点

4108
02:27:45,680 --> 02:27:46,730
你看这里边儿

4109
02:27:47,430 --> 02:27:49,020
他会判断是否是动态标记

4110
02:27:49,020 --> 02:27:50,160
如果是动态标记

4111
02:27:50,190 --> 02:27:51,540
如果是动态标记

4112
02:27:52,420 --> 02:27:55,090
如你如果你这个上边儿有动态标记

4113
02:27:55,090 --> 02:27:56,530
就是你这个上面有配码

4114
02:27:56,530 --> 02:27:57,160
动态配气吗

4115
02:27:57,160 --> 02:27:58,480
是不是有动态配气吗

4116
02:27:58,480 --> 02:27:58,780
是吧

4117
02:27:59,110 --> 02:27:59,920
如果有这些东西

4118
02:27:59,950 --> 02:28:00,610
他就会你看

4119
02:28:01,290 --> 02:28:02,970
然后拿过去做一些处理是吧

4120
02:28:03,000 --> 02:28:04,500
拿去做做一些处理

4121
02:28:04,500 --> 02:28:06,120
然后这上边儿构建威乐的

4122
02:28:06,120 --> 02:28:07,950
威乐这是我微弱的上面所有的属性

4123
02:28:07,950 --> 02:28:10,530
就是你一个你一个虚拟我们上面所有的属性嘛

4124
02:28:11,010 --> 02:28:13,050
你看动态戒严是否是动态戒严

4125
02:28:13,050 --> 02:28:14,460
是否是动态属性

4126
02:28:14,460 --> 02:28:15,540
是否有动态翘的

4127
02:28:15,540 --> 02:28:17,190
是不是这些东西就是来就来了

4128
02:28:17,220 --> 02:28:17,880
他维护起来了

4129
02:28:18,150 --> 02:28:19,410
就属性就构建起来了

4130
02:28:19,440 --> 02:28:21,240
然后他在哪块儿做处理

4131
02:28:21,420 --> 02:28:22,230
Create black是吧

4132
02:28:22,230 --> 02:28:25,140
我们要给大家聊的是credit block创建微露的

4133
02:28:25,140 --> 02:28:25,740
其实还好

4134
02:28:25,830 --> 02:28:27,450
这个东西就是构建一个对象出来

4135
02:28:27,990 --> 02:28:29,100
为的就是一个对象

4136
02:28:29,970 --> 02:28:30,690
Quick book啊

4137
02:28:30,690 --> 02:28:31,080
这是

4138
02:28:32,250 --> 02:28:33,630
Open black open布拉克

4139
02:28:33,630 --> 02:28:34,500
他维护了一个对战

4140
02:28:34,680 --> 02:28:35,730
维护了什么对战呢

4141
02:28:35,790 --> 02:28:37,290
维护了一个多层

4142
02:28:37,350 --> 02:28:38,580
我们刚刚是不是给大家说了

4143
02:28:38,610 --> 02:28:40,920
他是多级嵌套的一个不拉客是吧

4144
02:28:41,100 --> 02:28:41,880
他一级布拉克

4145
02:28:41,880 --> 02:28:43,230
一级black嵌套一个布拉克

4146
02:28:43,320 --> 02:28:45,150
所以他这块儿我会为维护一个站

4147
02:28:45,450 --> 02:28:47,100
当你当前这个black创建完了之后

4148
02:28:47,100 --> 02:28:48,960
他会回到你下一个站里边儿去

4149
02:28:49,110 --> 02:28:49,620
知道吧

4150
02:28:50,100 --> 02:28:51,870
所以这一块儿我们就回到这里边儿

4151
02:28:51,870 --> 02:28:52,470
布拉克里边儿

4152
02:28:52,860 --> 02:28:54,570
它会创建一个什么微露的

4153
02:28:54,750 --> 02:28:55,890
创建微软的时候

4154
02:28:55,950 --> 02:28:57,120
它会创建一个同学

4155
02:28:57,950 --> 02:28:59,510
你看创建微博的时候会创建

4156
02:28:59,510 --> 02:29:02,690
为什么创建我们一个他会把这个家一个醋

4157
02:29:02,720 --> 02:29:03,620
这个醋是什么

4158
02:29:04,220 --> 02:29:06,800
代表是什么动态block了吗

4159
02:29:06,830 --> 02:29:08,810
他代表什么动态不了看到吗

4160
02:29:09,400 --> 02:29:09,970
动态布拉克

4161
02:29:10,060 --> 02:29:11,020
如果是动态black

4162
02:29:11,020 --> 02:29:12,040
你这个微了这里边儿

4163
02:29:12,370 --> 02:29:13,540
你这个VIVO的这里边

4164
02:29:13,930 --> 02:29:14,710
VIVO的这里边儿

4165
02:29:15,360 --> 02:29:15,750
是吧

4166
02:29:15,780 --> 02:29:17,130
就是一个什么black low的

4167
02:29:17,310 --> 02:29:18,360
如果是一个black leather

4168
02:29:18,360 --> 02:29:19,560
它这边就会做一些处理

4169
02:29:19,560 --> 02:29:19,890
知道吧

4170
02:29:20,190 --> 02:29:20,730
在这里边儿

4171
02:29:20,910 --> 02:29:22,140
这块儿就加一个a

4172
02:29:22,230 --> 02:29:29,370
这里边儿这下边儿你看如果是black处理在这里边就会添加到把把你当前的微弱的添加到你当前这个站里边儿是吧

4173
02:29:29,670 --> 02:29:31,620
添加到你当前这个blog的在里边

4174
02:29:31,650 --> 02:29:33,690
然后去处理其他直接点是吧

4175
02:29:33,810 --> 02:29:34,860
处理其他直接点

4176
02:29:35,680 --> 02:29:38,260
然后继续回到这上边

4177
02:29:38,530 --> 02:29:40,330
然后这个处理完了之后

4178
02:29:40,450 --> 02:29:43,480
然后判断你当前这个微弱了

4179
02:29:43,480 --> 02:29:47,260
是否这个这个节点是否已经有子节点了

4180
02:29:47,760 --> 02:29:50,220
就是我这个节点是否已经有动态直接点了

4181
02:29:50,340 --> 02:29:51,930
有动态直接点的情况之下

4182
02:29:52,140 --> 02:29:53,370
就怎么创建

4183
02:29:53,460 --> 02:29:56,100
就拿到我们当前这个credit block是吧

4184
02:29:56,160 --> 02:30:00,390
因为你其他的所有动态节点已经全部往black里边添加了

4185
02:30:00,390 --> 02:30:01,590
是不是我们说了

4186
02:30:01,650 --> 02:30:02,790
如果是一个动态节点

4187
02:30:02,790 --> 02:30:04,200
是不是就会往里面添加

4188
02:30:04,260 --> 02:30:04,650
是不是

4189
02:30:05,210 --> 02:30:06,710
是不是看着这个代码呢

4190
02:30:06,800 --> 02:30:07,970
如果是一个block节点

4191
02:30:08,270 --> 02:30:11,780
是不是就就会往black里当前这个black里面去添加是吧

4192
02:30:12,480 --> 02:30:15,360
是不是往这个当前这个博客里面去添加

4193
02:30:15,510 --> 02:30:16,440
添加完了之后

4194
02:30:16,920 --> 02:30:22,650
然后你看它就会把这个当前这个brock里边儿添加我当前这个VIVO的节点的动态属性上面是吧

4195
02:30:22,830 --> 02:30:23,550
你后续

4196
02:30:24,060 --> 02:30:27,060
所有往这里边添加的东西都会添加到这里边儿是吧

4197
02:30:27,120 --> 02:30:28,050
因为它是引用吗

4198
02:30:28,320 --> 02:30:28,920
明白了吗

4199
02:30:29,040 --> 02:30:30,360
这个block就构建出来了

4200
02:30:30,840 --> 02:30:32,100
就是一个出战的情况

4201
02:30:32,760 --> 02:30:33,450
当你整个吧

4202
02:30:33,450 --> 02:30:34,590
当你当前那个bug

4203
02:30:37,030 --> 02:30:37,540
对呀

4204
02:30:37,870 --> 02:30:39,970
冬天接进来的时候不就是credit but吗

4205
02:30:40,390 --> 02:30:42,280
你刚刚刚看那个代码

4206
02:30:42,280 --> 02:30:43,270
它编译出来的时候

4207
02:30:44,850 --> 02:30:46,380
不就是有一个扣儿吧

4208
02:30:46,380 --> 02:30:48,360
就不就是有一个为促嘛

4209
02:30:48,360 --> 02:30:48,720
是吧

4210
02:30:49,260 --> 02:30:50,490
那个标识不就为促嘛

4211
02:30:50,490 --> 02:30:50,850
是吧

4212
02:30:51,120 --> 02:30:51,990
就是动态纪念

4213
02:30:52,620 --> 02:30:54,990
Quick but的时候不就是往里面去添加吗

4214
02:30:55,110 --> 02:30:55,500
是吧

4215
02:30:55,590 --> 02:30:56,610
刚刚不看到了吗

4216
02:30:56,670 --> 02:30:58,200
看到编译出来的代码是吧

4217
02:30:58,290 --> 02:30:59,340
这块结合起来

4218
02:31:00,960 --> 02:31:03,360
现在你你们下来之后肯定要看代码

4219
02:31:03,360 --> 02:31:04,500
再结合这个东西来看

4220
02:31:04,770 --> 02:31:05,430
你现在这么看

4221
02:31:05,430 --> 02:31:07,080
肯定稍微有一点绕

4222
02:31:07,200 --> 02:31:08,880
但是你现在能明白这个大致的意思

4223
02:31:08,880 --> 02:31:10,140
下来之后自己看

4224
02:31:10,560 --> 02:31:12,330
肯定要自己下来再看一下这个东西

4225
02:31:12,420 --> 02:31:13,980
再结合这个代码再看一下

4226
02:31:14,220 --> 02:31:15,690
那你不然说实话

4227
02:31:15,690 --> 02:31:17,340
这个东西你就这就这样

4228
02:31:17,340 --> 02:31:18,660
你我我怎么讲呢

4229
02:31:18,660 --> 02:31:20,370
你就说V3你就学完了

4230
02:31:20,370 --> 02:31:21,090
那肯定不行的

4231
02:31:21,360 --> 02:31:21,630
对吧

4232
02:31:21,630 --> 02:31:23,280
很多同学我一直用都没用过

4233
02:31:23,310 --> 02:31:24,330
然后我给你讲了之后

4234
02:31:24,360 --> 02:31:26,520
你说V3你学完了

4235
02:31:26,790 --> 02:31:27,510
那肯定不行

4236
02:31:28,820 --> 02:31:29,270
是吧

4237
02:31:31,380 --> 02:31:32,130
懂了吧

4238
02:31:38,410 --> 02:31:39,130
V2版

4239
02:31:39,130 --> 02:31:39,670
没所谓啦

4240
02:31:39,970 --> 02:31:40,450
继续啊

4241
02:31:40,450 --> 02:31:42,580
所以说这是black知道black创建完了

4242
02:31:42,610 --> 02:31:44,230
他就其他就完了呢

4243
02:31:44,230 --> 02:31:44,920
我们继续

4244
02:31:45,310 --> 02:31:47,080
最后就是一个什么拉通的流程

4245
02:31:47,110 --> 02:31:47,740
拉通的流程

4246
02:31:49,320 --> 02:31:49,590
怎么啦

4247
02:31:49,590 --> 02:31:51,840
通就是你使用VIVO的时候

4248
02:31:52,140 --> 02:31:53,190
他怎么去拉通的

4249
02:31:53,400 --> 02:31:55,050
拉通我快速给大家过一下

4250
02:31:55,660 --> 02:31:56,440
快速过一下

4251
02:31:56,560 --> 02:31:57,610
里边儿有些东西

4252
02:31:57,760 --> 02:32:01,690
你们下来之后要自己去再看一下里边的核心的东西

4253
02:32:04,890 --> 02:32:05,670
快速给大家啦

4254
02:32:05,670 --> 02:32:07,410
通过一下里边的那个流程

4255
02:32:07,410 --> 02:32:07,980
主要流程

4256
02:32:08,250 --> 02:32:10,020
主要流程其实已经给大家讲了的

4257
02:32:10,230 --> 02:32:11,280
她跟威尔一模一样

4258
02:32:11,490 --> 02:32:12,360
我给大家再拉

4259
02:32:12,360 --> 02:32:12,990
再拉一下

4260
02:32:12,990 --> 02:32:16,320
是想要大家给大家说一下他这个玩意儿

4261
02:32:17,440 --> 02:32:19,420
然后我们回到这个里边来

4262
02:32:20,560 --> 02:32:21,940
还有还有还有十分钟

4263
02:32:24,190 --> 02:32:26,530
我们回到这个里边来

4264
02:32:26,530 --> 02:32:29,800
讲一下这个里边儿的在

4265
02:32:30,420 --> 02:32:32,130
在在在这个里边这里边

4266
02:32:34,340 --> 02:32:37,040
这里边儿有一个在index里面这儿

4267
02:32:37,880 --> 02:32:38,390
在里边

4268
02:32:41,760 --> 02:32:44,250
你看我们使我们使用的时候是怎么使用的

4269
02:32:44,610 --> 02:32:46,080
我们使用VI的时候

4270
02:32:46,680 --> 02:32:48,090
你使用AOE的时候是怎么使用的

4271
02:32:48,090 --> 02:32:48,750
同学们

4272
02:32:48,750 --> 02:32:51,060
我先给大家说一下使用APP的时候怎么使用的

4273
02:32:52,010 --> 02:32:53,570
你们使用A1的时候是怎么使用

4274
02:32:53,570 --> 02:32:55,970
使用A3的时候是怎么使用的

4275
02:32:56,480 --> 02:32:57,620
怎么使用的同学们

4276
02:32:59,710 --> 02:33:00,790
这块儿有例子

4277
02:33:01,540 --> 02:33:03,130
使用V3的时候怎么使用呢

4278
02:33:04,380 --> 02:33:06,600
傀儡APP是吧葵的APP

4279
02:33:06,600 --> 02:33:07,470
然后怎么样

4280
02:33:08,130 --> 02:33:10,380
就是就是把你的APP实力传进来是吧

4281
02:33:10,470 --> 02:33:12,870
然后调用这个APP的什么挂载是吧

4282
02:33:13,050 --> 02:33:14,580
Monkey的是吧挂载

4283
02:33:15,190 --> 02:33:17,770
所以这里边我们的使用也就这么使用的

4284
02:33:18,010 --> 02:33:23,140
然后我们回到回到这里边儿来聊一下他这个东西的一个

4285
02:33:23,790 --> 02:33:25,260
开始的一个过程

4286
02:33:25,680 --> 02:33:27,810
开始真正的一个过程串一下

4287
02:33:29,100 --> 02:33:29,850
创业的过程

4288
02:33:36,530 --> 02:33:37,100
Create APP

4289
02:33:37,100 --> 02:33:38,360
我的APP哪去了

4290
02:33:39,320 --> 02:33:41,420
我的create APP是在

4291
02:33:43,070 --> 02:33:43,640
傀儡PPT

4292
02:33:43,640 --> 02:33:44,840
这傀儡PP

4293
02:33:44,840 --> 02:33:46,910
同学们首先拿到你的APP

4294
02:33:46,910 --> 02:33:48,560
这是你所有的V代码是吧

4295
02:33:48,650 --> 02:33:50,090
你的所有的V代码是不是

4296
02:33:50,450 --> 02:33:51,860
然后拿到你的VE代码

4297
02:33:51,890 --> 02:33:55,160
然后拿过来之后这儿去它会调用一个APP这个方法

4298
02:33:55,660 --> 02:33:58,060
用APP方法它会创建一个APP实例

4299
02:33:58,420 --> 02:34:00,220
然后APP实力我快速给大家过一下

4300
02:34:00,220 --> 02:34:02,500
下来之后你们再跟着我的这个代码看看

4301
02:34:02,500 --> 02:34:03,640
这块儿全都有备注

4302
02:34:04,470 --> 02:34:06,480
然后APP实力创造APP实力之后

4303
02:34:06,480 --> 02:34:08,700
然后APP上面会有一个monkey的方法

4304
02:34:08,970 --> 02:34:11,370
在浏览器端它会重写这个monkey的方法

4305
02:34:11,580 --> 02:34:12,990
它会重写这个monkey的方法

4306
02:34:13,350 --> 02:34:14,520
Monkey的方法怎么重写呢

4307
02:34:14,580 --> 02:34:15,750
它会判断你这个东西

4308
02:34:16,240 --> 02:34:18,010
是否已经有temperature

4309
02:34:18,160 --> 02:34:19,810
如果有template没有render

4310
02:34:19,840 --> 02:34:20,590
如果没有render

4311
02:34:20,590 --> 02:34:21,310
他会去什么

4312
02:34:21,520 --> 02:34:22,480
拿到你这个temperature

4313
02:34:22,540 --> 02:34:23,380
然后去做什么

4314
02:34:23,500 --> 02:34:25,150
就是同学就是去变异

4315
02:34:25,270 --> 02:34:26,080
就是变异

4316
02:34:26,170 --> 02:34:26,590
知道吧

4317
02:34:26,800 --> 02:34:27,430
就变异

4318
02:34:27,430 --> 02:34:28,480
这块也要去变一

4319
02:34:28,510 --> 02:34:28,840
是吧

4320
02:34:29,200 --> 02:34:30,220
你如果没有这个template

4321
02:34:30,220 --> 02:34:31,030
他也会去变异

4322
02:34:31,090 --> 02:34:32,170
没有leader也会去变异

4323
02:34:32,200 --> 02:34:32,560
知道吧

4324
02:34:32,890 --> 02:34:34,390
所以这块儿monkey的

4325
02:34:34,630 --> 02:34:36,430
所以说什么时候执行这个monkey的

4326
02:34:36,520 --> 02:34:37,990
在你外边儿亏的APP

4327
02:34:37,990 --> 02:34:39,490
它返回这个APP实力是吧

4328
02:34:39,640 --> 02:34:41,350
然后你再调用AP的时候

4329
02:34:41,380 --> 02:34:42,490
它执行OT了

4330
02:34:42,730 --> 02:34:45,550
就是说我们再来看它返回这个APP实例

4331
02:34:46,400 --> 02:34:47,210
是反馈什么

4332
02:34:47,240 --> 02:34:49,280
然后他执行帮T的时候执行了什么

4333
02:34:49,700 --> 02:34:50,510
所以首先

4334
02:34:51,120 --> 02:34:51,660
首先啊

4335
02:34:51,660 --> 02:34:52,590
首先我们来

4336
02:34:53,200 --> 02:34:57,820
访问一下看一下它它返回这个APP实力返回APP实力进到这里边来

4337
02:34:58,000 --> 02:35:00,100
他会亏的APP

4338
02:35:00,220 --> 02:35:02,050
这里边它会掉一个这个东西是吧

4339
02:35:02,200 --> 02:35:04,090
这个东西会掉一个render

4340
02:35:04,330 --> 02:35:08,500
这个render他会根据不同的浏览器端去创建不同的方法

4341
02:35:08,960 --> 02:35:10,730
不同的端调用不同的方法

4342
02:35:10,730 --> 02:35:12,530
比如说有的端你看

4343
02:35:12,530 --> 02:35:14,180
比如说我们不同的端

4344
02:35:15,200 --> 02:35:16,760
你看这个不同的端

4345
02:35:16,760 --> 02:35:18,470
你看不同的端改变多么的方法

4346
02:35:18,470 --> 02:35:20,780
是不是就是改变浏览器端的方法

4347
02:35:20,780 --> 02:35:21,140
是吧

4348
02:35:21,230 --> 02:35:23,060
所以说它会有跨端的这个过程

4349
02:35:23,120 --> 02:35:28,640
就是在这个过程你可以去传你对对应端的read the render options知道吧

4350
02:35:28,670 --> 02:35:29,780
然后render

4351
02:35:29,900 --> 02:35:30,830
然后render完了之后

4352
02:35:30,830 --> 02:35:32,030
这边就会返回一个什么

4353
02:35:32,570 --> 02:35:33,950
Quick basket render

4354
02:35:34,070 --> 02:35:35,630
这里边有反映一个什么过程

4355
02:35:35,630 --> 02:35:37,580
同学们里边会返回一个我们的

4356
02:35:37,790 --> 02:35:39,320
这里边有一个

4357
02:35:39,980 --> 02:35:40,820
最核心的

4358
02:35:44,790 --> 02:35:46,440
这里边全所有源码全都有

4359
02:35:47,180 --> 02:35:49,430
全都给大家备注了的

4360
02:35:51,140 --> 02:35:51,560
嗯

4361
02:35:52,980 --> 02:35:53,340
嗯

4362
02:36:00,800 --> 02:36:02,570
这就是主要串起来的过程

4363
02:36:02,570 --> 02:36:03,500
这是多么的过程

4364
02:36:03,650 --> 02:36:05,450
这一块儿的过程是多么的过程

4365
02:36:05,450 --> 02:36:06,080
这个你不用管

4366
02:36:06,320 --> 02:36:07,400
稍微有点绕

4367
02:36:07,490 --> 02:36:09,350
多么的服你这块儿其实也不用去管

4368
02:36:09,830 --> 02:36:10,880
你不用也不用去学

4369
02:36:10,880 --> 02:36:12,410
你只要把算法学好就行

4370
02:36:12,560 --> 02:36:15,290
所以这块儿其实我只是只是说把这个东西发给你

4371
02:36:15,290 --> 02:36:16,490
给你给你搞出来知道吧

4372
02:36:18,160 --> 02:36:18,550
知道吧

4373
02:36:18,640 --> 02:36:20,530
所以在这一步它会返回什么

4374
02:36:20,560 --> 02:36:22,480
它会返回你看可以返回这个对象是吧

4375
02:36:22,570 --> 02:36:23,560
会返回这个对象

4376
02:36:23,620 --> 02:36:24,730
这个对象返回的是什么

4377
02:36:24,760 --> 02:36:26,020
这个APP看到吗

4378
02:36:26,170 --> 02:36:29,050
这个APP你在外面调是奎的PPT

4379
02:36:29,230 --> 02:36:34,270
你这个APP就会调用什么API里面会返回这个函数

4380
02:36:34,270 --> 02:36:35,320
这个函数会返回什么

4381
02:36:35,620 --> 02:36:36,700
一个APP实力

4382
02:36:36,700 --> 02:36:38,380
看见这个APP使命键

4383
02:36:38,410 --> 02:36:39,970
这是APP实力吗

4384
02:36:40,150 --> 02:36:42,460
这个APP里边儿你看这是各种ID

4385
02:36:42,700 --> 02:36:43,660
这是你的config UR

4386
02:36:44,130 --> 02:36:45,420
然后这是你的youth是吧

4387
02:36:45,420 --> 02:36:49,290
你的APP里面的use mix component是不是全在里边儿

4388
02:36:49,560 --> 02:36:50,790
还有什么APP的

4389
02:36:50,790 --> 02:36:52,530
什么monkey的挂在生命周期

4390
02:36:52,530 --> 02:36:53,730
Monitor挂在周期是不是

4391
02:36:54,540 --> 02:36:56,010
然后挂载生命周期有什么

4392
02:36:56,100 --> 02:36:58,650
有什么生命周期挂载的时候就会初始化有什么

4393
02:36:59,100 --> 02:37:00,150
如果没有挂载

4394
02:37:00,240 --> 02:37:03,120
就是第一次挂载会初始化一个什么

4395
02:37:03,570 --> 02:37:06,570
出会初始化一个整个大的微露的节点

4396
02:37:06,900 --> 02:37:07,290
是吧

4397
02:37:07,410 --> 02:37:08,460
把整个大的威力的节点

4398
02:37:08,460 --> 02:37:13,050
把当前这个APP的实例挂载到我的VIVO的实力整个微弱的节点上

4399
02:37:13,560 --> 02:37:14,010
知道吧

4400
02:37:14,100 --> 02:37:15,120
然后去掉用什么

4401
02:37:15,660 --> 02:37:16,680
去掉一个render

4402
02:37:16,800 --> 02:37:17,880
看到掉render

4403
02:37:17,910 --> 02:37:19,185
这个render是哪儿传进来的

4404
02:37:19,185 --> 02:37:20,040
是外边传进来的

4405
02:37:20,130 --> 02:37:21,180
这个render事儿传进来的

4406
02:37:21,180 --> 02:37:22,200
是不是这传进来的

4407
02:37:22,320 --> 02:37:23,520
所以说调人的时候

4408
02:37:23,520 --> 02:37:25,590
同学们调用的时候会发现你这个

4409
02:37:25,960 --> 02:37:27,550
实力当前

4410
02:37:27,550 --> 02:37:30,400
我这个V的AP实例给了他

4411
02:37:30,850 --> 02:37:32,650
然后掉扔掉扔掉了什么

4412
02:37:33,420 --> 02:37:36,090
掉在里边掉了什么

4413
02:37:36,120 --> 02:37:37,950
来看一下render是一个什么过程

4414
02:37:38,010 --> 02:37:39,840
咱们看一下如果调render

4415
02:37:40,050 --> 02:37:42,720
你这里边儿没有去做一个什么过程

4416
02:37:43,730 --> 02:37:45,920
因为我们这块儿是会走挂载的流程

4417
02:37:45,920 --> 02:37:46,880
会走EMS流程

4418
02:37:46,880 --> 02:37:48,290
我们在外边儿是走EMS流程

4419
02:37:48,320 --> 02:37:49,970
在走的流程是吧

4420
02:37:50,330 --> 02:37:53,780
Monday的流程如果是不是如果等于na

4421
02:37:54,170 --> 02:37:54,710
那就是嘛

4422
02:37:54,710 --> 02:37:55,970
说明是卸载的流程是吧

4423
02:37:56,030 --> 02:37:57,830
就是你现在新的微了等于浪了

4424
02:37:58,190 --> 02:37:58,790
如果不是

4425
02:37:58,790 --> 02:38:01,580
那什么就是搭配其就是不断把打配器的过程

4426
02:38:01,820 --> 02:38:03,110
那么不断打配齐

4427
02:38:03,170 --> 02:38:04,370
我们尽到不断地配齐

4428
02:38:04,610 --> 02:38:05,480
不断打佩奇呢

4429
02:38:05,510 --> 02:38:06,980
它又分为很多不同的组件儿

4430
02:38:06,980 --> 02:38:07,430
知道吧

4431
02:38:07,880 --> 02:38:09,740
佩奇又分为不同的组件配齐

4432
02:38:09,740 --> 02:38:11,660
又分为第一次修改

4433
02:38:11,720 --> 02:38:14,300
你看佩奇又分为处理文本节点是吧

4434
02:38:14,300 --> 02:38:14,780
对比嘛

4435
02:38:14,780 --> 02:38:15,680
就是冻的付了吗

4436
02:38:16,370 --> 02:38:18,230
其实也现在也还没到东地府

4437
02:38:18,230 --> 02:38:19,640
因为现在还没有到

4438
02:38:19,640 --> 02:38:23,330
只是对于一个正常维度的一个什么刚开始挂载的维度

4439
02:38:23,480 --> 02:38:24,920
你赶快处理处理几台几点

4440
02:38:24,920 --> 02:38:25,640
处理文本节点

4441
02:38:25,880 --> 02:38:26,570
处理这些东西

4442
02:38:26,930 --> 02:38:31,010
那他什么时候会到什么到了我们那里边儿门组件是吧

4443
02:38:31,040 --> 02:38:32,390
处理组件的时候是吧

4444
02:38:32,570 --> 02:38:33,650
处理组件的时候

4445
02:38:33,800 --> 02:38:35,060
所以说这块儿他会处理什么

4446
02:38:35,090 --> 02:38:35,720
处理组件

4447
02:38:36,020 --> 02:38:37,460
这就是处理组件的逻辑

4448
02:38:37,940 --> 02:38:39,560
我们会我们的东西是不是组建

4449
02:38:39,560 --> 02:38:40,730
VIVO的是不是一个组件

4450
02:38:40,910 --> 02:38:41,990
准备处理组件

4451
02:38:42,840 --> 02:38:43,620
会处理组件

4452
02:38:43,950 --> 02:38:47,400
抽取组件儿就到我们这里边了抽取组件这里边做了这些事情

4453
02:38:47,400 --> 02:38:48,390
这里面有些事情呢

4454
02:38:48,570 --> 02:38:50,010
这里边儿首先是

4455
02:38:50,640 --> 02:38:51,900
这里边儿有好几部

4456
02:38:51,900 --> 02:38:53,130
咱们下来之后你们自己看杯子

4457
02:38:53,130 --> 02:38:55,230
我这儿给大家看一下未处理组件

4458
02:38:55,410 --> 02:38:56,340
处理组件在里面

4459
02:38:56,490 --> 02:38:59,340
第一次处理组件的逻辑主要是

4460
02:38:59,340 --> 02:39:00,300
如果是第一次

4461
02:39:00,420 --> 02:39:01,200
更新就不用说了

4462
02:39:01,200 --> 02:39:02,160
更新就是动的

4463
02:39:03,070 --> 02:39:04,480
如果是第一次就是挂载是吧

4464
02:39:04,480 --> 02:39:05,080
也是挂载

4465
02:39:05,080 --> 02:39:05,710
挂载组件

4466
02:39:05,710 --> 02:39:06,190
挂载主角

4467
02:39:06,190 --> 02:39:07,780
怎么执行挂载组件儿走这一步

4468
02:39:07,930 --> 02:39:09,550
走这一步挂载组建这一层

4469
02:39:09,580 --> 02:39:15,760
首先它会把你这个组件根据你传进来的微弱的传来微弱的去挂在这个主角的实力

4470
02:39:15,760 --> 02:39:17,710
是不是就挂在你这个主角的实力

4471
02:39:17,710 --> 02:39:19,390
同学们生成组件实例是吧

4472
02:39:19,570 --> 02:39:20,860
生成组件实例完成之后

4473
02:39:20,860 --> 02:39:21,580
去做一个什么

4474
02:39:21,910 --> 02:39:22,540
去做什么

4475
02:39:22,570 --> 02:39:23,800
去设置你主机的实例

4476
02:39:23,800 --> 02:39:25,150
设置主角实力是什么意思

4477
02:39:25,180 --> 02:39:26,860
意思你这里面有各种setup

4478
02:39:26,860 --> 02:39:27,910
是不是是不是

4479
02:39:27,970 --> 02:39:28,960
你是不是有setup

4480
02:39:29,340 --> 02:39:30,120
是不是有setup

4481
02:39:30,150 --> 02:39:31,350
它会执行你的setup

4482
02:39:31,380 --> 02:39:32,640
拿到你的setup去执行

4483
02:39:32,640 --> 02:39:33,000
知道吧

4484
02:39:33,150 --> 02:39:34,980
那这一步就会拿到你的setup去执行

4485
02:39:35,400 --> 02:39:36,240
在这这里边儿

4486
02:39:36,240 --> 02:39:38,580
你看他会拿到你的setup

4487
02:39:39,100 --> 02:39:40,180
拿到你的卡

4488
02:39:40,180 --> 02:39:42,340
然后去代理你整个proxy的实力

4489
02:39:42,580 --> 02:39:45,370
就是你你的proxy上面我们拿到V的时候

4490
02:39:45,370 --> 02:39:47,770
同学们你们拿到微实力上面

4491
02:39:47,920 --> 02:39:49,930
你们的一个V1组件实例的时候

4492
02:39:49,930 --> 02:39:52,030
是不是可以访问它的各种属性

4493
02:39:52,650 --> 02:39:53,010
是吧

4494
02:39:53,250 --> 02:39:55,050
那这个种属性都是通过代理来的

4495
02:39:55,110 --> 02:39:55,650
那怎么代理

4496
02:39:55,650 --> 02:39:56,250
代理了什么

4497
02:39:56,310 --> 02:39:57,510
代理了we的purpose

4498
02:39:57,720 --> 02:39:59,670
带领we的什么贝塔是吧

4499
02:39:59,670 --> 02:40:01,920
带领了we的各种其他的那些数据

4500
02:40:01,920 --> 02:40:04,560
全部代理到什么唯一的实力的content上面来了

4501
02:40:04,680 --> 02:40:06,750
就是说你可以直接拿到在实力上面了

4502
02:40:06,780 --> 02:40:07,110
知道吧

4503
02:40:07,260 --> 02:40:09,690
然后去判断你这个component是否有赛特

4504
02:40:10,220 --> 02:40:12,230
如果你这个房破门的返回了三条方法

4505
02:40:12,350 --> 02:40:12,950
那怎么办

4506
02:40:13,100 --> 02:40:15,260
才会去执行的方法了吗

4507
02:40:15,380 --> 02:40:17,630
执行的方法设计方法就会返回什么

4508
02:40:17,870 --> 02:40:19,100
就会返回我们的什么

4509
02:40:19,220 --> 02:40:21,290
我们刚刚那些数据你们没有用过的

4510
02:40:21,290 --> 02:40:21,920
自己下来用

4511
02:40:21,920 --> 02:40:22,790
不知道怎么set了

4512
02:40:22,790 --> 02:40:24,050
自己下来看文档知道吧

4513
02:40:24,690 --> 02:40:26,040
晒的方法执行完了之后

4514
02:40:26,980 --> 02:40:28,900
它会判断你的方法是否是怕Miss

4515
02:40:28,930 --> 02:40:29,500
如果是MS

4516
02:40:29,500 --> 02:40:30,280
就处理PAR Ms

4517
02:40:31,170 --> 02:40:32,340
正常就是什么

4518
02:40:32,370 --> 02:40:33,630
就是SSR这种情况

4519
02:40:33,690 --> 02:40:34,770
如果不是怕呢

4520
02:40:34,980 --> 02:40:36,090
正常就是不是二米

4521
02:40:36,090 --> 02:40:38,910
它会返回你这个赛特拿来做一个执行

4522
02:40:39,180 --> 02:40:42,780
这里边儿我们sight执行的结果就是我们返回的那些内容吗

4523
02:40:43,260 --> 02:40:45,510
你的sight可能从可能反馈什么

4524
02:40:45,540 --> 02:40:46,710
可能返回render是吧

4525
02:40:46,860 --> 02:40:48,180
Sight是不是可能返回render

4526
02:40:48,270 --> 02:40:49,770
如果是render他就说什么

4527
02:40:49,800 --> 02:40:51,780
把你的render函数挂载明白吗

4528
02:40:52,140 --> 02:40:55,710
如果你的set a没有返回render就会在外边儿去挂载点

4529
02:40:55,770 --> 02:40:59,550
就是等于template那块模板那个一会儿那个一会儿串起来的时候

4530
02:40:59,550 --> 02:41:01,290
就给大家说这块儿的点就是什么

4531
02:41:01,690 --> 02:41:03,520
就是我们的一个sight里边儿返回的点

4532
02:41:03,520 --> 02:41:03,910
知道吧

4533
02:41:03,940 --> 02:41:04,900
Sight里面返回的人

4534
02:41:05,320 --> 02:41:08,380
如果再返回的对象在里面就会做一个处理

4535
02:41:08,380 --> 02:41:09,670
做什么处理你的瑞福

4536
02:41:09,910 --> 02:41:11,680
这是我们说的瑞府的瑞福

4537
02:41:11,680 --> 02:41:14,770
在访问的时候一定要用什么点video在访问是不是

4538
02:41:14,920 --> 02:41:18,490
但是你在模板里边儿使用瑞府有没有用点video

4539
02:41:18,520 --> 02:41:18,970
没有

4540
02:41:19,000 --> 02:41:20,320
他怎么怎么处理的

4541
02:41:20,410 --> 02:41:23,980
她在你这儿反馈反馈你的绕绕他

4542
02:41:24,380 --> 02:41:26,120
这是你的sight里面返回的队服

4543
02:41:26,180 --> 02:41:26,840
然后拿过来

4544
02:41:26,840 --> 02:41:27,920
他做了一层代理键

4545
02:41:27,920 --> 02:41:28,670
抹了一层代理

4546
02:41:28,820 --> 02:41:29,750
如果你是瑞甫

4547
02:41:29,780 --> 02:41:31,550
他直接去返回你rough的什么点

4548
02:41:31,550 --> 02:41:32,270
你知道吧

4549
02:41:32,390 --> 02:41:33,860
所以说这就是sta

4550
02:41:33,980 --> 02:41:36,080
然后这是整个返回的数据

4551
02:41:36,110 --> 02:41:38,480
数据数据你返回set的数据

4552
02:41:38,540 --> 02:41:40,190
然后返回来之后去做什么

4553
02:41:40,370 --> 02:41:42,620
去调用setup执行完了

4554
02:41:42,680 --> 02:41:43,460
Setup执行完了

4555
02:41:43,520 --> 02:41:45,710
然后这里边儿把你的主角实力给到这里边儿

4556
02:41:45,860 --> 02:41:47,750
然后去走这个里边儿这个流程

4557
02:41:47,840 --> 02:41:48,980
这个流程执行完了之后

4558
02:41:49,130 --> 02:41:51,590
这个里边儿就是什么执行run挂在render

4559
02:41:51,800 --> 02:41:53,660
它会判断你这个reader是否

4560
02:41:53,990 --> 02:41:56,630
在上边儿你的render里面是否已经挂载

4561
02:41:56,660 --> 02:41:57,950
如果没有挂载怎么办

4562
02:41:58,100 --> 02:41:58,820
就编译

4563
02:41:59,000 --> 02:41:59,330
是吧

4564
02:41:59,360 --> 02:42:00,020
就模板

4565
02:42:00,170 --> 02:42:01,640
这是这是模板

4566
02:42:01,790 --> 02:42:03,920
我们之前刚刚给大家看了他们的模板

4567
02:42:04,160 --> 02:42:04,760
然后来怎么办

4568
02:42:04,820 --> 02:42:05,330
编译呗

4569
02:42:05,360 --> 02:42:06,230
是不是在线编译

4570
02:42:06,410 --> 02:42:07,520
是不是在线编译的

4571
02:42:08,000 --> 02:42:10,040
如果没有在线就是离线变异是吧

4572
02:42:10,640 --> 02:42:11,000
是吧

4573
02:42:11,090 --> 02:42:11,900
是离线

4574
02:42:11,960 --> 02:42:14,480
离线面积不就还是我们的那个什么微

4575
02:42:15,270 --> 02:42:18,300
在线和离线是不是还是一头的东西是不过来是吧

4576
02:42:19,030 --> 02:42:19,720
论点是

4577
02:42:19,780 --> 02:42:20,650
或者实力是吧

4578
02:42:22,220 --> 02:42:22,670
明白吗

4579
02:42:22,850 --> 02:42:23,780
挂载完了之后

4580
02:42:24,080 --> 02:42:26,060
这不是挂载完了之后这一块儿

4581
02:42:27,630 --> 02:42:28,500
这是在线

4582
02:42:28,500 --> 02:42:29,490
咱们这在线

4583
02:42:29,880 --> 02:42:31,350
完了之后做什么

4584
02:42:32,020 --> 02:42:32,890
The option

4585
02:42:33,550 --> 02:42:34,690
Option什么叫option

4586
02:42:34,780 --> 02:42:36,130
就是你的主主角实力

4587
02:42:36,130 --> 02:42:36,970
为什么要option

4588
02:42:37,030 --> 02:42:38,620
为什么要有option这一块儿处理

4589
02:42:38,770 --> 02:42:41,410
因为他因为我们这一块儿全是怎么处理

4590
02:42:41,590 --> 02:42:43,750
全是V3的这种处理逻辑似的

4591
02:42:44,080 --> 02:42:45,670
他既然支持支持sight

4592
02:42:45,670 --> 02:42:46,480
那这块怎么办

4593
02:42:46,660 --> 02:42:48,880
我们就把你看你写的所有品

4594
02:42:49,120 --> 02:42:53,230
就是你这个主页上面写着各种对你按option这种写法是吧

4595
02:42:53,290 --> 02:42:53,950
你的open

4596
02:42:54,040 --> 02:42:55,930
你你们写的时候写的open是吧

4597
02:42:56,730 --> 02:43:00,240
写的option的写法全部他把这些数据挂载到主角实力上面

4598
02:43:00,390 --> 02:43:01,860
通过另一种方法挂载是吧

4599
02:43:01,980 --> 02:43:03,480
通过option这种这种不用说了

4600
02:43:03,480 --> 02:43:04,680
就是挂载数据是吧

4601
02:43:04,740 --> 02:43:07,230
就是往主角实力上面去挂载数据

4602
02:43:08,620 --> 02:43:09,310
没在上面儿

4603
02:43:09,310 --> 02:43:11,080
就是往主角实力上面去挂着没事儿

4604
02:43:11,080 --> 02:43:13,420
看见了就是挂着没事儿了吧

4605
02:43:14,000 --> 02:43:15,800
所以说这一步就是挂着挂着什么

4606
02:43:16,950 --> 02:43:17,370
哪去了

4607
02:43:19,090 --> 02:43:19,990
就是挂在option

4608
02:43:20,080 --> 02:43:21,730
所以说V3里边

4609
02:43:21,760 --> 02:43:26,530
它虽虽然它是它的设计就是就是以hooks模式来设计的

4610
02:43:26,530 --> 02:43:27,610
但是他也支持什么

4611
02:43:27,700 --> 02:43:29,860
支持option是不是支持APP之后

4612
02:43:29,860 --> 02:43:30,940
然后这里边儿什么

4613
02:43:31,000 --> 02:43:31,810
如果没有便意

4614
02:43:31,810 --> 02:43:32,650
如果不需要变异

4615
02:43:32,650 --> 02:43:33,520
这是低微的情况

4616
02:43:33,700 --> 02:43:34,510
如果不需要翻译

4617
02:43:35,260 --> 02:43:37,600
这里边儿这里边儿这个过程

4618
02:43:37,600 --> 02:43:38,290
不行不行

4619
02:43:38,290 --> 02:43:39,010
挂载这里边儿

4620
02:43:39,040 --> 02:43:40,030
挂载了之后

4621
02:43:40,060 --> 02:43:40,900
里边执行完了

4622
02:43:41,110 --> 02:43:41,350
OK

4623
02:43:41,350 --> 02:43:42,520
挂载完了就执行完了

4624
02:43:42,610 --> 02:43:44,350
然后就回到哪边哪边去了

4625
02:43:44,590 --> 02:43:46,300
回到我们刚刚哪一部

4626
02:43:50,110 --> 02:43:50,800
嗯

4627
02:43:55,090 --> 02:43:57,010
回到我们刚刚的

4628
02:43:57,810 --> 02:43:59,490
赛特赛特主角实力是吧

4629
02:43:59,640 --> 02:44:00,570
Sight的主角实力

4630
02:44:00,600 --> 02:44:01,500
Sight完了之后

4631
02:44:01,530 --> 02:44:03,660
同学们主角实力是不是完了

4632
02:44:03,720 --> 02:44:06,810
我现在在整个组件是不是在内存里面已经有了

4633
02:44:06,840 --> 02:44:08,010
我组件儿有我的

4634
02:44:08,070 --> 02:44:09,270
你给我的各种配置

4635
02:44:09,270 --> 02:44:10,110
你给我的各种数据

4636
02:44:10,110 --> 02:44:11,490
还有组件对应的render方法

4637
02:44:11,490 --> 02:44:13,080
是不是就全部构建完了是吧

4638
02:44:13,720 --> 02:44:14,950
是不是这块儿明白吗

4639
02:44:14,980 --> 02:44:15,310
是吧

4640
02:44:15,850 --> 02:44:21,970
这个过程是不是全部就是构建组件实例这个过程根据你输入的代码和你的render和你的IP是不是有点快

4641
02:44:21,970 --> 02:44:23,860
你们下来之后自己看代码再穿一下

4642
02:44:24,220 --> 02:44:25,120
然后这块儿完了之后

4643
02:44:25,120 --> 02:44:26,200
同学们很简单

4644
02:44:27,660 --> 02:44:29,280
这一步这一步我给点进去

4645
02:44:29,280 --> 02:44:30,090
你们就看得明白了

4646
02:44:33,030 --> 02:44:33,750
还用说吗

4647
02:44:34,750 --> 02:44:35,320
还要什么

4648
02:44:35,500 --> 02:44:36,160
你飞

4649
02:44:36,700 --> 02:44:37,630
你飞是吧

4650
02:44:37,750 --> 02:44:38,980
把你的卡用起来

4651
02:44:39,580 --> 02:44:41,200
是不是你的ID就用起来了

4652
02:44:41,230 --> 02:44:43,930
是不是是不是是不是X

4653
02:44:44,200 --> 02:44:47,170
X是不是就监听我们的数据是否第一次执行

4654
02:44:47,170 --> 02:44:49,150
这就是他就会第一次执行一次是吧

4655
02:44:49,270 --> 02:44:50,170
只要你这么一挂载

4656
02:44:50,170 --> 02:44:51,670
它是不是就会第一次执行一下

4657
02:44:52,200 --> 02:44:54,090
是不是这块是不是来了

4658
02:44:54,150 --> 02:44:54,660
是不是来了

4659
02:44:54,660 --> 02:44:55,980
是不是连接连接起来了

4660
02:44:56,130 --> 02:44:57,000
第一次执行一下

4661
02:44:57,000 --> 02:44:58,410
是不是就会执行一下我们这个函数

4662
02:44:58,680 --> 02:45:00,210
这个函数里面就会执行我们什么

4663
02:45:00,820 --> 02:45:01,810
就是咨询我的什么

4664
02:45:02,730 --> 02:45:04,710
同学们就会执行我们的配器

4665
02:45:05,360 --> 02:45:06,890
执行我们佩奇位置执行什么

4666
02:45:07,610 --> 02:45:08,300
咨询我们的

4667
02:45:09,830 --> 02:45:10,670
执行我们什么

4668
02:45:11,000 --> 02:45:12,290
我们在下边儿这里边儿的

4669
02:45:13,330 --> 02:45:13,780
各种

4670
02:45:14,950 --> 02:45:15,370
同学们

4671
02:45:15,370 --> 02:45:15,850
这里边儿

4672
02:45:16,710 --> 02:45:19,230
如果是其他其他主角他会打配齐

4673
02:45:19,900 --> 02:45:21,400
有就是递归去配气吗

4674
02:45:21,760 --> 02:45:23,410
就是因为他还有指数吗

4675
02:45:23,440 --> 02:45:24,700
还有其他的一些子组件吗

4676
02:45:24,700 --> 02:45:25,330
还有指数吗

4677
02:45:25,330 --> 02:45:28,810
是不是稍微去只去指数里边各种搭配去吗

4678
02:45:28,810 --> 02:45:29,080
是吧

4679
02:45:30,000 --> 02:45:30,900
然后这是挂载吗

4680
02:45:30,900 --> 02:45:31,530
这是挂载

4681
02:45:32,760 --> 02:45:34,200
然后她在这一步会生成

4682
02:45:34,200 --> 02:45:35,160
你看这这一步

4683
02:45:35,280 --> 02:45:35,820
它会生成

4684
02:45:35,820 --> 02:45:37,650
你看它会生成我这个什么

4685
02:45:37,980 --> 02:45:39,240
这里边会生成我的

4686
02:45:39,540 --> 02:45:41,040
我的就是执行我这个render

4687
02:45:41,160 --> 02:45:44,370
这是我的instance这里边它会执行你这里面传递render

4688
02:45:44,520 --> 02:45:45,030
看到吗

4689
02:45:45,090 --> 02:45:46,020
这是我们的同学

4690
02:45:46,440 --> 02:45:48,390
他会执行你这里边儿传进来的render函数

4691
02:45:48,750 --> 02:45:49,230
知道吧

4692
02:45:49,560 --> 02:45:49,920
是吧

4693
02:45:49,950 --> 02:45:52,080
他会拿执行我这里边儿船舰render函数

4694
02:45:52,080 --> 02:45:53,370
看见点函数执行的

4695
02:45:53,370 --> 02:45:54,660
是不是就会生成微弱的

4696
02:45:55,360 --> 02:45:59,410
执行的函数的过程是不是又是又回到了我们什么获取依赖

4697
02:45:59,980 --> 02:46:00,940
生成微露的

4698
02:46:01,390 --> 02:46:03,670
然后微露的又往这里边儿不断的递归是吧

4699
02:46:04,430 --> 02:46:04,910
是不是

4700
02:46:05,810 --> 02:46:06,200
对

4701
02:46:06,290 --> 02:46:06,800
微弱了

4702
02:46:06,830 --> 02:46:09,290
整个整个递归完了之后就会回溯

4703
02:46:09,290 --> 02:46:10,280
不断回溯回溯

4704
02:46:10,370 --> 02:46:11,150
回溯完了之后

4705
02:46:11,240 --> 02:46:13,850
为什么就会构建起来一颗什么树

4706
02:46:14,030 --> 02:46:14,300
是吧

4707
02:46:14,360 --> 02:46:15,650
构建一棵数完了之后

4708
02:46:15,710 --> 02:46:17,210
同学们构建起来一棵树

4709
02:46:17,210 --> 02:46:19,040
回到这一步就是我们的result是不是

4710
02:46:19,970 --> 02:46:20,570
是不是

4711
02:46:20,570 --> 02:46:20,960
哪去了

4712
02:46:20,960 --> 02:46:21,920
这是我们数

4713
02:46:22,220 --> 02:46:23,540
这是我们数的指数

4714
02:46:23,570 --> 02:46:24,680
我们指数构建完之后

4715
02:46:24,680 --> 02:46:26,570
把整个树挂载看到吗

4716
02:46:26,630 --> 02:46:28,550
整个树挂载看到吗

4717
02:46:28,970 --> 02:46:30,980
整个指数挂载明白吧

4718
02:46:31,130 --> 02:46:32,360
这是我们整个指数过的

4719
02:46:32,390 --> 02:46:35,270
所以说这个里边就是执行render的时候又往里边儿的规

4720
02:46:35,420 --> 02:46:37,580
因为执行render的阶段是不是又会获取数据

4721
02:46:38,600 --> 02:46:40,220
又会去执行我的VIVO的

4722
02:46:40,220 --> 02:46:42,080
又会执行我的卡盟的实力挂载

4723
02:46:42,080 --> 02:46:42,410
是不是

4724
02:46:43,190 --> 02:46:45,860
直接window是不是又到又又到哪边去了

4725
02:46:46,550 --> 02:46:48,500
又到我们外边那个render是吧

4726
02:46:48,500 --> 02:46:50,900
我们外边外边传的传进来的render是吧

4727
02:46:51,440 --> 02:46:52,820
那个render又去执行是吧

4728
02:46:54,530 --> 02:46:55,880
就是这里边儿这点儿事

4729
02:46:56,720 --> 02:46:58,850
然后要执行就会不断的规是吧

4730
02:46:59,060 --> 02:47:01,370
所以这一步当component的时候

4731
02:47:01,580 --> 02:47:02,990
这是component正常情况

4732
02:47:03,440 --> 02:47:04,700
Component挂载的情况

4733
02:47:04,730 --> 02:47:05,420
就执行完了

4734
02:47:06,500 --> 02:47:07,370
是执行完了

4735
02:47:07,400 --> 02:47:08,540
那什么时候动的呢

4736
02:47:09,230 --> 02:47:10,760
Element的时候是吧

4737
02:47:10,760 --> 02:47:12,410
我们刚刚说的是component

4738
02:47:12,410 --> 02:47:12,980
那什么时候

4739
02:47:13,720 --> 02:47:15,040
地方element的情况是吧

4740
02:47:15,400 --> 02:47:16,000
N的情况

4741
02:47:16,000 --> 02:47:18,340
你看处理N的情况什么时候会处理element

4742
02:47:18,400 --> 02:47:23,350
同时会触及到你的节点是element情况是冻结的时候是吧

4743
02:47:23,410 --> 02:47:24,820
你看这就是文本节点

4744
02:47:24,880 --> 02:47:26,440
可以处理文本注释节点

4745
02:47:26,440 --> 02:47:26,950
处理知识

4746
02:47:27,310 --> 02:47:29,080
但是文element节点的时候

4747
02:47:29,080 --> 02:47:29,650
除了element

4748
02:47:29,680 --> 02:47:31,750
然后出了element的element节点

4749
02:47:31,780 --> 02:47:33,730
拿到你的element前一个节点一个节点

4750
02:47:34,090 --> 02:47:34,690
然后判断

4751
02:47:35,050 --> 02:47:36,160
如果是烂是吧

4752
02:47:36,190 --> 02:47:37,090
就是直接是挂载

4753
02:47:37,150 --> 02:47:37,540
如果不是

4754
02:47:37,540 --> 02:47:38,980
那就更新来更新

4755
02:47:39,130 --> 02:47:39,910
如果更新挂载

4756
02:47:39,910 --> 02:47:41,350
其实好说来看更新

4757
02:47:41,410 --> 02:47:42,160
更新的情况

4758
02:47:42,190 --> 02:47:44,890
你看它会判断你这个是否是什么

4759
02:47:45,200 --> 02:47:46,190
佩奇是否是动态

4760
02:47:46,190 --> 02:47:46,790
能看到吗

4761
02:47:46,850 --> 02:47:48,530
懂了吗

4762
02:47:49,040 --> 02:47:49,820
动态翘的

4763
02:47:50,060 --> 02:47:51,080
如果是动态翘的

4764
02:47:51,440 --> 02:47:52,160
如果动态结合的

4765
02:47:52,160 --> 02:47:54,830
如果是动态切了你这如果是这个玩意儿

4766
02:47:54,980 --> 02:47:56,210
动态属性大于零

4767
02:47:56,240 --> 02:47:58,190
如果是动态属性直接去

4768
02:47:59,250 --> 02:48:01,140
所有直接更新动态属性

4769
02:48:01,500 --> 02:48:05,580
如果不是动态属性动态class就动态修改动态动态class

4770
02:48:05,580 --> 02:48:07,530
如果是动态style就修改动态style

4771
02:48:07,530 --> 02:48:09,540
如果动态purpose就给其他的动态purpose

4772
02:48:09,540 --> 02:48:09,960
可以吗

4773
02:48:10,410 --> 02:48:11,220
这个就不用说了吧

4774
02:48:11,640 --> 02:48:12,930
然后是动态text

4775
02:48:13,350 --> 02:48:14,520
直接修改动态text

4776
02:48:15,190 --> 02:48:17,200
如果是不是动态text

4777
02:48:19,040 --> 02:48:20,150
如果不是动态的

4778
02:48:20,830 --> 02:48:23,830
就不是这些所有东西都是不是动态的子节点

4779
02:48:23,830 --> 02:48:24,820
不是动态的这些东西

4780
02:48:25,090 --> 02:48:26,140
那怎么办

4781
02:48:26,170 --> 02:48:27,250
这儿还没到这儿

4782
02:48:27,490 --> 02:48:28,420
这儿是动态的是吧

4783
02:48:29,310 --> 02:48:29,790
是不是

4784
02:48:30,440 --> 02:48:33,410
如果不是动态的什么就正常就正常去配齐是吧

4785
02:48:33,620 --> 02:48:34,700
正常是佩奇purpose

4786
02:48:35,030 --> 02:48:37,640
然后这儿还有一个什么动态经典动态直接面试吧

4787
02:48:37,940 --> 02:48:38,840
所有动态直接点

4788
02:48:38,840 --> 02:48:40,580
如果是动态直接就打打佩奇

4789
02:48:40,580 --> 02:48:42,350
就全亮去配齐动态之恋

4790
02:48:42,350 --> 02:48:45,080
这个就拿到拿到之后每个去执行就行了

4791
02:48:45,080 --> 02:48:45,680
这个很简单

4792
02:48:45,680 --> 02:48:47,720
你看这边就没有都没有代码

4793
02:48:47,750 --> 02:48:50,990
直接拿过来重新配曲每一个节点是吧

4794
02:48:51,260 --> 02:48:52,040
这个动态节点

4795
02:48:52,040 --> 02:48:55,070
因为你已经已经到了对应的节点了

4796
02:48:55,100 --> 02:48:55,490
是吧

4797
02:48:55,760 --> 02:48:56,750
如果没有优化

4798
02:48:57,280 --> 02:48:58,030
如果没有优化

4799
02:48:58,030 --> 02:48:58,810
就是没有什么

4800
02:48:58,840 --> 02:49:01,390
没有当前你这个东西动态纪念也没有优化

4801
02:49:01,390 --> 02:49:01,810
那怎么办

4802
02:49:02,820 --> 02:49:03,660
就是到地府

4803
02:49:04,140 --> 02:49:05,130
地府全力以赴

4804
02:49:05,130 --> 02:49:05,610
全力

4805
02:49:05,610 --> 02:49:06,600
地府就到这里边儿了

4806
02:49:07,400 --> 02:49:07,880
全都是动物

4807
02:49:07,880 --> 02:49:12,500
地府里面就会分为什么K的情况和没有课的情况

4808
02:49:12,800 --> 02:49:13,760
没有课的情况

4809
02:49:14,820 --> 02:49:17,550
就不会存在说什么洞的这个过程

4810
02:49:17,550 --> 02:49:18,870
没有扣课的情况

4811
02:49:19,350 --> 02:49:27,720
它它就会它里边儿处理的逻辑就会完全就就就就就很就就咚地服的过程都不会走

4812
02:49:28,020 --> 02:49:31,710
没有课的情况直接去去就去全量更新是吧

4813
02:49:31,770 --> 02:49:33,150
内坨最全更新

4814
02:49:33,360 --> 02:49:34,500
如果有课的情况

4815
02:49:35,570 --> 02:49:36,050
他会动

4816
02:49:36,050 --> 02:49:37,520
地府才会懂的

4817
02:49:37,520 --> 02:49:39,320
所以说平时让你们写K是有原因的

4818
02:49:39,320 --> 02:49:39,650
看见

4819
02:49:40,680 --> 02:49:41,670
当他默认编译的时候

4820
02:49:41,670 --> 02:49:42,210
也会有可以

4821
02:49:42,660 --> 02:49:44,400
有些东西也会也可以你看

4822
02:49:44,760 --> 02:49:46,710
所以这里边这里边你看

4823
02:49:47,840 --> 02:49:50,030
这边就是去更新对比的时候

4824
02:49:50,660 --> 02:49:53,960
双端比较第一种你看数组的时候

4825
02:49:53,960 --> 02:49:54,980
你看双端比较

4826
02:49:55,190 --> 02:49:57,260
先是第一步双端比较

4827
02:49:57,260 --> 02:49:57,980
从头比较

4828
02:49:58,040 --> 02:49:58,790
从尾比较

4829
02:49:58,790 --> 02:49:59,600
旧双端比较

4830
02:49:59,900 --> 02:50:00,920
双端比较完了之后

4831
02:50:00,920 --> 02:50:02,060
有剩余节点的情况

4832
02:50:02,450 --> 02:50:03,650
然后再去怎么比较

4833
02:50:04,600 --> 02:50:07,780
然后再去比怎么比较完了之后再去再去做什么

4834
02:50:07,810 --> 02:50:08,740
再去打配齐

4835
02:50:09,190 --> 02:50:12,640
然后这里边最最核心的就是一个什么公共子序列是吧

4836
02:50:12,940 --> 02:50:15,130
有公共公共子序列去做一个东西

4837
02:50:15,740 --> 02:50:16,850
这里边就是动地府

4838
02:50:18,390 --> 02:50:18,870
知道吧

4839
02:50:21,300 --> 02:50:22,170
然后

4840
02:50:24,560 --> 02:50:27,800
就这些动物的骨这一块儿补给他讲

4841
02:50:27,830 --> 02:50:29,150
你们去弄

4842
02:50:29,820 --> 02:50:33,540
驱动算法那块儿自己学完了之后再重新回来看吧

4843
02:50:33,840 --> 02:50:35,310
也可以直接跟根据我这个

4844
02:50:36,280 --> 02:50:37,720
根据我这个这个备注

4845
02:50:37,840 --> 02:50:39,730
其实他的他的备注也很明白

4846
02:50:39,940 --> 02:50:40,450
我这个备注

4847
02:50:40,450 --> 02:50:41,380
我的备注也很明白

4848
02:50:41,380 --> 02:50:41,740
知道吧

4849
02:50:41,980 --> 02:50:43,600
它当然它有一些英文备注

4850
02:50:43,660 --> 02:50:44,680
我的备注就很明白了

4851
02:50:44,710 --> 02:50:45,700
你再拿过来看就行了

4852
02:50:46,180 --> 02:50:47,440
说实话对吧

4853
02:50:50,520 --> 02:50:51,720
对他的也是英文

4854
02:50:51,720 --> 02:50:54,660
但是他也没没我备注的这么这么这么好

4855
02:50:57,230 --> 02:50:58,250
咱们就这样

4856
02:50:59,270 --> 02:51:00,350
拜拜拜拜啦

4857
02:51:00,590 --> 02:51:02,330
今天干了我两个半小时

4858
02:51:02,330 --> 02:51:03,260
两个两个小时

4859
02:51:03,470 --> 02:51:04,700
两个小时40分钟

4860
02:51:04,700 --> 02:51:05,660
应该三三个小时

4861
02:51:05,780 --> 02:51:06,080
好吧

4862
02:51:06,260 --> 02:51:06,740
拜拜了

4863
02:51:07,190 --> 02:51:08,480
下次我把课件发给姥爷

4864
02:51:08,510 --> 02:51:08,780
好吧

4865
02:51:08,810 --> 02:51:09,770
拜拜拜拜

4866
02:51:11,450 --> 02:51:11,990
V3

4867
02:51:12,260 --> 02:51:13,220
其实还好

4868
02:51:13,280 --> 02:51:14,300
微山还好

4869
02:51:14,880 --> 02:51:15,840
下来之后你们要看

4870
02:51:15,870 --> 02:51:17,700
这个你们不看肯定懵逼

4871
02:51:21,280 --> 02:51:21,700
拜拜

