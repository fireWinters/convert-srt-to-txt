1
00:00:00,120 --> 00:00:01,800
喂喂喂

2
00:00:01,800 --> 00:00:03,150
同学们听得见吗

3
00:00:04,410 --> 00:00:04,830
喂

4
00:00:06,840 --> 00:00:07,110
喂

5
00:00:07,110 --> 00:00:08,640
听得见扣个一好吧

6
00:00:08,640 --> 00:00:09,390
好嘞

7
00:00:12,600 --> 00:00:14,760
我们8.05开始好吧

8
00:00:16,770 --> 00:00:17,430
8.05开始

9
00:00:38,490 --> 00:00:39,540
来给大家唱首歌

10
00:01:11,880 --> 00:01:13,290
梦琪

11
00:01:28,650 --> 00:01:29,610
到天边

12
00:01:38,700 --> 00:01:39,510
心酸

13
00:02:05,220 --> 00:02:06,750
三点把

14
00:02:14,250 --> 00:02:15,090
逝世

15
00:02:16,530 --> 00:02:17,250
感谢信

16
00:02:21,270 --> 00:02:31,020
你还上过我的课吗

17
00:02:31,260 --> 00:02:32,340
听过我的公开课

18
00:02:50,460 --> 00:02:51,030
一起

19
00:02:52,050 --> 00:02:52,350
浪

20
00:02:59,720 --> 00:03:01,130
三点怕

21
00:03:06,080 --> 00:03:06,920
一冷

22
00:03:16,970 --> 00:03:18,290
一冷男

23
00:03:30,390 --> 00:03:30,900
你看嘛

24
00:03:30,900 --> 00:03:31,800
这是什么插件儿

25
00:03:32,070 --> 00:03:33,060
你看名称

26
00:03:33,570 --> 00:03:34,530
我给你华在这儿

27
00:03:34,530 --> 00:03:35,610
你自己看名称

28
00:03:40,670 --> 00:03:41,480
还有什么

29
00:03:41,480 --> 00:03:42,140
还有这个

30
00:03:48,200 --> 00:03:52,400
仓8.05开始

31
00:03:54,860 --> 00:03:55,400
你看

32
00:03:55,640 --> 00:03:57,740
这个是做仓库的时候用的

33
00:03:57,740 --> 00:04:00,260
这个是一起写代码的时候

34
00:04:01,700 --> 00:04:03,650
这个是那个

35
00:04:05,750 --> 00:04:07,430
那个写的时候写的用的

36
00:04:13,640 --> 00:04:15,380
对对对赚差价

37
00:04:26,360 --> 00:04:27,590
我们8.05开始

38
00:04:37,190 --> 00:04:37,670
我刷了

39
00:04:39,620 --> 00:04:40,820
这声音这么熟悉

40
00:04:41,510 --> 00:04:42,560
我刷的很少

41
00:04:45,290 --> 00:04:48,950
我但有的时候也会看看算法这个东西

42
00:04:48,950 --> 00:04:50,930
你首先你得你得知道

43
00:04:53,540 --> 00:04:53,960
对

44
00:04:56,750 --> 00:04:58,850
算法这个东西你得系统的学习

45
00:04:59,990 --> 00:05:01,010
你光刷题

46
00:05:01,040 --> 00:05:02,300
刷题是一种输出

47
00:05:02,300 --> 00:05:06,920
我觉得刷题是一种对于你已经学到的东西是一种输出

48
00:05:07,220 --> 00:05:10,070
但是你更多的我觉得是要系统的学习

49
00:05:14,750 --> 00:05:18,980
这个老师讲过之前渲染进程的公开课吧

50
00:05:24,200 --> 00:05:26,120
我是声音特别好听是吧

51
00:05:27,520 --> 00:05:34,330
这么熟悉啦

52
00:05:37,330 --> 00:05:39,970
磁性也还行也还行

53
00:05:43,990 --> 00:05:44,740
也还行

54
00:05:45,910 --> 00:05:46,450
勉强

55
00:05:55,640 --> 00:05:57,980
南方口音南方

56
00:05:59,360 --> 00:06:02,120
南方哪位老师

57
00:06:04,790 --> 00:06:06,440
楠楠

58
00:06:09,320 --> 00:06:10,070
今天

59
00:06:12,890 --> 00:06:14,390
今天这位老师

60
00:06:15,890 --> 00:06:16,730
对

61
00:06:26,040 --> 00:06:28,230
今天是一位很帅气的老师

62
00:06:29,210 --> 00:06:30,140
很帅气的老师

63
00:06:30,140 --> 00:06:33,200
至少比比你们应该见过老袁是吧

64
00:06:35,240 --> 00:06:36,440
你们见过老袁是吧

65
00:06:37,880 --> 00:06:38,420
有同学

66
00:06:38,450 --> 00:06:40,940
有多少同学知道老袁长什么样子

67
00:06:42,950 --> 00:06:43,580
见过是吧

68
00:06:45,170 --> 00:06:46,430
那我比老元帅就行

69
00:06:50,510 --> 00:06:51,140
非常刺激

70
00:06:51,140 --> 00:06:52,040
那我肯定比他帅

71
00:07:02,300 --> 00:07:03,980
我开视频你又不打赏

72
00:07:04,490 --> 00:07:06,380
你不刷飞机刷火箭

73
00:07:13,490 --> 00:07:13,970
不不不

74
00:07:14,000 --> 00:07:18,290
十元十元十元十元十元

75
00:07:25,340 --> 00:07:26,360
有个朋友

76
00:07:32,180 --> 00:07:33,410
有个朋友可以

77
00:07:36,500 --> 00:07:37,100
同学你好

78
00:07:37,100 --> 00:07:37,640
同学你好

79
00:07:40,370 --> 00:07:41,150
这个朋友怕死

80
00:07:41,150 --> 00:07:41,330
你

81
00:07:42,620 --> 00:07:42,830
喂

82
00:07:42,830 --> 00:07:43,280
你好

83
00:07:49,880 --> 00:07:50,540
最菜

84
00:07:54,050 --> 00:07:55,010
那没有那没有

85
00:07:55,010 --> 00:07:55,910
那没有那没有

86
00:07:59,150 --> 00:08:00,920
冬天都要穿几层

87
00:08:02,750 --> 00:08:03,920
我夏天都感觉冷

88
00:08:04,100 --> 00:08:04,670
你懂懂

89
00:08:04,670 --> 00:08:05,390
那种受嘛

90
00:08:05,450 --> 00:08:06,230
就是那种瘦

91
00:08:12,140 --> 00:08:12,800
咳

92
00:08:13,700 --> 00:08:14,060
同学们

93
00:08:14,060 --> 00:08:14,870
大家好

94
00:08:17,300 --> 00:08:21,650
我先说一下我们这几节课

95
00:08:22,260 --> 00:08:24,900
的一个一个一个交互的方式

96
00:08:25,590 --> 00:08:28,860
应该前面的几位老师也跟大家说过

97
00:08:30,360 --> 00:08:32,100
我希望在听课期间

98
00:08:32,750 --> 00:08:35,810
因为V这个是你们第一结缘马克

99
00:08:35,810 --> 00:08:38,930
我希望你们在听课期间可以给我反馈

100
00:08:39,350 --> 00:08:40,250
怎么反馈呢

101
00:08:40,280 --> 00:08:41,510
就是你听懂啦

102
00:08:41,660 --> 00:08:42,530
你就扣个一

103
00:08:43,590 --> 00:08:44,910
或者说我问你

104
00:08:44,940 --> 00:08:46,140
你就扣个一对

105
00:08:46,140 --> 00:08:47,580
你没听懂

106
00:08:47,700 --> 00:08:49,020
或者说你不明白

107
00:08:49,080 --> 00:08:50,040
你就扣个零

108
00:08:50,760 --> 00:08:52,350
或者说你那儿抠不动

109
00:08:52,470 --> 00:08:53,610
你就送个花花

110
00:08:53,670 --> 00:08:55,230
你那边应该可以送花花

111
00:08:55,260 --> 00:08:55,800
知道吧

112
00:08:56,220 --> 00:08:57,510
没听懂你就扣个零

113
00:08:57,690 --> 00:08:58,830
或者送个花花

114
00:08:59,940 --> 00:09:03,030
就代表我能够知道你到底有什么反馈

115
00:09:03,240 --> 00:09:04,770
懂这个样子

116
00:09:04,770 --> 00:09:07,050
我们可以持续互动

117
00:09:07,110 --> 00:09:08,880
我也知道你到底学的怎么样

118
00:09:08,970 --> 00:09:09,450
好不好

119
00:09:10,700 --> 00:09:14,300
咱们好不好来试一下好不好

120
00:09:16,350 --> 00:09:18,090
对对对对对不好

121
00:09:18,120 --> 00:09:18,870
这还有不好的

122
00:09:19,730 --> 00:09:21,230
我给大家做个自我介绍

123
00:09:21,650 --> 00:09:24,350
我之前一直在腾讯和机峰

124
00:09:24,860 --> 00:09:28,460
然后做一些做图形学

125
00:09:28,610 --> 00:09:29,720
然后做工程化

126
00:09:30,200 --> 00:09:33,860
还做一些基础架构的一些东西

127
00:09:34,690 --> 00:09:35,200
然后呢

128
00:09:35,200 --> 00:09:35,920
我给大家做一个

129
00:09:35,920 --> 00:09:38,650
我之前就是看一个我之前做过的项目

130
00:09:38,650 --> 00:09:42,460
应该听过同学的课的同学应该是看过

131
00:09:42,490 --> 00:09:45,310
给大家做个自我介绍

132
00:09:45,760 --> 00:09:48,100
这是我们之前做的一些图形学上的一些

133
00:09:48,100 --> 00:09:50,410
就是教育工具上的一些东西

134
00:09:50,620 --> 00:09:52,180
就是它是一个三角形

135
00:09:52,360 --> 00:09:54,790
就是你可以去拖拽缩放这种东西

136
00:09:55,000 --> 00:09:56,050
然后可以联合

137
00:09:56,110 --> 00:09:58,870
但是这种东西相对来说其实是比较简单一点的

138
00:09:59,300 --> 00:10:02,090
然后比如说我们这种还可以去做一些

139
00:10:02,090 --> 00:10:03,950
比如说这种

140
00:10:04,280 --> 00:10:06,950
然后去做一些缩放拖拽

141
00:10:07,680 --> 00:10:09,510
稍微这个这个这个比较简单一点

142
00:10:09,510 --> 00:10:12,240
然后还可以做一些切割这种

143
00:10:12,300 --> 00:10:13,140
这是一个

144
00:10:13,170 --> 00:10:15,870
然后当然这些撤销回退就不用说了

145
00:10:16,080 --> 00:10:23,550
然后还有就是我们比如说之前做了一些数学一些一些其他的功能

146
00:10:23,550 --> 00:10:25,290
比如说给他看这个东西

147
00:10:25,320 --> 00:10:26,820
就是我们做过的其他一些功能

148
00:10:26,820 --> 00:10:28,590
比如说像这种这种内容

149
00:10:28,740 --> 00:10:31,590
这种东西就是自己做一套渲染引擎

150
00:10:31,590 --> 00:10:34,980
去渲染文本图片排版所有东西

151
00:10:35,190 --> 00:10:38,010
然后包括截图这些所有所有的内容

152
00:10:38,440 --> 00:10:42,310
然后都是这么一个过程截图这儿稍微有一点卡

153
00:10:42,550 --> 00:10:49,720
然后这是我们之前做的一所有的一之前做的一些图形学上面做了一些简单的功能吧

154
00:10:49,810 --> 00:10:52,090
就是它的一些白板的一些东西

155
00:10:52,600 --> 00:10:53,950
所以说

156
00:10:54,440 --> 00:10:57,410
基本上就是这样给大家做一个初步的自我介绍

157
00:10:58,820 --> 00:11:02,120
然后听我的对康老师画的

158
00:11:04,940 --> 00:11:08,540
以前听我讲过很多公开课

159
00:11:09,700 --> 00:11:11,740
我以前讲我讲过很多公开课

160
00:11:12,400 --> 00:11:12,970
前锋

161
00:11:16,520 --> 00:11:18,440
机锋不是铅封

162
00:11:20,630 --> 00:11:22,850
然后我们继续

163
00:11:22,850 --> 00:11:24,620
同学们做完自我介绍之后呢

164
00:11:24,620 --> 00:11:26,300
我们现在就开始正式上课啦

165
00:11:26,300 --> 00:11:27,410
同学们提起精神

166
00:11:27,440 --> 00:11:28,010
提起精神

167
00:11:28,720 --> 00:11:29,800
我们这节课呢

168
00:11:29,800 --> 00:11:30,520
主要讲什么呢

169
00:11:30,550 --> 00:11:31,870
主要讲这三节课

170
00:11:31,870 --> 00:11:33,670
主要讲VV呢

171
00:11:33,670 --> 00:11:34,240
主要讲什么呢

172
00:11:34,240 --> 00:11:34,990
讲源码

173
00:11:35,080 --> 00:11:39,520
讲源码我们很多其实现在存在着一个很大的问题

174
00:11:39,520 --> 00:11:40,840
前端存在一个很大的问题

175
00:11:40,840 --> 00:11:41,470
什么问题呢

176
00:11:41,650 --> 00:11:43,480
就是说你们来了精英班

177
00:11:43,810 --> 00:11:45,640
你们一定会明白一个问题

178
00:11:45,640 --> 00:11:47,740
就是现在很多人都在做前端

179
00:11:48,130 --> 00:11:49,360
但是很多人做前端呢

180
00:11:49,360 --> 00:11:50,770
他不能叫做前端工程师

181
00:11:50,770 --> 00:11:51,430
他叫什么

182
00:11:51,460 --> 00:11:52,660
叫做we工程师

183
00:11:52,660 --> 00:11:54,430
是不叫V工程师

184
00:11:54,430 --> 00:11:55,450
他不会写JS

185
00:11:55,900 --> 00:11:57,250
他也不会写什么

186
00:11:57,280 --> 00:11:59,080
很多东西他就会有一

187
00:11:59,480 --> 00:12:01,640
他就可以写页面就可以做东西

188
00:12:02,740 --> 00:12:03,280
对

189
00:12:03,610 --> 00:12:04,720
所以说这个东西

190
00:12:06,530 --> 00:12:07,340
怎么说呢

191
00:12:07,790 --> 00:12:08,600
这个东西

192
00:12:09,220 --> 00:12:11,650
你可以把它理解为是一种很基础的东西

193
00:12:11,650 --> 00:12:14,860
但是你也必须要明白他是一个什么

194
00:12:15,480 --> 00:12:17,460
他是一个就是大众化的东西

195
00:12:17,550 --> 00:12:19,020
那么既然是大众化的东西

196
00:12:19,560 --> 00:12:22,170
我们首先要区别于别人的一点

197
00:12:22,170 --> 00:12:23,790
第一点要区别于别人的一点

198
00:12:23,790 --> 00:12:25,320
就是别人知道怎么用

199
00:12:25,380 --> 00:12:25,980
你知道

200
00:12:26,010 --> 00:12:27,810
你至少得知道它是怎么出来的

201
00:12:28,230 --> 00:12:30,000
他背后至少是什么样子

202
00:12:30,030 --> 00:12:32,280
是不是背后它的实现到底是什么样子

203
00:12:32,460 --> 00:12:34,440
这些东西你至少要去明白

204
00:12:34,440 --> 00:12:36,480
这才是你们跟别人区别的第一点

205
00:12:36,480 --> 00:12:37,710
当然这只是第一点

206
00:12:38,220 --> 00:12:40,290
所以说我们一直在聊框架

207
00:12:40,680 --> 00:12:43,410
框架有同学用过rock吗

208
00:12:43,470 --> 00:12:44,580
有多少同学用过rock

209
00:12:44,580 --> 00:12:45,660
我看看

210
00:12:46,470 --> 00:12:48,540
用过的扣一都用过是吧

211
00:12:48,570 --> 00:12:50,730
那那就好那就好那就好那就好

212
00:12:51,120 --> 00:12:52,200
那就也没用过

213
00:12:52,200 --> 00:12:53,700
没用过的也没事儿也没事儿

214
00:12:53,790 --> 00:12:54,540
你下来看一下

215
00:12:54,540 --> 00:12:56,610
后边也会有rap的源码

216
00:12:57,290 --> 00:12:58,340
那无所谓无所谓

217
00:12:58,610 --> 00:13:01,100
我们知道我们平时同学们

218
00:13:01,130 --> 00:13:03,230
你们平时是不是也用过really

219
00:13:03,230 --> 00:13:04,190
也用过react

220
00:13:05,370 --> 00:13:06,540
这两个框架

221
00:13:06,810 --> 00:13:10,410
这两个框架现在是市面上比较大众化的框架

222
00:13:10,740 --> 00:13:13,710
那么像这种框架我们平时在学习的时候

223
00:13:14,690 --> 00:13:16,850
你说为什么有will you wrecked呢

224
00:13:16,880 --> 00:13:18,710
它们之间的区别是什么

225
00:13:18,710 --> 00:13:20,480
是不是之间有什么区别

226
00:13:20,480 --> 00:13:22,940
他们之间最后的一些一些东西

227
00:13:22,970 --> 00:13:24,560
就是往下走的一些东西

228
00:13:24,590 --> 00:13:25,760
背后的思想是什么

229
00:13:25,970 --> 00:13:28,160
这个其实从很多层面都可以去聊的

230
00:13:28,370 --> 00:13:28,790
知道吧

231
00:13:28,970 --> 00:13:31,190
很多很久之前有一道面试题

232
00:13:31,190 --> 00:13:33,920
就是说问你really和rap的区别

233
00:13:34,950 --> 00:13:36,390
问你VE he right的区别

234
00:13:36,390 --> 00:13:37,860
这种问题你应该怎么去回答

235
00:13:37,920 --> 00:13:39,120
同学们一个框架

236
00:13:39,120 --> 00:13:39,900
你应该怎么去回答

237
00:13:40,050 --> 00:13:42,270
应该从几个方面边意思

238
00:13:43,540 --> 00:13:44,695
运行死

239
00:13:44,695 --> 00:13:46,630
你这么回答是不对的

240
00:13:46,990 --> 00:13:48,010
只这么回答不对的

241
00:13:48,220 --> 00:13:49,540
运行时是不是

242
00:13:49,780 --> 00:13:51,370
然后还有什么开发时

243
00:13:52,070 --> 00:13:53,570
是不是开发的时候

244
00:13:54,540 --> 00:13:56,370
从这几个过程

245
00:13:56,640 --> 00:13:59,010
对从这几个这个东西对他的

246
00:13:59,460 --> 00:14:00,060
但是你

247
00:14:00,990 --> 00:14:01,470
蹲坑

248
00:14:01,710 --> 00:14:02,040
对

249
00:14:02,040 --> 00:14:03,750
但是这个东西你有一个维度

250
00:14:03,750 --> 00:14:04,320
什么维度呢

251
00:14:04,410 --> 00:14:06,000
他都是在框架上的维度

252
00:14:06,360 --> 00:14:07,080
既然是框架

253
00:14:07,080 --> 00:14:08,640
其实你也可以把它归成一类

254
00:14:08,640 --> 00:14:09,720
去做一个对比

255
00:14:09,720 --> 00:14:13,440
所以说在这几个方面上你可以做很多不同的区别

256
00:14:13,470 --> 00:14:15,090
但是这几个区别我们一会儿再聊

257
00:14:15,330 --> 00:14:16,320
所以说这个问题

258
00:14:16,320 --> 00:14:17,580
我们先把这个问题留在这儿

259
00:14:18,000 --> 00:14:19,680
等我们把今天这一刻

260
00:14:19,680 --> 00:14:21,390
或者说后边儿这几节课学完了之后

261
00:14:21,390 --> 00:14:22,440
同学们再聊一下

262
00:14:22,440 --> 00:14:25,380
当然我一会儿也给大家发一个粗浅的答案

263
00:14:25,410 --> 00:14:27,510
就是给大家说一下这个粗浅的答案

264
00:14:27,510 --> 00:14:30,210
然后你们再来根据我们这个答案之上

265
00:14:30,240 --> 00:14:32,100
然后再去做一些维度的延伸

266
00:14:32,220 --> 00:14:32,460
好吧

267
00:14:32,460 --> 00:14:35,040
所以我们这节课主要学什么呢

268
00:14:35,040 --> 00:14:35,850
学的就是V

269
00:14:36,780 --> 00:14:37,530
学的就是V

270
00:14:37,650 --> 00:14:40,140
那么药学VE意向学员马这种东西

271
00:14:40,530 --> 00:14:42,360
你要学他的几个层面

272
00:14:42,570 --> 00:14:44,460
你如果要学一个东西的源码同门

273
00:14:44,670 --> 00:14:46,500
你首先得知道它的源码架构是吧

274
00:14:46,860 --> 00:14:49,830
我们使用第一步使用就不用说了

275
00:14:49,830 --> 00:14:50,130
是吧

276
00:14:50,280 --> 00:14:51,750
使用这个层面我们就不用说了

277
00:14:51,750 --> 00:14:52,590
他怎么使用

278
00:14:52,920 --> 00:14:55,230
基于使用来反推什么

279
00:14:55,410 --> 00:14:59,250
通过我们平时的使用来反推他功能上面的一个什么

280
00:14:59,880 --> 00:15:01,560
那反推它功能是什么

281
00:15:02,340 --> 00:15:03,060
功能是什么

282
00:15:03,840 --> 00:15:05,700
功能上的一些实现是吧

283
00:15:05,820 --> 00:15:07,050
功能上的一些实现

284
00:15:07,440 --> 00:15:09,240
所以我们不能够只看什么

285
00:15:09,300 --> 00:15:10,470
不能够只看

286
00:15:11,130 --> 00:15:13,230
他的一个一个一个一个功能

287
00:15:13,230 --> 00:15:15,120
或者说只看它的一个使用层面

288
00:15:15,180 --> 00:15:16,260
或者说只看原理层面

289
00:15:16,380 --> 00:15:17,550
它们是相辅相成的

290
00:15:17,730 --> 00:15:19,650
是不是是相辅相成的一个过程

291
00:15:19,800 --> 00:15:22,380
所以说我们要从使用层面来推功能

292
00:15:22,590 --> 00:15:24,390
然后使用知道了

293
00:15:24,960 --> 00:15:25,860
使用知道了

294
00:15:25,920 --> 00:15:27,720
然后去做什么在看什么

295
00:15:28,200 --> 00:15:31,200
在看什么同学们使用知道在看什么

296
00:15:31,620 --> 00:15:32,100
在看什么

297
00:15:32,160 --> 00:15:33,330
再来看原理是吧

298
00:15:33,540 --> 00:15:37,140
再来看原理是原理知道之后

299
00:15:37,140 --> 00:15:39,240
从原理应该说使用再来看原理

300
00:15:39,240 --> 00:15:40,680
原理知道之后再来看什么

301
00:15:40,680 --> 00:15:41,850
再来看对比是吧

302
00:15:42,120 --> 00:15:43,590
对比或者说实现是吧

303
00:15:44,350 --> 00:15:44,920
实现

304
00:15:46,730 --> 00:15:48,530
这个原理是在什么维度上的原理

305
00:15:48,530 --> 00:15:50,960
思维就是他的思想的原理

306
00:15:51,260 --> 00:15:53,240
思想的原理是思想的原理

307
00:15:53,510 --> 00:15:55,820
所以说我们从不同的层面来看来

308
00:15:55,820 --> 00:15:58,160
学习才是一个这么样的过程

309
00:15:58,460 --> 00:16:01,700
那么第一步你如果要学习一个框架的源码

310
00:16:01,760 --> 00:16:03,140
就应该知道他的什么

311
00:16:03,260 --> 00:16:03,950
知道了什么

312
00:16:06,210 --> 00:16:07,020
他的思想是什么

313
00:16:07,020 --> 00:16:08,160
双向数据绑定是吧

314
00:16:08,460 --> 00:16:11,190
这个双向双向的过程是什么双向的

315
00:16:11,340 --> 00:16:13,170
不是双向的过程是什么双向的

316
00:16:13,440 --> 00:16:15,180
那他怎么又是怎么来的

317
00:16:15,240 --> 00:16:18,990
怎么对这个这个你很很好很好理解MVM

318
00:16:19,020 --> 00:16:20,160
那怎么到底是什么样的

319
00:16:20,160 --> 00:16:24,720
我们一会儿给大家稍微聊一下有的同学不知道MVM到底是一个什么双向的过程

320
00:16:25,740 --> 00:16:26,250
对

321
00:16:27,180 --> 00:16:28,290
对对对

322
00:16:28,350 --> 00:16:29,610
所以说我们在这个维度

323
00:16:29,640 --> 00:16:31,500
你首先要知道双向他是什么

324
00:16:31,500 --> 00:16:32,850
双向的它解决了什么问题

325
00:16:33,090 --> 00:16:34,470
然后在这个维度之上

326
00:16:34,560 --> 00:16:37,560
我们再来看什么基础的目录结构是吧

327
00:16:37,770 --> 00:16:41,550
目录结构就是盖就是它的一个什么源码的什么

328
00:16:42,080 --> 00:16:43,400
大致的一个实现是吧

329
00:16:44,220 --> 00:16:46,410
所以说我们现在看大致的目录结构

330
00:16:46,620 --> 00:16:47,400
微源码

331
00:16:47,400 --> 00:16:48,960
这是我下载的V2的源码

332
00:16:48,960 --> 00:16:52,230
我们微源码一节课一节

333
00:16:52,440 --> 00:16:54,420
一节半奖

334
00:16:54,420 --> 00:16:55,830
V21结伴讲V3

335
00:16:56,040 --> 00:16:57,210
所以我们都会讲

336
00:16:57,210 --> 00:16:57,660
都会讲

337
00:16:57,750 --> 00:17:01,230
因为V3是在V2之上做得更多的眼睛

338
00:17:01,230 --> 00:17:03,090
你如果把V2搞明白了

339
00:17:03,090 --> 00:17:05,280
V3其实很多东西都明白了

340
00:17:05,700 --> 00:17:08,280
我们在V3的时候会对比着V2学习

341
00:17:09,610 --> 00:17:10,720
所以在这个层面之上

342
00:17:10,930 --> 00:17:12,310
它的目录结构

343
00:17:12,310 --> 00:17:13,270
我们说了目录结构

344
00:17:13,270 --> 00:17:14,290
你看这里边儿

345
00:17:14,650 --> 00:17:15,250
这里边儿

346
00:17:15,280 --> 00:17:17,350
这里边儿所有的东西最核心

347
00:17:17,350 --> 00:17:19,180
同学你们学了这么多东西

348
00:17:19,510 --> 00:17:20,440
最核心的东西

349
00:17:20,440 --> 00:17:21,730
你说这么一看过来

350
00:17:21,970 --> 00:17:23,440
基本上能知道是什么结构吧

351
00:17:23,440 --> 00:17:23,680
是吧

352
00:17:24,010 --> 00:17:25,090
这东西跑分了是吧

353
00:17:25,090 --> 00:17:27,010
性能测试的这个是打出来的disc是

354
00:17:27,310 --> 00:17:30,220
但是disc你看我们这里边有很多种不同的版本是吧

355
00:17:30,340 --> 00:17:32,170
有什么让time come on

356
00:17:32,170 --> 00:17:35,620
有什么让time yes e SM是吧

357
00:17:35,680 --> 00:17:37,390
还有直接就是runtime

358
00:17:37,570 --> 00:17:40,540
然后又有这种保尔SEM是吧

359
00:17:40,920 --> 00:17:43,200
然后有什么这种那种come on

360
00:17:43,260 --> 00:17:44,340
就是没有加入M的

361
00:17:44,340 --> 00:17:45,630
所以说这就有两个区别

362
00:17:45,900 --> 00:17:46,890
就是不同的规范

363
00:17:46,890 --> 00:17:50,550
是bodies打出来的第一个diss打出来的代码是吧

364
00:17:50,550 --> 00:17:52,470
我们就从这儿就要就要

365
00:17:53,300 --> 00:17:54,050
先给你说

366
00:17:54,050 --> 00:17:56,060
我要给你说要跟你说

367
00:17:56,450 --> 00:17:57,650
说我们这儿有两个区别

368
00:17:57,650 --> 00:17:58,280
第一个什么

369
00:17:58,460 --> 00:17:59,900
第一个是没有什么

370
00:18:00,170 --> 00:18:03,680
没有没有加什么这个runtime这个这个这个东西的

371
00:18:03,680 --> 00:18:04,280
第二个什么

372
00:18:04,280 --> 00:18:06,860
只加了让他加了让他们这个东西的是吧

373
00:18:07,340 --> 00:18:08,420
那这两个东西

374
00:18:09,080 --> 00:18:11,300
其他的一些什么就是规范的区别了

375
00:18:11,360 --> 00:18:11,600
D

376
00:18:11,600 --> 00:18:14,060
其他的这个com JS这个不用说了吧

377
00:18:14,420 --> 00:18:16,130
这个SM就是S6的

378
00:18:17,080 --> 00:18:17,740
这不用说了吧

379
00:18:17,950 --> 00:18:19,810
这个是什么umd是吧

380
00:18:20,260 --> 00:18:20,710
是吧

381
00:18:20,740 --> 00:18:21,940
这个这个规范

382
00:18:21,940 --> 00:18:22,840
这个不用说了是吧

383
00:18:23,170 --> 00:18:25,030
所以说这就是三种规范

384
00:18:25,330 --> 00:18:26,320
他不同的一些东西

385
00:18:26,320 --> 00:18:31,270
那么这几种还有一种就是没有加入M的he加run time有什么区别呢

386
00:18:31,270 --> 00:18:34,270
这就是一没有加入M的是runtime

387
00:18:35,040 --> 00:18:36,720
Runtime加上

388
00:18:37,800 --> 00:18:38,460
Come player

389
00:18:39,510 --> 00:18:40,290
有runtime的

390
00:18:40,290 --> 00:18:42,270
只有runtime的就是compare

391
00:18:42,270 --> 00:18:43,140
就只有runtime

392
00:18:43,350 --> 00:18:45,930
他就没有compare compare这个东西是什么

393
00:18:45,990 --> 00:18:46,650
叫做编译

394
00:18:46,650 --> 00:18:48,780
同学们是不是compare叫做编译

395
00:18:49,510 --> 00:18:50,860
那么这个ROM time叫什么

396
00:18:50,890 --> 00:18:51,880
运行是吧

397
00:18:52,210 --> 00:18:52,570
是吧

398
00:18:52,930 --> 00:18:54,850
运行时是不是运行时

399
00:18:54,850 --> 00:18:56,380
一个是编一个市运行时

400
00:18:56,830 --> 00:18:58,420
所以说这就很有意思了

401
00:18:58,690 --> 00:18:59,410
运行时

402
00:19:00,880 --> 00:19:01,750
这就很有意思了

403
00:19:01,810 --> 00:19:02,950
什么叫运行时

404
00:19:03,160 --> 00:19:04,690
你们要知道什么叫运行时

405
00:19:04,690 --> 00:19:05,650
我们就回到

406
00:19:06,010 --> 00:19:07,660
我们先不说V的运行时

407
00:19:07,660 --> 00:19:09,670
我们就说JS的运行时

408
00:19:09,670 --> 00:19:11,020
什么叫做运行时

409
00:19:11,020 --> 00:19:11,890
同学们

410
00:19:12,160 --> 00:19:13,480
什么叫做运行时

411
00:19:15,280 --> 00:19:17,050
运行时如果你们学过计算机

412
00:19:17,200 --> 00:19:20,950
运行时反应到一个计算机的维度是什么

413
00:19:25,080 --> 00:19:26,700
运行的时候对运行的时候

414
00:19:27,410 --> 00:19:29,330
晋城晋城它是运行的环境嘛

415
00:19:29,360 --> 00:19:29,720
是吧

416
00:19:30,420 --> 00:19:32,280
它保存它的运行的状态是什么

417
00:19:32,460 --> 00:19:34,920
内存是8G内存是不是内存

418
00:19:35,280 --> 00:19:35,850
是不是内存

419
00:19:35,880 --> 00:19:37,260
内存里面的数据是吧

420
00:19:37,840 --> 00:19:38,290
是啊

421
00:19:38,920 --> 00:19:39,310
对啊

422
00:19:39,370 --> 00:19:40,270
内存里面的数据

423
00:19:40,270 --> 00:19:42,280
保存了我们的运行运行的过程

424
00:19:42,400 --> 00:19:43,480
就比如说你的JS

425
00:19:43,750 --> 00:19:44,350
你的JS

426
00:19:44,350 --> 00:19:47,050
你如果你的JS执行了之后留了一个什么

427
00:19:47,320 --> 00:19:47,740
同学们

428
00:19:47,770 --> 00:19:49,480
你的JS执行了之后留了一个什么

429
00:19:49,510 --> 00:19:51,310
溜了一个object是吧

430
00:19:51,460 --> 00:19:52,330
六个object

431
00:19:52,510 --> 00:19:54,640
那么这个object是不是保存在什么呢

432
00:19:54,820 --> 00:19:55,930
保存在内存里边儿的

433
00:19:56,420 --> 00:19:59,390
那这个时候就为就反映了一个什么反应了

434
00:19:59,390 --> 00:20:00,770
这个object就反应了什么

435
00:20:00,800 --> 00:20:04,220
反应了我们的JS当前的什么一个运行状态是吧

436
00:20:05,360 --> 00:20:06,800
是不是运行状态

437
00:20:06,800 --> 00:20:12,830
是不是就是这个当前内存里边儿咋保存的这份数据表示了我JS的运行状态

438
00:20:12,830 --> 00:20:14,360
包括他的站这些东西

439
00:20:14,420 --> 00:20:15,500
它都是一个数据结构

440
00:20:15,960 --> 00:20:16,290
是吧

441
00:20:16,440 --> 00:20:21,540
那所以说对于我们的这个where这个runtime的运行是什么

442
00:20:22,780 --> 00:20:24,730
反应V的状态是什么

443
00:20:24,760 --> 00:20:28,150
反应的运行状态有什么

444
00:20:28,150 --> 00:20:30,310
V1的运行状态有什么懂

445
00:20:32,170 --> 00:20:32,680
什么

446
00:20:34,600 --> 00:20:35,500
虚拟到没

447
00:20:36,400 --> 00:20:40,210
是不是虚拟道面微露的算不算虚拟组织

448
00:20:40,210 --> 00:20:41,890
同学们知道什么需要虚拟动物吗

449
00:20:45,480 --> 00:20:46,140
都知道吧

450
00:20:46,470 --> 00:20:46,950
是吧

451
00:20:47,220 --> 00:20:48,150
替我算算

452
00:20:48,980 --> 00:20:49,490
是啊

453
00:20:51,860 --> 00:20:53,600
还有什么我保存的数据

454
00:20:53,600 --> 00:20:55,100
我上双向数据绑定

455
00:20:55,340 --> 00:20:56,510
我需要监听数据

456
00:20:56,510 --> 00:21:01,070
是不是我监听监听之后的数据是不是监听的数据

457
00:21:02,180 --> 00:21:03,740
是不是我双向数据绑定

458
00:21:04,010 --> 00:21:05,510
我把它处理成了数据是吧

459
00:21:05,570 --> 00:21:06,860
我的数据要处理成什么

460
00:21:06,890 --> 00:21:08,450
可可监听的数据是吧

461
00:21:08,930 --> 00:21:09,740
是不是监听的数据

462
00:21:09,740 --> 00:21:15,110
还有什么我所有的什么我所有的每色的对各种没事的

463
00:21:15,260 --> 00:21:16,610
什么没事儿

464
00:21:16,610 --> 00:21:18,590
没没事的这些东西是吧

465
00:21:19,460 --> 00:21:20,810
怎么还有我们的component

466
00:21:20,810 --> 00:21:21,170
是不是

467
00:21:22,020 --> 00:21:23,310
我但我这些写错了

468
00:21:23,310 --> 00:21:29,040
你们就你们自己明白就行component component这东西是吧

469
00:21:29,660 --> 00:21:30,860
什么APP实力是吧

470
00:21:30,980 --> 00:21:33,380
这东西都是一个什么当前的一个状态是吧

471
00:21:34,010 --> 00:21:34,460
是不是

472
00:21:34,820 --> 00:21:35,840
所以说我说了写错了

473
00:21:35,840 --> 00:21:37,850
我不你们你们明白就行好吧

474
00:21:38,940 --> 00:21:40,530
所以这些东西都是一个什么

475
00:21:40,620 --> 00:21:42,090
他的反应的一个运行状态

476
00:21:42,090 --> 00:21:43,530
这些东西什么叫运行状态

477
00:21:43,530 --> 00:21:44,910
都是需要什么

478
00:21:45,150 --> 00:21:47,325
都是需要我的内存去保存的

479
00:21:47,325 --> 00:21:47,670
是吧

480
00:21:47,970 --> 00:21:49,380
内存去保存的一个过程

481
00:21:49,380 --> 00:21:50,850
我的JS的运行

482
00:21:50,850 --> 00:21:52,110
我的ae在运行的时候

483
00:21:52,110 --> 00:21:54,210
我可以随时去访问的这些东西是不是

484
00:21:54,740 --> 00:21:56,180
这是我内存运行的状态

485
00:21:57,000 --> 00:21:58,020
那么什么是compare

486
00:21:58,230 --> 00:21:58,680
懂没

487
00:21:59,590 --> 00:22:00,460
什么是compare

488
00:22:02,240 --> 00:22:03,260
我我问大家

489
00:22:03,260 --> 00:22:08,210
我在这儿六一个六一个V61个V1之后

490
00:22:09,220 --> 00:22:10,420
溜了一个V之后

491
00:22:10,780 --> 00:22:11,740
我在这里边儿

492
00:22:12,010 --> 00:22:15,940
这里边儿写的所有东西是不是它它它运行出来之后

493
00:22:16,120 --> 00:22:18,010
它就是一个什么运行时的状态是吧

494
00:22:18,190 --> 00:22:19,060
那什么是卡梅尔

495
00:22:20,120 --> 00:22:20,480
那么

496
00:22:20,630 --> 00:22:22,070
什么是compare compare

497
00:22:24,330 --> 00:22:26,460
这是compare是什么

498
00:22:27,320 --> 00:22:28,370
这就是我们韵诗

499
00:22:28,880 --> 00:22:30,860
所以说你看我们这里边儿这个runtime

500
00:22:30,860 --> 00:22:32,360
就只有这里边儿这些东西

501
00:22:32,510 --> 00:22:34,490
他就没有compare compare又是什么东西

502
00:22:35,480 --> 00:22:36,290
编译词

503
00:22:37,350 --> 00:22:40,200
编译思编意思是什么意思同学们

504
00:22:41,690 --> 00:22:42,740
编译是什么东西

505
00:22:42,800 --> 00:22:43,460
我问你

506
00:22:43,790 --> 00:22:45,320
你的VIP的代码是怎么写的

507
00:22:46,300 --> 00:22:47,830
你的唯一的代码是不是这么写的

508
00:22:48,340 --> 00:22:49,270
是不是写的这么写的

509
00:22:49,750 --> 00:22:50,830
是不是这么写的

510
00:22:52,570 --> 00:22:53,800
是不是写的这个样子

511
00:22:54,860 --> 00:22:56,180
或者说你在在写的

512
00:22:56,180 --> 00:22:57,800
你们平时工程里边又怎么写的

513
00:22:57,950 --> 00:23:00,140
就写的什么底儿的意思吧

514
00:23:00,350 --> 00:23:01,670
点儿意思

515
00:23:01,820 --> 00:23:03,500
然后里边儿什么template是吧

516
00:23:04,010 --> 00:23:04,460
是不是

517
00:23:14,210 --> 00:23:15,740
怎么是不对的

518
00:23:19,610 --> 00:23:20,060
对

519
00:23:20,060 --> 00:23:21,470
是template template

520
00:23:21,470 --> 00:23:25,280
然后里边儿有什么又是我们什么script是吧

521
00:23:26,230 --> 00:23:26,740
是啊

522
00:23:28,720 --> 00:23:31,570
Script是不是就是我们的什么script

523
00:23:31,930 --> 00:23:34,300
然后又是什么又是我们的style是吧

524
00:23:34,870 --> 00:23:35,710
是不是

525
00:23:35,710 --> 00:23:36,850
他是这么来的是不是

526
00:23:38,460 --> 00:23:38,940
我看到了

527
00:23:38,970 --> 00:23:39,510
我看到了

528
00:23:40,410 --> 00:23:41,340
他是这么来的是吧

529
00:23:41,910 --> 00:23:43,680
那么这么来的这就很有意思了

530
00:23:43,680 --> 00:23:44,220
什么意思呢

531
00:23:44,220 --> 00:23:44,850
同学们

532
00:23:45,930 --> 00:23:47,040
这儿这个东西

533
00:23:48,510 --> 00:23:50,790
我这个代码是直接可以在我这个

534
00:23:50,790 --> 00:23:54,330
我写的这些代码是直接可以在浏览器里面运行吗

535
00:23:54,840 --> 00:23:55,350
可以吗

536
00:23:57,310 --> 00:23:58,690
浏览器认识这个东西吗

537
00:24:01,840 --> 00:24:02,830
认识这个东西吗

538
00:24:03,880 --> 00:24:04,390
认识吗

539
00:24:04,720 --> 00:24:07,300
认识你这个will very temp是个什么东西吗

540
00:24:07,720 --> 00:24:08,710
是不是都不知道

541
00:24:09,790 --> 00:24:10,210
对对

542
00:24:10,210 --> 00:24:10,810
编译

543
00:24:11,050 --> 00:24:12,430
他得把它编译成什么样

544
00:24:12,700 --> 00:24:17,920
CS这个东西它得把它拆分成什么给DOS待拆到style里面去是吧

545
00:24:18,550 --> 00:24:20,830
这个东西浏览器只认识什么

546
00:24:20,860 --> 00:24:22,660
浏览器只认识HTML

547
00:24:22,720 --> 00:24:24,790
是不是只认识HTML

548
00:24:25,690 --> 00:24:27,250
还有什么CS是吧

549
00:24:27,250 --> 00:24:28,360
还有什么JS

550
00:24:28,540 --> 00:24:30,700
那么JS谁来做JS

551
00:24:30,700 --> 00:24:32,860
什么JS这块儿是什么

552
00:24:32,920 --> 00:24:35,080
这块就是我们的CS是吧

553
00:24:35,110 --> 00:24:36,310
他拆到CS里面

554
00:24:36,340 --> 00:24:37,360
让CS来处理

555
00:24:37,840 --> 00:24:39,700
这里面可能有一些高级的什么C

556
00:24:40,630 --> 00:24:41,830
萨S

557
00:24:41,830 --> 00:24:42,550
S这些东西

558
00:24:42,880 --> 00:24:43,660
这些东西呢

559
00:24:43,660 --> 00:24:45,940
是通过什么APEC打包来处理是吧

560
00:24:46,000 --> 00:24:46,660
这个不用说

561
00:24:46,930 --> 00:24:47,800
那么这里面呢

562
00:24:47,890 --> 00:24:50,110
也是我们平时写的就正常的JS是吧

563
00:24:50,320 --> 00:24:54,310
正常的JS可能就是你有一些什么S6的兼容性问题是吧

564
00:24:54,880 --> 00:24:57,520
那这些东西也通过什么loader背包来打包

565
00:24:57,610 --> 00:24:59,500
那这个东西怎么办

566
00:24:59,500 --> 00:25:00,220
这个东西怎么办

567
00:25:00,860 --> 00:25:02,570
这个东西它认识吗

568
00:25:03,160 --> 00:25:03,970
浏览器认识吗

569
00:25:04,390 --> 00:25:05,440
只认识你这个标签儿

570
00:25:05,440 --> 00:25:07,060
但是你这些各种什么指令

571
00:25:07,060 --> 00:25:07,990
威刚if

572
00:25:08,050 --> 00:25:08,860
We杠夫

573
00:25:08,860 --> 00:25:09,790
这些东西他认识吗

574
00:25:09,880 --> 00:25:10,720
是不是就不认识了

575
00:25:10,720 --> 00:25:11,470
他就需要怎么样

576
00:25:11,980 --> 00:25:12,730
需要打包

577
00:25:12,910 --> 00:25:13,570
打包什么

578
00:25:13,600 --> 00:25:14,530
打包成JS

579
00:25:14,560 --> 00:25:15,490
编译程JS

580
00:25:15,640 --> 00:25:20,710
所以说这个东西把template编译程JS的过程叫做编译时

581
00:25:21,710 --> 00:25:26,150
是不是把template编译程JS的过程叫做编译词这一步明白

582
00:25:29,170 --> 00:25:29,770
明白吧

583
00:25:31,280 --> 00:25:32,450
那现在有个问题

584
00:25:33,080 --> 00:25:35,390
我们平时开发的时候是不是都用的外派课

585
00:25:35,540 --> 00:25:37,520
同学们开发的时候

586
00:25:37,520 --> 00:25:42,830
包括你集成的那个叫你集成的各种什么VCVE集成的工程化是吧

587
00:25:43,710 --> 00:25:44,250
是不是

588
00:25:45,200 --> 00:25:46,760
工程化它都是这些东西

589
00:25:46,970 --> 00:25:48,440
那么他都是在哪儿打包的

590
00:25:48,650 --> 00:25:50,270
都比如说很简单的例子

591
00:25:50,330 --> 00:25:51,080
很简单一个过程

592
00:25:51,080 --> 00:25:52,310
这是我们平时开发写的代码

593
00:25:52,310 --> 00:25:55,130
是开发写代码会在你上线之前

594
00:25:55,130 --> 00:25:57,680
是不是就会通过工程化把它打包成什么

595
00:25:57,770 --> 00:25:58,760
或者说你的Jack

596
00:25:58,760 --> 00:26:00,590
或者说你的发布工具

597
00:26:00,800 --> 00:26:01,760
就是把它打包什么

598
00:26:01,760 --> 00:26:02,840
打包成JS是吧

599
00:26:02,870 --> 00:26:04,280
这些东西就打包成JS是吧

600
00:26:04,490 --> 00:26:05,750
那么打包成JS之后

601
00:26:05,750 --> 00:26:06,560
然后发不了什么

602
00:26:06,680 --> 00:26:08,540
你的静态资源里边儿是吧

603
00:26:08,540 --> 00:26:09,770
静态资源服务器

604
00:26:09,860 --> 00:26:11,780
或者说你的打卡你的容器

605
00:26:11,780 --> 00:26:13,130
或者说你的机器里面是不是

606
00:26:13,670 --> 00:26:15,770
然后然后去做什么

607
00:26:15,980 --> 00:26:17,870
然后我浏览器去访问的时候

608
00:26:17,900 --> 00:26:18,950
LA这个资源啦

609
00:26:18,950 --> 00:26:20,930
这个资源然后拉回来就已经是什么

610
00:26:21,380 --> 00:26:22,130
就是JS了

611
00:26:22,160 --> 00:26:24,140
就是我的JS在上线之前

612
00:26:24,620 --> 00:26:26,990
是不是我的template在上线之前

613
00:26:26,990 --> 00:26:29,690
这一块儿template在上线之前是不是就已经被打包好了

614
00:26:29,690 --> 00:26:30,470
打包惩戒是吧

615
00:26:30,770 --> 00:26:33,860
是不是是不是这块明白吗

616
00:26:34,930 --> 00:26:35,950
是吧

617
00:26:37,820 --> 00:26:40,190
所以说这块儿有一个问题是什么问题

618
00:26:40,280 --> 00:26:42,050
就是说有一个编译

619
00:26:42,200 --> 00:26:43,850
编译又分为几种编译

620
00:26:47,150 --> 00:26:48,770
编译代码又分为几种编译

621
00:26:48,860 --> 00:26:50,360
第一种是静态编译

622
00:26:53,440 --> 00:26:55,300
其实也就是什么离线编译

623
00:26:55,300 --> 00:26:56,980
你可以分分为离线编译

624
00:26:57,160 --> 00:26:58,690
有什么在线编译

625
00:27:03,680 --> 00:27:05,480
蠡县变异和在线变异

626
00:27:06,650 --> 00:27:07,970
什么叫做离线变异

627
00:27:08,580 --> 00:27:10,170
离下面就是我刚刚给大家说的

628
00:27:10,200 --> 00:27:11,430
在上线之前

629
00:27:15,460 --> 00:27:16,450
上线之前变异

630
00:27:16,450 --> 00:27:18,040
是不是上线之前变异

631
00:27:19,100 --> 00:27:20,360
那我现在问大家

632
00:27:21,510 --> 00:27:23,850
那我这个东西我会变异吗

633
00:27:23,970 --> 00:27:25,200
你看我这这头代码

634
00:27:25,440 --> 00:27:27,750
我直接引的AGS

635
00:27:28,140 --> 00:27:29,160
我直接拿到这儿来

636
00:27:30,470 --> 00:27:32,690
如果这个东西会会提前离线编译吗

637
00:27:32,690 --> 00:27:34,880
我提前会把这个H铁明儿再编一下吗

638
00:27:34,970 --> 00:27:35,390
会吗

639
00:27:35,780 --> 00:27:36,170
会吗

640
00:27:36,770 --> 00:27:37,730
我这个要运行

641
00:27:38,320 --> 00:27:38,740
会吗

642
00:27:39,190 --> 00:27:40,000
是不会啦

643
00:27:40,820 --> 00:27:41,300
是不是

644
00:27:45,000 --> 00:27:47,580
你这个n PM run build就是离线编译

645
00:27:48,180 --> 00:27:50,550
一个n PM run build就是在离线编译

646
00:27:51,030 --> 00:27:52,980
N PM run build就是离线编译

647
00:27:53,460 --> 00:27:54,990
在线编译我现在还没说

648
00:27:56,610 --> 00:27:58,980
在线建议我现在还没说MCL的

649
00:27:58,980 --> 00:27:59,820
就是离线编译

650
00:27:59,820 --> 00:28:00,270
知道吧

651
00:28:00,360 --> 00:28:03,210
打包he MP EL的就是离线变异

652
00:28:03,750 --> 00:28:06,780
你打包你在线上不也是m MP m one Bill的吗

653
00:28:10,220 --> 00:28:11,540
那什么时候是在线编译

654
00:28:11,600 --> 00:28:14,420
同学们你看我现在这个东西是不是直接这么写的

655
00:28:14,810 --> 00:28:16,220
直接写的这个模板是不是

656
00:28:16,490 --> 00:28:18,830
你看我这这是不是直接写的这个模板是不是

657
00:28:19,280 --> 00:28:20,840
是不是直接写这个模板

658
00:28:20,960 --> 00:28:22,400
我这个模板没有经过变异

659
00:28:22,400 --> 00:28:25,400
没有经过变异让我起一个http server

660
00:28:26,970 --> 00:28:28,830
我直接起一个HTTP搜

661
00:28:32,260 --> 00:28:35,470
看同学们是不是可以运行是不是

662
00:28:37,080 --> 00:28:41,010
你看我直接我直接你看我这儿没有没有编译

663
00:28:41,190 --> 00:28:42,270
我直接起了个server

664
00:28:42,450 --> 00:28:43,470
直接访问这个东西

665
00:28:43,470 --> 00:28:47,340
这个页面是没有经过编译过那么没没有编译过这个页面

666
00:28:48,360 --> 00:28:49,650
怎么还是可以展示了

667
00:28:49,650 --> 00:28:54,360
它也没有也没有就是说什么什么其他的那种指令这些东西呢

668
00:28:54,690 --> 00:28:55,890
这就是我的在线变异

669
00:28:55,890 --> 00:28:57,030
什么叫在线变异

670
00:28:57,660 --> 00:28:59,490
就是在我的运行的时候

671
00:28:59,640 --> 00:29:01,380
在线就是离线

672
00:29:01,380 --> 00:29:04,650
这个离线和在线这个概念在什么时候是什么概念

673
00:29:05,040 --> 00:29:07,800
就是真正在浏览器运行的时候

674
00:29:08,190 --> 00:29:12,780
这个离线盒盖在线这个概念是在浏览器运行这个概念

675
00:29:13,320 --> 00:29:14,310
浏览器运行

676
00:29:16,800 --> 00:29:21,930
离线和在线的概念是在在于离浏览器运行浏览器你正在运行的过程

677
00:29:21,930 --> 00:29:22,770
这个过程叫什么

678
00:29:22,800 --> 00:29:24,720
这在线的过程是吧

679
00:29:24,930 --> 00:29:26,490
我正在运行就是在线

680
00:29:26,640 --> 00:29:28,590
浏览器正在运行的过程叫做在线

681
00:29:29,180 --> 00:29:30,980
你在浏览器运行之前

682
00:29:31,370 --> 00:29:33,470
全部就把它打包好

683
00:29:33,470 --> 00:29:34,400
然后发给浏览器

684
00:29:34,400 --> 00:29:35,480
这个过程要离线

685
00:29:35,840 --> 00:29:37,430
懂不懂听明白

686
00:29:40,150 --> 00:29:41,380
同学们明白

687
00:29:43,210 --> 00:29:44,080
这个你明白吧

688
00:29:44,260 --> 00:29:46,810
那所以说现在这个在线编译

689
00:29:47,840 --> 00:29:50,330
对工程化就是就是离线编译

690
00:29:50,390 --> 00:29:52,100
对那什么在线

691
00:29:52,100 --> 00:29:52,940
在线是什么情况

692
00:29:52,940 --> 00:29:54,290
就是我这种情况就在线

693
00:29:55,140 --> 00:29:55,860
什么意思

694
00:29:55,920 --> 00:29:56,820
你看我这种情况

695
00:29:56,820 --> 00:29:58,440
我这个代码是直接拿过来了是不是

696
00:29:59,190 --> 00:30:00,690
那他里边儿什么时候变异的

697
00:30:00,750 --> 00:30:02,010
就是我运行的时候

698
00:30:02,490 --> 00:30:03,540
我浏览器运行的时候

699
00:30:03,540 --> 00:30:04,710
同学们你看我在这儿

700
00:30:04,740 --> 00:30:05,250
说实话

701
00:30:05,250 --> 00:30:06,510
我浏览器运行的时候

702
00:30:06,990 --> 00:30:09,090
它会在我这儿去拿到一些个什么

703
00:30:09,090 --> 00:30:11,640
你看他会拿到我这个LAPP

704
00:30:11,640 --> 00:30:13,590
他会拿到我这个NAPP里面的东西

705
00:30:13,590 --> 00:30:14,820
真正运行的时候

706
00:30:15,340 --> 00:30:16,960
在运行在浏览器里边的时候

707
00:30:17,110 --> 00:30:18,850
他才会去拿到我这个L里边儿

708
00:30:18,880 --> 00:30:20,830
我这个VL里边这个APP

709
00:30:21,040 --> 00:30:22,450
然后拿到这里边这个东西

710
00:30:23,860 --> 00:30:25,810
他会判断我这里边是否有字符串

711
00:30:26,440 --> 00:30:27,400
如果你在里边儿

712
00:30:27,400 --> 00:30:29,440
当然这儿要判断没有render这个东西

713
00:30:29,860 --> 00:30:31,180
在线离线面积在里边儿

714
00:30:31,180 --> 00:30:33,340
它会把这个render给给给给插进来

715
00:30:33,340 --> 00:30:33,670
知道吧

716
00:30:34,090 --> 00:30:35,650
蠡县面积它会把这个render插进来

717
00:30:35,950 --> 00:30:37,510
现在这个东西它没有render

718
00:30:37,570 --> 00:30:38,980
所以说他会在线变异

719
00:30:39,310 --> 00:30:41,050
所以说他这儿需要做一个什么

720
00:30:41,580 --> 00:30:44,760
需要去提前在运行的时候把这些东西编译了

721
00:30:45,120 --> 00:30:46,440
运行的时候把这些东西变异了

722
00:30:46,440 --> 00:30:47,280
是怎么变的

723
00:30:47,460 --> 00:30:48,270
就是在什么

724
00:30:51,130 --> 00:30:53,260
在线编译和离线编译都是用的虚拟动

725
00:30:54,060 --> 00:30:54,570
知道吧

726
00:31:00,230 --> 00:31:00,650
对

727
00:31:00,680 --> 00:31:03,500
你们说的这个对在线编译和离线遍地都是

728
00:31:03,800 --> 00:31:04,820
都是用的虚拟号码

729
00:31:05,330 --> 00:31:06,020
都是虚拟

730
00:31:06,050 --> 00:31:07,490
都是微微弱的

731
00:31:07,610 --> 00:31:08,390
先说同学们

732
00:31:08,840 --> 00:31:12,140
我给大家说一下这个东西最后都会编译成什么样子

733
00:31:12,140 --> 00:31:14,450
我们先说他不管离线编译和在线编译

734
00:31:14,450 --> 00:31:15,710
他都会变异成什么样子

735
00:31:16,800 --> 00:31:18,030
他们都会变成什么样子

736
00:31:18,030 --> 00:31:19,050
都会变成这个样子

737
00:31:19,920 --> 00:31:21,120
都会变成这个样子

738
00:31:22,860 --> 00:31:24,090
WE2都会变成这个样子

739
00:31:24,180 --> 00:31:24,720
知道吧

740
00:31:25,170 --> 00:31:26,760
所有代码都会变成这个样子

741
00:31:27,600 --> 00:31:28,110
看到吗

742
00:31:28,680 --> 00:31:29,850
都变成这种样子

743
00:31:31,440 --> 00:31:33,630
不管是离线变异还是在还是在现变异

744
00:31:33,660 --> 00:31:34,770
都会变成这个样子

745
00:31:35,190 --> 00:31:38,670
这个东西一只要一构建这个render函数

746
00:31:38,670 --> 00:31:40,530
一执行它就会生成微漏的

747
00:31:41,260 --> 00:31:46,090
会生成微露的这个下划线杠C就是生成VIVO的API

748
00:31:46,640 --> 00:31:49,940
是不是这个下划线杠C就是生成VIVO的API

749
00:31:50,540 --> 00:31:51,230
大家看一下吧

750
00:31:57,660 --> 00:31:58,260
你看见了吗

751
00:31:58,350 --> 00:31:59,160
这个下方一杠C

752
00:31:59,160 --> 00:31:59,970
同学们看见了吗

753
00:32:00,270 --> 00:32:04,830
这就是一个什么create element就是去创建VIVO的这个APK的吗

754
00:32:06,280 --> 00:32:07,210
现在明白吗

755
00:32:07,690 --> 00:32:10,330
所有不管是离线编译和在线编译

756
00:32:10,330 --> 00:32:11,680
他们的产物是一样的

757
00:32:12,560 --> 00:32:14,000
他们的产物都是这个东西

758
00:32:14,000 --> 00:32:14,660
都是这种

759
00:32:14,660 --> 00:32:15,530
都是这种东西

760
00:32:16,130 --> 00:32:17,120
都是这种东西

761
00:32:17,850 --> 00:32:19,140
产物都是这种东西

762
00:32:19,650 --> 00:32:22,260
然后这个产物只要一运行这个render

763
00:32:22,410 --> 00:32:23,460
只要一运行

764
00:32:23,460 --> 00:32:25,770
都会生成什么render运行

765
00:32:27,320 --> 00:32:28,160
都会生成什么

766
00:32:28,340 --> 00:32:29,390
都会生成什么

767
00:32:29,420 --> 00:32:31,070
微露的都会生成微漏的

768
00:32:32,350 --> 00:32:33,700
都是都是虚拟动

769
00:32:33,820 --> 00:32:34,150
知道吧

770
00:32:34,150 --> 00:32:34,960
都是虚拟动

771
00:32:35,230 --> 00:32:37,870
所以说这一步这一步这一步

772
00:32:38,420 --> 00:32:39,860
这里边儿为什么用位置

773
00:32:39,950 --> 00:32:40,550
还有这个状态

774
00:32:40,550 --> 00:32:41,900
你先不用管不用管

775
00:32:44,410 --> 00:32:45,970
都是编译成这个东西

776
00:32:46,000 --> 00:32:48,610
然后这个东西都是变成这个函数

777
00:32:48,700 --> 00:32:50,140
不是直接编译程序

778
00:32:50,140 --> 00:32:50,530
你知道吗

779
00:32:50,980 --> 00:32:52,150
都是变异成这个函数

780
00:32:52,150 --> 00:32:55,330
这个函数在运行的时候生成虚拟动明白吗

781
00:32:56,840 --> 00:32:57,440
明白吗

782
00:32:59,240 --> 00:33:00,620
这个函数运行的时候

783
00:33:00,740 --> 00:33:01,340
那这个什么

784
00:33:01,340 --> 00:33:02,630
这个函数什么时候运行

785
00:33:02,810 --> 00:33:03,980
他现在不会运行

786
00:33:04,560 --> 00:33:05,490
他什么时候运行

787
00:33:07,180 --> 00:33:09,460
真正在你你初始化了之后

788
00:33:09,580 --> 00:33:10,720
他在里边才运行

789
00:33:11,830 --> 00:33:12,370
知道吧

790
00:33:12,460 --> 00:33:14,170
对被调用的时候才运行

791
00:33:14,350 --> 00:33:15,190
那什么时候被调用

792
00:33:15,190 --> 00:33:17,260
在你又没有你实力的时候在被调用

793
00:33:18,280 --> 00:33:19,600
所以说我们在这儿一步

794
00:33:19,690 --> 00:33:21,640
如果你在这儿加一个render函数

795
00:33:21,670 --> 00:33:22,450
它也是认的

796
00:33:22,450 --> 00:33:22,870
知道吧

797
00:33:23,410 --> 00:33:24,460
你在这儿加一个render函数

798
00:33:24,460 --> 00:33:25,330
它也是认的

799
00:33:25,390 --> 00:33:27,250
懂不懂也是认的

800
00:33:27,250 --> 00:33:28,450
在这儿加一个render函数

801
00:33:29,130 --> 00:33:30,510
这你返回一个微漏的

802
00:33:31,520 --> 00:33:32,480
下划线杠C

803
00:33:32,480 --> 00:33:36,380
但是这儿要要你这儿要去要去拿到这些这些方法

804
00:33:36,680 --> 00:33:39,830
要拿到这些各种这些东西方法在这里面他也是认的

805
00:33:39,860 --> 00:33:41,150
懂不懂也是认的

806
00:33:41,240 --> 00:33:44,690
那么他如果认证这些东西就它就不会不会要了

807
00:33:44,720 --> 00:33:46,880
就直接把这里边的所有东西全部给删除了

808
00:33:47,360 --> 00:33:49,610
懂不懂他只需要全局

809
00:33:49,610 --> 00:33:50,960
是不是只需要一个render

810
00:33:51,650 --> 00:33:52,220
是不是啊

811
00:33:52,860 --> 00:33:54,450
全局是不是只需要一个人点

812
00:33:56,320 --> 00:33:56,920
明白吗

813
00:33:57,710 --> 00:33:59,240
就是你只需要一个页面

814
00:33:59,480 --> 00:34:01,640
你全局指挥展示一样的一个东西

815
00:34:02,600 --> 00:34:03,770
你不可能这儿也有

816
00:34:03,800 --> 00:34:04,220
这儿也有

817
00:34:04,220 --> 00:34:04,910
那我选择哪个

818
00:34:05,360 --> 00:34:07,580
所以说你这儿如果有了它这儿就不会要了

819
00:34:07,610 --> 00:34:08,690
一会给大家看源码

820
00:34:10,370 --> 00:34:11,480
所以说这个render

821
00:34:11,780 --> 00:34:13,430
但是你这儿如果没有这个render

822
00:34:14,440 --> 00:34:15,580
他就会去接触什么

823
00:34:15,580 --> 00:34:16,870
如果是离线编译

824
00:34:16,930 --> 00:34:18,100
如果是离线编译

825
00:34:18,430 --> 00:34:20,440
这个代码是不是已经编译成JS

826
00:34:20,560 --> 00:34:22,960
你看离线编译这坨代码是不是已经变成JS了

827
00:34:23,080 --> 00:34:26,680
他直接把这坨代码拿来拼到你那里边儿去就行了

828
00:34:27,010 --> 00:34:27,490
知道吧

829
00:34:27,760 --> 00:34:28,840
如果是离线编译

830
00:34:28,990 --> 00:34:30,400
它直接把这条代码拿过来

831
00:34:30,400 --> 00:34:33,490
拼到你这个这个下划线刚扔上面就行了

832
00:34:34,120 --> 00:34:34,840
懂不懂

833
00:34:35,020 --> 00:34:35,770
如果是离线的

834
00:34:35,770 --> 00:34:36,880
它就这么这么玩儿

835
00:34:42,380 --> 00:34:43,070
大家看

836
00:34:48,160 --> 00:34:49,210
这个是

837
00:34:51,620 --> 00:34:52,010
第一位

838
00:34:52,010 --> 00:34:53,570
Server给大家看这个

839
00:34:55,480 --> 00:34:56,710
初始化的时候

840
00:34:58,440 --> 00:34:59,520
初始化

841
00:35:06,100 --> 00:35:07,510
说实话看见了吗

842
00:35:07,900 --> 00:35:08,530
看见了吗

843
00:35:09,130 --> 00:35:10,660
如果是离线面议

844
00:35:10,870 --> 00:35:12,610
他直接会把你这个compare

845
00:35:12,610 --> 00:35:14,620
你看这是我们compare出来的那个render

846
00:35:15,070 --> 00:35:18,460
这是complete compare compare compare出来一个render

847
00:35:18,760 --> 00:35:23,860
然后拿直接拿到你这个compare出来这个render这个代码看到吗

848
00:35:24,840 --> 00:35:25,830
给大家看一下我们

849
00:35:26,400 --> 00:35:27,420
打包出来的这个东西吧

850
00:35:32,520 --> 00:35:33,690
先给大家看一下

851
00:35:33,720 --> 00:35:36,060
我们我先把这个先出钱过

852
00:35:36,060 --> 00:35:37,170
然后我们再回过头来

853
00:35:37,290 --> 00:35:38,490
不然你这儿一脸懵逼

854
00:35:39,330 --> 00:35:40,920
你看我们这儿挂的就是一个什么

855
00:35:40,950 --> 00:35:42,840
挂的就是你变异之后的这个render

856
00:35:43,140 --> 00:35:45,780
这个变异之后的这个render就在哪儿打哪儿编译出来的

857
00:35:45,780 --> 00:35:46,950
就在这边一出来看见吗

858
00:35:46,950 --> 00:35:47,850
这儿有问的函数

859
00:35:48,060 --> 00:35:49,020
就编译出来的这个

860
00:35:49,260 --> 00:35:51,270
然后直接拿到这儿来一拼接

861
00:35:51,930 --> 00:35:53,370
如果这儿没有

862
00:35:53,610 --> 00:35:54,390
如果这儿没有

863
00:35:54,390 --> 00:35:55,320
这是有的情况下

864
00:35:55,320 --> 00:35:56,850
同学们这是你有编译的

865
00:35:56,850 --> 00:35:57,060
这个

866
00:35:57,090 --> 00:35:58,260
有编译的这个东西

867
00:35:58,500 --> 00:35:59,790
如果没有的情况

868
00:36:00,180 --> 00:36:01,830
没有的情况他会就会走什么

869
00:36:02,100 --> 00:36:03,480
就会走在线编译

870
00:36:03,750 --> 00:36:06,570
知不知道没有的情况就会走在线编译

871
00:36:07,240 --> 00:36:08,500
什么叫在线编译

872
00:36:09,450 --> 00:36:10,410
什么叫在线编译

873
00:36:10,650 --> 00:36:12,900
就是说我在浏览器运行的时候

874
00:36:12,900 --> 00:36:15,510
通过JS边运行边去编译什么

875
00:36:15,840 --> 00:36:16,440
明白了吗

876
00:36:16,710 --> 00:36:18,570
就是我在正在我正在运行

877
00:36:18,630 --> 00:36:19,410
按理说

878
00:36:20,000 --> 00:36:22,250
按理说我如果离线编译

879
00:36:22,340 --> 00:36:23,540
已经编译好了render

880
00:36:23,600 --> 00:36:25,040
我直接拿过来执行就行了

881
00:36:25,220 --> 00:36:26,390
但是我现在没有这个render

882
00:36:26,390 --> 00:36:26,720
是啊

883
00:36:26,900 --> 00:36:28,190
我现在是不是没有这个render

884
00:36:28,250 --> 00:36:29,300
我只有这坨代码

885
00:36:29,420 --> 00:36:29,990
那怎么办

886
00:36:30,050 --> 00:36:31,970
我需要先把它编译成render

887
00:36:32,300 --> 00:36:34,700
是不是需要先把它编译成render

888
00:36:35,760 --> 00:36:37,080
是不是编译成这个东西

889
00:36:37,470 --> 00:36:40,380
在JS浏览器这先把它编译成这个东西

890
00:36:41,420 --> 00:36:42,020
没有啊

891
00:36:47,320 --> 00:36:49,270
所以说这一步它需要编译的这个东西

892
00:36:49,270 --> 00:36:51,130
就是一个什么在线编译

893
00:36:51,740 --> 00:36:52,430
在线变异

894
00:36:52,790 --> 00:36:54,590
那么在线变异就需要一个什么

895
00:36:54,620 --> 00:36:55,520
你怎么去编译

896
00:36:55,520 --> 00:36:57,290
怎么有一个编译的过程吗

897
00:36:57,560 --> 00:36:59,270
编译这个东西你就要分析代码吗

898
00:36:59,270 --> 00:37:00,350
是不是编译的过程

899
00:37:00,350 --> 00:37:01,340
你就分析代码是吧

900
00:37:01,610 --> 00:37:02,300
分析代码

901
00:37:02,360 --> 00:37:03,020
分析代码

902
00:37:03,020 --> 00:37:03,800
然后重新

903
00:37:04,560 --> 00:37:05,160
分析代码

904
00:37:05,160 --> 00:37:07,410
然后去做什么就是什么

905
00:37:07,440 --> 00:37:08,250
生成代码是吧

906
00:37:08,250 --> 00:37:09,420
生成render

907
00:37:09,570 --> 00:37:11,580
生成render代码是吧是吧

908
00:37:11,910 --> 00:37:13,290
分析代码生成的代码

909
00:37:13,820 --> 00:37:14,300
是吧

910
00:37:16,470 --> 00:37:17,280
会判断

911
00:37:18,090 --> 00:37:20,430
会判断这个一会儿给大家你跟你说

912
00:37:20,490 --> 00:37:23,460
所以你看这里边儿有深层的代码是吧

913
00:37:24,140 --> 00:37:27,020
那么生成的代码这个过程就会有一个什么过程

914
00:37:27,830 --> 00:37:29,690
他就需要去拿到我们的什么

915
00:37:30,340 --> 00:37:31,660
需要拿到我们的这个

916
00:37:32,440 --> 00:37:33,490
在线编译的过程是吧

917
00:37:33,640 --> 00:37:34,960
那这个过程就有一个什么

918
00:37:35,320 --> 00:37:37,360
就有一个编译库

919
00:37:37,720 --> 00:37:39,700
就是怎么去分析

920
00:37:39,730 --> 00:37:41,290
什么东西来分析代码

921
00:37:41,290 --> 00:37:42,490
什么东西来生成render代码

922
00:37:42,490 --> 00:37:44,500
这个东西就要编译编译库

923
00:37:46,660 --> 00:37:47,950
要编一库知道吧

924
00:37:48,560 --> 00:37:50,180
用JS用JS

925
00:37:50,180 --> 00:37:50,810
一会儿跟你说

926
00:37:50,810 --> 00:37:51,560
一会儿跟你说

927
00:37:51,800 --> 00:37:52,430
你不要着急

928
00:37:52,430 --> 00:37:53,570
你跟着我的思路来

929
00:37:54,190 --> 00:37:55,960
你们学代码永远是深度的

930
00:37:55,960 --> 00:37:58,270
规就是这样这样这样这样这样这样

931
00:37:58,570 --> 00:38:00,460
我们学代码应我们学

932
00:38:00,460 --> 00:38:01,510
学知识应该是什么

933
00:38:01,690 --> 00:38:03,310
学知识不应该是深度的

934
00:38:03,310 --> 00:38:04,930
同学们学知识

935
00:38:04,960 --> 00:38:06,460
就比如说这是我的一个知识点

936
00:38:06,700 --> 00:38:10,480
你们学知识可能是这个知识点本来是一个网状的知道吧

937
00:38:10,930 --> 00:38:14,200
知识点可能试一试是一个很深的知识

938
00:38:14,200 --> 00:38:15,790
这个东西是不是就是一个网站

939
00:38:16,500 --> 00:38:18,750
是不是知识这个东西是不是就是网状

940
00:38:19,050 --> 00:38:20,700
是不是他就是一个网状

941
00:38:20,700 --> 00:38:22,170
很很大的一个网是不是

942
00:38:22,800 --> 00:38:23,190
是吧

943
00:38:23,520 --> 00:38:25,440
这个东西是不是就是很大的一个网

944
00:38:26,120 --> 00:38:27,320
那你们学的时候

945
00:38:27,900 --> 00:38:28,890
就是一个什么过程

946
00:38:29,100 --> 00:38:32,700
你们学的时候就是一个直接这么本来就只知道这个

947
00:38:32,700 --> 00:38:33,750
你们直接就这么来了

948
00:38:34,200 --> 00:38:35,520
直接这么这么来了

949
00:38:36,550 --> 00:38:37,810
学知识应该这么来吗

950
00:38:37,810 --> 00:38:38,380
不应该这么来

951
00:38:38,380 --> 00:38:39,490
应该先把这儿学了

952
00:38:39,730 --> 00:38:41,230
然后再再学这一层

953
00:38:41,320 --> 00:38:42,820
这一层学了之后再学这一层

954
00:38:42,970 --> 00:38:44,380
这一层学了之后再学这一层

955
00:38:45,260 --> 00:38:45,740
这个样子

956
00:38:45,740 --> 00:38:48,590
你自然也能把这些往全部就给拉通啦

957
00:38:48,590 --> 00:38:49,010
明白

958
00:38:50,050 --> 00:38:51,730
而且还有一个过程

959
00:38:51,730 --> 00:38:54,490
就是这些东西你可能只学这一层

960
00:38:54,550 --> 00:38:56,560
你就可能自己思考出来这一层

961
00:38:57,200 --> 00:38:57,980
然后再去学一层

962
00:38:57,980 --> 00:38:59,360
你就可能学在下一层

963
00:38:59,420 --> 00:39:01,040
知道吧这个

964
00:39:01,680 --> 00:39:02,250
不一样

965
00:39:03,830 --> 00:39:04,640
所以说这一步

966
00:39:05,450 --> 00:39:06,320
所以这一步

967
00:39:06,350 --> 00:39:08,150
这一步我们知道了什么

968
00:39:08,240 --> 00:39:08,780
知道什么

969
00:39:08,810 --> 00:39:10,100
知道了我们的一个a

970
00:39:11,630 --> 00:39:15,020
需要把我们的这个template模板编辑什么GS

971
00:39:15,290 --> 00:39:16,820
他在线上才能运行是吧

972
00:39:17,030 --> 00:39:17,450
是吧

973
00:39:17,570 --> 00:39:18,620
他在线上才能运行

974
00:39:18,620 --> 00:39:20,270
因为山上没有这个点儿是吧

975
00:39:20,510 --> 00:39:23,720
那我现在就需要有一个东西来生成这个东西

976
00:39:23,840 --> 00:39:24,470
那怎么松懈

977
00:39:24,470 --> 00:39:25,250
就是编译库

978
00:39:25,340 --> 00:39:25,850
编译库

979
00:39:26,120 --> 00:39:27,260
那这个编译库

980
00:39:27,760 --> 00:39:28,390
同学们

981
00:39:28,480 --> 00:39:31,750
编译库这个东西在线上编译就知道

982
00:39:31,750 --> 00:39:33,160
在线变异明白吗

983
00:39:33,610 --> 00:39:34,900
就叫变异时

984
00:39:35,540 --> 00:39:36,290
明白这个东西了吗

985
00:39:36,290 --> 00:39:38,930
你看我们如果在离线编译

986
00:39:39,410 --> 00:39:40,430
我们如果是离线

987
00:39:40,430 --> 00:39:42,200
就是我们提前编译好了这些东西

988
00:39:42,500 --> 00:39:45,170
那我就我在运行的时候还需要这个东西吗

989
00:39:45,200 --> 00:39:46,520
还需要再去再去编译码

990
00:39:46,820 --> 00:39:47,810
是不是就不需要啦

991
00:39:47,930 --> 00:39:48,350
是不是

992
00:39:48,980 --> 00:39:50,630
是不是如果我提前编译好了

993
00:39:50,630 --> 00:39:52,850
是不是就不需要再再去在线变异了

994
00:39:53,550 --> 00:39:55,440
是不是我不需要在线编译了

995
00:39:55,440 --> 00:39:57,810
我还需要这个编译编译的这一份代码

996
00:39:58,490 --> 00:40:00,320
我的微那个compare v

997
00:40:00,320 --> 00:40:03,320
我的V1这个这个包里边儿还需要保存这份代码

998
00:40:03,530 --> 00:40:05,300
打包的时候还需要打包这份代码

999
00:40:05,300 --> 00:40:06,200
是不是就不需要了

1000
00:40:07,260 --> 00:40:08,520
但是如果

1001
00:40:09,620 --> 00:40:11,930
但是如果如果我们这块儿

1002
00:40:12,710 --> 00:40:14,570
如果我们这块儿这里边儿

1003
00:40:16,300 --> 00:40:18,820
你的代码没有这个render

1004
00:40:19,120 --> 00:40:20,020
没有这个render

1005
00:40:21,590 --> 00:40:25,910
那我们是不是就需要把这个render里边儿这个东西打包打到这里边来

1006
00:40:25,910 --> 00:40:27,590
把这个compiler里边儿打到这边来

1007
00:40:27,740 --> 00:40:29,510
他是需要去线上变异是不是

1008
00:40:30,400 --> 00:40:30,820
对

1009
00:40:32,460 --> 00:40:34,230
是不是这种情况

1010
00:40:34,620 --> 00:40:35,340
明白了吗

1011
00:40:36,140 --> 00:40:38,180
但是这块儿可能就会有的同学有问题

1012
00:40:38,180 --> 00:40:38,690
什么问题

1013
00:40:38,930 --> 00:40:40,190
就是你用了这个

1014
00:40:40,280 --> 00:40:41,300
你用了这个版本

1015
00:40:41,660 --> 00:40:42,860
但是用了这个版本呢

1016
00:40:43,040 --> 00:40:44,810
你又没有做离线变异

1017
00:40:45,640 --> 00:40:46,060
知道吧

1018
00:40:46,120 --> 00:40:47,470
你又没有做离线变异

1019
00:40:49,240 --> 00:40:52,390
明白莫你用了这个版本又没有做离线变异

1020
00:40:54,660 --> 00:40:56,490
有了这个版本还搞了一个在线一

1021
00:40:56,580 --> 00:40:58,290
但是这个版本里面有没有在线的扣

1022
00:40:58,290 --> 00:40:59,100
那就会报错

1023
00:40:59,720 --> 00:41:00,920
很多人说我们不会这么用

1024
00:41:01,010 --> 00:41:02,000
那举个很简单的例子

1025
00:41:02,180 --> 00:41:03,320
你们用VR的时候

1026
00:41:03,320 --> 00:41:04,910
是不是这儿有一个template这个属性

1027
00:41:05,520 --> 00:41:05,940
是不是

1028
00:41:07,230 --> 00:41:09,210
因为这是一个template这个属性

1029
00:41:10,840 --> 00:41:11,320
是啊

1030
00:41:17,020 --> 00:41:18,250
是不是有他们的这个属性

1031
00:41:18,700 --> 00:41:20,590
这个属性这儿是不是可以用个字符串

1032
00:41:21,730 --> 00:41:22,150
是的

1033
00:41:25,460 --> 00:41:26,630
咱们是不是可以字符串

1034
00:41:29,630 --> 00:41:31,220
我这狗狗

1035
00:41:31,340 --> 00:41:32,930
灰杠衣服

1036
00:41:34,840 --> 00:41:36,220
这儿搞一个name是

1037
00:41:36,580 --> 00:41:37,360
我是不是可以用

1038
00:41:37,360 --> 00:41:39,400
是不是那这种东西我问你

1039
00:41:40,140 --> 00:41:41,490
这个东西我会在线边

1040
00:41:41,490 --> 00:41:42,840
我会先离线变异吗

1041
00:41:43,020 --> 00:41:44,550
这个东西我在离线编译的时候

1042
00:41:44,550 --> 00:41:47,910
我知道这我知道你这个V这里边儿这一套代码

1043
00:41:48,180 --> 00:41:49,620
你这个对象里边儿这一坨代码

1044
00:41:49,620 --> 00:41:50,460
这个东西是什么

1045
00:41:50,520 --> 00:41:51,900
我知道吗

1046
00:41:51,900 --> 00:41:52,500
我知道吗

1047
00:41:52,650 --> 00:41:53,610
我是不知道

1048
00:41:54,430 --> 00:41:56,470
所以说这个东西需要在线建议知道吧

1049
00:41:56,470 --> 00:41:57,670
这个东西就需要在线变异了

1050
00:41:59,110 --> 00:41:59,680
懂了吧

1051
00:42:00,380 --> 00:42:01,940
那么现在再来看在线编译

1052
00:42:02,060 --> 00:42:03,020
既然我们说到这块儿

1053
00:42:03,020 --> 00:42:04,640
我们要说编译这块的东西了

1054
00:42:05,240 --> 00:42:07,190
主要这个东西就是这两块儿的区别

1055
00:42:08,080 --> 00:42:08,410
看到吗

1056
00:42:08,410 --> 00:42:09,520
这就是这两块的区别

1057
00:42:10,120 --> 00:42:11,290
就是这里面的代码

1058
00:42:11,290 --> 00:42:12,310
这一坨代码的区别

1059
00:42:12,610 --> 00:42:16,630
这一坨是卡梅尔家装time这儿只是状态这个区别

1060
00:42:16,780 --> 00:42:18,250
然后disc我们搞明白了

1061
00:42:18,250 --> 00:42:19,960
我们先把目录结构说完

1062
00:42:20,410 --> 00:42:21,580
第一次我们搞明白了

1063
00:42:21,610 --> 00:42:24,160
你看我们随便一个目录结构就能给你们聊这么多

1064
00:42:24,340 --> 00:42:24,820
知道吧

1065
00:42:25,120 --> 00:42:25,720
不知道

1066
00:42:30,340 --> 00:42:31,840
这个不知道

1067
00:42:31,900 --> 00:42:33,460
我这儿说的这个不知道是什么

1068
00:42:34,630 --> 00:42:38,170
你们说你们没用过这个template是吗

1069
00:42:38,650 --> 00:42:40,000
你们下来用一下这个APP吧

1070
00:42:40,730 --> 00:42:41,690
没用过这个API呢

1071
00:42:41,690 --> 00:42:42,380
我就不说了

1072
00:42:46,260 --> 00:42:46,560
嗯

1073
00:42:49,180 --> 00:42:50,080
我们在这里边儿

1074
00:42:56,960 --> 00:42:58,370
然后我们这是disc是吧

1075
00:42:58,460 --> 00:42:59,600
这个example不用说了

1076
00:42:59,600 --> 00:43:00,710
Example就是我们什么

1077
00:43:00,770 --> 00:43:03,920
就是我们平时写的他的你的V怎么用的那个

1078
00:43:04,480 --> 00:43:05,080
案例是吧

1079
00:43:05,140 --> 00:43:05,650
Example

1080
00:43:05,830 --> 00:43:07,570
然后flow这个flow这个东西呢

1081
00:43:07,750 --> 00:43:11,260
就是一个什么代码检查检查就是一个检查器

1082
00:43:11,260 --> 00:43:12,010
这个也不用说了

1083
00:43:12,010 --> 00:43:13,090
现在就用TS了

1084
00:43:13,540 --> 00:43:14,980
这个你们也不用管了

1085
00:43:14,980 --> 00:43:16,000
Model这个模式了吧

1086
00:43:16,060 --> 00:43:17,050
这个打包的

1087
00:43:17,260 --> 00:43:18,910
然后package这个玩意儿

1088
00:43:19,090 --> 00:43:19,960
这个里边的包呢

1089
00:43:19,960 --> 00:43:21,100
是用来这个玩意儿

1090
00:43:21,100 --> 00:43:21,940
这个里边的包呢

1091
00:43:22,150 --> 00:43:23,350
是用来打出来做什么呢

1092
00:43:23,680 --> 00:43:25,300
用来打出来第三方的包

1093
00:43:25,330 --> 00:43:27,760
第三方用什么叫第三方用举个例子

1094
00:43:29,140 --> 00:43:30,610
我们的very loader

1095
00:43:31,360 --> 00:43:33,790
We loader这个东西是we loader

1096
00:43:35,450 --> 00:43:36,860
这个东西是谁来集成的

1097
00:43:37,040 --> 00:43:38,390
是不是外派克莱集成的

1098
00:43:39,050 --> 00:43:41,570
是不是那么外派来集成的这个东西

1099
00:43:42,170 --> 00:43:45,140
你说我这个东西是外派的一个插件儿

1100
00:43:45,320 --> 00:43:46,370
外派的一个loader

1101
00:43:46,550 --> 00:43:47,990
我的微会管这个东西吗

1102
00:43:47,990 --> 00:43:49,550
我的微是不会管这个东西的

1103
00:43:50,320 --> 00:43:52,390
我的V是不会提供VE lo的

1104
00:43:52,540 --> 00:43:53,860
那我唯一提供的是什么

1105
00:43:54,070 --> 00:43:57,910
提供的是我具体这个load里边怎么他采取的这个语法规则

1106
00:43:57,910 --> 00:43:59,140
怎么打包的这个代码

1107
00:43:59,140 --> 00:44:00,760
就是我们为你提供了什么

1108
00:44:01,120 --> 00:44:05,050
提供的是分析代码和生成render这个代码的这个过程

1109
00:44:05,600 --> 00:44:08,840
是不是loader这个东西是外派自己实现的

1110
00:44:09,750 --> 00:44:12,060
所以说这里边也需要去暴露出来一个包

1111
00:44:12,120 --> 00:44:12,660
什么包

1112
00:44:12,720 --> 00:44:16,200
就是说我们这个需要抛出去离线编译的这个东西

1113
00:44:16,530 --> 00:44:18,120
是不是离线编译的这个

1114
00:44:18,120 --> 00:44:20,640
这个编译的代码应该怎么去编译的这个包

1115
00:44:21,240 --> 00:44:22,890
是不是这个你看有个template compare

1116
00:44:23,220 --> 00:44:26,490
当然这里边还有什么server服务端渲染这些东西

1117
00:44:26,490 --> 00:44:27,300
这不用说了

1118
00:44:27,570 --> 00:44:28,980
然后又是什么script

1119
00:44:28,980 --> 00:44:30,360
就是我们打包的脚本

1120
00:44:30,420 --> 00:44:31,590
同学们打包的脚本儿

1121
00:44:31,590 --> 00:44:32,310
这个打包的脚本

1122
00:44:32,310 --> 00:44:32,850
这个你看

1123
00:44:32,850 --> 00:44:34,320
我们在这里边给大家看看

1124
00:44:34,320 --> 00:44:35,220
这里面打包的脚本

1125
00:44:35,220 --> 00:44:37,050
就是我们各种什么你看

1126
00:44:37,580 --> 00:44:38,360
Runtime only

1127
00:44:38,360 --> 00:44:39,710
就是只有runtime的时候

1128
00:44:39,890 --> 00:44:41,270
还有runtime加compiler的时候

1129
00:44:41,270 --> 00:44:42,740
是不是我们就回到这边来了

1130
00:44:42,770 --> 00:44:43,070
是吧

1131
00:44:43,280 --> 00:44:44,780
就是打包的脚本怎么去打

1132
00:44:44,840 --> 00:44:48,290
怎么去打我们这个包怎么生成我们的d ist是吧

1133
00:44:49,450 --> 00:44:52,630
然后还有一个就是什么S2C233

1134
00:44:52,720 --> 00:44:55,390
然后就什么test test这个测试文件嘛

1135
00:44:55,660 --> 00:44:59,140
然后这个type就是一些也是一些什么

1136
00:44:59,140 --> 00:45:01,780
就是那个TS的一些东西嘛

1137
00:45:01,780 --> 00:45:02,050
是吧

1138
00:45:02,140 --> 00:45:02,710
就不用说了

1139
00:45:03,540 --> 00:45:04,560
的一些type

1140
00:45:04,650 --> 00:45:09,750
然后最主要核心的就是什么S2CS2S2C核心的就是AC

1141
00:45:09,780 --> 00:45:11,010
知道吧

1142
00:45:11,010 --> 00:45:14,310
S2C就是我们整个微代码Wei代码核心

1143
00:45:17,600 --> 00:45:18,290
核心的东西

1144
00:45:20,810 --> 00:45:21,710
核心的东西

1145
00:45:23,660 --> 00:45:24,380
甜心

1146
00:45:26,610 --> 00:45:28,200
核心的东西就在这里边儿呢

1147
00:45:28,200 --> 00:45:30,270
我们再来看HRC里边的东西

1148
00:45:30,270 --> 00:45:30,630
A3C

1149
00:45:30,630 --> 00:45:32,940
第一个卡梅尔不用说了

1150
00:45:33,510 --> 00:45:34,650
看来做什么

1151
00:45:34,740 --> 00:45:35,700
就是我们编译

1152
00:45:35,700 --> 00:45:36,750
是不是就编译

1153
00:45:37,050 --> 00:45:39,810
是不是就编译编译内核代码扣

1154
00:45:40,300 --> 00:45:41,020
Cos做什么

1155
00:45:41,170 --> 00:45:43,390
Cost同学们cos什么

1156
00:45:43,540 --> 00:45:44,890
Cos提供什么

1157
00:45:44,950 --> 00:45:46,240
这套东西可以吗

1158
00:45:46,540 --> 00:45:48,160
Call就是提供这一套东西的

1159
00:45:48,160 --> 00:45:49,690
危运行时的这一套东西

1160
00:45:49,840 --> 00:45:53,080
明白危运行时全是扣来提供

1161
00:45:54,560 --> 00:45:55,130
是不是啊

1162
00:45:55,800 --> 00:45:57,090
怎么监听数据

1163
00:45:57,180 --> 00:45:58,350
双向数据绑定

1164
00:45:58,350 --> 00:45:59,160
微露的

1165
00:45:59,160 --> 00:46:01,230
这些东西全是他来提供是不是

1166
00:46:02,220 --> 00:46:04,140
然后喷喷的这个东西是什么

1167
00:46:04,170 --> 00:46:05,880
就是不同平台的一些什么

1168
00:46:06,800 --> 00:46:08,480
不同平台的一个一个处理

1169
00:46:09,140 --> 00:46:09,860
这个变异呢

1170
00:46:09,860 --> 00:46:13,970
就是我们会针对一些不同平台的一个一个入口来做一些处理

1171
00:46:14,360 --> 00:46:15,590
这个一会儿给你们说

1172
00:46:15,770 --> 00:46:20,420
他对不同的平台会做一些单独的一些一些挂载的一些处理

1173
00:46:20,750 --> 00:46:21,350
所以在这里边

1174
00:46:21,350 --> 00:46:23,210
比如说我们对不同平台

1175
00:46:23,210 --> 00:46:24,470
它会挂在一些render

1176
00:46:24,620 --> 00:46:27,380
单独去做一些一些一些模板的

1177
00:46:27,380 --> 00:46:27,800
说实话

1178
00:46:27,800 --> 00:46:29,810
你看这就是我们的在线编译

1179
00:46:29,810 --> 00:46:30,890
同学们看见了吗

1180
00:46:31,040 --> 00:46:32,630
这就是我们所谓的在线编译的

1181
00:46:33,150 --> 00:46:34,050
生成render

1182
00:46:34,230 --> 00:46:35,280
如果你没有

1183
00:46:35,310 --> 00:46:35,910
这是没有

1184
00:46:35,910 --> 00:46:37,740
你看可以判断你这个temperature

1185
00:46:38,590 --> 00:46:39,730
你看他这儿

1186
00:46:39,730 --> 00:46:41,170
我给大家稍微看一下这里边儿

1187
00:46:42,510 --> 00:46:44,160
这是你构建V的时候是吧

1188
00:46:44,400 --> 00:46:45,540
构建危机的时候

1189
00:46:45,870 --> 00:46:47,730
构建V执行monkey的

1190
00:46:47,790 --> 00:46:48,870
执行MT的时候

1191
00:46:49,290 --> 00:46:50,070
它会执行什么

1192
00:46:50,100 --> 00:46:51,090
首先执行什么

1193
00:46:51,330 --> 00:46:52,470
会拿到你这个里边儿

1194
00:46:52,470 --> 00:46:53,820
Option里边儿有个render

1195
00:46:53,850 --> 00:46:54,960
会判断是否render

1196
00:46:55,320 --> 00:46:56,430
如果没有render

1197
00:46:57,010 --> 00:46:59,830
她直接走什么就要走编译了吗

1198
00:46:59,830 --> 00:47:01,360
这就在线编译是不是

1199
00:47:01,600 --> 00:47:04,240
如果有render直接就挂了是吧

1200
00:47:04,540 --> 00:47:05,050
就走

1201
00:47:05,260 --> 00:47:07,150
因为有render它里边儿走的

1202
00:47:07,150 --> 00:47:08,770
那时候那里边就有render嘛

1203
00:47:08,920 --> 00:47:09,160
是吧

1204
00:47:09,160 --> 00:47:10,090
所以说没有认证

1205
00:47:10,090 --> 00:47:12,880
你看这边就会走一些边一词的一些处理是吧

1206
00:47:13,030 --> 00:47:14,830
所以说这个这个东西就是一个什么处理

1207
00:47:15,100 --> 00:47:18,520
这些东西就是一个在浏览器端的一个挂载的一些处理

1208
00:47:18,640 --> 00:47:21,940
因为你在浏览器要去专门拿到这些HTML码

1209
00:47:22,880 --> 00:47:24,080
就可能你这么写

1210
00:47:24,080 --> 00:47:25,100
所以说它会有一个

1211
00:47:25,100 --> 00:47:26,180
你看一个web端

1212
00:47:26,180 --> 00:47:31,370
专门去做一些浏览器端的一些一些一些一些API的一个一个一个处理

1213
00:47:31,370 --> 00:47:34,070
就是我们这块儿就compare拿到浏览器

1214
00:47:34,070 --> 00:47:37,220
是不是只有浏览器才有这个LTEMHDML

1215
00:47:37,640 --> 00:47:39,140
那这个V是还可以运行

1216
00:47:39,140 --> 00:47:40,370
它还可以运行到哪一块儿

1217
00:47:40,460 --> 00:47:41,420
还可以运行到我们的

1218
00:47:42,040 --> 00:47:44,530
其他APP端同学们明白这个意思吗

1219
00:47:44,890 --> 00:47:45,190
喂

1220
00:47:45,190 --> 00:47:47,020
它这个运行到多端里边儿去

1221
00:47:47,640 --> 00:47:49,500
这个多端我一会儿给他一下

1222
00:47:49,500 --> 00:47:49,830
给他说

1223
00:47:49,830 --> 00:47:51,840
所以说这块儿有不同平台的一些实现

1224
00:47:52,260 --> 00:47:53,490
不同平台的一些实现

1225
00:47:54,060 --> 00:47:59,490
不同平台不同平台的实现

1226
00:48:00,990 --> 00:48:03,420
然后还在一个就是several的服装渲染

1227
00:48:03,420 --> 00:48:03,930
都不用说

1228
00:48:04,050 --> 00:48:07,170
然后这个SFC这个东西是做什么

1229
00:48:07,170 --> 00:48:07,800
SFC是做什么

1230
00:48:07,830 --> 00:48:08,850
就是把单文件

1231
00:48:09,120 --> 00:48:10,410
就是你那个底儿

1232
00:48:11,460 --> 00:48:12,720
那个单文件是不是同学们

1233
00:48:12,750 --> 00:48:13,230
这是我们

1234
00:48:13,230 --> 00:48:14,400
我们微微一点文

1235
00:48:14,550 --> 00:48:16,770
你知道我们那个这种点位

1236
00:48:16,770 --> 00:48:18,510
这种大文件拆分成什么

1237
00:48:18,660 --> 00:48:19,740
拆分成三个模块儿

1238
00:48:20,010 --> 00:48:21,120
哪三个模块

1239
00:48:21,450 --> 00:48:23,550
第一个是我们的style是吧

1240
00:48:23,610 --> 00:48:25,860
给style的话就给到全部给到谁了

1241
00:48:26,190 --> 00:48:27,720
全部就给了我们的style是吧

1242
00:48:28,260 --> 00:48:29,940
如果是你看还有什么

1243
00:48:29,970 --> 00:48:31,050
还有我们的

1244
00:48:31,200 --> 00:48:33,750
比如说还有template template就是做什么

1245
00:48:33,810 --> 00:48:35,460
就我们自己来编译是吧

1246
00:48:35,610 --> 00:48:36,780
他们的自己来编译

1247
00:48:37,110 --> 00:48:37,680
还有什么

1248
00:48:37,710 --> 00:48:39,870
还有我们的script script脚本呢

1249
00:48:39,870 --> 00:48:40,860
就给到script脚本

1250
00:48:40,920 --> 00:48:42,090
所以就可以拆分

1251
00:48:42,090 --> 00:48:43,500
拆成不同的东西是吧

1252
00:48:43,880 --> 00:48:45,110
把你那个MP的模板

1253
00:48:45,260 --> 00:48:46,730
就是你们写的那个微模板

1254
00:48:46,760 --> 00:48:48,050
拆分成三个不同的东西

1255
00:48:48,050 --> 00:48:48,590
就是做处理

1256
00:48:48,590 --> 00:48:53,450
所以说这一块儿就做拆分的处理

1257
00:48:53,450 --> 00:48:55,010
SSFC就是什么拆分的处理

1258
00:49:00,080 --> 00:49:00,410
对

1259
00:49:00,590 --> 00:49:02,030
所以说这一步你就知道了

1260
00:49:02,030 --> 00:49:03,350
这里面不同的东西是吧

1261
00:49:03,530 --> 00:49:04,070
这是什么

1262
00:49:04,100 --> 00:49:05,060
编译的代码是吧

1263
00:49:05,900 --> 00:49:06,560
编译的代码

1264
00:49:09,130 --> 00:49:09,730
编译的代码

1265
00:49:09,910 --> 00:49:11,050
那么不同平台的实现

1266
00:49:11,050 --> 00:49:12,730
我们只讲web web这一层

1267
00:49:12,730 --> 00:49:14,050
它会把编译的代码是吧

1268
00:49:14,290 --> 00:49:16,420
把编译的代码把你把什么

1269
00:49:16,450 --> 00:49:18,460
把浏览器端浏览器端

1270
00:49:19,140 --> 00:49:22,230
浏览器端的API

1271
00:49:23,210 --> 00:49:25,310
浏览器端的API结合到什么

1272
00:49:25,550 --> 00:49:26,990
结合到V里边

1273
00:49:27,140 --> 00:49:28,580
比如说我们的编译

1274
00:49:28,880 --> 00:49:31,040
在线编译就需要通过

1275
00:49:31,980 --> 00:49:35,370
外表拿到NHLH7苗是吧

1276
00:49:35,640 --> 00:49:36,180
Enter

1277
00:49:37,960 --> 00:49:38,890
H界面儿是吧

1278
00:49:38,950 --> 00:49:39,640
拿到它

1279
00:49:40,640 --> 00:49:41,990
然后给到谁

1280
00:49:42,110 --> 00:49:42,980
给到我们的

1281
00:49:42,980 --> 00:49:43,940
Compare是吧

1282
00:49:43,970 --> 00:49:44,900
给我们compare

1283
00:49:45,290 --> 00:49:46,220
然后去变成什么

1284
00:49:46,370 --> 00:49:47,450
变成render是吧

1285
00:49:47,870 --> 00:49:49,820
然后再把render挂在了什么

1286
00:49:49,940 --> 00:49:50,990
Open上面是吧

1287
00:49:51,650 --> 00:49:53,840
Open上面就是我们那个options

1288
00:49:53,930 --> 00:49:56,360
因为所有的论证最后都是挂在options上面

1289
00:49:56,390 --> 00:49:56,630
是不是

1290
00:49:56,630 --> 00:49:58,460
所以我们在这一步大家看一下

1291
00:49:58,610 --> 00:50:00,500
你看这一部刚刚给大家看的

1292
00:50:01,040 --> 00:50:03,470
你看这一波你看如果有

1293
00:50:04,540 --> 00:50:06,430
如果如果没有

1294
00:50:06,430 --> 00:50:07,270
如果没有render

1295
00:50:07,300 --> 00:50:08,080
这就没有leader

1296
00:50:08,080 --> 00:50:09,370
就什么就是在线变异

1297
00:50:09,520 --> 00:50:12,430
我真正运行的时候没有root就在线变异啦

1298
00:50:12,700 --> 00:50:14,620
是不是没有root就在线了

1299
00:50:14,620 --> 00:50:15,970
没有red IR在线

1300
00:50:15,970 --> 00:50:17,350
我拿着我的template

1301
00:50:17,650 --> 00:50:19,270
你这里边又没有这个template

1302
00:50:19,570 --> 00:50:21,280
就是你的APP里边儿还没有APP

1303
00:50:21,280 --> 00:50:21,850
那怎么办

1304
00:50:22,390 --> 00:50:23,110
如果有特别的

1305
00:50:23,110 --> 00:50:24,070
如果没有之类的

1306
00:50:24,100 --> 00:50:25,720
我就会去拿到我这个L

1307
00:50:26,290 --> 00:50:28,570
获取我这个L里面所有的什么HTML

1308
00:50:28,570 --> 00:50:31,270
就是拿到这里面的所有的JHTML是吧

1309
00:50:32,550 --> 00:50:33,450
就会拿到这一坨

1310
00:50:33,840 --> 00:50:36,090
然后拿到这一坨H里面这里面

1311
00:50:36,150 --> 00:50:37,980
然后拿到之后他就做什么

1312
00:50:38,580 --> 00:50:42,660
你看调用卡梅尔这个东西就是卡梅尔这个卡塔尔提供的

1313
00:50:42,660 --> 00:50:46,920
你看这卡梅尔看这个东西就是在线建议知道吗

1314
00:50:46,920 --> 00:50:47,760
这是在线面议

1315
00:50:49,110 --> 00:50:50,520
这是在线的离线变异

1316
00:50:50,580 --> 00:50:52,050
和在线一都是一样的

1317
00:50:52,080 --> 00:50:52,980
一模一样的代码

1318
00:50:53,160 --> 00:50:55,470
只是说这些面就是把这个代码给了谁

1319
00:50:55,860 --> 00:50:57,840
把这一块儿的卡梅尔抛出去

1320
00:50:57,840 --> 00:50:59,100
抛出去让谁来处理

1321
00:50:59,250 --> 00:51:00,150
让谁来执行

1322
00:51:00,660 --> 00:51:02,100
让漏斗JS来执行

1323
00:51:02,580 --> 00:51:03,060
是吧

1324
00:51:03,090 --> 00:51:04,500
让漏斗JS来执行

1325
00:51:04,890 --> 00:51:05,550
明白吗

1326
00:51:06,120 --> 00:51:09,480
因为都是因为执行JS的地方都最后都是在哪儿

1327
00:51:09,540 --> 00:51:11,610
都是在微吧里面执行是不是

1328
00:51:12,770 --> 00:51:13,460
明白吗

1329
00:51:14,040 --> 00:51:15,750
所以说卡密尔这一块儿的东西

1330
00:51:15,900 --> 00:51:18,600
就最后都是都是一模一样的

1331
00:51:18,630 --> 00:51:19,050
知道吧

1332
00:51:19,080 --> 00:51:20,610
只是他执行的地方不一样

1333
00:51:23,120 --> 00:51:23,750
懂了吗

1334
00:51:23,780 --> 00:51:25,400
你看他这一步执行完了之后

1335
00:51:25,550 --> 00:51:27,080
他那里边儿也是这么执行

1336
00:51:27,320 --> 00:51:28,940
你看它那里边儿也是这么自信

1337
00:51:29,330 --> 00:51:32,780
在微吧里边儿拿到那个那个卡梅尔也这么自信

1338
00:51:32,780 --> 00:51:36,200
拿到你的template to Li鉴别也是拿到你的ipad也这么值钱

1339
00:51:36,290 --> 00:51:37,730
拿你的template执行完了之后

1340
00:51:37,730 --> 00:51:38,840
会生成这个代码

1341
00:51:39,230 --> 00:51:40,610
会生成你的render吧

1342
00:51:40,640 --> 00:51:41,750
Render他是个注册吗

1343
00:51:41,750 --> 00:51:42,050
是吧

1344
00:51:42,880 --> 00:51:43,900
是不是在构建吗

1345
00:51:43,960 --> 00:51:45,490
我们刚刚看的构建的过程

1346
00:51:46,280 --> 00:51:46,550
是吧

1347
00:51:46,550 --> 00:51:47,000
这块儿

1348
00:51:47,840 --> 00:51:48,170
你看

1349
00:51:48,170 --> 00:51:48,740
Create a

1350
00:51:49,320 --> 00:51:50,100
Create a function

1351
00:51:50,820 --> 00:51:51,540
个人风险

1352
00:51:52,180 --> 00:51:55,120
这块你看拿到你的代码流方显这是扣的吗

1353
00:51:55,510 --> 00:51:57,400
拿到你的方代码六风险

1354
00:51:58,630 --> 00:51:59,170
看到吗

1355
00:52:00,740 --> 00:52:01,550
你看着

1356
00:52:02,460 --> 00:52:03,090
堂哥小不小

1357
00:52:03,090 --> 00:52:03,900
你看得明白吧

1358
00:52:04,640 --> 00:52:05,120
是不是

1359
00:52:05,660 --> 00:52:07,520
所以你看这一步就是这个代码

1360
00:52:07,580 --> 00:52:09,110
所以现在这一步看明白了吗

1361
00:52:09,440 --> 00:52:10,490
这个过程明白了吗

1362
00:52:10,490 --> 00:52:10,940
同学们

1363
00:52:12,430 --> 00:52:13,540
明白我们继续了

1364
00:52:13,780 --> 00:52:17,140
所有编译这一块的东西整个串起来了是吧

1365
00:52:17,700 --> 00:52:19,650
川椒运行这一块儿是吧

1366
00:52:20,350 --> 00:52:21,970
那现在的问题就出来了

1367
00:52:25,440 --> 00:52:27,360
你不需要去纠结那些细节

1368
00:52:27,990 --> 00:52:29,310
我现在也不会给你看

1369
00:52:30,100 --> 00:52:31,750
你不需要去纠结一些细节

1370
00:52:33,880 --> 00:52:35,410
V分为什么

1371
00:52:35,560 --> 00:52:38,800
分为几个不同的所有应该说所以UI框架

1372
00:52:40,030 --> 00:52:42,100
所以UI框架都分这几种东西

1373
00:52:42,190 --> 00:52:43,630
第一个都分为两层

1374
00:52:44,570 --> 00:52:45,500
第一层是什么

1375
00:52:46,190 --> 00:52:47,390
是我们的运行时

1376
00:52:48,670 --> 00:52:49,810
运行是什么

1377
00:52:49,960 --> 00:52:51,640
你运行的状态我们刚说了是吧

1378
00:52:51,670 --> 00:52:53,140
你的微弱的各种状态是吧

1379
00:52:54,490 --> 00:52:56,980
就是运行时运行时保存在内存里边儿是吧

1380
00:52:57,600 --> 00:52:58,890
还有什么不同的端

1381
00:52:59,160 --> 00:53:00,360
不同的端的实现

1382
00:53:00,810 --> 00:53:02,940
是不是V可以在里边实现

1383
00:53:03,660 --> 00:53:07,200
同学们为是不是可以在哪一个可以在我们的

1384
00:53:08,220 --> 00:53:09,480
外部端实现是吧

1385
00:53:10,290 --> 00:53:12,510
We也可以在里边儿小程序里面实现

1386
00:53:12,810 --> 00:53:15,060
是不是你们所谓的乌米

1387
00:53:15,060 --> 00:53:17,100
你们说you ni you ni APP

1388
00:53:17,890 --> 00:53:18,160
是吧

1389
00:53:18,160 --> 00:53:20,860
用APP就是用的知道吧

1390
00:53:21,280 --> 00:53:21,910
还有什么

1391
00:53:21,940 --> 00:53:23,770
还有它也可以在客户端做实现

1392
00:53:24,620 --> 00:53:25,130
知道吧

1393
00:53:25,580 --> 00:53:27,590
但是这些实现都是基于谁来做的

1394
00:53:27,770 --> 00:53:29,990
都是基于我们的什么runtime

1395
00:53:29,990 --> 00:53:31,040
就是我们的运行时

1396
00:53:31,130 --> 00:53:33,260
我们运行时都是在微吧里边儿是吧

1397
00:53:33,500 --> 00:53:35,150
然后它运行完了之后

1398
00:53:35,330 --> 00:53:39,830
把他的把他的代码把它把它要生成出来的这个微漏的

1399
00:53:40,340 --> 00:53:41,930
怎么去微露的最后

1400
00:53:41,930 --> 00:53:43,460
最后是不是要去构建什么

1401
00:53:43,610 --> 00:53:44,450
生成崴了之后

1402
00:53:44,450 --> 00:53:48,170
最后是不是要去要去什么生成真实的DOM

1403
00:53:48,380 --> 00:53:49,790
生成真实的这一步

1404
00:53:50,210 --> 00:53:53,300
如果是在web端就去掉用真实的

1405
00:53:53,510 --> 00:53:58,100
如果是在小程序端调用什么调小程序构建动物的方法

1406
00:53:59,950 --> 00:54:01,390
或者说构建数据的方法

1407
00:54:02,120 --> 00:54:04,040
我们后面会给大家讲小程序源码

1408
00:54:04,730 --> 00:54:07,610
这个后边给大家还有就是会走什么

1409
00:54:08,180 --> 00:54:09,530
客户APP端是吧

1410
00:54:09,590 --> 00:54:10,580
APP端就会掉

1411
00:54:10,580 --> 00:54:11,600
APP的渲染方法

1412
00:54:11,900 --> 00:54:18,920
但是在这块儿都是它运行时这一块儿都是基于谁来说的同学们都是基于我们的什么

1413
00:54:19,650 --> 00:54:20,700
都是基于我们的什么

1414
00:54:21,180 --> 00:54:22,710
都是基于我们的V的运行时

1415
00:54:22,740 --> 00:54:23,340
明白了吗

1416
00:54:23,610 --> 00:54:24,900
这块就分了两层

1417
00:54:25,140 --> 00:54:26,610
第一个是we的运行时

1418
00:54:28,340 --> 00:54:29,090
第二个是什么

1419
00:54:29,270 --> 00:54:30,410
不同的端的实现

1420
00:54:30,770 --> 00:54:31,940
不同的客户端的实现

1421
00:54:32,270 --> 00:54:35,060
不同端去衔接他这个API就行了

1422
00:54:35,420 --> 00:54:35,930
懂了吗

1423
00:54:38,460 --> 00:54:39,540
同学们明白

1424
00:54:46,770 --> 00:54:47,310
明白了吧

1425
00:54:47,340 --> 00:54:48,570
好那这块儿明白了

1426
00:54:48,570 --> 00:54:49,200
我们继续

1427
00:54:51,430 --> 00:54:52,000
嗯

1428
00:54:54,260 --> 00:54:54,830
这块明白了

1429
00:54:54,830 --> 00:54:55,760
我们就继续了

1430
00:54:57,860 --> 00:54:58,490
明白之后

1431
00:54:58,490 --> 00:55:00,380
我们就来聊边一词了

1432
00:55:01,430 --> 00:55:02,480
我们现在聊运行

1433
00:55:02,570 --> 00:55:03,350
说框架

1434
00:55:03,650 --> 00:55:04,490
框架这个东西呢

1435
00:55:04,490 --> 00:55:06,290
我们要聊运行和编译是不是

1436
00:55:08,130 --> 00:55:10,020
运行时是

1437
00:55:11,040 --> 00:55:11,910
分为框架

1438
00:55:11,940 --> 00:55:13,470
我们说了深度递归是吧

1439
00:55:13,980 --> 00:55:15,330
深度递归就是这么一个过程

1440
00:55:16,710 --> 00:55:17,760
广州优先是吧

1441
00:55:17,760 --> 00:55:18,390
广州的贵

1442
00:55:19,100 --> 00:55:21,950
编译时我们就是这么个过程边意思

1443
00:55:22,190 --> 00:55:24,470
我说了刚刚给大家看的文件夹就在这边

1444
00:55:24,620 --> 00:55:26,330
就在我们的什么compare里边是吧

1445
00:55:26,480 --> 00:55:27,890
都在我们科儿里边儿是吧

1446
00:55:28,160 --> 00:55:30,350
科尔里边儿我们的代码

1447
00:55:30,830 --> 00:55:31,280
Compare

1448
00:55:31,280 --> 00:55:32,090
这又从哪儿来

1449
00:55:32,090 --> 00:55:33,260
又从index里边儿是吧

1450
00:55:33,440 --> 00:55:37,310
你看它就掉了什么creator compare function create a这个东西

1451
00:55:37,670 --> 00:55:39,110
然后把我们的代码

1452
00:55:39,110 --> 00:55:40,430
这就是我们的H键

1453
00:55:40,430 --> 00:55:41,600
把我们的代码给到他

1454
00:55:41,870 --> 00:55:43,970
但是这里边你可以有很多option

1455
00:55:44,540 --> 00:55:45,350
有很多option

1456
00:55:46,260 --> 00:55:47,220
很多option呢

1457
00:55:47,250 --> 00:55:48,090
来做什么呢

1458
00:55:50,400 --> 00:55:51,870
来做一个做一个什么

1459
00:55:51,870 --> 00:55:54,600
做一个他的一个相当于一个一个一个配置

1460
00:55:54,630 --> 00:55:55,800
编译CI ou的配置

1461
00:55:56,670 --> 00:55:57,930
然后去把它配置好

1462
00:55:57,930 --> 00:55:59,070
配置好了之后呢

1463
00:55:59,220 --> 00:56:00,645
把你的代码给到这里边来

1464
00:56:00,645 --> 00:56:02,310
给到这里边来了就开始变异了

1465
00:56:02,310 --> 00:56:03,570
同学们开始变异了

1466
00:56:03,570 --> 00:56:04,440
这里边儿就是编译

1467
00:56:04,440 --> 00:56:07,410
你看这边一先分析代码

1468
00:56:07,590 --> 00:56:08,670
然后再再转

1469
00:56:08,670 --> 00:56:09,540
再优化代码

1470
00:56:09,540 --> 00:56:10,890
然后再生成转移代码

1471
00:56:11,220 --> 00:56:12,420
转移代码之后就是render

1472
00:56:12,450 --> 00:56:14,010
你看就会返回这个代码

1473
00:56:14,720 --> 00:56:16,520
所以这个东西你看这里就是编译

1474
00:56:18,020 --> 00:56:19,790
同学们编译的过程

1475
00:56:20,640 --> 00:56:22,830
分为什么分析是

1476
00:56:22,830 --> 00:56:23,850
我们说了分析

1477
00:56:24,570 --> 00:56:25,710
转换是吧

1478
00:56:26,220 --> 00:56:26,940
然后还有什么

1479
00:56:27,540 --> 00:56:28,410
生存是吧

1480
00:56:29,370 --> 00:56:29,820
是吧

1481
00:56:30,390 --> 00:56:35,220
那分析这个过程要分析成什么样子才能去做转换

1482
00:56:35,220 --> 00:56:35,640
同学们

1483
00:56:35,880 --> 00:56:39,870
我们转换是在谁的转换是在谁的基础之上做的分析

1484
00:56:40,830 --> 00:56:42,960
转换是在谁谁的基础上

1485
00:56:43,020 --> 00:56:44,520
是在分析的结果

1486
00:56:44,730 --> 00:56:45,660
结果代码是吧

1487
00:56:45,780 --> 00:56:46,980
分析这一步骤

1488
00:56:47,070 --> 00:56:49,050
分析这个步骤执行的结果是吧

1489
00:56:49,560 --> 00:56:51,390
那么分析这个步骤执行的结果是什么

1490
00:56:52,150 --> 00:56:54,250
S同学知道ST是什么东西吗

1491
00:56:56,260 --> 00:56:57,430
所有同学都知道吗

1492
00:56:57,460 --> 00:56:59,410
还是有有同学不知道ST是什么

1493
00:57:00,340 --> 00:57:01,840
都知道ST我就不讲了

1494
00:57:11,000 --> 00:57:13,460
还是有同学布置的给大家稍微说一下

1495
00:57:15,230 --> 00:57:15,770
ST

1496
00:57:15,770 --> 00:57:17,270
举个例子

1497
00:57:18,370 --> 00:57:19,330
我用VR

1498
00:57:20,470 --> 00:57:21,580
ay等于一

1499
00:57:22,760 --> 00:57:25,310
我如果要分析这个代码要怎么分析

1500
00:57:27,480 --> 00:57:29,130
要分析这个代码要怎么分析

1501
00:57:30,660 --> 00:57:31,560
咳

1502
00:57:34,520 --> 00:57:37,700
STST这个东西有个学名叫做什么抽象语法树

1503
00:57:42,570 --> 00:57:44,280
抽象语法树这个东西

1504
00:57:44,370 --> 00:57:46,530
它是用来描述你的代码的

1505
00:57:46,920 --> 00:57:49,800
描述你的代码结构的描述

1506
00:57:51,910 --> 00:57:53,200
代码结构

1507
00:57:53,380 --> 00:57:54,670
那怎么来描述代码结构

1508
00:57:54,670 --> 00:57:56,140
它就需要有一个什么节

1509
00:57:56,290 --> 00:57:57,730
不一样的结构是什么样的结构

1510
00:57:57,820 --> 00:57:58,750
一个树形结构

1511
00:57:58,780 --> 00:57:59,650
什么样的树形结构

1512
00:57:59,920 --> 00:58:00,820
举个很简单的例子

1513
00:58:01,410 --> 00:58:02,820
我这个VR ay等于一

1514
00:58:02,820 --> 00:58:04,080
这是我们的JS代码是吧

1515
00:58:04,940 --> 00:58:07,280
我们这个JS的代码他会有什么规则

1516
00:58:07,340 --> 00:58:07,970
同学们

1517
00:58:07,970 --> 00:58:10,160
我会在VR后边儿做一个加法吗

1518
00:58:12,160 --> 00:58:12,580
会吗

1519
00:58:12,790 --> 00:58:13,540
这个不会

1520
00:58:13,780 --> 00:58:15,850
We are后边儿一定不能写一个家是不是

1521
00:58:16,270 --> 00:58:16,840
能这么写吗

1522
00:58:16,840 --> 00:58:17,440
不能这么写

1523
00:58:17,770 --> 00:58:20,290
VR后边儿必须要写个a是吧

1524
00:58:20,470 --> 00:58:22,450
VR后边儿必须要写个变量是吧

1525
00:58:22,930 --> 00:58:25,690
这儿一定是VR后边儿一定是一个变量

1526
00:58:25,690 --> 00:58:27,970
是不是一定跟的是一个变量是吧

1527
00:58:32,410 --> 00:58:32,800
是不是

1528
00:58:33,880 --> 00:58:36,400
是不是VR后面一定跟着四个变量是

1529
00:58:37,450 --> 00:58:40,330
或者说跟的是一个表达式表达式吗

1530
00:58:43,530 --> 00:58:45,120
表达式是吧

1531
00:58:45,330 --> 00:58:46,890
表达式这个表达式

1532
00:58:47,520 --> 00:58:48,810
里边儿可以是吗

1533
00:58:48,870 --> 00:58:50,700
可以是一个变量是不是

1534
00:58:52,030 --> 00:58:54,070
是不是也可以是一个什么声明

1535
00:58:54,070 --> 00:58:57,160
是不是是不是也可以是个变量

1536
00:58:57,160 --> 00:58:59,050
也可以什么副职这个过程是吧

1537
00:58:59,500 --> 00:59:01,510
副职是不是也可以是负值

1538
00:59:01,600 --> 00:59:02,230
那我问你

1539
00:59:02,230 --> 00:59:05,530
我在VR后边肯定是不能跟什么加号是吧

1540
00:59:05,800 --> 00:59:07,630
也不可能跟一个什么a

1541
00:59:07,810 --> 00:59:15,190
然后a什么除a什么function a function of a function这种东西我可以这么跟妈都不行是吧

1542
00:59:15,340 --> 00:59:17,170
我在后面一定要跟一个什么

1543
00:59:17,500 --> 00:59:18,760
要么是一个生命

1544
00:59:18,760 --> 00:59:19,120
一个变量

1545
00:59:19,120 --> 00:59:21,730
要么是一个变量等于等于后边儿是一个什么

1546
00:59:21,850 --> 00:59:25,420
就是我们的一个什么副职这种表达式的其他的语句是

1547
00:59:26,340 --> 00:59:27,570
他一定是这种结构

1548
00:59:27,570 --> 00:59:28,410
那按照结构

1549
00:59:28,530 --> 00:59:30,150
这种结构我们是不是可以画出来

1550
00:59:30,180 --> 00:59:31,320
画出来一个树形结构

1551
00:59:32,020 --> 00:59:32,950
这是我的一个代码

1552
00:59:32,980 --> 00:59:35,260
我的代码如果现在是一个VR语句

1553
00:59:35,290 --> 00:59:36,430
如果是个VR语句

1554
00:59:36,760 --> 00:59:37,660
We are语句

1555
00:59:37,690 --> 00:59:39,400
这边儿一定是一个什么VR

1556
00:59:39,400 --> 00:59:40,750
左边一定是个VR是吧

1557
00:59:41,300 --> 00:59:41,570
是吧

1558
00:59:42,080 --> 00:59:43,910
We are右边这一坨

1559
00:59:43,910 --> 00:59:45,860
右边一定是一个什么表达式是吧

1560
00:59:46,040 --> 00:59:46,970
一定是个表达式

1561
00:59:47,300 --> 00:59:48,410
那么这个表达式

1562
00:59:49,350 --> 00:59:51,060
就可以是吗表达式

1563
00:59:51,790 --> 00:59:53,260
表达式可以是四个人吗

1564
00:59:53,900 --> 00:59:55,040
可以是一个什么

1565
00:59:55,830 --> 00:59:56,730
标识符是吧

1566
00:59:56,760 --> 00:59:57,780
可以是一个标识符

1567
00:59:57,780 --> 00:59:59,550
如果他直接是一个标识符

1568
00:59:59,550 --> 01:00:00,030
就是这种

1569
01:00:00,120 --> 01:00:02,550
没有这种后边儿这个直接是一个标识符

1570
01:00:02,550 --> 01:00:03,870
那么他直接就是标识符

1571
01:00:04,020 --> 01:00:05,220
如果不是一个标识符

1572
01:00:05,370 --> 01:00:07,380
他就一定是一个赋值运算是吧

1573
01:00:07,590 --> 01:00:10,590
那么这个赋值运算它就一定有赋值运算的规则

1574
01:00:11,540 --> 01:00:11,960
是吧

1575
01:00:12,170 --> 01:00:13,610
赋值运算的规则是什么

1576
01:00:13,670 --> 01:00:16,460
我左边的值一定要赋值给右边的值是吧

1577
01:00:16,850 --> 01:00:18,560
是不是他一定是个等号

1578
01:00:18,830 --> 01:00:20,510
等号后边一定要有一个什么

1579
01:00:20,540 --> 01:00:24,170
被赋值的一个值是一定是这种树形结构是不是

1580
01:00:25,280 --> 01:00:26,135
那我已经问你

1581
01:00:26,135 --> 01:00:27,260
我这块儿可以这么给吗

1582
01:00:28,540 --> 01:00:30,370
我可以这可以这么给吗

1583
01:00:30,490 --> 01:00:31,930
我这后边儿这个这个就完了

1584
01:00:31,930 --> 01:00:33,190
我可以这么弄吗

1585
01:00:33,460 --> 01:00:34,360
肯定是不行的

1586
01:00:34,630 --> 01:00:34,960
是吧

1587
01:00:35,790 --> 01:00:37,350
所以说这里边儿他一定要付

1588
01:00:37,560 --> 01:00:39,630
一定要付一个变量或者是什么值

1589
01:00:39,630 --> 01:00:40,560
或者是语句

1590
01:00:40,740 --> 01:00:43,260
这个语句下面又继续嵌套是吧

1591
01:00:43,290 --> 01:00:46,620
我这个语句又可以是其他的什么三元的语句

1592
01:00:46,620 --> 01:00:51,270
机缘语句的程序就是按照这种语法这种结构维护起来的

1593
01:00:51,420 --> 01:00:52,230
明白吗同学们

1594
01:00:52,930 --> 01:00:53,830
现在这个抽象于

1595
01:00:55,420 --> 01:00:57,160
这刚刚不明白的同学

1596
01:00:57,160 --> 01:00:57,880
现在明白了吗

1597
01:00:59,050 --> 01:01:00,160
这就是抽象语法树

1598
01:01:00,780 --> 01:01:01,740
明白吧

1599
01:01:06,020 --> 01:01:06,980
那这种东西

1600
01:01:07,010 --> 01:01:07,850
那这种东西

1601
01:01:08,180 --> 01:01:09,920
这种东西描述出来之后

1602
01:01:09,920 --> 01:01:12,860
是不是这种东西描述出来是不是就可以描述我们代码啦

1603
01:01:13,790 --> 01:01:15,440
那描述出来的代码之后

1604
01:01:15,560 --> 01:01:18,050
我就要在我构建出来一个这个东西

1605
01:01:18,530 --> 01:01:20,000
构建出来这个东西之后

1606
01:01:20,120 --> 01:01:21,500
然后就基于这个东西

1607
01:01:21,530 --> 01:01:24,200
这个东西就是基于ST这一步

1608
01:01:24,530 --> 01:01:26,270
这一步会构建出来ST是吧

1609
01:01:27,460 --> 01:01:28,600
这一步构建出ST

1610
01:01:28,810 --> 01:01:32,110
然后基于ST去转换去转换是吧

1611
01:01:32,980 --> 01:01:33,610
去转换

1612
01:01:34,650 --> 01:01:38,040
这一步会就会基于ST转换转换成什么

1613
01:01:38,620 --> 01:01:39,190
转什么

1614
01:01:39,220 --> 01:01:41,320
转换成我们的什么render代码了是吧

1615
01:01:41,830 --> 01:01:43,180
换成我们的代码是吧

1616
01:01:43,180 --> 01:01:44,920
同学们装render代码了

1617
01:01:45,340 --> 01:01:46,810
我们的代码这个就很简单了

1618
01:01:46,810 --> 01:01:49,000
它里边就会有一些不同的一些声明

1619
01:01:49,800 --> 01:01:51,300
怎么去深层认证代码

1620
01:01:51,970 --> 01:01:52,360
是不是

1621
01:01:52,870 --> 01:01:54,130
所以这一步我们来看一下

1622
01:01:54,130 --> 01:02:01,990
给大家稍微捋一下编译这一块的代码稍微有有V2的编译的代码其实完全不没有什么参考性的东西

1623
01:02:02,410 --> 01:02:05,140
我推编译这个东西呢

1624
01:02:06,510 --> 01:02:09,510
编译这个东西就是编译代码这一块儿又是一门学问

1625
01:02:09,510 --> 01:02:10,500
叫做编译原理

1626
01:02:12,250 --> 01:02:13,000
编译原理

1627
01:02:14,380 --> 01:02:16,420
这个东西是大学里边的

1628
01:02:16,420 --> 01:02:17,530
完全是一门课

1629
01:02:17,980 --> 01:02:21,400
我希望大家下来之后单独去学一下

1630
01:02:21,430 --> 01:02:22,930
再单独去学一下

1631
01:02:22,960 --> 01:02:24,940
买本书单独学一下编译原理这门课

1632
01:02:25,730 --> 01:02:27,650
这个东西你让我拿一节课给你讲

1633
01:02:27,650 --> 01:02:28,790
那是不可能的

1634
01:02:29,450 --> 01:02:30,590
不是我不愿意跟你讲

1635
01:02:30,980 --> 01:02:33,740
是别人大学里边儿都是拿了一年的时间

1636
01:02:33,740 --> 01:02:35,900
一学期的时间才能讲完明白

1637
01:02:36,140 --> 01:02:37,550
它这里边有很多很多知识

1638
01:02:37,790 --> 01:02:38,750
我这边给你讲

1639
01:02:38,750 --> 01:02:40,250
只能说我呢

1640
01:02:40,250 --> 01:02:41,930
我在我今天给你讲的

1641
01:02:41,930 --> 01:02:47,210
只能说给你带入一个大致的一个一个一个一个思路

1642
01:02:47,210 --> 01:02:48,530
V1在里边怎么去编译的

1643
01:02:48,950 --> 01:02:54,950
你让我怎么去跟你说他最后编译出来的这个这个这个就是真正编译的原理是什么

1644
01:02:55,010 --> 01:02:58,310
说实话同学这个东西需要你们自己下去一点

1645
01:02:58,800 --> 01:02:59,190
知道吧

1646
01:02:59,190 --> 01:03:01,410
我这会儿只能去给你们做一个粗浅的一个

1647
01:03:01,680 --> 01:03:04,080
就是一个拉通明白这个过程

1648
01:03:04,720 --> 01:03:06,430
编译原理上是单独的一门课

1649
01:03:06,430 --> 01:03:06,850
同学们

1650
01:03:07,960 --> 01:03:09,040
所以我在这一步

1651
01:03:10,100 --> 01:03:11,480
这块他怎么去编译的

1652
01:03:12,140 --> 01:03:12,740
这边呢

1653
01:03:12,740 --> 01:03:14,720
我们来看这个代码来看这个代码

1654
01:03:15,560 --> 01:03:18,710
我们说了他会分为编译优化是吧

1655
01:03:19,100 --> 01:03:19,880
然后运行是吧

1656
01:03:19,880 --> 01:03:22,610
所以说你看这这个编译这第一步

1657
01:03:22,610 --> 01:03:23,480
这是编译

1658
01:03:23,480 --> 01:03:24,020
这是编译

1659
01:03:24,530 --> 01:03:25,340
你看这一部编译

1660
01:03:25,340 --> 01:03:26,090
编译完了之后

1661
01:03:26,090 --> 01:03:27,440
你看我们这边一完了之后

1662
01:03:27,710 --> 01:03:28,490
编译完了之后

1663
01:03:28,520 --> 01:03:29,960
然后再做一个什么优化

1664
01:03:30,080 --> 01:03:31,070
一个优化的过程

1665
01:03:31,460 --> 01:03:33,650
优化的过程优化的过程什么意思呢

1666
01:03:34,300 --> 01:03:36,940
就是他会去分析一些静态的节点

1667
01:03:37,570 --> 01:03:40,120
什么叫分析静态检举个很简单例子

1668
01:03:40,120 --> 01:03:40,450
同学

1669
01:03:42,080 --> 01:03:46,460
我们知道V里边是有多么的负V是不是有多么的过程

1670
01:03:46,490 --> 01:03:47,870
比如说这是你的节点是吧

1671
01:03:53,260 --> 01:03:54,310
这是你的节点是吧

1672
01:03:55,420 --> 01:03:55,780
对

1673
01:03:56,550 --> 01:03:57,150
你的节点

1674
01:03:57,150 --> 01:03:59,310
如果我们这些节点全是

1675
01:03:59,880 --> 01:04:02,130
没有没有绑定进动态数据了

1676
01:04:02,130 --> 01:04:03,750
只有这儿绑定了一个动态数据

1677
01:04:04,410 --> 01:04:06,510
是不是只有这房间的一个动态数据

1678
01:04:07,100 --> 01:04:09,230
我这儿绑定动态数据可能是个name是吧

1679
01:04:09,880 --> 01:04:11,920
这个kiss name第一次是一

1680
01:04:12,040 --> 01:04:12,940
第二次是二

1681
01:04:13,330 --> 01:04:14,200
那我问大家

1682
01:04:14,860 --> 01:04:16,240
我第一次当地府

1683
01:04:17,010 --> 01:04:18,510
就是虚拟到我们的对比嘛

1684
01:04:18,510 --> 01:04:18,870
是吧

1685
01:04:19,480 --> 01:04:21,070
第一次从这这个东西

1686
01:04:21,370 --> 01:04:23,350
第一次从这儿跟这个对比

1687
01:04:24,150 --> 01:04:24,480
是吧

1688
01:04:24,540 --> 01:04:25,440
第一次跟这个对比

1689
01:04:25,590 --> 01:04:26,460
那么这个对比完了

1690
01:04:26,640 --> 01:04:28,200
那这些东西我还要去对比吗

1691
01:04:29,870 --> 01:04:30,350
我问大家

1692
01:04:30,380 --> 01:04:32,150
因为这个节点全是静态的

1693
01:04:33,450 --> 01:04:34,410
我给大家看这个代码

1694
01:04:34,470 --> 01:04:35,700
你这块儿看不明白看这个

1695
01:04:39,220 --> 01:04:40,330
比如这个这个代码

1696
01:04:41,600 --> 01:04:43,760
我这是这个是动态的

1697
01:04:44,120 --> 01:04:48,920
这块的指令是动态的看这块儿你给我给我给我反馈

1698
01:04:49,010 --> 01:04:50,000
不明白就不明白

1699
01:04:50,090 --> 01:04:51,500
明白就明白好吧

1700
01:04:53,070 --> 01:04:54,240
这块是动态的

1701
01:04:54,540 --> 01:04:56,910
根据你这个message来动态展示的是吧

1702
01:04:57,610 --> 01:04:58,990
但是这块儿是静态的

1703
01:04:59,200 --> 01:05:01,570
就是我每一次展示都是一样的东西是吧

1704
01:05:01,840 --> 01:05:04,150
我每一次展示是不是都是我爱中国

1705
01:05:04,150 --> 01:05:06,940
中国爱我是不是不管你这个东西怎么变是吧

1706
01:05:07,570 --> 01:05:08,200
那我问你

1707
01:05:10,100 --> 01:05:11,180
我当dif的时候

1708
01:05:11,180 --> 01:05:13,280
就是我我的虚拟到我们去的

1709
01:05:13,280 --> 01:05:14,360
不去对比的时候

1710
01:05:14,360 --> 01:05:17,540
我第一次我第一次试一试吧

1711
01:05:17,540 --> 01:05:18,290
第一次是一

1712
01:05:18,320 --> 01:05:19,190
第二次是二

1713
01:05:19,730 --> 01:05:21,680
那么现在两次去对比的时候

1714
01:05:22,660 --> 01:05:28,990
我是不是只需我是不是只需要比对比这个就行了是不是只需要对比这个东西就就行了

1715
01:05:29,470 --> 01:05:29,860
是不是

1716
01:05:30,160 --> 01:05:31,960
这些东西我是不是都是静态的

1717
01:05:31,960 --> 01:05:34,390
我不需要去对比是不是是不是

1718
01:05:35,110 --> 01:05:36,430
是不是这就是静态

1719
01:05:36,430 --> 01:05:38,680
见我第一次和第二次、第三次我都是静态的

1720
01:05:38,680 --> 01:05:39,310
不需要对比

1721
01:05:39,700 --> 01:05:40,720
因为你不管怎么对比

1722
01:05:40,720 --> 01:05:41,860
他每一次都是一样的

1723
01:05:42,220 --> 01:05:43,900
那我怎么知道他是静态的

1724
01:05:45,110 --> 01:05:47,270
我怎么知道你这个节节点是静态的

1725
01:05:47,900 --> 01:05:49,190
这就是我在编译的时候

1726
01:05:50,030 --> 01:05:50,660
去处理的

1727
01:05:51,080 --> 01:05:52,130
我在编译的时候

1728
01:05:52,670 --> 01:05:54,530
所以说你看我在这儿就会编译

1729
01:05:54,680 --> 01:05:55,550
编译完了之后

1730
01:05:55,550 --> 01:05:56,900
你看我ST分析代码

1731
01:05:56,900 --> 01:05:57,530
分析完了之后

1732
01:05:57,530 --> 01:05:59,480
我在这块儿会去分析你这个数

1733
01:05:59,570 --> 01:06:00,650
你这个代码结构

1734
01:06:00,770 --> 01:06:02,660
会去给你加加一个标签

1735
01:06:03,880 --> 01:06:05,350
就会在你这个上面

1736
01:06:05,380 --> 01:06:07,030
你这个结构上面加一个标签

1737
01:06:08,660 --> 01:06:09,170
知道吧

1738
01:06:09,530 --> 01:06:10,970
这块上面去加一个标签

1739
01:06:12,590 --> 01:06:13,010
是吧

1740
01:06:13,100 --> 01:06:14,780
一加一个标签判断

1741
01:06:14,780 --> 01:06:16,550
你这个标签全是静态的

1742
01:06:17,030 --> 01:06:18,620
在你构建VIVO的时候

1743
01:06:18,650 --> 01:06:20,660
你这块就会构建一个静态的威露的

1744
01:06:21,110 --> 01:06:22,070
你就不会去

1745
01:06:23,680 --> 01:06:26,860
因为你这个同学们是不是你因为你构建的时候

1746
01:06:26,980 --> 01:06:28,060
你构建微弱的

1747
01:06:28,060 --> 01:06:29,680
是不是根据这个东西来构建微弱的

1748
01:06:29,920 --> 01:06:31,660
是不是根据这一块儿的东西构建微热的

1749
01:06:31,780 --> 01:06:33,790
但这个东西又是谁来生成的

1750
01:06:34,270 --> 01:06:35,380
这个东西又是谁来生成的

1751
01:06:35,380 --> 01:06:37,240
是不是我们compare生成的是不是

1752
01:06:38,020 --> 01:06:41,260
是不是这种东西是根据这些东西来构建味道的

1753
01:06:41,410 --> 01:06:43,720
那种东西是要根据我们的康贝尔生存了

1754
01:06:44,170 --> 01:06:44,590
是不是

1755
01:06:46,360 --> 01:06:46,720
是啊

1756
01:06:48,880 --> 01:06:51,490
是不是所以说我在这一辈儿我就会

1757
01:06:51,490 --> 01:06:52,810
如果你这个是个静态方法

1758
01:06:52,810 --> 01:06:54,070
比如说你这儿是个静态的

1759
01:06:55,080 --> 01:06:58,680
我就会拿调用一个静态的生成静态节点的这个方法

1760
01:06:58,680 --> 01:07:01,680
可能这个杠V下面V就是生成静态鉴定的方法

1761
01:07:01,830 --> 01:07:03,030
但是这块儿其实不是

1762
01:07:03,330 --> 01:07:05,850
真是我就说了做个做个比喻

1763
01:07:05,850 --> 01:07:07,230
同学们要明白这个过程

1764
01:07:07,960 --> 01:07:09,550
所以说这个杠V是谁来生产呢

1765
01:07:09,550 --> 01:07:10,780
就是我在company来生成的

1766
01:07:10,780 --> 01:07:13,300
我的compare就要去分析你这个代码节点

1767
01:07:13,330 --> 01:07:14,320
节点是静态的

1768
01:07:14,710 --> 01:07:15,130
知道吧

1769
01:07:15,340 --> 01:07:18,400
所以这一步我就会去分析代码节点是否是静态的

1770
01:07:18,400 --> 01:07:21,400
这一步是不是静态明白了吗

1771
01:07:21,880 --> 01:07:24,100
这一步分分析静态完成之后

1772
01:07:24,310 --> 01:07:25,150
然后去生成

1773
01:07:25,180 --> 01:07:27,400
把你这个生成这个语法树

1774
01:07:27,400 --> 01:07:28,120
抽象语法树

1775
01:07:28,150 --> 01:07:29,530
然后重新给生成真实的呢

1776
01:07:29,920 --> 01:07:32,260
那么这一步来给大家做一个这个这个东西

1777
01:07:36,260 --> 01:07:36,920
看着

1778
01:07:42,710 --> 01:07:46,130
这是我们刚刚看给你给你看到了什么编译类的代码是吧

1779
01:07:46,400 --> 01:07:48,470
我们刚刚看的是编译了一头的代码同学

1780
01:07:49,100 --> 01:07:49,490
是吧

1781
01:07:49,940 --> 01:07:50,840
编译的代码

1782
01:07:50,870 --> 01:07:53,720
编译的代码我们是不是给大家打打了一个console是吧

1783
01:07:54,110 --> 01:07:55,400
我们说了编译出来之后

1784
01:07:55,400 --> 01:07:59,090
他分析第一步先分析ST出来是什么东西

1785
01:07:59,090 --> 01:07:59,960
我们打印一下

1786
01:08:00,290 --> 01:08:01,940
看一下这个分析出来ST第一部

1787
01:08:01,940 --> 01:08:04,130
你看分析出来ST是什么结构是吧

1788
01:08:04,250 --> 01:08:05,570
就这种结构给大家看

1789
01:08:06,250 --> 01:08:08,140
这种结构你看他做了什么

1790
01:08:08,170 --> 01:08:09,820
你看他这第一层是个DV

1791
01:08:09,820 --> 01:08:10,270
看到吗

1792
01:08:10,390 --> 01:08:11,860
我们的代码在外边儿

1793
01:08:11,860 --> 01:08:12,790
我们这个代码是不是

1794
01:08:13,150 --> 01:08:15,160
我们这个代码第一层是不是DV

1795
01:08:15,190 --> 01:08:15,580
是不是

1796
01:08:15,940 --> 01:08:19,090
是不是个DVDV下边有几个标签儿是吧

1797
01:08:19,150 --> 01:08:20,500
DV下面就有

1798
01:08:20,830 --> 01:08:22,510
你看的下面就有好几个标签

1799
01:08:22,510 --> 01:08:24,640
你看DV下边这是个DV

1800
01:08:24,640 --> 01:08:25,720
它下面有几个子标签

1801
01:08:25,720 --> 01:08:27,700
你看有个H2是吧

1802
01:08:27,700 --> 01:08:28,270
有个button

1803
01:08:28,270 --> 01:08:30,370
有个DV是不是有个H2

1804
01:08:30,760 --> 01:08:31,270
是吧

1805
01:08:32,050 --> 01:08:33,190
一个button是

1806
01:08:33,190 --> 01:08:34,180
有一个DV是吧

1807
01:08:34,570 --> 01:08:35,170
当然换行

1808
01:08:35,170 --> 01:08:36,700
他也算了个标签是吧

1809
01:08:36,730 --> 01:08:40,840
也算了个资源数字所以说你看在H2下边儿

1810
01:08:40,840 --> 01:08:43,090
你看H2下边儿尤其做了什么

1811
01:08:43,740 --> 01:08:45,450
A区下边儿又有它的子元素

1812
01:08:45,450 --> 01:08:47,040
你看圈下边儿

1813
01:08:48,380 --> 01:08:49,520
你看他又有资源数

1814
01:08:49,550 --> 01:08:50,540
你看它的子元素

1815
01:08:50,540 --> 01:08:51,950
你看H2

1816
01:08:51,980 --> 01:08:54,020
你看就是我们这个子元素是H2

1817
01:08:54,020 --> 01:08:55,100
就是这坨子元素是吧

1818
01:08:55,400 --> 01:08:56,120
他这一坨子元素

1819
01:08:56,120 --> 01:08:57,290
你看这一坨是吧

1820
01:08:57,350 --> 01:08:58,730
Text元素是吧

1821
01:08:59,310 --> 01:09:01,440
是不是这是他变异是不是

1822
01:09:02,570 --> 01:09:03,890
这是变异成这种结构

1823
01:09:04,100 --> 01:09:05,870
它把你的代码就翻译成这种结构了

1824
01:09:06,200 --> 01:09:06,830
明白了吗

1825
01:09:09,000 --> 01:09:09,600
明白了吗

1826
01:09:09,660 --> 01:09:11,310
把你的代码就分成这种结构

1827
01:09:13,420 --> 01:09:15,010
它会形成这这种结构

1828
01:09:15,910 --> 01:09:16,390
V2

1829
01:09:16,420 --> 01:09:18,730
这里边儿分析这种结构的代码是怎么分析的

1830
01:09:20,180 --> 01:09:20,750
怎么分析的

1831
01:09:20,960 --> 01:09:21,800
正则匹配

1832
01:09:23,450 --> 01:09:24,200
正则匹配

1833
01:09:28,500 --> 01:09:31,200
正则匹配知道吧

1834
01:09:32,230 --> 01:09:33,970
这个匹配不

1835
01:09:35,620 --> 01:09:35,860
是啊

1836
01:09:35,860 --> 01:09:36,400
同学们

1837
01:09:37,480 --> 01:09:38,800
所以你看这一部V2

1838
01:09:38,800 --> 01:09:41,080
这里边就是一个什么正则匹配的过程

1839
01:09:41,140 --> 01:09:43,690
大家看生成这个代码就是正则匹配的过程

1840
01:09:44,290 --> 01:09:46,660
这里边就是这一坨一坨看见了吗

1841
01:09:47,050 --> 01:09:48,760
这一坨各种正则表达式

1842
01:09:49,440 --> 01:09:51,780
这是各种正则表达式去匹配知道吧

1843
01:09:52,050 --> 01:09:56,340
各种正则表达式这里边包括这儿也有各种正则表达式去匹配

1844
01:09:56,790 --> 01:10:03,720
我们明天给大家讲V2模板编译这一块的缺点是V3它优化会优化什么东西

1845
01:10:04,020 --> 01:10:06,240
你看各种正则表达式去匹配

1846
01:10:07,410 --> 01:10:08,010
威尔

1847
01:10:08,100 --> 01:10:11,340
正匹配真的匹配有一个东西叫什么

1848
01:10:11,400 --> 01:10:12,780
正则匹配里边有个算法

1849
01:10:14,220 --> 01:10:16,650
正则匹配里边儿有一个什么回宿是吧

1850
01:10:17,190 --> 01:10:19,410
正则匹配是采用什么回溯算法是吧

1851
01:10:19,590 --> 01:10:20,760
回溯机制是吧

1852
01:10:21,540 --> 01:10:23,520
那么回溯机制就会有什么性能问题

1853
01:10:23,640 --> 01:10:26,220
如果复杂的正在匹配表达式就有性的问题

1854
01:10:27,570 --> 01:10:30,270
所以说这也是为什么他要优化的原因

1855
01:10:31,360 --> 01:10:31,630
是吧

1856
01:10:31,690 --> 01:10:32,230
性的问题

1857
01:10:33,670 --> 01:10:35,110
所以在这一步

1858
01:10:35,720 --> 01:10:38,360
他会用正则表达式匹去去匹配

1859
01:10:38,360 --> 01:10:40,040
你看这一步拿到拿到之后

1860
01:10:40,040 --> 01:10:41,780
在这这边儿他怎么匹配的呢

1861
01:10:41,810 --> 01:10:42,860
他维护了一个赞

1862
01:10:42,890 --> 01:10:43,640
维护了一个站

1863
01:10:44,120 --> 01:10:46,280
维护这个站维护了站去做什么

1864
01:10:47,390 --> 01:10:48,320
做了什么处理呢

1865
01:10:48,710 --> 01:10:49,370
很简单了

1866
01:10:49,700 --> 01:10:51,410
维护那个站去做什么处理

1867
01:10:51,440 --> 01:10:52,190
怕谁贴标

1868
01:10:52,220 --> 01:10:54,080
拿到你的模板去做什么处理

1869
01:10:54,560 --> 01:10:55,520
然后拿到这里边儿

1870
01:10:55,610 --> 01:10:56,390
他会去分析

1871
01:10:56,390 --> 01:10:59,900
你看拿到你的HTML判断这个H2的B

1872
01:11:00,530 --> 01:11:03,470
去便利你H前面每一个字符是吧

1873
01:11:03,590 --> 01:11:04,760
他先去看你的字符

1874
01:11:04,790 --> 01:11:05,690
就是相当于你

1875
01:11:06,300 --> 01:11:07,590
去遍历每一个字符

1876
01:11:07,710 --> 01:11:09,120
先去便利你这个字符

1877
01:11:09,120 --> 01:11:11,010
然后再去便利地这个字符

1878
01:11:11,010 --> 01:11:11,940
然后再去便利

1879
01:11:11,940 --> 01:11:14,340
这个字符在便利V这个字符在便利空格这个字符

1880
01:11:14,340 --> 01:11:16,350
一个一个字符在遍历完完成

1881
01:11:16,500 --> 01:11:17,970
然后再遍历这个字符的时候

1882
01:11:18,500 --> 01:11:19,850
他会做一每一个处理

1883
01:11:19,880 --> 01:11:20,480
你看见吗

1884
01:11:20,720 --> 01:11:21,770
变成不同的字符的时候

1885
01:11:21,770 --> 01:11:22,670
它会做不同的处理

1886
01:11:22,940 --> 01:11:24,320
所以你看他怕是HTML

1887
01:11:24,320 --> 01:11:26,570
这是这块儿会遍历字符看见吗

1888
01:11:26,810 --> 01:11:28,370
遍历字符会遍历这个字符

1889
01:11:28,370 --> 01:11:29,390
如果这个字符

1890
01:11:29,900 --> 01:11:30,770
如果这个字符

1891
01:11:30,800 --> 01:11:31,400
你看这里边儿

1892
01:11:31,430 --> 01:11:32,750
如果这个字符同学们

1893
01:11:33,700 --> 01:11:35,170
这个字符如果是这个东西

1894
01:11:35,680 --> 01:11:37,630
这个字符它会判断很多种情况

1895
01:11:37,990 --> 01:11:40,210
你看会判断是否是做事条件

1896
01:11:40,210 --> 01:11:41,140
做事的这种情况

1897
01:11:41,350 --> 01:11:43,540
会判断是否是做事的情况

1898
01:11:43,810 --> 01:11:47,560
会判断是否是这种条件注释这种情况

1899
01:11:47,560 --> 01:11:51,100
还会判断是否是什么这种这种标识符的这种情况

1900
01:11:51,340 --> 01:11:52,210
然后会判断是

1901
01:11:52,780 --> 01:11:56,140
是否是结束的为的标签的这种情况

1902
01:11:57,050 --> 01:11:59,690
然后去判断是否是开始表示这种情况

1903
01:12:00,710 --> 01:12:01,250
看到吗

1904
01:12:01,580 --> 01:12:03,710
然后它不同的情况去做不同的处理

1905
01:12:03,770 --> 01:12:04,220
看到吗

1906
01:12:04,460 --> 01:12:06,920
所以这一步你看它会判断匹配

1907
01:12:06,920 --> 01:12:09,290
是否是你看他这儿就拿到什么

1908
01:12:09,410 --> 01:12:11,120
拿到证则这种东西来匹配了

1909
01:12:11,120 --> 01:12:13,760
你看各种不同的正则表达式

1910
01:12:13,760 --> 01:12:14,330
他就用上了

1911
01:12:14,330 --> 01:12:16,160
看到的东西不同

1912
01:12:16,220 --> 01:12:17,270
正则表达式就用上了

1913
01:12:17,270 --> 01:12:17,990
看见了吗

1914
01:12:19,210 --> 01:12:19,630
看到吗

1915
01:12:19,780 --> 01:12:22,060
是不是各种不同正则表达式它也用上了

1916
01:12:22,360 --> 01:12:22,840
看到吧

1917
01:12:25,280 --> 01:12:27,590
这是他明天我跟你说这差的东西

1918
01:12:27,590 --> 01:12:30,230
为什么GSX又是不同的玩意儿

1919
01:12:30,500 --> 01:12:31,670
完全性能都不一样

1920
01:12:31,670 --> 01:12:32,990
决定不一样

1921
01:12:32,990 --> 01:12:35,180
你看这边是完全的东西

1922
01:12:35,180 --> 01:12:36,350
就完全就不一样了

1923
01:12:36,350 --> 01:12:36,620
是吧

1924
01:12:37,390 --> 01:12:38,290
这里边儿各种

1925
01:12:38,290 --> 01:12:40,600
你看正则表达式各种完全不同的东西

1926
01:12:40,600 --> 01:12:42,940
他就表达式的东西是不是

1927
01:12:43,740 --> 01:12:45,180
是不是完全是不是就不一样啦

1928
01:12:45,240 --> 01:12:50,820
这块的东西那就是很多很多很多很多很多不同的这种东西全全部去匹配

1929
01:12:51,440 --> 01:12:52,940
匹配完了之后拿到你看

1930
01:12:52,940 --> 01:12:54,320
他会拿到你这里边儿东西

1931
01:12:54,500 --> 01:12:56,000
匹配完了之后他会拿到你看

1932
01:12:56,510 --> 01:12:58,700
就比如说我们现在匹配这个DV标签

1933
01:12:58,730 --> 01:12:59,630
匹配完了之后

1934
01:13:01,320 --> 01:13:03,990
他会去构建一个调用一个什么

1935
01:13:04,140 --> 01:13:05,820
调用一个逻辑去做处理

1936
01:13:05,820 --> 01:13:07,740
这个逻辑做处理做什么逻辑处理

1937
01:13:08,100 --> 01:13:10,770
就是相当于是我一个

1938
01:13:10,770 --> 01:13:12,150
先说我们结束开始吧

1939
01:13:12,180 --> 01:13:12,900
开始这个过程

1940
01:13:12,900 --> 01:13:15,450
你看他会去处理我们就开始这个东西

1941
01:13:15,450 --> 01:13:17,010
开始这个东西要怎么处理的同学们

1942
01:13:17,600 --> 01:13:19,160
他会拿到你这个里边的标签儿

1943
01:13:19,190 --> 01:13:21,020
然后去拿做什么坐骑

1944
01:13:21,020 --> 01:13:23,510
就是去便利你的标签里面所有属性

1945
01:13:23,900 --> 01:13:24,440
看到吗

1946
01:13:24,740 --> 01:13:26,210
它会判断你这里边个同

1947
01:13:26,270 --> 01:13:27,710
因为你匹配到了正则

1948
01:13:27,770 --> 01:13:30,800
然后他就便利你正则里边很多各种属性

1949
01:13:30,800 --> 01:13:31,190
知道吧

1950
01:13:31,640 --> 01:13:35,240
什么威刚一夫各种属性来构建你这些属性

1951
01:13:35,270 --> 01:13:35,900
懂不懂

1952
01:13:37,280 --> 01:13:38,840
然后这些东西这些属性

1953
01:13:39,050 --> 01:13:40,130
你看这些属性

1954
01:13:40,130 --> 01:13:41,180
然后构建完了之后

1955
01:13:41,910 --> 01:13:43,470
你看这里边儿各种属性

1956
01:13:44,310 --> 01:13:46,440
属性构建完了之后就是我们的

1957
01:13:46,440 --> 01:13:47,550
这是我们处理那个东西

1958
01:13:47,550 --> 01:13:49,260
处理开始标签

1959
01:13:49,680 --> 01:13:52,980
所以说他这里面完全没有学习的一个东西

1960
01:13:53,160 --> 01:13:55,650
完全没有学习的一个一个一个东西好吧

1961
01:13:56,620 --> 01:13:59,440
是不是完全没有一个学习的一个这个这个意义

1962
01:13:59,680 --> 01:14:02,080
所以说我们一直在给大家说模板编译

1963
01:14:02,080 --> 01:14:06,070
我们学给你讲关于二模板编译的原因是什么

1964
01:14:06,400 --> 01:14:08,620
我们给你们讲V2模板编译的原因是什么

1965
01:14:08,620 --> 01:14:08,950
同学们

1966
01:14:10,100 --> 01:14:10,820
原因是什么

1967
01:14:11,330 --> 01:14:13,280
原因是让你知道他的缺点

1968
01:14:13,580 --> 01:14:16,010
并不是让你学习他这个模板编译的原理

1969
01:14:16,460 --> 01:14:17,090
知不知道

1970
01:14:18,650 --> 01:14:19,280
明白吧

1971
01:14:20,340 --> 01:14:22,500
对他是一个反面教材

1972
01:14:22,890 --> 01:14:25,830
我们给你们讲的这个东西是是是是这个意思

1973
01:14:25,890 --> 01:14:27,090
并不是让你来学习

1974
01:14:27,090 --> 01:14:28,890
他就说模板编译这块的东西

1975
01:14:29,010 --> 01:14:31,500
你们不需要花太大的心思去学习

1976
01:14:31,500 --> 01:14:32,250
他懂不懂

1977
01:14:33,010 --> 01:14:33,760
知不知道

1978
01:14:34,090 --> 01:14:36,850
所以说这块儿东西你们不需要花太多心思去学习

1979
01:14:37,810 --> 01:14:39,550
吃这块儿东西吃

1980
01:14:39,850 --> 01:14:41,020
然后我们在这一步

1981
01:14:42,060 --> 01:14:43,320
咳咳

1982
01:14:44,180 --> 01:14:44,720
咳

1983
01:14:48,200 --> 01:14:49,370
然后我们这一步

1984
01:14:49,960 --> 01:14:50,890
回到这个里边儿

1985
01:14:51,160 --> 01:14:51,880
到这里边儿

1986
01:14:51,880 --> 01:14:53,320
你看我们挣得这个东西

1987
01:14:53,680 --> 01:14:56,200
当然也稍微给大家稍微还是再说一下

1988
01:14:56,380 --> 01:14:57,850
就是你看我们这个标签

1989
01:14:57,850 --> 01:15:00,760
你看这一步就是然后他就会处理什么

1990
01:15:01,090 --> 01:15:02,920
这是几个匹配的标签

1991
01:15:02,920 --> 01:15:05,440
匹配完了是不是还有结束的标签

1992
01:15:05,620 --> 01:15:07,150
结束的标签匹配完了之后

1993
01:15:07,360 --> 01:15:08,860
他会维护一个堆栈同学们

1994
01:15:09,390 --> 01:15:10,980
这种这种匹配标签儿

1995
01:15:10,980 --> 01:15:12,960
在开始的时候和结束的标识后

1996
01:15:13,020 --> 01:15:13,620
他会构建

1997
01:15:13,620 --> 01:15:15,060
你看在开始的时候

1998
01:15:15,090 --> 01:15:16,710
在一个标签开始的时候

1999
01:15:16,920 --> 01:15:18,510
他会构建一个这种这种东西

2000
01:15:18,510 --> 01:15:20,970
这种东西同学们看这熟不熟悉

2001
01:15:21,540 --> 01:15:22,890
是不是这种这种结构

2002
01:15:23,130 --> 01:15:24,930
你看Starr塔是

2003
01:15:25,200 --> 01:15:28,500
Start a是不是a tribute to sta

2004
01:15:29,150 --> 01:15:30,980
Take name是不是这种东西

2005
01:15:30,980 --> 01:15:31,850
Take name是吧

2006
01:15:31,850 --> 01:15:34,280
这个是不是就这个东西

2007
01:15:34,580 --> 01:15:35,090
看到吗

2008
01:15:36,200 --> 01:15:38,150
这种东西就这个东西知不知道

2009
01:15:38,210 --> 01:15:40,430
就是他生成出来的这个这个ST

2010
01:15:41,060 --> 01:15:43,640
就这儿他就会去在每一次开始的时候

2011
01:15:43,640 --> 01:15:44,630
他会构建这个东西

2012
01:15:45,170 --> 01:15:47,240
构建一个单独一个标签的ST

2013
01:15:48,560 --> 01:15:49,550
然后在结束的时候

2014
01:15:49,550 --> 01:15:50,870
然后又会做一些处理

2015
01:15:51,110 --> 01:15:52,910
把这个东西先构建好吗

2016
01:15:53,060 --> 01:15:56,540
构建好了之后是构建好了之后同学们

2017
01:16:03,700 --> 01:16:04,390
哎呀

2018
01:16:06,400 --> 01:16:07,390
构建好了之后

2019
01:16:07,750 --> 01:16:09,310
然后就就回到哪块儿

2020
01:16:09,340 --> 01:16:11,740
就回到了我们这个这个这个这个

2021
01:16:12,660 --> 01:16:13,620
这里边儿是在哪儿

2022
01:16:15,240 --> 01:16:17,820
这儿是这是构建好了

2023
01:16:17,820 --> 01:16:21,600
构建好了他就会里边儿在你便利的过程就会添加这些属性

2024
01:16:21,600 --> 01:16:22,830
你看处理的过程

2025
01:16:22,830 --> 01:16:23,820
这是我们处理是吧

2026
01:16:23,910 --> 01:16:26,070
处理的过程这是我们构建好的是吧

2027
01:16:26,280 --> 01:16:30,540
处理的过程他会去把你这些所有上面的属性往这里边儿去添加似的

2028
01:16:30,780 --> 01:16:32,790
这是我们各种东西就会添加

2029
01:16:33,000 --> 01:16:33,960
添加完了之后

2030
01:16:34,820 --> 01:16:37,010
然后在结束标签的时候

2031
01:16:37,280 --> 01:16:39,170
结束标签的时候给大家稍微说一下

2032
01:16:39,890 --> 01:16:41,000
结束标签的时候

2033
01:16:41,120 --> 01:16:42,770
在我们这儿结束标签的时候

2034
01:16:42,770 --> 01:16:47,660
它会掉一个掉一个结束标签这个函数结束表现这个函数呢

2035
01:16:47,660 --> 01:16:48,530
其实也很简单的

2036
01:16:49,900 --> 01:16:50,770
他会做一个什么

2037
01:16:51,250 --> 01:16:52,300
可以做一个我们的

2038
01:16:52,330 --> 01:16:55,000
相当于把结束这这套东西拿过来

2039
01:16:55,000 --> 01:16:56,260
然后去做一个处理

2040
01:16:56,260 --> 01:16:58,450
然后到底是什么样的标签儿

2041
01:16:58,660 --> 01:16:59,740
然后去做一个什么

2042
01:16:59,860 --> 01:17:01,510
做一个堆栈的一个处理

2043
01:17:01,630 --> 01:17:04,330
然后我们回到你看他在里边会维护一个堆栈

2044
01:17:04,690 --> 01:17:05,920
就是你看同学们

2045
01:17:06,540 --> 01:17:08,850
维护对战是什么原因就是

2046
01:17:09,740 --> 01:17:13,910
就是你看我给大家看这个H7名H的结构

2047
01:17:14,300 --> 01:17:16,400
你看如果我没有处理这个HTML

2048
01:17:16,550 --> 01:17:17,480
我是不是先处理他

2049
01:17:17,510 --> 01:17:18,980
处理他的时候我要分析代码

2050
01:17:19,100 --> 01:17:20,720
我从这儿是不是这么分析的

2051
01:17:20,720 --> 01:17:22,370
分析到这儿在这儿在这儿在这儿

2052
01:17:22,400 --> 01:17:23,930
然后再在这儿

2053
01:17:24,200 --> 01:17:25,970
但是我处理它的时候怎么办

2054
01:17:27,970 --> 01:17:30,130
是不是我处理它的时候

2055
01:17:30,160 --> 01:17:31,240
处理到这儿的时候

2056
01:17:31,840 --> 01:17:35,470
是不是就处理到处理到这儿的时候是不是

2057
01:17:36,770 --> 01:17:37,670
说到这儿的时候

2058
01:17:37,910 --> 01:17:38,870
处理完成之后

2059
01:17:38,990 --> 01:17:40,310
是不是我就要记开

2060
01:17:40,490 --> 01:17:41,450
就要把这个东西

2061
01:17:41,480 --> 01:17:42,950
因为我他们还没处理完吗

2062
01:17:43,010 --> 01:17:44,870
是不是因为他还有结束标签似的

2063
01:17:45,110 --> 01:17:46,670
我是不是就怕他先入栈

2064
01:17:47,220 --> 01:17:49,050
入站然后继续再处理他是吧

2065
01:17:49,560 --> 01:17:50,370
他处理完了之后

2066
01:17:50,370 --> 01:17:52,470
是不是又他处理到这儿来

2067
01:17:52,470 --> 01:17:53,550
处理处理到这儿来

2068
01:17:53,640 --> 01:17:55,200
是不是他这一块儿要入栈

2069
01:17:55,410 --> 01:17:57,000
然后是不是要处理文本是吧

2070
01:17:57,090 --> 01:17:58,080
又处理这一块儿是吧

2071
01:17:58,560 --> 01:17:59,130
处理这一块儿

2072
01:17:59,130 --> 01:18:01,200
然后处理到结束标签的时候

2073
01:18:01,680 --> 01:18:04,260
拿我的占领是不是拿我占领这个东西

2074
01:18:04,290 --> 01:18:07,560
占领这个东西刚好就是H2标签跟他一起出战

2075
01:18:08,020 --> 01:18:08,980
那出了站之后

2076
01:18:09,010 --> 01:18:10,180
这个标签是不是处理完了

2077
01:18:10,240 --> 01:18:11,710
然后就处理这个标签明白吗

2078
01:18:11,980 --> 01:18:12,910
他维护一个站

2079
01:18:14,160 --> 01:18:14,670
是吧

2080
01:18:16,160 --> 01:18:19,190
对构建了一个类似ST的东西是不是

2081
01:18:22,590 --> 01:18:23,550
但这个东西

2082
01:18:24,470 --> 01:18:25,730
对你就可以这么理解

2083
01:18:26,180 --> 01:18:27,020
可以这么理解

2084
01:18:27,080 --> 01:18:27,740
可以这么理解

2085
01:18:28,160 --> 01:18:29,750
所以说这一步他就会完成

2086
01:18:29,750 --> 01:18:30,440
完成了之后

2087
01:18:30,440 --> 01:18:31,940
你看同学们完成了之后

2088
01:18:31,940 --> 01:18:33,800
它就会生成一个这么样的一个ST

2089
01:18:34,400 --> 01:18:35,450
这么样一个ST

2090
01:18:35,450 --> 01:18:36,530
你看生成完了之后

2091
01:18:37,950 --> 01:18:39,450
这样一个ASP生成完了之后

2092
01:18:39,450 --> 01:18:41,400
然后就去做什么做一个便利的优化

2093
01:18:41,430 --> 01:18:42,210
你看做优化

2094
01:18:42,690 --> 01:18:43,890
做优化的这一步

2095
01:18:44,010 --> 01:18:48,240
然后就就会去便利这个就会全部去便利你这个ST看什么

2096
01:18:48,450 --> 01:18:50,430
他会去便利这个ST看了吗

2097
01:18:50,880 --> 01:18:51,240
对吧

2098
01:18:52,110 --> 01:18:53,610
便利你这个ST看了吗

2099
01:18:53,760 --> 01:18:54,210
是吧

2100
01:18:54,660 --> 01:18:55,860
便利这个ST

2101
01:18:56,370 --> 01:18:57,570
便利这个ST呢

2102
01:18:57,570 --> 01:18:58,410
有一个什么过程

2103
01:18:59,280 --> 01:19:02,760
你看他就是打标签的过程便利ST打标签的过程

2104
01:19:02,760 --> 01:19:03,900
打标签的过程怎么打

2105
01:19:04,560 --> 01:19:05,100
同学们

2106
01:19:05,130 --> 01:19:05,700
很简单

2107
01:19:05,730 --> 01:19:06,360
也很简单

2108
01:19:07,000 --> 01:19:08,740
因为你已经有了ST的结构

2109
01:19:08,740 --> 01:19:12,850
是不是你也知道你具体哪一个节点是动态节点是吧

2110
01:19:13,240 --> 01:19:15,310
我们是不是知道这个节点是动态节点

2111
01:19:15,310 --> 01:19:17,320
H2这个文本节点是不是动态节点

2112
01:19:17,320 --> 01:19:19,270
是不是因为有威刚一幅这个指令是吧

2113
01:19:19,420 --> 01:19:20,500
我们知道它是动态纪念

2114
01:19:20,650 --> 01:19:21,850
那么打标签就很简单了

2115
01:19:22,090 --> 01:19:22,780
我首先

2116
01:19:23,280 --> 01:19:25,320
我遍历整个这个ST

2117
01:19:25,470 --> 01:19:28,500
我首先给他打一个静态惊人的标签儿

2118
01:19:28,650 --> 01:19:30,690
是先给他打一个静态静态标签

2119
01:19:30,960 --> 01:19:33,690
然后在递归递归到他地

2120
01:19:33,690 --> 01:19:34,920
在他的时候

2121
01:19:35,460 --> 01:19:35,970
发现

2122
01:19:37,600 --> 01:19:42,580
然后把把把父节点的这个这个这个就是什么父节点的这个

2123
01:19:43,670 --> 01:19:45,650
这个静态静态标签传递给他是吧

2124
01:19:45,650 --> 01:19:46,190
传递给他

2125
01:19:46,400 --> 01:19:47,390
传递给他之后

2126
01:19:47,750 --> 01:19:48,980
然后到他这里边儿

2127
01:19:49,040 --> 01:19:50,060
然后发现

2128
01:19:50,450 --> 01:19:53,180
就是就是一个递归的过程中发现他

2129
01:19:53,180 --> 01:19:54,350
这里面是个动态的

2130
01:19:54,900 --> 01:19:56,790
那动态的说明什么说明

2131
01:19:57,400 --> 01:19:59,650
他所有的父元素都不是静态节点

2132
01:19:59,650 --> 01:20:01,510
是不是是不是从他开始

2133
01:20:01,510 --> 01:20:03,310
所有的元素都不是进来捡是吧

2134
01:20:03,490 --> 01:20:04,360
那么它有什么

2135
01:20:04,960 --> 01:20:06,400
D龟幼龟回去是吧

2136
01:20:06,430 --> 01:20:07,210
有各地的过程

2137
01:20:07,210 --> 01:20:08,830
又归回去是吧

2138
01:20:08,860 --> 01:20:09,670
用回溯回去

2139
01:20:10,030 --> 01:20:10,870
所以我们在这一步

2140
01:20:10,870 --> 01:20:12,160
你看优化这一步

2141
01:20:12,950 --> 01:20:14,780
点一会儿你看ST是吧

2142
01:20:14,870 --> 01:20:15,380
ST

2143
01:20:15,440 --> 01:20:18,350
然后首先你看给root打标签是吧

2144
01:20:18,380 --> 01:20:25,310
给root打标签打标签判断静态g ret当前这个静态技能是否就是当前我这个静态节点

2145
01:20:25,730 --> 01:20:26,690
是否是静态节点

2146
01:20:26,930 --> 01:20:29,540
如果判是否判断是静态节点很简单

2147
01:20:29,690 --> 01:20:32,270
判断当前节点是否是静态节点就很简单了是吧

2148
01:20:32,390 --> 01:20:33,560
没有动态属性是吧

2149
01:20:34,290 --> 01:20:34,740
是不是

2150
01:20:35,510 --> 01:20:37,010
是不是你看我这一步

2151
01:20:37,640 --> 01:20:39,080
然后判断是否是今天几点

2152
01:20:39,500 --> 01:20:40,310
如果不是

2153
01:20:40,370 --> 01:20:41,180
如果是

2154
01:20:41,240 --> 01:20:44,390
如果是你看如判断是否是静态经典

2155
01:20:45,700 --> 01:20:46,810
如果是今天几点

2156
01:20:47,880 --> 01:20:49,350
如果是今天几点怎么办

2157
01:20:49,380 --> 01:20:50,400
如果静态节点是一

2158
01:20:50,430 --> 01:20:50,910
那怎么办

2159
01:20:50,940 --> 01:20:51,450
他又递归

2160
01:20:51,450 --> 01:20:53,970
你看判断我这个结结结结点什么

2161
01:20:54,000 --> 01:20:56,670
所有的子节点是不是所有的子节点

2162
01:20:57,350 --> 01:20:59,780
拿到我所有今天截止节点看到吗

2163
01:21:00,230 --> 01:21:01,550
是不是拿到子节点

2164
01:21:01,550 --> 01:21:04,880
然后遍历我所有的子节点是不是经太经典了吗

2165
01:21:05,030 --> 01:21:07,700
变成所有的子节点是不是经太经典了吗

2166
01:21:08,090 --> 01:21:10,430
如果只要有一个直接点

2167
01:21:10,430 --> 01:21:11,840
它不是静态节点看到吗

2168
01:21:12,520 --> 01:21:13,570
只要有一个直接点

2169
01:21:13,570 --> 01:21:14,290
不是静态节点

2170
01:21:14,380 --> 01:21:17,080
那我这个副节点当前这个点是不是也不是进来捡了

2171
01:21:17,350 --> 01:21:19,030
是不是明白了吗

2172
01:21:19,680 --> 01:21:21,150
同学们明白这个过程吗

2173
01:21:21,210 --> 01:21:21,750
这就是

2174
01:21:23,390 --> 01:21:24,260
明白这个吗

2175
01:21:24,680 --> 01:21:25,640
这个就很简单啦

2176
01:21:25,790 --> 01:21:26,930
就是我所有的子节点

2177
01:21:27,140 --> 01:21:28,310
只要他不是静态检

2178
01:21:28,340 --> 01:21:30,170
那我这个副节点他肯定就不是静态节点

2179
01:21:30,200 --> 01:21:33,110
是不是只要所有的子节点全是静态节点

2180
01:21:33,350 --> 01:21:34,190
那块儿就不会走

2181
01:21:34,190 --> 01:21:36,470
是不是说明我这个副节点就是静态节点

2182
01:21:37,280 --> 01:21:37,640
对啊

2183
01:21:37,670 --> 01:21:39,110
他这个就是一个深度递归

2184
01:21:39,740 --> 01:21:41,120
他这个就是一个深度递归的过程

2185
01:21:41,390 --> 01:21:41,840
知道吧

2186
01:21:42,080 --> 01:21:43,460
你看他是也拿到

2187
01:21:43,460 --> 01:21:45,410
你看他是先拿到第一个跳的

2188
01:21:45,800 --> 01:21:47,000
然后不断去递归

2189
01:21:47,950 --> 01:21:48,700
璧归完了之后

2190
01:21:48,700 --> 01:21:50,440
就是这个东西就是一个

2191
01:21:53,120 --> 01:21:53,990
就这么个过程吧

2192
01:21:54,020 --> 01:21:54,380
是吧

2193
01:21:56,560 --> 01:21:57,940
如果你看我先到这儿来

2194
01:21:57,940 --> 01:21:58,870
到这儿来是吧

2195
01:21:58,900 --> 01:21:59,260
到这来

2196
01:21:59,440 --> 01:22:01,120
如果这个节节点是静态节点

2197
01:22:01,120 --> 01:22:02,230
这个节点也是静态节点

2198
01:22:03,140 --> 01:22:04,640
那是不是先判断到这一步

2199
01:22:04,700 --> 01:22:06,110
那这个点是不是也是静态节点

2200
01:22:06,650 --> 01:22:09,080
但是我我现在只低估了这条路是不是

2201
01:22:09,200 --> 01:22:10,430
然后我又递归这条路

2202
01:22:11,080 --> 01:22:13,300
发现这个节点不是今天几点那回

2203
01:22:13,480 --> 01:22:15,100
那这个节点是不是也就不是今天几点

2204
01:22:15,130 --> 01:22:16,750
那我回回再回到这一步的时候

2205
01:22:16,900 --> 01:22:18,190
这一步是不是又不是经太经典

2206
01:22:18,250 --> 01:22:19,930
是不是因为我递归的过程

2207
01:22:19,960 --> 01:22:20,980
我会是什么过程

2208
01:22:21,040 --> 01:22:22,000
我是先到这一步

2209
01:22:22,060 --> 01:22:22,630
再到这来

2210
01:22:22,630 --> 01:22:23,170
再到这儿来

2211
01:22:23,290 --> 01:22:24,850
然后再回答再回到这儿来

2212
01:22:24,850 --> 01:22:25,660
再回到这儿来是吧

2213
01:22:25,780 --> 01:22:26,590
然后再到这来

2214
01:22:26,620 --> 01:22:27,160
再到这儿来

2215
01:22:27,220 --> 01:22:28,000
然后再回到这儿来

2216
01:22:28,000 --> 01:22:28,540
再回到这儿

2217
01:22:28,630 --> 01:22:30,250
回到这儿来是不是他是这么个过程

2218
01:22:30,250 --> 01:22:32,380
是不是同学们所以这个过程是一个什么过程

2219
01:22:32,590 --> 01:22:34,000
这个先弟后归的过程是不是

2220
01:22:34,240 --> 01:22:36,760
所以这就是一个什么达标卷打标签的过程

2221
01:22:37,030 --> 01:22:38,590
是不是打静态标签的过程

2222
01:22:38,620 --> 01:22:39,190
明白了吗

2223
01:22:44,980 --> 01:22:45,400
是吧

2224
01:22:45,640 --> 01:22:46,840
好这块明白了

2225
01:22:48,240 --> 01:22:49,980
好这块明白了之后呢

2226
01:22:49,980 --> 01:22:56,610
我们在再回过头来再来看我们这个静态节点标记完了之后再来转换了转换代码就很简单了

2227
01:22:56,700 --> 01:22:57,630
就生成代码了吧

2228
01:22:57,960 --> 01:22:58,200
是吧

2229
01:22:58,410 --> 01:22:59,310
生成代码

2230
01:22:59,520 --> 01:23:00,570
生成代码就很简单

2231
01:23:00,750 --> 01:23:01,830
拿到你所谓的什么

2232
01:23:02,690 --> 01:23:06,980
首先我要构建一个生成代码的一个基本基本的一个代码的样式是吧

2233
01:23:07,160 --> 01:23:08,660
生成了基本一个代码的样式

2234
01:23:08,870 --> 01:23:10,430
这个基本代码样式是什么意思呢

2235
01:23:11,180 --> 01:23:13,370
就是我有一个基本的一个生成代码的一个

2236
01:23:13,370 --> 01:23:16,400
生成代码的一个一个一个一个相当于一个配置

2237
01:23:16,610 --> 01:23:20,270
生成代码的一个基本的配置虽然买的基本配置

2238
01:23:20,570 --> 01:23:21,650
然后这个基本配置呢

2239
01:23:23,080 --> 01:23:24,940
然后拿过来这个基本配置呢

2240
01:23:24,940 --> 01:23:28,570
你看同学这里边就有各种的什么option什么

2241
01:23:28,570 --> 01:23:35,020
然后有一些什么一些一些一些一些各种的一些不同的一些

2242
01:23:35,020 --> 01:23:37,960
给你看一下这里边儿不同的一些

2243
01:23:39,000 --> 01:23:40,650
各种什么静态接连

2244
01:23:40,650 --> 01:23:43,200
你看它如果是静态接连就是生成代码

2245
01:23:43,230 --> 01:23:44,580
然后我还是回到这边来吧

2246
01:23:47,330 --> 01:23:47,810
深圳的吗

2247
01:23:47,810 --> 01:23:48,470
这个是深圳

2248
01:23:48,470 --> 01:23:49,100
这是深圳的吗

2249
01:23:49,100 --> 01:23:50,090
是不是ST

2250
01:23:50,090 --> 01:23:50,690
如果是ST

2251
01:23:50,690 --> 01:23:54,350
你看会构建这个什么get element event是吧

2252
01:23:54,590 --> 01:23:55,880
就是获取你这个节点

2253
01:23:55,880 --> 01:23:57,080
节点把你这个ST

2254
01:23:57,080 --> 01:23:58,040
这是我们ST是吧

2255
01:23:58,280 --> 01:23:59,090
拿到你的ST

2256
01:23:59,090 --> 01:24:02,000
判断你的ST是否是静态点同学是不是今天寄是吧

2257
01:24:02,580 --> 01:24:03,450
如果是静态记点

2258
01:24:03,450 --> 01:24:04,530
你看它会生成

2259
01:24:04,560 --> 01:24:06,570
如果是静态节点调用方法

2260
01:24:06,570 --> 01:24:08,490
你看就返回这个东西是不是

2261
01:24:09,430 --> 01:24:09,820
是吧

2262
01:24:09,850 --> 01:24:10,840
如果是静态节点

2263
01:24:11,110 --> 01:24:12,010
如果是静态节点

2264
01:24:12,250 --> 01:24:13,420
它会返回哪一套东西

2265
01:24:13,450 --> 01:24:15,970
返回这套东西是不是拿到就是拼接

2266
01:24:15,970 --> 01:24:17,830
同学们就是拼接的

2267
01:24:17,890 --> 01:24:19,120
这一步就是拼接的

2268
01:24:19,210 --> 01:24:20,500
就是不断去递归

2269
01:24:20,590 --> 01:24:21,580
然后拼接什么

2270
01:24:21,640 --> 01:24:23,200
拼接这个字符串可以了吗

2271
01:24:23,320 --> 01:24:25,630
就是生成的render就拼接字符串的

2272
01:24:25,930 --> 01:24:26,590
看见了吗

2273
01:24:27,040 --> 01:24:28,060
就拼接字符串

2274
01:24:28,150 --> 01:24:29,260
就根据你不同的节点

2275
01:24:29,260 --> 01:24:31,450
然后去不断不断地归拼接注册

2276
01:24:31,540 --> 01:24:32,200
如果是

2277
01:24:33,720 --> 01:24:34,920
就是那个V杠

2278
01:24:34,950 --> 01:24:35,910
V杠ones

2279
01:24:36,180 --> 01:24:37,380
那就是这个指令是吧

2280
01:24:37,680 --> 01:24:40,320
威刚ones就是这个指令如果是什么

2281
01:24:40,440 --> 01:24:41,790
如果是威刚F是吧

2282
01:24:42,120 --> 01:24:43,530
如果是V杠

2283
01:24:43,530 --> 01:24:44,520
如果是威刚衣服

2284
01:24:44,790 --> 01:24:46,830
那就这种指令是什么

2285
01:24:46,920 --> 01:24:48,510
就这种指令是不是这种指令

2286
01:24:48,510 --> 01:24:50,580
你看这里边儿的指令又不一样

2287
01:24:50,580 --> 01:24:50,910
你看

2288
01:24:51,650 --> 01:24:54,860
是不是这三元表达式是用三元表达式来处理

2289
01:24:54,860 --> 01:24:56,660
是不是如果有什么

2290
01:24:56,870 --> 01:24:58,250
如果要是这种指令是吧

2291
01:24:58,370 --> 01:25:00,110
如果要是cheer的是吧

2292
01:25:00,110 --> 01:25:01,280
Template或者什么呢

2293
01:25:01,310 --> 01:25:02,150
他又来走这个

2294
01:25:02,240 --> 01:25:04,580
如果是威刚for又是V刚发的指令

2295
01:25:04,580 --> 01:25:05,510
你看这里边儿

2296
01:25:06,220 --> 01:25:07,120
如果是被干父

2297
01:25:08,420 --> 01:25:09,020
他是什么

2298
01:25:09,500 --> 01:25:10,580
是风险是吧

2299
01:25:10,790 --> 01:25:12,170
就是构建风险

2300
01:25:12,170 --> 01:25:14,360
然后生成这个下划线I

2301
01:25:15,020 --> 01:25:16,460
就是生成不同的这个方体

2302
01:25:16,640 --> 01:25:17,840
就会生成这种模板

2303
01:25:17,840 --> 01:25:21,320
方体看到就会生成这种方见这个拼接出来的

2304
01:25:21,680 --> 01:25:22,130
明白了吗

2305
01:25:22,130 --> 01:25:23,780
同学们这种模板编译

2306
01:25:24,170 --> 01:25:26,120
这个模板编译明白了吗

2307
01:25:27,460 --> 01:25:29,590
你们生成你们写的所有位置代码

2308
01:25:29,740 --> 01:25:30,760
全都是这一套代码

2309
01:25:31,000 --> 01:25:31,900
全都是一套代码

2310
01:25:31,930 --> 01:25:32,650
全都是一坨

2311
01:25:32,800 --> 01:25:33,670
全是这一套代码

2312
01:25:34,280 --> 01:25:35,270
全程这一套代码

2313
01:25:35,940 --> 01:25:36,480
知道吧

2314
01:25:38,240 --> 01:25:39,560
还不明白吗

2315
01:25:41,000 --> 01:25:41,330
刘洋

2316
01:25:41,330 --> 01:25:42,200
你哪儿不明白

2317
01:25:45,650 --> 01:25:46,790
ST明白吗

2318
01:25:47,210 --> 01:25:47,600
ST

2319
01:25:47,600 --> 01:25:48,170
明白吧

2320
01:25:48,760 --> 01:25:49,480
转换的过程

2321
01:25:49,480 --> 01:25:49,990
明白吧

2322
01:25:50,870 --> 01:25:51,680
代码切得太快

2323
01:25:55,760 --> 01:25:58,460
我不能让你你能看个大字

2324
01:25:58,460 --> 01:26:00,140
然后下来之后你自己要去看

2325
01:26:00,890 --> 01:26:02,570
你能知道我这个思想大致

2326
01:26:02,690 --> 01:26:03,800
他这个就是拼接

2327
01:26:04,900 --> 01:26:08,500
我不能把这个时间浪费在给你看代码的这个基础上是吧

2328
01:26:08,590 --> 01:26:10,630
你能看明白大致的这个拼接的过程

2329
01:26:10,630 --> 01:26:12,700
你看这下方杠C

2330
01:26:12,730 --> 01:26:15,370
然后他拿到你这个这个东西来拼了

2331
01:26:16,490 --> 01:26:17,090
看到吗

2332
01:26:17,300 --> 01:26:18,770
我不可能说你这个逻辑

2333
01:26:18,770 --> 01:26:20,060
然后去不断循环这个

2334
01:26:22,320 --> 01:26:23,730
我们不是看了马六方向吗

2335
01:26:24,270 --> 01:26:25,620
刚刚看了马六方向

2336
01:26:28,500 --> 01:26:29,250
你放心

2337
01:26:32,500 --> 01:26:35,650
之前我们我们刚render构建render的时候

2338
01:26:35,650 --> 01:26:36,520
不是给你看了嘛

2339
01:26:36,520 --> 01:26:37,150
你放心

2340
01:26:40,500 --> 01:26:42,210
你这是什么什么情况

2341
01:26:45,060 --> 01:26:46,890
构建render的时候不就放心了吗

2342
01:26:52,440 --> 01:26:53,250
这是

2343
01:26:55,080 --> 01:26:56,310
这是在线编译

2344
01:26:57,050 --> 01:26:58,400
我们看一个离线编译的

2345
01:27:05,180 --> 01:27:05,840
不太了解

2346
01:27:05,900 --> 01:27:06,590
不是不太了解

2347
01:27:06,590 --> 01:27:07,760
我刚才给你看了的

2348
01:27:09,380 --> 01:27:09,800
你看

2349
01:27:12,850 --> 01:27:15,070
这一块儿是create a

2350
01:27:16,050 --> 01:27:20,370
这是拿到complete典render complete典render就是这个东西

2351
01:27:20,370 --> 01:27:20,940
就是这个

2352
01:27:21,330 --> 01:27:22,710
就是computer典render

2353
01:27:23,300 --> 01:27:25,280
你看这个点render就是这个东西

2354
01:27:25,280 --> 01:27:26,360
就是编译出来的代码

2355
01:27:26,390 --> 01:27:29,690
编出来代码就是一坨就是坨注册了吗

2356
01:27:30,380 --> 01:27:31,400
然后再拿到这个东西

2357
01:27:31,400 --> 01:27:32,540
然后来create function

2358
01:27:33,780 --> 01:27:34,200
对不对

2359
01:27:34,260 --> 01:27:34,950
刘芳见

2360
01:27:37,360 --> 01:27:37,870
看到吗

2361
01:27:38,950 --> 01:27:41,680
这个我们之前我们刚刚上课

2362
01:27:41,680 --> 01:27:43,330
前半节课我们给你讲的

2363
01:27:43,750 --> 01:27:45,700
然后这个东西就构建出来了render函数

2364
01:27:46,490 --> 01:27:47,780
干嘛构建出来render函数

2365
01:27:47,780 --> 01:27:50,570
Render就挂载到挂载到整个上面了

2366
01:27:50,600 --> 01:27:52,100
挂载到你整个option上面的

2367
01:27:52,970 --> 01:27:53,630
明白了吗

2368
01:27:54,910 --> 01:27:56,050
所以说这就是什么

2369
01:27:56,260 --> 01:27:57,790
这是编译时知道吧

2370
01:27:58,660 --> 01:28:00,550
是不是就是编译时

2371
01:28:02,560 --> 01:28:03,070
是啊

2372
01:28:10,110 --> 01:28:11,640
这个你下来自己看吧

2373
01:28:11,670 --> 01:28:13,470
我现在就不回答你这个问题了

2374
01:28:13,560 --> 01:28:16,110
我不浪费这个时间了编译时

2375
01:28:16,980 --> 01:28:18,240
那么这个编译是同学

2376
01:28:21,910 --> 01:28:23,140
我们又回到这一步啦

2377
01:28:24,200 --> 01:28:24,950
回到了一步

2378
01:28:25,010 --> 01:28:25,940
编译时这一步是吧

2379
01:28:26,300 --> 01:28:27,710
那边意识这一步要聊

2380
01:28:29,420 --> 01:28:31,880
编译时这块儿我们V2的贬义词基本上讲完了

2381
01:28:32,120 --> 01:28:33,830
威尔第一词有什么东西

2382
01:28:34,530 --> 01:28:35,130
但是V2

2383
01:28:35,130 --> 01:28:35,550
贬义词

2384
01:28:35,550 --> 01:28:36,420
它有几个点

2385
01:28:36,510 --> 01:28:37,200
第一个点是

2386
01:28:38,600 --> 01:28:39,620
需要正则匹配是吧

2387
01:28:39,770 --> 01:28:42,200
第一点必须要什么正则匹配

2388
01:28:42,200 --> 01:28:43,370
他需要分析ST

2389
01:28:43,580 --> 01:28:45,470
所以说它是什么正则匹配是吧

2390
01:28:45,650 --> 01:28:47,630
正则匹配来分析的ST是吧

2391
01:28:50,400 --> 01:28:50,880
是不是

2392
01:28:51,520 --> 01:28:53,260
正则匹配分析的ST是不是

2393
01:28:55,220 --> 01:28:55,910
你什么意思

2394
01:29:00,700 --> 01:29:02,200
你是觉得这个编译师

2395
01:29:02,470 --> 01:29:04,660
你是觉得这个编译时还需要怎么讲吗

2396
01:29:07,820 --> 01:29:08,990
因为V2的编译时

2397
01:29:08,990 --> 01:29:10,010
这块的东西我说了

2398
01:29:10,010 --> 01:29:11,030
他是个反面教材

2399
01:29:11,030 --> 01:29:11,780
你知不知道

2400
01:29:13,000 --> 01:29:15,130
他就是一个正则匹配

2401
01:29:16,380 --> 01:29:16,950
你是哪儿

2402
01:29:16,950 --> 01:29:17,820
还不明白吗

2403
01:29:20,190 --> 01:29:22,380
不是我就算我就算给你讲

2404
01:29:22,380 --> 01:29:23,610
我其实也跟你讲了的

2405
01:29:23,940 --> 01:29:27,150
我们不可能每一个细节的去第八个给你讲知道吧

2406
01:29:27,600 --> 01:29:28,710
这个过程你要去明白

2407
01:29:28,710 --> 01:29:30,270
他刚刚讲了一个思路

2408
01:29:30,890 --> 01:29:32,000
你有了这个思路之后

2409
01:29:32,000 --> 01:29:33,830
你下来自己要去看代码是吧

2410
01:29:34,440 --> 01:29:34,770
是不是

2411
01:29:34,800 --> 01:29:36,810
但是我们要把这些点全部给你抛出来

2412
01:29:37,230 --> 01:29:37,740
对

2413
01:29:43,640 --> 01:29:45,080
好在这一步我们继续

2414
01:29:46,270 --> 01:29:47,890
WE2代码这里边儿有几个缺点

2415
01:29:47,920 --> 01:29:49,660
编译时这块儿鸡块儿有几个缺点

2416
01:29:49,660 --> 01:29:50,710
第一个是正则匹配

2417
01:29:51,350 --> 01:29:52,520
正常匹配这一点

2418
01:29:52,940 --> 01:29:55,100
因为会造成回溯的过程是吧

2419
01:29:55,340 --> 01:29:56,120
回溯的过程

2420
01:29:58,500 --> 01:30:03,660
所以说所以说它有一个什么性能的问题是吧

2421
01:30:03,720 --> 01:30:04,290
性能的问题

2422
01:30:04,440 --> 01:30:05,550
而且它正常匹配

2423
01:30:05,550 --> 01:30:08,370
对于他整个代码的分析

2424
01:30:08,580 --> 01:30:11,250
它不能够做到特别明确的一个

2425
01:30:11,490 --> 01:30:14,370
它有很多就是我稍微加一个API

2426
01:30:15,000 --> 01:30:15,900
他的ST

2427
01:30:16,320 --> 01:30:18,960
它的正则匹配的代码就可能很复杂

2428
01:30:19,200 --> 01:30:19,950
有很多bug

2429
01:30:20,100 --> 01:30:21,120
所以说ST

2430
01:30:22,010 --> 01:30:24,740
不能够去做一个充分的一个一个一个

2431
01:30:24,740 --> 01:30:27,620
相当于一个一个一个一个处理

2432
01:30:28,820 --> 01:30:30,380
也基于这个情况之上

2433
01:30:32,320 --> 01:30:33,850
也基于这个情况之上

2434
01:30:34,590 --> 01:30:37,230
我的ST也基于这个情况之上

2435
01:30:37,590 --> 01:30:38,970
我的我的ST

2436
01:30:39,540 --> 01:30:41,310
就不能够去做什么优化

2437
01:30:42,340 --> 01:30:44,320
所以说我们这儿有一个什么边意思

2438
01:30:44,320 --> 01:30:46,600
优化和运行司优化这个维度我就要出来了

2439
01:30:54,460 --> 01:30:55,660
这就是我

2440
01:30:55,660 --> 01:30:56,830
我再问你们

2441
01:30:56,830 --> 01:30:58,870
V2和V1和reactor

2442
01:30:58,870 --> 01:30:59,890
它们的区别在哪儿

2443
01:31:00,830 --> 01:31:02,750
你如果能从这个区别聊出来

2444
01:31:02,780 --> 01:31:03,620
我就觉得很不错

2445
01:31:04,130 --> 01:31:07,850
任何框架、任何UI框架都是有优化的层面

2446
01:31:08,440 --> 01:31:10,570
是不是都是有优化的层面

2447
01:31:11,940 --> 01:31:12,330
编译

2448
01:31:12,330 --> 01:31:12,960
私有化

2449
01:31:13,680 --> 01:31:15,810
我们我们回到还是回到ST这块儿

2450
01:31:15,960 --> 01:31:18,270
他只能你看它这块儿优化它只能做什么

2451
01:31:18,330 --> 01:31:19,860
只能打静态标签是吧

2452
01:31:20,310 --> 01:31:24,480
只能给节点节点打做静态

2453
01:31:24,480 --> 01:31:26,940
做静态标签的处理是吧

2454
01:31:31,740 --> 01:31:34,200
是不是只能给节点做静态标签的时候呢

2455
01:31:34,200 --> 01:31:34,530
是吧

2456
01:31:35,290 --> 01:31:37,630
然后第三个第三个

2457
01:31:38,820 --> 01:31:41,280
第第三个就是说他用了什么

2458
01:31:41,310 --> 01:31:42,870
用了with用with

2459
01:31:43,700 --> 01:31:44,810
用with知道吧

2460
01:31:44,870 --> 01:31:45,530
用with

2461
01:31:46,080 --> 01:31:47,520
有了位置就会造成什么

2462
01:31:48,270 --> 01:31:50,580
这个最后会造成什么内存泄露

2463
01:31:50,580 --> 01:31:53,970
同学们为什么内存你他是一直不会释放的

2464
01:31:54,640 --> 01:31:56,290
他会造成内存泄漏知道吧

2465
01:32:01,080 --> 01:32:01,920
都明白

2466
01:32:03,440 --> 01:32:07,280
所以说V3我V2这里边就会有几个大问题

2467
01:32:07,280 --> 01:32:08,120
这几个大问题

2468
01:32:08,890 --> 01:32:11,110
就造编译时就造成了这几个大问题

2469
01:32:11,170 --> 01:32:12,370
那么他为什么要用位置

2470
01:32:12,370 --> 01:32:13,630
为什么一定要用位置

2471
01:32:14,970 --> 01:32:16,260
为什么一定要用with

2472
01:32:17,700 --> 01:32:18,930
她用with的原因是吗

2473
01:32:19,830 --> 01:32:20,040
对

2474
01:32:20,040 --> 01:32:21,030
作者是想不到吗

2475
01:32:21,300 --> 01:32:22,080
作者想得到

2476
01:32:22,290 --> 01:32:22,890
但是没有

2477
01:32:22,980 --> 01:32:23,520
没有办法

2478
01:32:23,520 --> 01:32:24,270
他避免不了

2479
01:32:24,420 --> 01:32:24,930
为什么

2480
01:32:25,670 --> 01:32:26,900
为什么避免不了同学们

2481
01:32:35,350 --> 01:32:36,220
你看这个代码

2482
01:32:38,180 --> 01:32:38,960
你看这个代码

2483
01:32:40,620 --> 01:32:42,150
我这儿写的是什么样子

2484
01:32:43,500 --> 01:32:45,900
我这儿比如说我这儿message几点

2485
01:32:46,700 --> 01:32:47,030
B

2486
01:32:48,240 --> 01:32:49,560
我这儿写的是什么样子

2487
01:32:51,560 --> 01:32:52,760
我这写的什么样子

2488
01:32:53,490 --> 01:32:55,170
他在这儿就必须要拿到什么样子

2489
01:32:55,530 --> 01:32:55,950
看到吗

2490
01:32:56,010 --> 01:32:57,300
我在这儿写的是什么样子

2491
01:32:58,010 --> 01:32:59,330
他在这儿就写的是什么样子

2492
01:33:00,050 --> 01:33:00,590
看到吗

2493
01:33:04,000 --> 01:33:04,900
明白什么意思吗

2494
01:33:05,970 --> 01:33:07,590
他分析不了JS

2495
01:33:07,950 --> 01:33:09,510
我这一套代码是不是JS

2496
01:33:09,930 --> 01:33:11,580
这一套代码是不是JS语句

2497
01:33:12,580 --> 01:33:13,690
我问你

2498
01:33:14,170 --> 01:33:15,640
这个代码是不是JS语句

2499
01:33:17,730 --> 01:33:18,240
是不是

2500
01:33:19,190 --> 01:33:20,030
这个你明白吧

2501
01:33:20,420 --> 01:33:23,930
那我问你JS语句是不是很动态的一个东西

2502
01:33:24,440 --> 01:33:26,000
JS语句是不是动态性的

2503
01:33:31,100 --> 01:33:33,650
是不是键词语句是不是动态执行的

2504
01:33:33,710 --> 01:33:34,550
动态性的东西

2505
01:33:35,540 --> 01:33:37,700
那么它能够动态性的东西

2506
01:33:37,730 --> 01:33:39,980
你如果在静态编译的时候去分析

2507
01:33:40,740 --> 01:33:42,600
很多种情况你是分析不到的

2508
01:33:42,870 --> 01:33:44,490
像这种情况他就不V2

2509
01:33:44,490 --> 01:33:45,690
完全不敢分析

2510
01:33:46,370 --> 01:33:46,880
知道吗

2511
01:33:47,860 --> 01:33:50,560
只要是他遇到这种双冒号的东西

2512
01:33:50,620 --> 01:33:51,430
他都不会分析

2513
01:33:51,430 --> 01:33:53,200
直接把它拿过来做一个处理

2514
01:33:54,140 --> 01:33:55,130
所以你看在这里边儿

2515
01:33:55,720 --> 01:33:57,010
他威尔他不敢去

2516
01:33:57,100 --> 01:33:58,000
不敢去做分析

2517
01:33:58,420 --> 01:33:59,350
他没有这个能力

2518
01:33:59,800 --> 01:34:03,040
他的模板编译没有这个能力去分析它这里边的东西看到吗

2519
01:34:03,190 --> 01:34:04,570
我们这里边儿写的V杠衣服

2520
01:34:04,900 --> 01:34:06,220
对这套代码看到了

2521
01:34:06,460 --> 01:34:07,270
他不敢去分析

2522
01:34:07,270 --> 01:34:07,690
你看

2523
01:34:09,080 --> 01:34:10,280
为什么他不敢去分析

2524
01:34:10,920 --> 01:34:13,650
因为他不知道你在里边应该怎么去拆分

2525
01:34:15,400 --> 01:34:16,360
应该怎么去拆分

2526
01:34:16,360 --> 01:34:17,800
你这个ST怎么去拆分

2527
01:34:19,730 --> 01:34:23,060
所以说在V3里边儿分析这一套代码的时候

2528
01:34:23,930 --> 01:34:25,010
在V3里边儿

2529
01:34:25,070 --> 01:34:28,610
微微三里边儿分析JA哪去了

2530
01:34:28,610 --> 01:34:30,590
V3里边儿分析这套代码的时候

2531
01:34:30,590 --> 01:34:31,700
我刚刚的代码哪去了

2532
01:34:34,650 --> 01:34:35,100
这儿啊

2533
01:34:36,110 --> 01:34:37,730
V3里边儿分析这套代码的时候

2534
01:34:37,760 --> 01:34:38,930
他是引进了背包

2535
01:34:39,170 --> 01:34:40,370
他是用了背包

2536
01:34:41,310 --> 01:34:43,230
他是通过背包去分析的

2537
01:34:43,500 --> 01:34:44,010
知道吧

2538
01:34:44,190 --> 01:34:45,540
它是通过背包去分析的

2539
01:34:46,830 --> 01:34:48,690
但是V3的在线编译

2540
01:34:49,310 --> 01:34:50,840
她也用的位置

2541
01:34:50,840 --> 01:34:52,850
WE3在线医生的代码也是用的位置

2542
01:34:52,880 --> 01:34:55,820
为什么V13V在线代码不用背包

2543
01:34:58,100 --> 01:34:58,940
很简单

2544
01:34:58,970 --> 01:34:59,570
这个例子

2545
01:35:00,180 --> 01:35:00,540
同学们

2546
01:35:00,630 --> 01:35:03,330
你们不知道用with这个原因是什么

2547
01:35:03,450 --> 01:35:04,170
你看这个with

2548
01:35:04,170 --> 01:35:05,550
这个this指向的是谁

2549
01:35:06,620 --> 01:35:07,010
Wish

2550
01:35:07,010 --> 01:35:08,300
这个this指向的是谁

2551
01:35:09,740 --> 01:35:11,960
这个this指向的是fat实力知道吧

2552
01:35:12,410 --> 01:35:14,870
是指向的威力实力实力是不是

2553
01:35:15,660 --> 01:35:17,490
是不是是不是指向唯一实例

2554
01:35:18,980 --> 01:35:19,460
是不是啊

2555
01:35:20,440 --> 01:35:21,730
这个名这个名不明白

2556
01:35:22,930 --> 01:35:24,400
因为你这个render在运行的时候

2557
01:35:24,400 --> 01:35:25,840
这个this是指向V10点

2558
01:35:26,260 --> 01:35:28,600
那这个message及是谁上

2559
01:35:28,600 --> 01:35:30,220
是哪个上面的秘籍

2560
01:35:30,280 --> 01:35:31,480
是哪个上面的秘籍

2561
01:35:32,670 --> 01:35:33,600
是哪个上班儿没升级

2562
01:35:33,600 --> 01:35:34,050
我问你

2563
01:35:34,710 --> 01:35:36,510
是不是这个微一使力上面的设计

2564
01:35:37,420 --> 01:35:37,930
是不是

2565
01:35:39,660 --> 01:35:40,170
是不是

2566
01:35:42,400 --> 01:35:42,820
对

2567
01:35:44,050 --> 01:35:45,610
那么为实力上面的设计

2568
01:35:45,610 --> 01:35:49,480
他这个设计又是从组件上面代理到整个为一上面是不是

2569
01:35:50,340 --> 01:35:50,850
是啊

2570
01:35:53,450 --> 01:35:56,450
但是我现在的问题就在于我如果

2571
01:35:56,570 --> 01:35:57,350
我如果

2572
01:35:58,060 --> 01:35:59,080
我要去处理

2573
01:35:59,080 --> 01:36:00,430
我要去分析这个东西

2574
01:36:01,090 --> 01:36:02,440
我如果没有这个位置

2575
01:36:02,710 --> 01:36:03,400
没有这个位置

2576
01:36:03,790 --> 01:36:04,510
这个位置

2577
01:36:04,810 --> 01:36:05,830
我这块儿生成这个码

2578
01:36:05,860 --> 01:36:07,090
生成那个带这个代码

2579
01:36:11,050 --> 01:36:12,580
我们这块儿生成这个代码

2580
01:36:13,930 --> 01:36:14,710
没有这个意思

2581
01:36:16,690 --> 01:36:17,500
我直接这么运行

2582
01:36:17,530 --> 01:36:18,370
我这个没涉及

2583
01:36:18,760 --> 01:36:19,390
我这没涉及

2584
01:36:19,390 --> 01:36:21,850
这个前边儿是不是就应该加一个变量

2585
01:36:22,270 --> 01:36:23,065
是不是

2586
01:36:23,065 --> 01:36:24,640
我是不是就应该加一个变量

2587
01:36:24,820 --> 01:36:26,590
加一个这个变量的实力是不是

2588
01:36:27,850 --> 01:36:28,390
是不是

2589
01:36:30,130 --> 01:36:31,660
我在这儿就需要去加this

2590
01:36:31,660 --> 01:36:32,050
是不是

2591
01:36:33,100 --> 01:36:33,610
是啊

2592
01:36:34,700 --> 01:36:35,180
是的

2593
01:36:35,840 --> 01:36:36,170
我需要

2594
01:36:36,170 --> 01:36:37,580
我就需要在这儿去加的斯

2595
01:36:38,150 --> 01:36:38,660
或许

2596
01:36:38,870 --> 01:36:41,480
但是这二家类似这个this还不一定

2597
01:36:42,460 --> 01:36:44,110
就是指向的是我的微实力

2598
01:36:44,110 --> 01:36:45,880
因为它里边还可能有你在里边儿

2599
01:36:46,030 --> 01:36:47,710
你在里边可能还会有其他的情况

2600
01:36:47,710 --> 01:36:50,170
比如说你这个a你这个没设计

2601
01:36:51,080 --> 01:36:55,700
你是不是可能在你那个template那个JS里面声明一个什么东西是吧

2602
01:36:57,150 --> 01:36:59,460
所以这种情况我就需要去分析

2603
01:36:59,670 --> 01:37:02,130
但是我要在这里边儿去加这个message的时候

2604
01:37:02,370 --> 01:37:04,740
我需要在你的message前面加S的时候

2605
01:37:06,660 --> 01:37:09,060
我是不是就需要去分析你这个代码

2606
01:37:09,480 --> 01:37:10,680
因为我不知道你这个代码

2607
01:37:10,710 --> 01:37:12,270
我需要去分析你这个JS代码

2608
01:37:12,270 --> 01:37:15,480
是我是不是就需要知道你这个JS的规则

2609
01:37:15,840 --> 01:37:16,890
我需要GS的规则

2610
01:37:16,890 --> 01:37:19,560
我是不是就需要构建一套JS的规范

2611
01:37:20,210 --> 01:37:23,060
便利是不是是不是这个明白吗

2612
01:37:23,120 --> 01:37:24,560
我如果没有这个位置

2613
01:37:24,950 --> 01:37:25,700
没有这个位置

2614
01:37:25,730 --> 01:37:29,180
没有这个这个东西是不是就需要去指点儿什么什么

2615
01:37:29,180 --> 01:37:30,830
具体哪个哪个上面是不是

2616
01:37:31,250 --> 01:37:32,630
但是我如果没有这个东西

2617
01:37:32,990 --> 01:37:35,420
我们先不说类似指向明不明朗的问题

2618
01:37:36,170 --> 01:37:37,760
我们先说没有位置的情况

2619
01:37:39,100 --> 01:37:39,730
正常来说

2620
01:37:39,730 --> 01:37:40,630
我们如果没有位置

2621
01:37:40,630 --> 01:37:42,160
这是不是就应该加个S是吧

2622
01:37:42,840 --> 01:37:43,380
或者什么

2623
01:37:43,410 --> 01:37:46,770
或者说给他一个content执行环境是吧

2624
01:37:46,770 --> 01:37:48,180
Context执行环境是吧

2625
01:37:48,910 --> 01:37:51,550
是整个微实力的执行环境嘛

2626
01:37:51,550 --> 01:37:51,790
是吧

2627
01:37:51,850 --> 01:37:52,390
全局吗

2628
01:37:52,780 --> 01:37:53,410
给他个这个吗

2629
01:37:53,500 --> 01:37:55,180
但是我现在就算要给他这个

2630
01:37:55,180 --> 01:37:57,520
我是不是也要分析你这个代码是这么写的是吧

2631
01:37:59,120 --> 01:38:00,920
很多同学以为这个代码很好分析

2632
01:38:01,190 --> 01:38:02,540
但是你这个只是JS

2633
01:38:02,630 --> 01:38:04,070
你的JS可以写出花来

2634
01:38:04,070 --> 01:38:05,900
你的三元表达式你可以写出花来

2635
01:38:06,170 --> 01:38:08,030
当然这里边儿也只是三元表达式

2636
01:38:08,270 --> 01:38:11,510
你在里边儿语句你可以写很多种语句表达式

2637
01:38:11,510 --> 01:38:12,680
你完全可以写成花了

2638
01:38:13,330 --> 01:38:14,020
语句表达师

2639
01:38:14,020 --> 01:38:15,340
你是完全可以写出花来

2640
01:38:15,340 --> 01:38:16,660
同学们

2641
01:38:18,210 --> 01:38:18,990
是不是语句表的事

2642
01:38:18,990 --> 01:38:21,330
你是不是可以完全写错了

2643
01:38:30,860 --> 01:38:32,150
因为你是个语句

2644
01:38:32,330 --> 01:38:33,320
JS语句

2645
01:38:35,980 --> 01:38:36,250
妈的

2646
01:38:36,250 --> 01:38:38,140
他是不识别我这个东西吗

2647
01:39:03,060 --> 01:39:05,670
你看我这里边是不是还可以再写一些其他的

2648
01:39:05,910 --> 01:39:07,050
比如说a等于一

2649
01:39:08,160 --> 01:39:08,850
是不是可以这么写

2650
01:39:08,850 --> 01:39:10,590
你看我这里边它是符合规范的

2651
01:39:10,590 --> 01:39:11,970
因为我就是个JS语句

2652
01:39:13,190 --> 01:39:14,180
那我这个a等于一

2653
01:39:14,180 --> 01:39:15,530
就是在Z上加个一

2654
01:39:17,480 --> 01:39:18,170
明白

2655
01:39:19,650 --> 01:39:22,050
我这个这我这这这是JS语句

2656
01:39:22,050 --> 01:39:24,570
我JS语句要去分析它太复杂了

2657
01:39:24,570 --> 01:39:25,530
可太复杂了

2658
01:39:26,010 --> 01:39:26,910
他分析不了

2659
01:39:27,300 --> 01:39:27,810
知道吧

2660
01:39:27,960 --> 01:39:29,040
他这个模板分析不了

2661
01:39:29,040 --> 01:39:32,130
所以说V2里边儿他只能把这个东西拿去替换

2662
01:39:32,250 --> 01:39:33,450
但是替换了之后

2663
01:39:33,540 --> 01:39:34,980
我就必须要有一个

2664
01:39:35,780 --> 01:39:37,520
我就必须要知道我这个东西

2665
01:39:38,350 --> 01:39:40,330
是哪个上面的变量名

2666
01:39:40,990 --> 01:39:42,610
所以说我这会儿就要this指过来

2667
01:39:42,790 --> 01:39:43,390
明白了

2668
01:39:43,870 --> 01:39:44,470
明白了吗

2669
01:39:44,530 --> 01:39:46,090
现在知道为什么要用纸吗

2670
01:39:46,450 --> 01:39:47,440
阿们

2671
01:39:51,200 --> 01:39:52,280
就这一个知识点

2672
01:39:53,280 --> 01:39:55,260
你去问很多大厂里边儿的

2673
01:39:56,260 --> 01:39:58,270
大厂那边的人他可能都不知道

2674
01:40:01,300 --> 01:40:04,480
为什么V1V2这块儿要用with

2675
01:40:05,510 --> 01:40:06,020
缩短

2676
01:40:06,020 --> 01:40:06,950
缩短作用意念

2677
01:40:07,940 --> 01:40:08,600
我都说完了

2678
01:40:08,600 --> 01:40:09,470
你还不知道吗

2679
01:40:10,430 --> 01:40:11,060
答案是啥

2680
01:40:11,060 --> 01:40:11,690
我都说完了

2681
01:40:11,690 --> 01:40:12,770
你这个还没答案吗

2682
01:40:16,000 --> 01:40:18,340
有同学其他同学知道总结一下

2683
01:40:18,670 --> 01:40:19,510
总结一下就是

2684
01:40:20,380 --> 01:40:21,580
我这个JS

2685
01:40:21,970 --> 01:40:25,030
我这这一坨GS他是分析不了的

2686
01:40:25,580 --> 01:40:27,110
这头GS是不是分析不了

2687
01:40:27,730 --> 01:40:28,090
对啊

2688
01:40:28,090 --> 01:40:29,290
没有办法分析GS

2689
01:40:29,380 --> 01:40:30,520
那没有办法分析GS

2690
01:40:30,520 --> 01:40:32,770
我这一坨东西就需要原模原样拿过来

2691
01:40:33,420 --> 01:40:34,110
拿到这里边来

2692
01:40:34,110 --> 01:40:35,880
这儿到时候这些是怎么执行的时候

2693
01:40:35,880 --> 01:40:37,260
他这块儿就怎么执行

2694
01:40:37,500 --> 01:40:39,300
但是我这个上边儿这些东西

2695
01:40:39,540 --> 01:40:41,070
这个变量是指向的是谁

2696
01:40:41,220 --> 01:40:43,770
是我Z实实实例上的变量

2697
01:40:43,770 --> 01:40:47,640
我就必须把这个this实例上的变量就指向到这上面来

2698
01:40:48,240 --> 01:40:51,540
是不是我就必须要让他把这个东西指向这上面来

2699
01:40:51,540 --> 01:40:53,040
不然我这里边就只能什么

2700
01:40:53,070 --> 01:40:54,630
只能这么写是吧

2701
01:40:54,630 --> 01:40:56,340
只就不然就只能这么写

2702
01:40:56,900 --> 01:40:58,040
是不是就只能这么写

2703
01:40:58,370 --> 01:40:58,760
是不是

2704
01:40:59,640 --> 01:41:01,500
所以说我必须必须要这么弄

2705
01:41:02,320 --> 01:41:04,150
是不是提供动态的这个过程

2706
01:41:08,170 --> 01:41:08,890
没有办法

2707
01:41:09,570 --> 01:41:11,100
你要想在线离线编译

2708
01:41:11,100 --> 01:41:11,760
只有背包

2709
01:41:12,000 --> 01:41:12,510
只有背包

2710
01:41:12,510 --> 01:41:16,650
所以说V3在离线编译的时候微一三

2711
01:41:18,160 --> 01:41:19,450
在离线编译的时候

2712
01:41:19,720 --> 01:41:21,010
对于这一块儿的东西

2713
01:41:21,010 --> 01:41:22,000
它引入了背包

2714
01:41:22,760 --> 01:41:23,510
在在线边

2715
01:41:23,510 --> 01:41:25,880
但是被捕你知道有两兆

2716
01:41:25,880 --> 01:41:27,650
同学们背包的代码有两兆

2717
01:41:28,130 --> 01:41:29,720
他可能引到线上里边去吗

2718
01:41:29,900 --> 01:41:32,030
所以说微商在线上编译的时候

2719
01:41:32,270 --> 01:41:33,290
在线编译的时候

2720
01:41:34,940 --> 01:41:35,840
照样是什么

2721
01:41:36,140 --> 01:41:37,550
照样适用的位置

2722
01:41:37,790 --> 01:41:39,230
照样用出来的也是位置

2723
01:41:39,440 --> 01:41:40,880
所以这个又是个考题

2724
01:41:43,040 --> 01:41:43,700
有的会

2725
01:41:43,730 --> 01:41:44,360
有的同学

2726
01:41:44,540 --> 01:41:46,070
有的人以一直以为

2727
01:41:46,190 --> 01:41:47,900
包括我见过很多大厂的面试官

2728
01:41:48,080 --> 01:41:51,410
他一直以为微山在线编译和离线编译都把位置去掉了

2729
01:41:51,530 --> 01:41:52,280
其实不是

2730
01:41:52,700 --> 01:41:53,150
这不是

2731
01:41:53,330 --> 01:41:55,220
那些人就是直接就去看文章

2732
01:41:55,700 --> 01:41:56,660
也没有看源码

2733
01:41:57,180 --> 01:41:59,100
脑袋一直接一拍脑袋

2734
01:41:59,640 --> 01:42:00,480
对那个就是

2735
01:42:01,910 --> 01:42:03,560
咱们班很多同学也是这个样子

2736
01:42:05,010 --> 01:42:06,120
天天去看文章

2737
01:42:07,010 --> 01:42:08,660
看了文章你要就算

2738
01:42:08,900 --> 01:42:10,340
就是学习这个东西

2739
01:42:10,940 --> 01:42:11,750
学习

2740
01:42:13,310 --> 01:42:16,160
一定是向有结果的人学习

2741
01:42:20,850 --> 01:42:21,330
知道吧

2742
01:42:22,070 --> 01:42:22,940
在线的意思

2743
01:42:27,000 --> 01:42:29,610
我在线来哪个同学给他说

2744
01:42:29,610 --> 01:42:31,260
我有讲过在线一天免疫

2745
01:42:32,800 --> 01:42:34,390
我可不会再给你花时间讲了

2746
01:42:35,880 --> 01:42:36,870
我至少花了

2747
01:42:37,850 --> 01:42:39,680
20分钟讲这些变异

2748
01:42:41,280 --> 01:42:42,780
你是不是没来前边儿

2749
01:42:43,710 --> 01:42:44,820
还说没有听明白

2750
01:42:46,830 --> 01:42:47,550
看录播吧

2751
01:42:49,030 --> 01:42:50,590
你这个不就是拖节奏的人吗

2752
01:42:50,710 --> 01:42:54,700
你这种你这种在团队里边不就拖节奏吗

2753
01:42:54,910 --> 01:42:55,840
蜗牛你别急

2754
01:42:56,510 --> 01:42:56,870
蜗牛

2755
01:42:56,870 --> 01:42:58,010
你还是要加个急

2756
01:42:59,570 --> 01:43:00,620
所以说这一步

2757
01:43:01,430 --> 01:43:03,950
这一步你看V3这块儿的东西

2758
01:43:03,950 --> 01:43:05,240
他就引入了背包离线电影

2759
01:43:05,240 --> 01:43:06,800
因为背包它可以分析什么

2760
01:43:06,830 --> 01:43:07,910
分析你这个GS

2761
01:43:08,240 --> 01:43:09,470
然后去做不同的处理

2762
01:43:10,070 --> 01:43:11,810
然后去做转换明白了吧

2763
01:43:13,130 --> 01:43:20,300
所以说在这一步我们也就引入了什么离线编译在线边意思优化和运行司优化

2764
01:43:21,770 --> 01:43:23,360
边意思优化什么意思

2765
01:43:23,950 --> 01:43:25,090
就是我在编译的时候

2766
01:43:25,090 --> 01:43:26,320
我可以跟框架做一

2767
01:43:26,920 --> 01:43:28,810
做一些很多处理去做优化

2768
01:43:29,490 --> 01:43:32,280
我们我们来说编译时优化和运行是优化

2769
01:43:32,520 --> 01:43:33,600
比如说举个很简单例子

2770
01:43:33,630 --> 01:43:36,960
V he right是吧

2771
01:43:36,960 --> 01:43:37,980
V1这个代码

2772
01:43:37,980 --> 01:43:38,610
V1这个项目

2773
01:43:40,260 --> 01:43:41,400
为这个框架

2774
01:43:42,070 --> 01:43:45,400
我们知道首先它会有一个什么

2775
01:43:45,400 --> 01:43:47,110
你们写一个template模板式的

2776
01:43:47,200 --> 01:43:48,940
会写这种template模板似的

2777
01:43:49,500 --> 01:43:51,210
是不是可以写成个种类的模板

2778
01:43:51,720 --> 01:43:52,440
是不是同学们

2779
01:43:54,330 --> 01:43:54,660
喂

2780
01:43:54,660 --> 01:43:55,920
是不是要写成类的模板

2781
01:43:56,250 --> 01:43:58,830
你必须按照这种模板语法来写

2782
01:43:58,830 --> 01:43:59,130
是啊

2783
01:43:59,730 --> 01:44:01,410
他是不是只有这种这些模板语法

2784
01:44:01,410 --> 01:44:03,750
而且你必须按照这种模板语法来解释

2785
01:44:05,060 --> 01:44:05,540
是不是

2786
01:44:07,090 --> 01:44:09,220
那么你按照这种模板语法来写

2787
01:44:09,310 --> 01:44:10,270
那么就定死了

2788
01:44:10,270 --> 01:44:11,890
你必须有一个什么

2789
01:44:11,920 --> 01:44:12,730
它不同的什么

2790
01:44:12,880 --> 01:44:14,140
就是它的写法

2791
01:44:14,230 --> 01:44:15,310
就是它的写法

2792
01:44:16,480 --> 01:44:21,520
开发的写法就必须有就就就就就有规则是吧

2793
01:44:21,820 --> 01:44:23,410
有规则就是自定义了

2794
01:44:24,040 --> 01:44:27,760
开发规则是不是因为必须

2795
01:44:27,760 --> 01:44:30,550
因为你必须按照这么来说这么做

2796
01:44:31,040 --> 01:44:33,650
他才能够做什么才能做编译是吧

2797
01:44:33,770 --> 01:44:35,210
它能自自己去编译

2798
01:44:36,050 --> 01:44:37,520
但是它编译的时候

2799
01:44:37,520 --> 01:44:38,960
也正是因为这个原因

2800
01:44:38,990 --> 01:44:41,360
她在编译的时候就可以去分析你的代码

2801
01:44:41,780 --> 01:44:42,110
是吧

2802
01:44:42,230 --> 01:44:43,460
分析你写的代码

2803
01:44:43,760 --> 01:44:46,880
分析你的分析你写的代码

2804
01:44:48,870 --> 01:44:51,060
就是你分析你写的这个什么结构是吧

2805
01:44:51,090 --> 01:44:53,160
然后去做什么静态优化是吧

2806
01:44:53,190 --> 01:44:54,480
打标签儿是吧

2807
01:44:55,470 --> 01:44:56,250
静态优化

2808
01:44:57,600 --> 01:45:01,020
你们今天还没有这个这个这个这个感触

2809
01:45:01,140 --> 01:45:03,360
明天我们学V3的一个编译时计划

2810
01:45:03,810 --> 01:45:04,920
你们就更有这个感触

2811
01:45:04,920 --> 01:45:08,730
我们今天V2的编辑计划只是做了一个静态动地府

2812
01:45:08,760 --> 01:45:11,760
不算跳过那个对比V3就更厉害

2813
01:45:12,300 --> 01:45:12,630
是吧

2814
01:45:13,200 --> 01:45:16,140
只有一个什么分析的代码去做编译时优化是吧

2815
01:45:17,070 --> 01:45:18,030
编译时优化是吧

2816
01:45:19,080 --> 01:45:19,710
编译时计划

2817
01:45:20,070 --> 01:45:21,630
这个就是我们在编译的时候

2818
01:45:21,630 --> 01:45:23,340
因为我因为他的规范

2819
01:45:23,340 --> 01:45:24,810
你是按照他的规则来写的

2820
01:45:24,810 --> 01:45:26,910
所以说我们在编译的时候可以这么有规则

2821
01:45:27,620 --> 01:45:28,310
这是第一点

2822
01:45:28,520 --> 01:45:29,240
第二点是什么

2823
01:45:30,530 --> 01:45:31,250
四

2824
01:45:31,980 --> 01:45:32,820
我的

2825
01:45:33,900 --> 01:45:34,800
我的V

2826
01:45:35,620 --> 01:45:36,400
我的V1

2827
01:45:37,090 --> 01:45:40,000
我的所有的我的所有的数据

2828
01:45:41,110 --> 01:45:43,600
或者说所有的东西它是定向于我的

2829
01:45:43,600 --> 01:45:44,110
比如说我的

2830
01:45:44,140 --> 01:45:46,810
我现在这个数据是动态数据是同学们

2831
01:45:48,080 --> 01:45:49,340
我这个数据是动态数据

2832
01:45:49,340 --> 01:45:50,480
Message是动态数据

2833
01:45:50,810 --> 01:45:51,830
动态数据是不是

2834
01:45:52,490 --> 01:45:56,060
那么message是动态数据操作message修改的这个render

2835
01:45:56,960 --> 01:45:57,500
是不是

2836
01:45:58,120 --> 01:46:01,420
我就把这个render和他的这个数据给关联起来

2837
01:46:02,040 --> 01:46:03,450
我可以监听这个数据是不是

2838
01:46:04,430 --> 01:46:05,900
唯一就是这个样子

2839
01:46:05,930 --> 01:46:07,490
它可以监听这个message数据

2840
01:46:07,700 --> 01:46:09,680
只要这个message数据发生了变化

2841
01:46:09,740 --> 01:46:10,910
他重新执行这个render

2842
01:46:11,120 --> 01:46:13,340
所以说他在中间维护了一套什么

2843
01:46:13,520 --> 01:46:14,870
维护了一套关系

2844
01:46:15,020 --> 01:46:16,040
这个关系就是什么

2845
01:46:16,770 --> 01:46:18,840
动态数据发生改变

2846
01:46:19,380 --> 01:46:20,130
动态数据

2847
01:46:24,150 --> 01:46:24,870
就会做什么

2848
01:46:24,990 --> 01:46:26,250
就会到我们的render里面去

2849
01:46:26,250 --> 01:46:27,120
就会执行render

2850
01:46:27,330 --> 01:46:27,720
所以呢

2851
01:46:27,720 --> 01:46:28,560
维护了一套关系

2852
01:46:28,560 --> 01:46:29,370
维护了什么关系

2853
01:46:29,460 --> 01:46:31,470
维护了监听数据

2854
01:46:31,500 --> 01:46:34,830
首先第一个他需要维护一个监听数据的过程是吧

2855
01:46:36,250 --> 01:46:38,380
那么间接数据的过程是不是就有成本

2856
01:46:38,410 --> 01:46:39,370
内存成本是吧

2857
01:46:41,280 --> 01:46:41,610
是吧

2858
01:46:41,640 --> 01:46:42,210
内存太满

2859
01:46:43,080 --> 01:46:43,620
然后

2860
01:46:44,280 --> 01:46:45,000
键的数据

2861
01:46:45,450 --> 01:46:46,200
除了鉴定数据

2862
01:46:46,200 --> 01:46:50,580
还要维护一个什么定向定向的render是吧是吧

2863
01:46:50,580 --> 01:46:52,410
我知道我哪一个

2864
01:46:53,270 --> 01:46:54,980
我累我累这个没死机

2865
01:46:55,190 --> 01:46:56,930
我弄了之后就是

2866
01:46:57,850 --> 01:46:58,840
构建这个东西是吧

2867
01:46:58,930 --> 01:47:00,610
构建这这个没事的

2868
01:47:00,610 --> 01:47:02,740
改了之后直接就构建这个render是吧

2869
01:47:02,770 --> 01:47:03,820
直接执行这个render

2870
01:47:04,000 --> 01:47:05,380
那所以说这儿有个定向render

2871
01:47:05,980 --> 01:47:08,080
所以说这块儿就隐射出来了

2872
01:47:08,350 --> 01:47:09,640
隐射出来了well e

2873
01:47:10,240 --> 01:47:10,990
他方便

2874
01:47:13,720 --> 01:47:15,100
四和小项目

2875
01:47:22,200 --> 01:47:23,610
为什么方便适合小项目

2876
01:47:23,730 --> 01:47:26,220
因为他在小项目上它的性能

2877
01:47:26,490 --> 01:47:28,320
它反而还比rock的性能还好

2878
01:47:28,650 --> 01:47:29,190
为什么

2879
01:47:29,460 --> 01:47:31,590
因为他可以定向它的性能

2880
01:47:31,590 --> 01:47:32,490
它可以去定向

2881
01:47:32,490 --> 01:47:36,030
直接定向到某一个render里边去做修改

2882
01:47:36,700 --> 01:47:37,150
是不是

2883
01:47:38,150 --> 01:47:39,830
直接定向到某一个component

2884
01:47:40,190 --> 01:47:41,390
定向到某一个组件

2885
01:47:41,450 --> 01:47:44,780
因为我的微视整个微是不是有多个五个组件

2886
01:47:44,780 --> 01:47:46,250
比如说微有五个组件

2887
01:47:46,730 --> 01:47:48,920
我现在只有一个组件里面的数据修改了

2888
01:47:48,980 --> 01:47:52,280
我是不是可以直接定向到这个主机里边儿的去做修改是吧

2889
01:47:53,010 --> 01:47:54,030
所以说可以定向

2890
01:47:54,180 --> 01:47:57,240
然后他还做了什么编译词的一个优化是

2891
01:47:57,860 --> 01:47:58,880
编译时的一句话

2892
01:47:58,940 --> 01:48:00,470
也正是因为他边意思

2893
01:48:01,560 --> 01:48:03,960
他的规范导致了它的开发语言

2894
01:48:03,960 --> 01:48:05,160
导致了它编译时的计划

2895
01:48:06,070 --> 01:48:08,650
当然也到也因为他用了位置

2896
01:48:08,710 --> 01:48:12,670
导致了他的大内存就是在大项目里边儿用不起来

2897
01:48:12,700 --> 01:48:16,150
所以说大项目里面用不起来的原因是他第一要监听数据

2898
01:48:19,120 --> 01:48:19,570
是吧

2899
01:48:21,680 --> 01:48:22,910
定向是找到的意思

2900
01:48:23,120 --> 01:48:24,890
定向就是一会儿跟你说定向

2901
01:48:25,840 --> 01:48:29,560
定向就是我直接知道这个message就是定向

2902
01:48:29,560 --> 01:48:32,560
我就就是我直接把message发生了修改

2903
01:48:32,560 --> 01:48:36,010
我知道要去做哪个函数的开发是吧

2904
01:48:38,680 --> 01:48:39,340
嗯

2905
01:48:40,120 --> 01:48:41,890
对映射就可可以这么理解

2906
01:48:42,100 --> 01:48:43,120
就相当于是个K

2907
01:48:43,300 --> 01:48:45,460
就是你比如说我们现在没事姐

2908
01:48:45,790 --> 01:48:47,320
这上面就维护了一个方形

2909
01:48:47,710 --> 01:48:48,550
方形就是render

2910
01:48:50,030 --> 01:48:50,420
知道吧

2911
01:48:50,990 --> 01:48:51,710
这个意思蹲点

2912
01:48:52,400 --> 01:48:52,850
是吧

2913
01:48:53,560 --> 01:48:54,850
我直接我这个message

2914
01:48:54,850 --> 01:48:57,040
我就因为它这边就会维护这一套意思

2915
01:48:57,280 --> 01:49:00,820
那么react同学们又回到reactor再来两个框架对比

2916
01:49:02,010 --> 01:49:02,640
让特

2917
01:49:02,670 --> 01:49:04,830
他的写法是不是就极其灵活

2918
01:49:05,620 --> 01:49:06,280
你们写write

2919
01:49:06,280 --> 01:49:07,930
写JS的时候是不是写个div

2920
01:49:08,950 --> 01:49:10,000
他就极其灵活

2921
01:49:10,030 --> 01:49:11,620
因为它为什么它没有规范

2922
01:49:12,070 --> 01:49:13,870
没有规范你写的V的时候

2923
01:49:13,870 --> 01:49:14,920
他其实写的什么

2924
01:49:15,190 --> 01:49:16,930
写的是reactor

2925
01:49:18,720 --> 01:49:21,540
Dear create element是她写的是JS

2926
01:49:21,540 --> 01:49:23,220
你写这个的时候其实是写的什么

2927
01:49:23,610 --> 01:49:24,810
写的是JS是吧

2928
01:49:25,380 --> 01:49:26,730
他并不是写这个东西

2929
01:49:27,490 --> 01:49:30,610
是不是你所有的每一个标签他都会编译成这个方法

2930
01:49:31,090 --> 01:49:33,100
是不是都是这个东西

2931
01:49:33,310 --> 01:49:36,160
所有每一个标签都是最后编译出来都是这个东西

2932
01:49:36,970 --> 01:49:37,420
是不是

2933
01:49:39,560 --> 01:49:40,940
我这块儿稍微扩展一下

2934
01:49:41,060 --> 01:49:42,560
你们后边儿学到的这块儿

2935
01:49:42,560 --> 01:49:44,120
再回过头来看我这个录播

2936
01:49:44,510 --> 01:49:45,680
你就会很明白了

2937
01:49:45,800 --> 01:49:46,220
知道吧

2938
01:49:49,100 --> 01:49:50,420
所以说在这一步你看

2939
01:49:52,010 --> 01:49:52,550
对

2940
01:49:52,730 --> 01:49:55,400
所以说你写的所有东西全是写的DS

2941
01:49:56,420 --> 01:49:57,560
那么写的JS

2942
01:49:57,770 --> 01:50:00,920
那么JS可以编译时优化吗

2943
01:50:01,010 --> 01:50:02,330
JS可以编译时优化吗

2944
01:50:02,690 --> 01:50:03,470
不行是不是

2945
01:50:03,770 --> 01:50:05,240
JS不能编译时优化

2946
01:50:07,550 --> 01:50:07,970
是不是

2947
01:50:08,950 --> 01:50:10,330
键是不能编译词优化

2948
01:50:11,180 --> 01:50:12,860
那所以说他不能分析

2949
01:50:12,920 --> 01:50:14,780
他就分析不出来

2950
01:50:16,590 --> 01:50:19,800
到底是哪一块的render对应哪一块的数据

2951
01:50:20,160 --> 01:50:20,610
是不是

2952
01:50:21,150 --> 01:50:21,510
是不是

2953
01:50:21,720 --> 01:50:26,340
而且我们的react他到底维护这些数据

2954
01:50:27,380 --> 01:50:29,480
他定他会维护这一套映射吗

2955
01:50:29,480 --> 01:50:31,070
他不会维护这一套映射关系

2956
01:50:32,080 --> 01:50:33,460
是不是所以说

2957
01:50:33,520 --> 01:50:34,990
因为每一次数据修改

2958
01:50:34,990 --> 01:50:38,500
它整个react都会全部构建一套

2959
01:50:38,980 --> 01:50:39,640
咨询一遍

2960
01:50:41,410 --> 01:50:41,770
同学们

2961
01:50:41,770 --> 01:50:43,240
如果你现在可能听到懵逼

2962
01:50:43,510 --> 01:50:45,220
但是你现在就算蒙逼

2963
01:50:45,220 --> 01:50:46,210
你也不要管那么多

2964
01:50:46,270 --> 01:50:46,900
你就先听

2965
01:50:47,050 --> 01:50:48,790
等你后面把react学完了之后

2966
01:50:49,120 --> 01:50:51,610
等你所学完了再回过来听我这个录播课

2967
01:50:51,610 --> 01:50:53,110
你会觉得

2968
01:50:53,110 --> 01:50:54,700
思想就会拔高一个维度

2969
01:50:55,150 --> 01:50:57,460
所以说GFX在编译的时候

2970
01:50:58,230 --> 01:51:00,270
JS是不能编译的是吧

2971
01:51:00,270 --> 01:51:02,280
JS的编译时是不能够优化的

2972
01:51:02,280 --> 01:51:03,150
不能够分析的是不是

2973
01:51:03,180 --> 01:51:06,690
所以说他不能够在编译时优化是吧

2974
01:51:06,690 --> 01:51:08,520
编译时优化是吧

2975
01:51:09,660 --> 01:51:13,290
那么而且他没有什么没有关系的映射是吧

2976
01:51:13,440 --> 01:51:14,490
关系的映射

2977
01:51:15,480 --> 01:51:19,320
就是我们平时我的rock里边的数据全是存在着什么呢

2978
01:51:19,410 --> 01:51:21,120
全是基于我的status是吧

2979
01:51:21,210 --> 01:51:22,770
全是我的state包括的purpose

2980
01:51:22,770 --> 01:51:23,790
它是抽离的是吧

2981
01:51:24,300 --> 01:51:24,720
是吧

2982
01:51:25,430 --> 01:51:28,100
这个东西它维度完全就不一样了

2983
01:51:28,520 --> 01:51:31,610
它的维度是建立了一个映射这个维度

2984
01:51:31,910 --> 01:51:33,680
REC的sight的维度

2985
01:51:33,680 --> 01:51:34,400
他不一样了

2986
01:51:34,920 --> 01:51:36,000
他的维度是什么

2987
01:51:36,270 --> 01:51:39,210
它的维度是一个一个一个什么维度

2988
01:51:39,420 --> 01:51:41,910
它的维度更多是一个数据

2989
01:51:41,910 --> 01:51:42,660
就是数据

2990
01:51:43,930 --> 01:51:44,470
知道吧

2991
01:51:44,650 --> 01:51:45,970
数据是触发

2992
01:51:47,440 --> 01:51:49,030
Render改变了一个动作

2993
01:51:49,750 --> 01:51:52,060
所以说他会全部所有的东西

2994
01:51:52,240 --> 01:51:53,080
没有这个东西

2995
01:51:53,230 --> 01:51:55,810
所以说他会全部的全部走一遍

2996
01:51:56,540 --> 01:51:58,010
全部走一遍冻地府

2997
01:51:59,510 --> 01:52:01,130
全全部走一遍动物地府

2998
01:52:01,280 --> 01:52:04,370
他现在新的动物地府其实也就是fiber比较的过程

2999
01:52:04,370 --> 01:52:08,060
Fiber构建为reactor心动地府的过程

3000
01:52:08,060 --> 01:52:09,710
其实也就是fiber构建的过程

3001
01:52:11,280 --> 01:52:12,090
构建比较的过程

3002
01:52:12,090 --> 01:52:13,710
所以说他在里边儿

3003
01:52:13,740 --> 01:52:16,050
他就没有什么编译时优化它

3004
01:52:16,050 --> 01:52:18,180
没有编译时优化它只能什么运行时优化

3005
01:52:19,470 --> 01:52:23,040
它的运行是优化就只能放在了他只能他既然没有变形计话

3006
01:52:23,040 --> 01:52:24,030
就只能运行计划

3007
01:52:24,120 --> 01:52:27,240
那它运行优化就只能构建什么发一本架构

3008
01:52:28,040 --> 01:52:29,300
Fiber可中断

3009
01:52:30,500 --> 01:52:32,540
架构就这么来的

3010
01:52:33,080 --> 01:52:33,530
知道吗

3011
01:52:33,800 --> 01:52:35,810
因为他如果有编译时优化

3012
01:52:37,140 --> 01:52:38,940
那他还需要去搞这么一套架构吗

3013
01:52:38,970 --> 01:52:39,480
不需要了

3014
01:52:40,250 --> 01:52:41,210
他是因为没有便意

3015
01:52:41,210 --> 01:52:41,720
是优化

3016
01:52:43,120 --> 01:52:44,530
他每一次运行的时候

3017
01:52:44,530 --> 01:52:46,510
你每一次修改一个state的时候

3018
01:52:46,630 --> 01:52:48,160
他可能整个全局

3019
01:52:48,160 --> 01:52:51,760
整个页面都会需要去构建一下fever

3020
01:52:52,490 --> 01:52:55,400
所有都都需要去构建一下版本

3021
01:52:55,580 --> 01:52:56,540
然后重新来对比

3022
01:52:56,690 --> 01:52:58,160
如果你的代码写的还烂

3023
01:52:58,610 --> 01:52:59,870
那就性能就更差

3024
01:53:00,490 --> 01:53:01,120
明白了吗

3025
01:53:04,390 --> 01:53:05,500
V1还没变意识优化呢

3026
01:53:05,890 --> 01:53:07,420
我在讲的啥啦

3027
01:53:07,420 --> 01:53:11,680
V1同学哪个同学给他说微友有什有什么编译优化

3028
01:53:11,680 --> 01:53:12,850
我才讲了几个小时

3029
01:53:12,910 --> 01:53:14,080
还没变异是优化呢

3030
01:53:15,410 --> 01:53:16,760
我这儿静态标签

3031
01:53:16,970 --> 01:53:17,630
静态界面

3032
01:53:17,630 --> 01:53:18,350
静态标签

3033
01:53:18,410 --> 01:53:20,270
东地府才跟你说的

3034
01:53:20,300 --> 01:53:21,410
还有关心社

3035
01:53:23,200 --> 01:53:26,770
你你可能这个这个同学可能你们

3036
01:53:27,880 --> 01:53:30,880
你们下来之后可能前后因为子

3037
01:53:31,540 --> 01:53:33,160
知识的密集量还是很大的

3038
01:53:33,550 --> 01:53:34,870
知识的密集量还是很大的

3039
01:53:35,960 --> 01:53:37,400
所以说这就是编译时

3040
01:53:37,430 --> 01:53:38,990
这就是框架层面的东西

3041
01:53:39,050 --> 01:53:39,380
知道吧

3042
01:53:39,380 --> 01:53:40,640
同学们好

3043
01:53:41,180 --> 01:53:42,680
我们这个维度聊完了

3044
01:53:43,190 --> 01:53:44,450
我们就聊边一词

3045
01:53:44,450 --> 01:53:46,430
聊完了框架我们对比我们就完了

3046
01:53:46,790 --> 01:53:48,470
我们就聊唯一的运行时了

3047
01:53:49,060 --> 01:53:51,700
唯一运行时就只是为了运行时他没有优化

3048
01:53:51,880 --> 01:53:52,300
知道吧

3049
01:53:52,780 --> 01:53:53,830
Reactor就不一样了

3050
01:53:55,590 --> 01:53:56,130
知道吧

3051
01:53:58,220 --> 01:53:58,880
那肯定的

3052
01:53:58,880 --> 01:53:59,420
我跟你说

3053
01:53:59,690 --> 01:54:01,880
像你们这种这种人

3054
01:54:04,260 --> 01:54:04,650
继续啊

3055
01:54:04,650 --> 01:54:05,460
咱们继续

3056
01:54:07,200 --> 01:54:08,640
然后我们就要聊什么

3057
01:54:08,670 --> 01:54:10,920
聊我们的那个

3058
01:54:11,550 --> 01:54:12,180
框架啦

3059
01:54:13,740 --> 01:54:14,550
假够了是吧

3060
01:54:15,090 --> 01:54:16,200
价格我们也聊完了是吧

3061
01:54:16,200 --> 01:54:17,220
价格我们聊完了

3062
01:54:17,670 --> 01:54:18,420
康奈尔是吧

3063
01:54:18,420 --> 01:54:19,530
康奈尔我们也聊完了

3064
01:54:20,180 --> 01:54:20,990
我们要聊什么

3065
01:54:21,260 --> 01:54:22,760
聊真正核心的东西啦

3066
01:54:22,970 --> 01:54:23,930
真正核心的东西了

3067
01:54:24,830 --> 01:54:26,600
聊这个里边儿的东西

3068
01:54:26,900 --> 01:54:28,370
继续编译运行时

3069
01:54:28,580 --> 01:54:30,290
运行时的东西全在里边

3070
01:54:30,560 --> 01:54:31,370
这个文件夹里边儿

3071
01:54:31,490 --> 01:54:32,000
扣里边

3072
01:54:32,420 --> 01:54:33,770
是不是全在里边儿呢

3073
01:54:33,770 --> 01:54:34,850
来进到坑里边来

3074
01:54:35,690 --> 01:54:36,500
扣里面呢

3075
01:54:38,470 --> 01:54:40,060
空里面有几个地方

3076
01:54:40,090 --> 01:54:41,170
第一个是我们的X

3077
01:54:41,760 --> 01:54:42,960
Index这个东西就不用说了

3078
01:54:42,960 --> 01:54:48,900
就是我们的这个最主要的这个indexnext也没什么东西

3079
01:54:49,780 --> 01:54:50,530
它分了几个东西

3080
01:54:50,530 --> 01:54:52,360
第一个是component component呢

3081
01:54:52,480 --> 01:54:53,110
做一个什么

3082
01:54:53,950 --> 01:54:56,950
这个是我们的come on a come on a它是声明一个字

3083
01:54:56,950 --> 01:54:58,060
自定义组件是吧

3084
01:54:58,090 --> 01:55:00,100
就是keeper lived这种组件是吧

3085
01:55:00,580 --> 01:55:02,620
Come on a就是V1的组件

3086
01:55:02,620 --> 01:55:05,920
V1支持的那种原声就是V1支持的这种组件

3087
01:55:06,640 --> 01:55:07,090
科目呢

3088
01:55:08,530 --> 01:55:09,940
然后完了之后就什么

3089
01:55:10,210 --> 01:55:13,990
完了之后就是我们的全局global

3090
01:55:14,200 --> 01:55:15,250
全局global API呢

3091
01:55:15,250 --> 01:55:15,910
就是做什么

3092
01:55:16,360 --> 01:55:20,140
就是一些我们的一些什么我们的比如说我们的事件呢

3093
01:55:20,590 --> 01:55:21,910
事件说实话

3094
01:55:21,910 --> 01:55:22,540
事件呢

3095
01:55:22,540 --> 01:55:23,320
Youth啊

3096
01:55:23,530 --> 01:55:25,390
什么什么柚子

3097
01:55:25,390 --> 01:55:26,380
什么max

3098
01:55:26,470 --> 01:55:27,670
你看youth

3099
01:55:27,670 --> 01:55:28,360
Mix这些东西

3100
01:55:28,570 --> 01:55:29,560
然后extent

3101
01:55:29,560 --> 01:55:31,870
这些API就是去挂载这些东西

3102
01:55:31,870 --> 01:55:34,000
全局的API都没有说了

3103
01:55:34,570 --> 01:55:36,460
然后这个一会给大家说

3104
01:55:36,760 --> 01:55:40,120
我先我们先说先做一个深广度优先的地位

3105
01:55:40,650 --> 01:55:41,700
然后global完了之后

3106
01:55:41,700 --> 01:55:44,160
然后就是instance instance这个东西就是

3107
01:55:45,100 --> 01:55:45,940
构建实例

3108
01:55:46,580 --> 01:55:48,710
包括我们刚刚说的那个render

3109
01:55:48,740 --> 01:55:50,510
去构建render的过程是吧

3110
01:55:50,750 --> 01:55:51,590
构建render的过程

3111
01:55:51,590 --> 01:55:52,340
同学是吧

3112
01:55:52,400 --> 01:55:54,590
构建的过程这块儿扩展render

3113
01:55:54,590 --> 01:55:55,490
构建render是吧

3114
01:55:55,490 --> 01:55:56,270
在这里边儿是吧

3115
01:55:57,340 --> 01:56:00,550
SORN的过程这些东西是不是都在这里边

3116
01:56:01,160 --> 01:56:02,540
都在这里边看到吗

3117
01:56:02,600 --> 01:56:03,710
这是我们的过程

3118
01:56:04,780 --> 01:56:05,680
都在这里边

3119
01:56:07,160 --> 01:56:08,960
我刚刚给大家看了English儿是吧

3120
01:56:09,350 --> 01:56:10,610
刚刚看到render的过程

3121
01:56:10,910 --> 01:56:12,200
包括下划线杠C

3122
01:56:12,200 --> 01:56:12,590
看见吗

3123
01:56:12,590 --> 01:56:13,760
这就是下划线杠C

3124
01:56:14,330 --> 01:56:15,560
杠C就是这个东西

3125
01:56:15,620 --> 01:56:16,760
Create element看到吗

3126
01:56:17,120 --> 01:56:18,080
就是下完杠C

3127
01:56:18,290 --> 01:56:20,870
你们平时所谓的玩一杠C这东西

3128
01:56:22,100 --> 01:56:23,270
然后在这一步

3129
01:56:25,210 --> 01:56:27,400
在这一步继续往下

3130
01:56:27,400 --> 01:56:29,530
就是我们的什么

3131
01:56:31,170 --> 01:56:32,640
他各种什么事件

3132
01:56:32,640 --> 01:56:33,570
生命周期

3133
01:56:33,660 --> 01:56:34,440
初始化呀

3134
01:56:34,800 --> 01:56:35,640
都在这里边

3135
01:56:35,970 --> 01:56:36,450
都在这

3136
01:56:36,600 --> 01:56:37,260
都在这一步

3137
01:56:37,350 --> 01:56:39,390
都都都在这个这个English

3138
01:56:39,390 --> 01:56:40,950
Instance这里边儿

3139
01:56:41,280 --> 01:56:42,720
然后这一步完了之后

3140
01:56:43,200 --> 01:56:47,970
这一步完了之后再来我们的observer observer就是我们的核心的双向数据绑定的阶段了

3141
01:56:48,000 --> 01:56:48,420
知道吧

3142
01:56:49,020 --> 01:56:51,030
就是我们核心的双向数据绑定的技能了

3143
01:56:51,270 --> 01:56:52,710
知道双向数据绑定

3144
01:56:52,800 --> 01:56:55,470
包括我们的调度这一层的东西

3145
01:56:55,800 --> 01:56:56,670
全部在这个阶段

3146
01:56:56,910 --> 01:56:58,830
然后再往下就是一些虚拟动

3147
01:56:58,860 --> 01:57:00,030
就是我们的虚拟动

3148
01:57:00,030 --> 01:57:01,140
心动就是微弱的

3149
01:57:01,910 --> 01:57:02,690
我们的阶段

3150
01:57:03,290 --> 01:57:04,550
我们就是微弱的阶段

3151
01:57:05,870 --> 01:57:06,350
系统

3152
01:57:07,460 --> 01:57:08,510
系统默

3153
01:57:11,940 --> 01:57:12,720
这就十点了

3154
01:57:13,050 --> 01:57:13,470
对啊

3155
01:57:13,590 --> 01:57:14,280
这就十点了

3156
01:57:14,400 --> 01:57:16,140
我们实力这块才开始呢

3157
01:57:16,920 --> 01:57:17,640
明天还要讲

3158
01:57:17,640 --> 01:57:19,770
差不多要讲一个小时

3159
01:57:19,800 --> 01:57:21,120
一个多小时才能讲完

3160
01:57:21,210 --> 01:57:26,190
我们把V2 VV2可能讲时间更多一点

3161
01:57:26,190 --> 01:57:27,930
为什么说现在V三都出来了

3162
01:57:27,930 --> 01:57:30,270
我们为什么V2还要多多一点呢

3163
01:57:30,780 --> 01:57:35,010
因为V3和V2它是对比起来学习的

3164
01:57:35,010 --> 01:57:35,880
V2的代码

3165
01:57:35,880 --> 01:57:37,350
V3的V2你学明白了

3166
01:57:37,350 --> 01:57:38,130
V3就简单的很

3167
01:57:38,130 --> 01:57:39,330
真的是简单的很

3168
01:57:40,100 --> 01:57:40,940
我就这么认为

3169
01:57:42,240 --> 01:57:46,530
因为所有的东西全是基于A2座里做的处理是吧

3170
01:57:48,980 --> 01:57:49,670
都要对比一下

3171
01:57:49,700 --> 01:57:50,750
对我还会讲

3172
01:57:50,750 --> 01:57:53,420
我一一都会对比都会比

3173
01:57:53,420 --> 01:57:55,370
你不要着急

3174
01:57:55,370 --> 01:57:55,730
V1V2V3

3175
01:57:56,180 --> 01:57:57,350
我讲到那块儿来的时候

3176
01:57:57,350 --> 01:57:58,550
自然自然

3177
01:57:58,550 --> 01:58:03,890
你你们所有学的知识都会在我在无形当中就给你们灌输进来了

3178
01:58:04,250 --> 01:58:05,900
所以很多同学说

3179
01:58:05,900 --> 01:58:06,800
这块儿没跟你讲

3180
01:58:06,800 --> 01:58:07,670
没讲优化

3181
01:58:07,670 --> 01:58:08,810
没讲编译时优化

3182
01:58:10,600 --> 01:58:11,050
知道吧

3183
01:58:11,170 --> 01:58:12,190
你们学了很多知识

3184
01:58:12,190 --> 01:58:15,070
在无形当中我就自然就给你们串输进来了

3185
01:58:17,560 --> 01:58:18,130
继续啊

3186
01:58:18,490 --> 01:58:19,480
所以说你看我在这一步

3187
01:58:19,480 --> 01:58:21,130
这是我们虚拟动微露的是吧

3188
01:58:21,460 --> 01:58:23,230
所以你看崴了完了之后

3189
01:58:23,260 --> 01:58:24,490
这里面就是我们的所有

3190
01:58:25,000 --> 01:58:26,500
你这个这个这是什么

3191
01:58:27,840 --> 01:58:28,410
不不不

3192
01:58:28,650 --> 01:58:29,520
我们再讲会儿

3193
01:58:29,730 --> 01:58:31,020
再讲会再讲会儿

3194
01:58:31,810 --> 01:58:32,230
在讲话

3195
01:58:32,230 --> 01:58:34,420
我们今天都快快下课了吗

3196
01:58:34,480 --> 01:58:36,070
在讲话讲话

3197
01:58:36,070 --> 01:58:38,830
我们把这运行时的一个开端的东西给大家讲了

3198
01:58:40,960 --> 01:58:41,770
这块东西讲了

3199
01:58:41,770 --> 01:58:43,600
你们就觉得今天厉害

3200
01:58:44,860 --> 01:58:46,090
所以我们在这一步

3201
01:58:46,820 --> 01:58:47,720
首先是什么

3202
01:58:47,750 --> 01:58:48,380
这几个阶段

3203
01:58:48,380 --> 01:58:49,820
这几个阶段都是负责什么

3204
01:58:49,970 --> 01:58:51,560
都是负责我们不同的东西是吧

3205
01:58:51,710 --> 01:58:53,510
Component负责我们的模板是吧

3206
01:58:53,840 --> 01:58:55,910
模板就是keep on live是吧

3207
01:58:56,240 --> 01:58:56,810
狗狗API

3208
01:58:56,810 --> 01:58:58,400
最上层API instance是吧

3209
01:58:58,460 --> 01:59:00,800
Instance还有什么我们的observer是吧

3210
01:59:00,800 --> 01:59:03,740
就是我们的数据收集和订阅这个东西

3211
01:59:04,300 --> 01:59:06,670
还有就是我们的OUT是什么

3212
01:59:06,790 --> 01:59:10,060
是我们的这个我们的那个那个双向数据绑定的过程

3213
01:59:10,060 --> 01:59:11,470
这个YouTube工具类

3214
01:59:11,470 --> 01:59:12,730
还有就是我们的运动是吧

3215
01:59:12,850 --> 01:59:13,210
运动

3216
01:59:13,900 --> 01:59:15,190
然后在这个阶段之上

3217
01:59:15,250 --> 01:59:17,770
我们就要聊双向数据绑定了是吧

3218
01:59:18,070 --> 01:59:19,450
双向数据绑定卡了吗

3219
01:59:19,450 --> 01:59:20,590
其他同学卡了吗

3220
01:59:21,700 --> 01:59:22,120
没有啊

3221
01:59:22,150 --> 01:59:22,780
没有继续

3222
01:59:23,230 --> 01:59:24,520
所以说在这个基础上

3223
01:59:24,730 --> 01:59:26,320
这是我们所有核心的东西

3224
01:59:26,350 --> 01:59:27,910
全是所有源码的核心

3225
01:59:27,910 --> 01:59:30,370
运行时的编译时和运行时的核心源码

3226
01:59:30,370 --> 01:59:33,130
现在这里边我们在这一步继续这块儿

3227
01:59:33,700 --> 01:59:34,180
这里面呢

3228
01:59:34,180 --> 01:59:35,050
这个几个概念

3229
01:59:35,050 --> 01:59:36,520
第一个是object DeFine property

3230
01:59:37,370 --> 01:59:38,180
第二个是observer

3231
01:59:38,180 --> 01:59:38,750
还有water

3232
01:59:38,750 --> 01:59:39,290
还有dip

3233
01:59:39,290 --> 01:59:40,280
还有directive

3234
01:59:40,850 --> 01:59:41,930
然后回到这个里面来

3235
01:59:42,980 --> 01:59:44,630
到末我们回到这个里面

3236
01:59:45,260 --> 01:59:47,300
我们首先来到这个里边儿

3237
01:59:47,300 --> 01:59:48,560
把这个架构给大家啦

3238
01:59:48,560 --> 01:59:49,010
明白

3239
01:59:50,390 --> 01:59:51,320
加购了你们

3240
01:59:53,460 --> 01:59:57,090
我们知道我们平时写的代码是在这儿

3241
01:59:57,090 --> 01:59:57,390
是不是

3242
01:59:57,420 --> 01:59:58,710
这是我们平时写的代码是吧

3243
01:59:59,040 --> 01:59:59,400
同学们

3244
01:59:59,520 --> 02:00:00,750
这是我们平时写代码

3245
02:00:01,300 --> 02:00:03,880
这是我刚刚给大家看的那一套代码是吧

3246
02:00:04,540 --> 02:00:05,410
是不是写的这个

3247
02:00:05,530 --> 02:00:07,840
写的这些代码是不是我们平时写代码是吧

3248
02:00:08,290 --> 02:00:10,180
平时写的代码它会编译成什么

3249
02:00:10,390 --> 02:00:11,860
编译成render是吧

3250
02:00:12,040 --> 02:00:13,150
编译成render是吧

3251
02:00:13,790 --> 02:00:15,860
是不是在这块儿它会变异成render

3252
02:00:15,860 --> 02:00:17,630
是不是你就把这种

3253
02:00:18,200 --> 02:00:18,680
同学们

3254
02:00:18,860 --> 02:00:21,560
你现在需要理解的就是这种把

3255
02:00:22,210 --> 02:00:25,210
这种你在平时写代码的时候写的是不是这种代码写的

3256
02:00:25,210 --> 02:00:27,130
比如说写这种代码写的

3257
02:00:27,130 --> 02:00:28,450
我们像

3258
02:00:29,270 --> 02:00:31,070
这种代码是不是写的这种代码

3259
02:00:33,900 --> 02:00:34,350
是不是

3260
02:00:35,080 --> 02:00:35,800
平时我们写代码

3261
02:00:35,800 --> 02:00:36,760
写的这种代码是吧

3262
02:00:37,480 --> 02:00:39,400
是写这种代码来写这种代码

3263
02:00:39,550 --> 02:00:43,690
这个是不是一个指令这种就是就属于一个指令是不是不是

3264
02:00:43,780 --> 02:00:45,700
这是不是属于一个指令是吧

3265
02:00:46,510 --> 02:00:48,610
这种是不是也属于一个指令是吧

3266
02:00:48,910 --> 02:00:50,560
这种东西它也是属于一个指令

3267
02:00:50,560 --> 02:00:50,860
是不是

3268
02:00:50,890 --> 02:00:52,420
这里边儿你可以把他说一说

3269
02:00:52,420 --> 02:00:55,960
为什么指令V杠HTML的指令是不是是不是也是一个指令

3270
02:00:56,020 --> 02:00:58,270
是不明白吗

3271
02:00:58,420 --> 02:00:59,170
指令

3272
02:00:59,840 --> 02:01:01,700
指令知道吗

3273
02:01:05,720 --> 02:01:06,200
算

3274
02:01:07,280 --> 02:01:08,120
这是一个指令

3275
02:01:08,330 --> 02:01:09,920
那么不同的指令

3276
02:01:11,340 --> 02:01:12,300
不同的指令

3277
02:01:13,300 --> 02:01:14,560
这个每一个代码

3278
02:01:14,560 --> 02:01:16,510
最后最后这些代码都会编译

3279
02:01:16,540 --> 02:01:17,470
都会编译成什么

3280
02:01:17,620 --> 02:01:19,000
都会编译成一个什么

3281
02:01:19,330 --> 02:01:21,820
都会编译成我们的一个什么render函数是吧

3282
02:01:22,210 --> 02:01:24,310
是不是是不是render函数

3283
02:01:24,310 --> 02:01:25,540
是不是都会变成render函数

3284
02:01:25,540 --> 02:01:27,010
这种render函数是

3285
02:01:27,010 --> 02:01:27,430
同学们

3286
02:01:28,040 --> 02:01:33,950
是不是那你现在就理解为一个指令就会变异成一个render函数好不好

3287
02:01:34,400 --> 02:01:36,620
一个指令就会变成一个一个render函数

3288
02:01:36,770 --> 02:01:37,490
什么意思呢

3289
02:01:37,640 --> 02:01:42,710
比如说我这个指令的render函数就直接修改这个这个这个这个这个

3290
02:01:44,550 --> 02:01:47,340
H2这个标签的展示或者修改这个东西

3291
02:01:47,640 --> 02:01:48,180
这个render

3292
02:01:48,360 --> 02:01:51,720
我这个render只修只负责修改H2的展示

3293
02:01:51,750 --> 02:01:54,240
我这个论点只负责修改这一块的展示

3294
02:01:55,420 --> 02:01:58,030
是不是所以说这块我们先引出来一个概念就是

3295
02:01:59,650 --> 02:02:00,490
一个指令

3296
02:02:00,850 --> 02:02:01,810
一个指令

3297
02:02:03,970 --> 02:02:04,810
对应一个什么

3298
02:02:05,710 --> 02:02:06,520
对应一个render

3299
02:02:07,030 --> 02:02:08,830
是一个指令对应的render

3300
02:02:09,220 --> 02:02:10,810
每个render有不同的功能

3301
02:02:11,230 --> 02:02:13,090
是不是每个render有不同的功能

3302
02:02:20,230 --> 02:02:22,600
是不是每个人都有不同的功能

3303
02:02:22,870 --> 02:02:24,040
所以说这个维度

3304
02:02:24,130 --> 02:02:25,330
所以说这个维度之上

3305
02:02:26,030 --> 02:02:27,710
我们就是一个指令对应的render

3306
02:02:27,740 --> 02:02:29,300
然后不同的render有不同的功能

3307
02:02:29,300 --> 02:02:29,540
是吧

3308
02:02:29,690 --> 02:02:30,920
然后在这个维度之上

3309
02:02:31,040 --> 02:02:31,970
我们再来细分

3310
02:02:32,830 --> 02:02:33,790
这是一个指令

3311
02:02:34,360 --> 02:02:35,470
那我现在问你

3312
02:02:35,850 --> 02:02:37,230
这是一个指令

3313
02:02:37,230 --> 02:02:38,070
这是一个指令

3314
02:02:38,130 --> 02:02:39,120
这是一个指令

3315
02:02:40,370 --> 02:02:41,900
然后这儿又有一个指令知道吧

3316
02:02:42,260 --> 02:02:44,120
这个指令这个指令是不一样的

3317
02:02:44,150 --> 02:02:45,380
不同的指令知道吗

3318
02:02:45,530 --> 02:02:47,930
因为它不它会修改的节点不一样

3319
02:02:48,380 --> 02:02:48,890
知不知道

3320
02:02:49,540 --> 02:02:50,380
不同的字典

3321
02:02:50,380 --> 02:02:51,280
节点不一样

3322
02:02:52,630 --> 02:02:53,110
懂吧

3323
02:02:53,350 --> 02:02:55,390
所以说这一块儿就我们就对应起来了

3324
02:02:57,450 --> 02:02:59,340
这个东西一个东西对应的指令是吧

3325
02:02:59,340 --> 02:03:00,330
一个东西对一个指令

3326
02:03:00,330 --> 02:03:01,500
这个指令会变成什么

3327
02:03:01,560 --> 02:03:03,630
我们修改指令就是什么

3328
02:03:03,720 --> 02:03:06,510
具体修改我们动节点的一个操作

3329
02:03:06,510 --> 02:03:07,170
你可以这么理解

3330
02:03:08,000 --> 02:03:08,540
好吧

3331
02:03:09,170 --> 02:03:11,150
具体修改冻结点的操作

3332
02:03:14,140 --> 02:03:19,090
具体修改冻结点的操作是吧

3333
02:03:19,720 --> 02:03:22,750
这块同学们一定要举具体举起精神来听

3334
02:03:23,300 --> 02:03:25,040
指令就是修改冻结的操作

3335
02:03:25,040 --> 02:03:25,850
就是一个render

3336
02:03:25,970 --> 02:03:27,440
就是一个你可以理解好吧

3337
02:03:27,740 --> 02:03:28,670
然后在这一步

3338
02:03:28,940 --> 02:03:32,630
那什么时候我来修改这么这么简单的操作

3339
02:03:32,660 --> 02:03:33,560
什么时候同学们

3340
02:03:34,600 --> 02:03:35,950
这个我们就先放到一边

3341
02:03:35,980 --> 02:03:36,850
我们就回到这里边儿

3342
02:03:36,850 --> 02:03:37,810
拉回到这里边儿

3343
02:03:38,200 --> 02:03:39,400
回到这里面是做什么呢

3344
02:03:40,880 --> 02:03:43,430
我这里边儿是不是一开始会有数据

3345
02:03:43,430 --> 02:03:45,110
我会初始化数据times是吧

3346
02:03:45,760 --> 02:03:47,410
我我我在登他的时候

3347
02:03:47,410 --> 02:03:48,010
是不是会出

3348
02:03:48,130 --> 02:03:51,820
我在溜溜溜溜溜溜溜溜a的时候

3349
02:03:51,820 --> 02:03:54,490
是不是这里面是不是有是有这些动态数据

3350
02:03:54,490 --> 02:03:56,560
是不是是不是有动态数据

3351
02:03:56,650 --> 02:03:58,300
我在动态数据的时候

3352
02:03:58,800 --> 02:04:00,270
我在初始化动态数据的时候

3353
02:04:00,270 --> 02:04:01,200
同学们

3354
02:04:01,680 --> 02:04:05,160
我会把这个数据变成一个什么可响应的

3355
02:04:05,490 --> 02:04:07,350
什么叫做可响应可监听的呢

3356
02:04:07,740 --> 02:04:11,010
就是说我能够监听得到这个数据什么时候

3357
02:04:11,540 --> 02:04:12,260
被访问了

3358
02:04:12,290 --> 02:04:13,040
被使用了

3359
02:04:13,070 --> 02:04:16,670
能够坚定的到什么时候的时候被被修改了

3360
02:04:17,380 --> 02:04:19,960
是不是所所以说我这块有一个什么

3361
02:04:20,260 --> 02:04:22,420
有一个第一步会处理是什么

3362
02:04:24,110 --> 02:04:24,770
数据

3363
02:04:26,570 --> 02:04:29,930
处理成想意思小意思嘛

3364
02:04:30,020 --> 02:04:33,080
就是可以可以可以监听可以

3365
02:04:33,840 --> 02:04:36,720
可以监听被使用是吧

3366
02:04:37,410 --> 02:04:40,380
然后被修改是不是是不是

3367
02:04:41,670 --> 02:04:42,630
是不是被修改

3368
02:04:43,200 --> 02:04:48,090
你不你现在不用管是什么来把它处理成响应式数据了是吧

3369
02:04:48,210 --> 02:04:50,220
你现在不用管什么东西把它处理成响应式的

3370
02:04:50,400 --> 02:04:52,710
但是它一定有一个东西把它处理成响应式数据了

3371
02:04:52,950 --> 02:04:54,600
处理成什么可以被监听

3372
02:04:54,600 --> 02:04:55,890
可以被响应被修改

3373
02:04:55,890 --> 02:04:59,610
可以监听被修改被使用的时候和被修改的时候是吧

3374
02:04:59,940 --> 02:05:01,800
那这个时候我这个数据

3375
02:05:01,830 --> 02:05:04,110
现在在这一块儿是被处理成这个东西了

3376
02:05:04,830 --> 02:05:06,660
那这个时候怎么办

3377
02:05:06,750 --> 02:05:07,620
我什么时候

3378
02:05:07,650 --> 02:05:09,360
我这个时候只是被处理了

3379
02:05:09,450 --> 02:05:11,160
只是被处理了整整这个东西了

3380
02:05:11,160 --> 02:05:12,840
但是我现在并没有做其他的处理

3381
02:05:12,930 --> 02:05:13,380
那怎么办

3382
02:05:13,830 --> 02:05:15,270
这块就会调用我这个render

3383
02:05:15,270 --> 02:05:17,280
同学们是我就会调用render

3384
02:05:17,640 --> 02:05:19,560
你看我这块儿是不是就会有这个过程

3385
02:05:19,560 --> 02:05:21,000
我在这儿调用render的时候是吧

3386
02:05:21,240 --> 02:05:25,110
我调用的时候是不是就会获取这个外语实力上面的

3387
02:05:25,110 --> 02:05:27,660
随即获取的时候是不是就会使用

3388
02:05:27,720 --> 02:05:28,110
是不是

3389
02:05:28,630 --> 02:05:29,200
是不是

3390
02:05:30,080 --> 02:05:32,180
获取的时候是不是就会使用是不是

3391
02:05:32,240 --> 02:05:35,030
所以我这块儿就会执行我这个指令

3392
02:05:35,030 --> 02:05:37,910
拿过来生成这个指指令的render是吧

3393
02:05:38,090 --> 02:05:39,470
生成指令的执行

3394
02:05:39,500 --> 02:05:41,780
我就会去执行第一遍我就会去执行

3395
02:05:42,350 --> 02:05:44,360
执行的时候我就会去触发什么

3396
02:05:44,600 --> 02:05:46,340
触发get获取数据是不是

3397
02:05:46,980 --> 02:05:47,430
是啊

3398
02:05:48,470 --> 02:05:49,160
是同学

3399
02:05:50,210 --> 02:05:50,690
是啊

3400
02:05:52,260 --> 02:05:53,220
是不是我冲

3401
02:05:54,480 --> 02:05:55,620
出发的时候是不是就会

3402
02:05:56,730 --> 02:05:57,090
是吧

3403
02:05:57,210 --> 02:06:02,880
执行执行render执行任务的时候是不是就会触发

3404
02:06:03,960 --> 02:06:05,040
获取数据是吧

3405
02:06:06,960 --> 02:06:08,400
那么获取数据之后

3406
02:06:08,430 --> 02:06:09,600
那我就把数据给他

3407
02:06:09,600 --> 02:06:09,960
是吧

3408
02:06:10,410 --> 02:06:11,400
我就把数据给他

3409
02:06:11,400 --> 02:06:11,730
是吧

3410
02:06:11,880 --> 02:06:13,170
触发之后我获取数据呢

3411
02:06:13,170 --> 02:06:14,040
我把数据给他

3412
02:06:14,040 --> 02:06:14,250
是吧

3413
02:06:14,280 --> 02:06:14,940
把数据给他

3414
02:06:16,070 --> 02:06:16,460
是吧

3415
02:06:16,520 --> 02:06:17,210
把数据给他

3416
02:06:17,630 --> 02:06:20,270
数据给他之后页面是不是就渲染出来了

3417
02:06:20,480 --> 02:06:20,870
是吧

3418
02:06:21,680 --> 02:06:22,370
数据给他之后

3419
02:06:22,370 --> 02:06:23,510
页面是不是就渲染出来了

3420
02:06:23,660 --> 02:06:25,100
咱们数据给他之后

3421
02:06:25,100 --> 02:06:25,610
我这块儿

3422
02:06:26,230 --> 02:06:28,300
这个render是不是就是具体去渲染页面啦

3423
02:06:28,300 --> 02:06:29,500
是不是页面就渲染出来了

3424
02:06:30,180 --> 02:06:30,960
这块明白吗

3425
02:06:31,470 --> 02:06:33,000
是不是因为是不是渲染出来了

3426
02:06:34,700 --> 02:06:35,870
这块有问题了

3427
02:06:36,830 --> 02:06:39,260
我如果这儿这个数据又发生了改变了

3428
02:06:39,260 --> 02:06:41,750
我如果没涉及的数据又发生了改变了怎么办

3429
02:06:42,410 --> 02:06:43,040
那怎么办

3430
02:06:44,730 --> 02:06:45,660
举个很近的例子

3431
02:06:46,510 --> 02:06:50,410
我现在这个这个这个MS这个数据发生了改变怎么办

3432
02:06:50,940 --> 02:06:51,300
对

3433
02:06:54,560 --> 02:06:57,620
这块儿没有了这儿没有了这个没有了

3434
02:06:58,980 --> 02:07:01,620
这个概念在线和离线变异这块的概念没有了

3435
02:07:07,750 --> 02:07:10,810
编译那个概念是已经他衔接这个render

3436
02:07:10,810 --> 02:07:12,880
他只是负责编译是吧

3437
02:07:13,060 --> 02:07:17,170
这个render都已经这个代码都已经衔接到你的那个唯一实力上面了

3438
02:07:17,440 --> 02:07:18,430
离线免一盒饭

3439
02:07:18,580 --> 02:07:21,550
在线编译只是负责提供你这个render

3440
02:07:21,910 --> 02:07:23,890
就说我这个render什么时候提供

3441
02:07:24,750 --> 02:07:26,850
提供完了之后怎么用

3442
02:07:26,910 --> 02:07:27,780
那是别人在

3443
02:07:28,520 --> 02:07:30,050
那又是一个说法了是吧

3444
02:07:31,660 --> 02:07:33,790
所以这一步这一步

3445
02:07:33,850 --> 02:07:34,540
在这一步

3446
02:07:35,100 --> 02:07:35,880
这一步在里边

3447
02:07:35,880 --> 02:07:36,600
你看我们这一步

3448
02:07:36,600 --> 02:07:37,500
这一步在里边儿

3449
02:07:37,770 --> 02:07:39,450
我现在已经获取了数据了

3450
02:07:39,450 --> 02:07:40,620
我这个render已经获取了数据

3451
02:07:40,620 --> 02:07:41,250
已经渲染出来了

3452
02:07:41,250 --> 02:07:43,440
但是我的数据发生修改怎么办

3453
02:07:45,020 --> 02:07:46,040
那我就存起来

3454
02:07:46,610 --> 02:07:47,420
存到里边儿

3455
02:07:47,450 --> 02:07:47,840
是吧

3456
02:07:47,960 --> 02:07:49,010
我就存到里边

3457
02:07:49,010 --> 02:07:49,340
是吧

3458
02:07:49,370 --> 02:07:51,830
我就先我就先把这个东西存到这里边儿是吧

3459
02:07:52,280 --> 02:07:52,820
很简单

3460
02:07:53,120 --> 02:07:56,330
比如我这一个报厅有个很简单是吧

3461
02:07:56,360 --> 02:07:59,390
你看我这儿有一个卖报纸的报拼是吧

3462
02:07:59,660 --> 02:07:59,900
有

3463
02:08:00,500 --> 02:08:01,790
有个卖报纸的报厅是吧

3464
02:08:01,970 --> 02:08:02,570
一个报厅

3465
02:08:03,820 --> 02:08:05,080
这是个报厅一个厅

3466
02:08:06,800 --> 02:08:08,840
我每一次有报纸来了之后

3467
02:08:08,840 --> 02:08:09,590
我去找大爷

3468
02:08:09,590 --> 02:08:10,370
我说大爷

3469
02:08:10,370 --> 02:08:11,240
你这儿有报纸吗

3470
02:08:11,240 --> 02:08:13,280
你这儿有今日什么读者

3471
02:08:13,280 --> 02:08:14,390
什么北京日报

3472
02:08:14,390 --> 02:08:15,500
这些东西有报纸吗

3473
02:08:16,200 --> 02:08:17,910
我每一个人都去找大爷

3474
02:08:18,060 --> 02:08:18,270
问

3475
02:08:18,270 --> 02:08:18,780
有报纸吗

3476
02:08:18,780 --> 02:08:19,680
每一个人都去找大爷

3477
02:08:19,680 --> 02:08:20,100
有报纸吗

3478
02:08:20,100 --> 02:08:22,980
每一天都去问大爷很烦是吧

3479
02:08:23,040 --> 02:08:23,850
大也很烦

3480
02:08:24,030 --> 02:08:24,360
大爷说

3481
02:08:24,360 --> 02:08:24,810
哎呀

3482
02:08:24,810 --> 02:08:25,590
你真烦

3483
02:08:26,520 --> 02:08:27,690
你不要来了

3484
02:08:28,300 --> 02:08:30,130
你以后把电话号码留在我这儿

3485
02:08:30,740 --> 02:08:32,570
是不是把电话号码留到我这儿

3486
02:08:33,990 --> 02:08:34,890
等有报纸了

3487
02:08:34,890 --> 02:08:37,770
有这个报纸的时候我给你打电话就行了是吧

3488
02:08:39,180 --> 02:08:39,630
是不是

3489
02:08:40,540 --> 02:08:42,190
你先把电话留到我这儿

3490
02:08:42,220 --> 02:08:42,940
然后有报纸了

3491
02:08:42,940 --> 02:08:43,930
我打电话就行了

3492
02:08:44,020 --> 02:08:46,360
你不需要每天都来问是不是

3493
02:08:46,720 --> 02:08:48,310
所以说这块儿就出来一个什么过程

3494
02:08:48,760 --> 02:08:50,020
出了一个订阅的过程

3495
02:08:50,200 --> 02:08:51,520
是一个订阅的过程

3496
02:08:51,610 --> 02:08:53,440
就是说我一开始

3497
02:08:54,010 --> 02:08:56,950
我一开始我只需要把我这个render

3498
02:08:57,660 --> 02:08:59,040
通过一个这个东西

3499
02:08:59,190 --> 02:09:00,210
通过一个

3500
02:09:00,860 --> 02:09:01,850
关联关系

3501
02:09:02,450 --> 02:09:03,920
通过一个关联关系

3502
02:09:04,070 --> 02:09:04,760
你不用管

3503
02:09:04,790 --> 02:09:06,860
你现在不用管这个关联关系是什么

3504
02:09:06,980 --> 02:09:08,450
把他订阅在这里边儿

3505
02:09:08,660 --> 02:09:09,380
订阅起来

3506
02:09:09,380 --> 02:09:11,030
记录到大爷的电话本上

3507
02:09:11,590 --> 02:09:12,460
记录到电话本上

3508
02:09:12,460 --> 02:09:15,790
就是把我们这个render的函数记录到电话本上

3509
02:09:16,000 --> 02:09:17,920
记录了电话本儿记录的是什么关系呢

3510
02:09:18,040 --> 02:09:19,840
记录的是这个render

3511
02:09:21,090 --> 02:09:22,740
他到底使用了哪一个K

3512
02:09:22,740 --> 02:09:23,190
是不是

3513
02:09:23,800 --> 02:09:27,610
到底使用哪一个什么哪一个哪一个哪一个times是吧

3514
02:09:28,320 --> 02:09:29,790
哪一个render使用

3515
02:09:29,790 --> 02:09:31,620
到底使用了哪一个times

3516
02:09:31,620 --> 02:09:33,180
我记录到这个电话本上是不是

3517
02:09:33,980 --> 02:09:35,360
就是说我比如说我这个

3518
02:09:35,420 --> 02:09:38,180
我这个message用了这个render是吧

3519
02:09:38,180 --> 02:09:39,380
我这个message用了这个render

3520
02:09:39,410 --> 02:09:41,150
我另一个message用了另一个render是吧

3521
02:09:41,630 --> 02:09:43,670
我不同的S机可能用了不同的render是吧

3522
02:09:44,400 --> 02:09:45,030
明白吗

3523
02:09:45,240 --> 02:09:46,680
我这块儿就记录下来

3524
02:09:46,680 --> 02:09:49,890
我这个关系是不是我到底是哪一个数据

3525
02:09:50,500 --> 02:09:51,310
哪个数据

3526
02:09:51,960 --> 02:09:52,830
用了我这个

3527
02:09:53,340 --> 02:09:54,660
你哪个指令

3528
02:09:54,690 --> 02:09:55,890
哪个render

3529
02:09:55,890 --> 02:09:56,730
用了哪个指令

3530
02:09:57,030 --> 02:09:58,920
我通过一个东西把它记录下来

3531
02:09:59,280 --> 02:10:00,720
记录了大爷的电话本上

3532
02:10:01,020 --> 02:10:01,710
明白吗

3533
02:10:01,890 --> 02:10:03,990
这一会儿我就把这个映射关系记录下来了

3534
02:10:04,850 --> 02:10:05,450
明白吗

3535
02:10:05,840 --> 02:10:06,860
这块明白吗同学

3536
02:10:11,340 --> 02:10:11,880
是吧

3537
02:10:13,460 --> 02:10:15,200
所以说这块儿我们就回到这里边来

3538
02:10:15,590 --> 02:10:16,640
这是我们的指令是吧

3539
02:10:16,640 --> 02:10:17,300
这是我们的指令

3540
02:10:17,780 --> 02:10:19,790
然后我们指令就会有什么

3541
02:10:21,010 --> 02:10:22,300
也是我的指令是吧

3542
02:10:22,390 --> 02:10:24,430
我们指令这块儿有一个编译成render是吧

3543
02:10:24,580 --> 02:10:26,140
Render在线上执行的时候

3544
02:10:26,140 --> 02:10:27,070
他就会去哭什么

3545
02:10:27,250 --> 02:10:29,200
因为我这个数据已经被监听了是吧

3546
02:10:29,500 --> 02:10:32,110
数据被监听了是不是数据被监听了之后

3547
02:10:32,110 --> 02:10:34,690
我数render在执行的时候就会去获取数据是吧

3548
02:10:35,080 --> 02:10:35,980
就会get数据

3549
02:10:36,100 --> 02:10:37,420
获取数据的时候

3550
02:10:37,600 --> 02:10:39,670
它监听到你这个数据在被获取了

3551
02:10:39,760 --> 02:10:40,360
那怎么办

3552
02:10:41,760 --> 02:10:45,540
他就拿到到底你是什么东西来获取我的数据是吧

3553
02:10:46,080 --> 02:10:50,040
就是我这个render哪一个reader来获取我的数据和获取我什么数据

3554
02:10:50,040 --> 02:10:54,180
是不是他这块儿是不是拿得到拿到之后构建成一个什么

3555
02:10:54,680 --> 02:10:56,000
构建成一个关系

3556
02:10:56,000 --> 02:10:57,350
把它记录到了电话本儿里边儿

3557
02:10:57,350 --> 02:10:59,300
是不是是不是是不是

3558
02:11:00,610 --> 02:11:02,020
是不明白吗

3559
02:11:02,260 --> 02:11:03,400
记录倒电话本儿里边儿

3560
02:11:03,880 --> 02:11:05,140
然后记录完了之后

3561
02:11:05,140 --> 02:11:07,270
然后把数据给到这块儿渲染

3562
02:11:08,040 --> 02:11:11,100
他页面执行渲染电话本是不就执行好了

3563
02:11:11,160 --> 02:11:12,240
是不是就构建好了

3564
02:11:12,270 --> 02:11:15,990
是不是是不是咱们店儿是不是就构建好了

3565
02:11:16,700 --> 02:11:17,300
明白吗

3566
02:11:21,090 --> 02:11:22,380
那电话本儿现在构建好了

3567
02:11:22,380 --> 02:11:23,760
最后一个问题什么问题

3568
02:11:25,350 --> 02:11:25,980
什么问题

3569
02:11:28,320 --> 02:11:30,720
那我数据发生了变化之后怎么办

3570
02:11:31,610 --> 02:11:33,500
我设置是不是能够建立的数据变化

3571
02:11:34,450 --> 02:11:34,720
对

3572
02:11:34,720 --> 02:11:35,860
我到电话本里边去

3573
02:11:35,860 --> 02:11:37,030
拿到所有的电话本

3574
02:11:37,060 --> 02:11:37,900
然后打电话就行了

3575
02:11:38,320 --> 02:11:38,950
明白了吗

3576
02:11:39,520 --> 02:11:40,210
明白了吗

3577
02:11:40,420 --> 02:11:41,380
这个我听明白了吗

3578
02:11:41,860 --> 02:11:42,190
通知

3579
02:11:42,190 --> 02:11:43,510
对大爷

3580
02:11:43,540 --> 02:11:45,760
是大爷通知你去拿报纸

3581
02:11:46,240 --> 02:11:47,020
是大爷

3582
02:11:47,170 --> 02:11:47,590
是这儿

3583
02:11:47,590 --> 02:11:49,120
这个大爷说

3584
02:11:49,120 --> 02:11:51,610
我这儿有报纸来给你们每一个人寄到我电话本上的人

3585
02:11:51,610 --> 02:11:53,680
每一个人来打电话发报纸

3586
02:11:53,740 --> 02:11:54,280
明白了吗

3587
02:11:54,310 --> 02:11:54,760
同学们

3588
02:11:55,340 --> 02:11:56,450
这个过程明白了吗

3589
02:11:58,980 --> 02:12:00,540
所以说这里边就有几个概念

3590
02:12:00,540 --> 02:12:02,070
第一个是observer的概念

3591
02:12:03,050 --> 02:12:04,670
Observer的概念是做什么

3592
02:12:05,960 --> 02:12:06,440
对呀

3593
02:12:06,530 --> 02:12:08,720
给他不是每一个人打一次

3594
02:12:08,810 --> 02:12:11,300
是哪些人订阅了不同的报纸

3595
02:12:11,360 --> 02:12:13,880
比如说我订阅了今日周刊是吧

3596
02:12:14,360 --> 02:12:15,800
我肯定给今日周刊

3597
02:12:15,830 --> 02:12:17,150
今日今日都看到了之后

3598
02:12:17,150 --> 02:12:18,560
我只给今日周刊打电话

3599
02:12:19,010 --> 02:12:22,070
是不是你这个数据只有TIME4发生了变化

3600
02:12:22,070 --> 02:12:24,560
我只给詹姆斯订阅times的人打电话

3601
02:12:25,580 --> 02:12:26,120
没有

3602
02:12:27,380 --> 02:12:27,620
对

3603
02:12:27,620 --> 02:12:29,000
广播也不是广播

3604
02:12:30,260 --> 02:12:31,490
你怎么知道怎么知道

3605
02:12:31,700 --> 02:12:32,990
这是我现在跟你说了

3606
02:12:32,990 --> 02:12:34,910
你不要关注什么数据变了

3607
02:12:34,910 --> 02:12:35,900
我就跟你说了

3608
02:12:36,290 --> 02:12:38,960
这个observer你现在不需要关注怎么变了

3609
02:12:40,100 --> 02:12:40,640
是吧

3610
02:12:41,480 --> 02:12:43,010
所以现在就几有几个

3611
02:12:43,070 --> 02:12:47,030
首先要把数据处理成可以被监听的这个过程是吧

3612
02:12:47,240 --> 02:12:48,740
就是observer这个方法是吧

3613
02:12:49,590 --> 02:12:50,040
对

3614
02:12:54,840 --> 02:12:55,470
你想

3615
02:12:55,650 --> 02:12:58,530
你的一个指令可能有多个地方可以可以被使用

3616
02:12:58,770 --> 02:13:00,840
你这个K是不是有多个地方可以被使用

3617
02:13:02,040 --> 02:13:02,880
多正常

3618
02:13:03,760 --> 02:13:07,150
是不是就跟你一个报纸有多个人订阅一样

3619
02:13:07,920 --> 02:13:08,370
是不是

3620
02:13:09,260 --> 02:13:10,520
然后这块儿有一个什么

3621
02:13:12,070 --> 02:13:12,700
执行render

3622
02:13:12,700 --> 02:13:13,930
执行render就是一个什么

3623
02:13:15,620 --> 02:13:16,100
是吧

3624
02:13:16,310 --> 02:13:18,770
这observer就是变处理成数据是吧

3625
02:13:18,950 --> 02:13:20,360
这块还要引入一个概念

3626
02:13:20,360 --> 02:13:23,210
就是什么water water的概念

3627
02:13:24,060 --> 02:13:26,370
Water这个东西是什么概念

3628
02:13:30,460 --> 02:13:31,750
Water这个概念是什么概念

3629
02:13:31,900 --> 02:13:34,300
Water这个概念你可以把它理解为一个render

3630
02:13:34,300 --> 02:13:36,040
就定义定义一个water

3631
02:13:36,700 --> 02:13:38,470
一个render就定一个water

3632
02:13:38,560 --> 02:13:39,460
什么意思呢

3633
02:13:40,210 --> 02:13:42,160
我们的render是不是具体的执行

3634
02:13:42,580 --> 02:13:45,730
但是我要把它添加到我的电话本上是吧

3635
02:13:45,730 --> 02:13:46,150
同学们

3636
02:13:46,830 --> 02:13:48,240
我是不是要发出一个动作

3637
02:13:48,300 --> 02:13:49,770
我打电话是还有一个动作

3638
02:13:49,950 --> 02:13:50,610
什么动作

3639
02:13:50,790 --> 02:13:52,410
我至少要拿起手机

3640
02:13:53,500 --> 02:13:58,960
我有一个手机来真正打这个过程是不是这个动作是谁来出谁来处理

3641
02:13:59,740 --> 02:14:00,820
这个动作是谁来处理

3642
02:14:03,040 --> 02:14:05,230
我这个地步只能拿到每一个人的电话号码

3643
02:14:05,230 --> 02:14:07,270
是不是具体怎么打

3644
02:14:07,660 --> 02:14:08,950
是谁来处理事务

3645
02:14:08,950 --> 02:14:09,430
出来处理

3646
02:14:09,430 --> 02:14:09,880
知道吧

3647
02:14:10,090 --> 02:14:10,900
是我出来处理

3648
02:14:12,150 --> 02:14:13,380
对walters负责

3649
02:14:13,380 --> 02:14:14,520
怎么打电话

3650
02:14:16,280 --> 02:14:16,610
对

3651
02:14:16,610 --> 02:14:17,630
地铺存的是什么

3652
02:14:17,750 --> 02:14:18,800
存的是龌龊

3653
02:14:20,640 --> 02:14:22,530
关联关系懂不懂的

3654
02:14:22,530 --> 02:14:23,880
库存的是water

3655
02:14:26,080 --> 02:14:26,620
明白吗

3656
02:14:26,650 --> 02:14:27,010
同学们

3657
02:14:27,040 --> 02:14:27,730
明白了吗

3658
02:14:32,270 --> 02:14:32,810
对

3659
02:14:33,440 --> 02:14:35,120
Water就是去触发的过程

3660
02:14:35,210 --> 02:14:37,910
但是第一步记录的就是怎么去触发的这个过程

3661
02:14:38,840 --> 02:14:40,220
他就把它更形象化了

3662
02:14:40,220 --> 02:14:42,260
他存的就不只是电话号码了

3663
02:14:42,470 --> 02:14:43,490
他直接存的就是

3664
02:14:44,740 --> 02:14:46,840
我直接拿到电话号码去打

3665
02:14:46,840 --> 02:14:48,130
这个过程明白吗

3666
02:14:48,960 --> 02:14:49,560
明白吗

3667
02:14:51,160 --> 02:14:51,670
到末

3668
02:14:53,560 --> 02:14:56,440
所以说这块儿一个RENDER1个人的

3669
02:14:56,440 --> 02:14:58,240
这块儿我们就抽离出来

3670
02:14:59,500 --> 02:15:01,210
一个论点哪块去啦

3671
02:15:04,920 --> 02:15:09,060
一个render定义对应的water一个render

3672
02:15:10,030 --> 02:15:11,530
一个render第一个water

3673
02:15:11,590 --> 02:15:12,580
一个render第一个water

3674
02:15:12,820 --> 02:15:13,960
然后这个water

3675
02:15:15,930 --> 02:15:16,770
这个water

3676
02:15:18,200 --> 02:15:22,130
当你被当这个water会被夹到什么地步里边是吧

3677
02:15:22,580 --> 02:15:24,020
地里面龌龊维护了什么

3678
02:15:24,110 --> 02:15:28,700
具体具体怎么执行render的过程

3679
02:15:28,730 --> 02:15:31,040
是具体怎么执行render的过程

3680
02:15:31,040 --> 02:15:32,660
就是怎么打电话的过程是吧

3681
02:15:33,240 --> 02:15:34,650
打怎么打电话的过程

3682
02:15:34,830 --> 02:15:35,550
怎么打

3683
02:15:37,110 --> 02:15:39,630
怎么打电话的过程

3684
02:15:39,630 --> 02:15:40,530
怎么通知的过程

3685
02:15:40,530 --> 02:15:41,940
应该说什么

3686
02:15:44,300 --> 02:15:46,400
因为通知的过程分为很多种是吧

3687
02:15:46,730 --> 02:15:48,200
我们可以去发QQ

3688
02:15:48,200 --> 02:15:48,800
发微信

3689
02:15:48,800 --> 02:15:49,340
打语音

3690
02:15:49,340 --> 02:15:49,760
打电话

3691
02:15:49,760 --> 02:15:50,120
打视频

3692
02:15:50,120 --> 02:15:50,720
是不是都是

3693
02:15:51,080 --> 02:15:53,810
那这个过程就是water来控制知不知道

3694
02:15:54,350 --> 02:16:01,310
地铺只是去存了一下他的这个这个这个这个这个go这个这个这个玩意儿地步

3695
02:16:01,310 --> 02:16:03,560
相当于只是把这个扣扣号存起来了

3696
02:16:03,650 --> 02:16:05,000
或者把这个电话号码存起来

3697
02:16:05,060 --> 02:16:06,890
或者把微信号给存起来了

3698
02:16:06,920 --> 02:16:07,550
懂不懂

3699
02:16:07,730 --> 02:16:08,330
明白吗

3700
02:16:08,750 --> 02:16:09,710
明白吗同学们

3701
02:16:11,610 --> 02:16:12,660
明白这个过程了吗

3702
02:16:15,820 --> 02:16:17,440
所以说这块儿最后拉一遍

3703
02:16:17,440 --> 02:16:19,330
这个维度最后一遍

3704
02:16:20,030 --> 02:16:20,660
拉一遍之后

3705
02:16:20,660 --> 02:16:22,550
我们就可以拆深度递归

3706
02:16:22,760 --> 02:16:23,450
广度递归

3707
02:16:23,450 --> 02:16:25,520
第一这个这个维度就完了

3708
02:16:25,850 --> 02:16:27,380
这是我们平时写的代码是吧

3709
02:16:27,770 --> 02:16:28,580
每一个代码

3710
02:16:28,580 --> 02:16:32,360
每一个指令会变异成不同的render是不是是吧

3711
02:16:32,630 --> 02:16:34,880
每一个render都会变异成什么

3712
02:16:35,380 --> 02:16:36,070
Water是吧

3713
02:16:36,100 --> 02:16:37,750
都会变成不同的water是吧

3714
02:16:38,370 --> 02:16:39,900
编编译成不同的water是吧

3715
02:16:39,930 --> 02:16:41,250
处理成不同的water是吧

3716
02:16:41,460 --> 02:16:45,390
因为不同的render他都需要去搭建关系是吧

3717
02:16:45,390 --> 02:16:47,490
与这个的谱带方法搭建关系

3718
02:16:47,490 --> 02:16:49,320
所以说都会变成不同的water

3719
02:16:49,380 --> 02:16:51,270
然后在第一次执行的时候

3720
02:16:51,270 --> 02:16:52,710
Walter第一次执行的时候

3721
02:16:52,740 --> 02:16:55,470
第一次会默认water去打电话

3722
02:16:56,210 --> 02:16:58,160
就是我来试播一下

3723
02:16:58,280 --> 02:16:59,660
看一下这个东西通不通

3724
02:16:59,750 --> 02:17:01,880
这个东西是不是真的能不能用是吧

3725
02:17:02,500 --> 02:17:03,610
先试播一下

3726
02:17:04,720 --> 02:17:05,410
然后

3727
02:17:05,740 --> 02:17:06,340
他试了一下

3728
02:17:06,340 --> 02:17:07,510
试验一下之后

3729
02:17:07,780 --> 02:17:12,040
然后它就会汇聚什么render触发获取什么

3730
02:17:12,040 --> 02:17:14,050
获取数据就执行什么

3731
02:17:14,080 --> 02:17:15,940
执行给执行给他的时候

3732
02:17:16,000 --> 02:17:20,650
他这块就拿得到到底是哪一个东西来获取他的数据是吧

3733
02:17:20,770 --> 02:17:23,110
就是哪一个water来获取他的数据是吧

3734
02:17:23,320 --> 02:17:25,240
他拿到了是这个water获取数据

3735
02:17:25,510 --> 02:17:27,370
然后获取的是time是这个数据是吧

3736
02:17:27,460 --> 02:17:29,770
然后就把water和这个time是存到那块儿

3737
02:17:30,010 --> 02:17:31,780
存到我这个什么低谷里面去

3738
02:17:31,780 --> 02:17:32,140
是吧

3739
02:17:32,410 --> 02:17:33,400
存到我这个地步里边

3740
02:17:33,490 --> 02:17:35,800
所以的谱只要你使用了一次

3741
02:17:35,800 --> 02:17:37,330
他就会维护到哪边去

3742
02:17:37,660 --> 02:17:40,210
维护到我这个地方里边的依赖维护成什么

3743
02:17:40,210 --> 02:17:42,310
依赖维护成我我这个K

3744
02:17:42,880 --> 02:17:45,910
我这个K和我这个water维护成一个映射的依赖

3745
02:17:46,540 --> 02:17:46,960
明白吗

3746
02:17:47,020 --> 02:17:47,980
然后

3747
02:17:48,800 --> 02:17:50,630
当我数据发生了变化的时候

3748
02:17:50,660 --> 02:17:53,180
然后我就去拿到监听的

3749
02:17:53,210 --> 02:17:53,840
它可以监听吗

3750
02:17:53,840 --> 02:17:55,220
监听的数据发生变化之后

3751
02:17:55,250 --> 02:17:57,320
然后它会变成我所有的地铺

3752
02:17:58,960 --> 02:17:59,950
我这个K里边

3753
02:17:59,980 --> 02:18:04,990
这个K这个这个times所有的地方所有的电话号码监听我这个times

3754
02:18:05,660 --> 02:18:06,170
的所有

3755
02:18:06,170 --> 02:18:08,030
就是我这个time是哪些人订阅

3756
02:18:08,030 --> 02:18:09,410
我这趟是所有water

3757
02:18:09,560 --> 02:18:11,615
然后把所有的卡拿过去

3758
02:18:11,615 --> 02:18:13,370
去咨询一下那个water

3759
02:18:13,370 --> 02:18:14,270
全部去打个电话

3760
02:18:14,660 --> 02:18:17,420
然后water打电话的动作就是就说叫什么

3761
02:18:17,510 --> 02:18:18,500
怎么去执行render

3762
02:18:18,530 --> 02:18:20,840
然后去执行render render执行完了之后渲染页面

3763
02:18:21,600 --> 02:18:22,290
明白了吗

3764
02:18:23,510 --> 02:18:24,200
明白了吗

3765
02:18:27,770 --> 02:18:28,580
这块你不用管

3766
02:18:28,610 --> 02:18:30,110
这个我们还没讲到这儿来

3767
02:18:30,200 --> 02:18:31,490
讲道而来的时候你就明白了

3768
02:18:31,550 --> 02:18:31,970
好吧

3769
02:18:33,440 --> 02:18:34,100
明白吧

3770
02:18:35,770 --> 02:18:36,970
好明白了之后

3771
02:18:37,660 --> 02:18:39,880
今来今天下来给大家留一个东西

3772
02:18:39,910 --> 02:18:44,020
然后你们下来之后自己去自必须要去把它看了

3773
02:18:45,060 --> 02:18:47,130
这个API object DeFine property

3774
02:18:47,130 --> 02:18:51,690
这个API刚刚那个同学说怎么去监听数据发生变化

3775
02:18:52,700 --> 02:18:55,970
所以说这个东西你必须要去看比分

3776
02:18:59,430 --> 02:19:02,160
不借给他去看一下这个API

3777
02:19:02,860 --> 02:19:03,400
好吧

3778
02:19:04,030 --> 02:19:06,610
你们下来之后去看一下这个API

3779
02:19:06,610 --> 02:19:07,510
这个地方party

3780
02:19:10,430 --> 02:19:13,250
这个API这个API它有一个get和set

3781
02:19:14,530 --> 02:19:16,630
Get和set TE去看一下这个东西

3782
02:19:17,410 --> 02:19:19,810
它的get和set

3783
02:19:22,010 --> 02:19:25,550
Guitar center这个东西去看一下他这个东西好吧

3784
02:19:27,570 --> 02:19:28,230
充足了

3785
02:19:28,500 --> 02:19:29,040
好吧

3786
02:19:29,940 --> 02:19:31,800
然后我们今天

3787
02:19:32,420 --> 02:19:33,170
主要就讲了这些

3788
02:19:33,170 --> 02:19:35,900
同学们今天的内容很多很多

3789
02:19:36,510 --> 02:19:37,320
很多很多

3790
02:19:37,410 --> 02:19:38,340
我们拿的很多

3791
02:19:39,130 --> 02:19:41,710
编译时优化时对比

3792
02:19:41,800 --> 02:19:44,740
包括运行时拉了很多

3793
02:19:45,040 --> 02:19:46,720
然后我们把

3794
02:19:47,360 --> 02:19:48,470
笔记发下好

3795
02:19:48,680 --> 02:19:51,140
然后我们再然后我们在这个基础之上

3796
02:19:51,470 --> 02:19:54,500
我们给大家讲了整整整体的价值和目录

3797
02:19:54,500 --> 02:19:56,360
明天我们就讲V2的运行时

3798
02:19:56,420 --> 02:19:57,740
然后在讲微三

3799
02:19:57,770 --> 02:19:59,600
结合起来就讲一部分好吧

3800
02:19:59,750 --> 02:20:02,150
所以说你们下来之后把这个APP好好看一下

3801
02:20:02,210 --> 02:20:03,380
这个API4V1

3802
02:20:03,620 --> 02:20:06,650
整个V2里面核心的东西全在这里边儿好吧

3803
02:20:08,410 --> 02:20:09,070
同学

3804
02:20:09,070 --> 02:20:10,480
今天就这样拜拜了

3805
02:20:11,410 --> 02:20:13,480
拜拜拜拜拜拜拜拜拜拜

